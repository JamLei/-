"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[2657],{17011:(s,n,a)=>{a.r(n),a.d(n,{data:()=>e});const e={key:"v-2f84b22c",path:"/jvm/05-%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%AD%E7%9A%84%E6%B3%9B%E5%9E%8B%E7%B1%BB%E5%9E%8B%E4%BF%A1%E6%81%AF.html",title:"虚拟机中的泛型类型信息",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"1. Type 体系的历史",slug:"_1-type-体系的历史",children:[]},{level:2,title:"2. 各种 Type",slug:"_2-各种-type",children:[]},{level:2,title:"3. 反射和Type",slug:"_3-反射和type",children:[{level:3,title:"工具方法",slug:"工具方法",children:[]},{level:3,title:"3.1 泛型方法和 Type",slug:"_3-1-泛型方法和-type",children:[]},{level:3,title:"3.2 泛型类和 Type",slug:"_3-2-泛型类和-type",children:[]}]}],filePathRelative:"jvm/05-虚拟机中的泛型类型信息.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},98628:(s,n,a)=>{a.r(n),a.d(n,{default:()=>p});const e=(0,a(66252).uE)('<h1 id="虚拟机中的泛型类型信息" tabindex="-1"><a class="header-anchor" href="#虚拟机中的泛型类型信息" aria-hidden="true">#</a> 虚拟机中的泛型类型信息</h1><p><em><strong>Type</strong></em> 是 Java 语言中所有类型的公共父接口。<small>这就是最官方的解释。</small></p><p>Class 就是 Type 的一个直接实现类。Type 和 Class，以及 Type 的其它子接口（和实现类）组成了 Java 的类型体系。</p><h2 id="_1-type-体系的历史" tabindex="-1"><a class="header-anchor" href="#_1-type-体系的历史" aria-hidden="true">#</a> 1. Type 体系的历史</h2><blockquote><p>实际上，是先后 Class，而后有 Type 。也就是说，一开始并没有 Java 类型 <strong>体系</strong> 这样的概念。</p><p>是因为引入了泛型概念之后，为了将泛型概念引入 Java，并作出向后兼容，从而为 Class 『<strong>补</strong>』 了一个 Type 祖先和其它“兄弟”， 从而完善了整个体系。</p></blockquote><p>在早期的 Java <small>（5.0 之前）</small>中所有的类型都有一个 Class 对象，包括基本类型和自定义类型：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Student</span><span class="token punctuation">.</span><span class="token keyword">class</span>\n<span class="token class-name">Teacher</span><span class="token punctuation">.</span><span class="token keyword">class</span>\n<span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span>\n<span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token keyword">class</span>\n<span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token keyword">class</span>\n<span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token keyword">class</span>\n<span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span>\n<span class="token keyword">double</span><span class="token punctuation">.</span><span class="token keyword">class</span>\n<span class="token keyword">boolean</span><span class="token punctuation">.</span><span class="token keyword">class</span>\n<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>Class 对象中包含了当前类型的定义信息，它是 Java 反射的基础。通过一个类型的 Class 对象，你可以查询得到这个类型有哪些域，哪些方法，哪些构造函数等信息。</p><p>但是，在 JDK 5.0 引入泛型概念之后，Java 官方发现，新引入的泛型相关的一些类型，它们<strong>不适用</strong>上面我们所说的【<strong>所有的类型都有一个 Class 对象</strong>】这句话。</p><p>这些泛型相关的类型的<strong>那个对象</strong> ，不能归类于是 Class 对象这个概念之下。它们的<strong>那个对象</strong>既和 Class 对象有相似的地方，又和 Class 对象有所区别。</p><p>对此，Java 官方抽取了它们和 Class 的相同点，提炼出 Type 概念，并补全了其它的类型：</p><ul><li>ParameterizedType</li><li>TypeVariable</li><li>WildcardType</li><li>GenericArrayType</li></ul><p>Type 和它的子接口、实现类（Class、ParameterizedType、TypeVariable、WildcardType、GenericArrayType）共同组成了 Java 的类型体系。</p><h2 id="_2-各种-type" tabindex="-1"><a class="header-anchor" href="#_2-各种-type" aria-hidden="true">#</a> 2. 各种 Type</h2><p>以 HashMap 的类的定义为例：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>在这里出现了两种 Class 之外的 Type：</p><ul><li><strong>&lt;K, V&gt;</strong> 中的起到占位符作用的 K 和 V 的类型就是 <em><strong>TypeVariable</strong></em> ；</li><li><strong>HashMap&lt;K, V&gt;</strong> 这个整体的类型就是 <em><strong>ParameterizedType</strong></em> 。</li></ul><p>我们再以一个自定义的泛型类为例：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringLinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">;</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>这里的私有属性 <em>array</em> 的类型 <strong>T[]</strong> 的类型就是 <em><strong>GenericArrayType</strong></em> 。</p><p><em><strong>WildcardType</strong></em> 类型其实大家很早就见到过：<strong><code>Class&lt;?&gt;</code></strong> 中的这个 <strong><code>?</code></strong> 的类型就是 <em><strong>WildcardType</strong></em> 。</p><p>当然，更复杂一点的泛型通配符可能会是这样：<strong><code>&lt;? extends Number, ? extends Runnable&gt;</code></strong> 。</p><h2 id="_3-反射和type" tabindex="-1"><a class="header-anchor" href="#_3-反射和type" aria-hidden="true">#</a> 3. 反射和Type</h2><h3 id="工具方法" tabindex="-1"><a class="header-anchor" href="#工具方法" aria-hidden="true">#</a> 工具方法</h3><p>为了更翻遍地检测 Type 的具体类型，我们可以准备一个如下的简单的方法：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getTypeName</span><span class="token punctuation">(</span><span class="token class-name">Type</span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token keyword">instanceof</span> <span class="token class-name">Class</span><span class="token punctuation">)</span>\n        <span class="token keyword">return</span> <span class="token string">&quot;Class&quot;</span><span class="token punctuation">;</span>             <span class="token comment">// just like String</span>\n    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token keyword">instanceof</span> <span class="token class-name">TypeVariable</span><span class="token punctuation">)</span>\n        <span class="token keyword">return</span> <span class="token string">&quot;TypeVariable&quot;</span><span class="token punctuation">;</span>      <span class="token comment">// just like T</span>\n    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token keyword">instanceof</span> <span class="token class-name">ParameterizedType</span><span class="token punctuation">)</span>\n        <span class="token keyword">return</span> <span class="token string">&quot;ParameterizedType&quot;</span><span class="token punctuation">;</span> <span class="token comment">// just like List&lt;String&gt;&quot;;</span>\n    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token keyword">instanceof</span> <span class="token class-name">GenericArrayType</span><span class="token punctuation">)</span>\n        <span class="token keyword">return</span> <span class="token string">&quot;GenericArrayType&quot;</span><span class="token punctuation">;</span>  <span class="token comment">// just like T[]&quot;;</span>\n    <span class="token keyword">else</span>\n        <span class="token keyword">return</span> <span class="token string">&quot;something wrong&quot;</span><span class="token punctuation">;</span>   <span class="token comment">// 理论上不该如此</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="_3-1-泛型方法和-type" tabindex="-1"><a class="header-anchor" href="#_3-1-泛型方法和-type" aria-hidden="true">#</a> 3.1 泛型方法和 Type</h3><h4 id="_3-1-1-getparametertypes-方法" tabindex="-1"><a class="header-anchor" href="#_3-1-1-getparametertypes-方法" aria-hidden="true">#</a> 3.1.1 getParameterTypes 方法</h4><p>Method 的 <em><strong>getParameterTypes</strong></em> 方法用以获得方法参数的类型的类型。由于这是一个 1.5 的“老”方法，所以当它遇到泛型时，会执行泛型擦除。</p><p>假定有如下方法：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token class-name">T</span> arg0<span class="token punctuation">,</span> <span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arg1<span class="token punctuation">,</span> <span class="token class-name">String</span> arg2<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Method 的 <em><strong>getParameterTypes</strong></em> 方法的返回值是一个 Class 的数组，数组的三个成员分别是：</p><ul><li>第一个参数类型 Object， 类型为 Class；</li><li>第二个参数类型 Object[]， 类型为 Class;</li><li>第三个参数类型 String，类型为 Class。</li></ul><p>在这里，泛型 T 被擦除为 Object，泛型数组 T[] 被擦除为 Object[] 。</p><h4 id="_3-1-2-getgenericparametertypes-方法" tabindex="-1"><a class="header-anchor" href="#_3-1-2-getgenericparametertypes-方法" aria-hidden="true">#</a> 3.1.2 getGenericParameterTypes 方法</h4><p>Method 的 <em><strong>getGenericParameterTypes</strong></em> 方法的作用和上面的 <em>getParameterTypes</em> 方法类似，不过由于它是一个“新”方法，因此，它的返回结果中会保留泛型信息。</p><p>还是同样的上述方法：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token class-name">T</span> arg0<span class="token punctuation">,</span> <span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arg1<span class="token punctuation">,</span> <span class="token class-name">String</span> arg2<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><em><strong>getGenericParameterTypes</strong></em> 方法的返回值是 Type 的数组<small>（而不是 Class 数组）</small>。</p><p>它的三个元素的分别是</p><ul><li>第一个参数类型 <em><strong>T</strong></em> ，类型为 <em><strong>TypeVariable</strong></em> ；</li><li>第二个参数类型 <em><strong>T[]</strong></em>， 类型为 <em><strong>GenericArrayType</strong></em> ；</li><li>第三个参数类型 <em><strong>String</strong></em>， 类型为 <em><strong>Class</strong></em> 。</li></ul><h4 id="_3-1-3-getreturntype" tabindex="-1"><a class="header-anchor" href="#_3-1-3-getreturntype" aria-hidden="true">#</a> 3.1.3 getReturnType</h4><p>Method 的 <em><strong>getReturnType</strong></em> 方法用以获取方法的返回值类型。如果涉及到泛型返回值，它会对泛型进行擦除。</p><p>假设有如下方法：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><em><strong>getReturnType</strong></em> 方法返回的是返回值类型，也就是 Object 的类型：Class 。</p><p>在这里，泛型参数 T 被擦除为 Object 。</p><h4 id="_3-1-4-getgenericreturntype" tabindex="-1"><a class="header-anchor" href="#_3-1-4-getgenericreturntype" aria-hidden="true">#</a> 3.1.4 getGenericReturnType</h4><p>对于同样的方法，Method 的 <em><strong>getGenericReturnType</strong></em> 方法能识别出返回值类型的泛型信息。</p><p>它的返回是 T，其类型为 TypeVariable 。</p><h3 id="_3-2-泛型类和-type" tabindex="-1"><a class="header-anchor" href="#_3-2-泛型类和-type" aria-hidden="true">#</a> 3.2 泛型类和 Type</h3><p>假定我们有一个自定义的泛型类：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringLinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="_3-2-1-gettypeparameters" tabindex="-1"><a class="header-anchor" href="#_3-2-1-gettypeparameters" aria-hidden="true">#</a> 3.2.1 getTypeParameters</h4><p>Class 的 getTypeParameters 可以返回泛型类的泛型参数。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">StringLinkedList</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getTypeParameters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>   <span class="token comment">// T</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h4 id="_3-2-2-getsuperclass" tabindex="-1"><a class="header-anchor" href="#_3-2-2-getsuperclass" aria-hidden="true">#</a> 3.2.2 getSuperclass</h4><p>Class 的 getTypeParameters 可以返回泛型类的父类。这里会有泛型擦除。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">StringLinkedList</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment">// LinkedList</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h4 id="_3-2-3-getgenericsuperclass" tabindex="-1"><a class="header-anchor" href="#_3-2-3-getgenericsuperclass" aria-hidden="true">#</a> 3.2.3 getGenericSuperclass</h4><p>Class 的 getGenericSuperclass 功能同 getSuperclass，不过它会保留父类的泛型信息。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">StringLinkedList</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getGenericSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// LinkedList&lt;String&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h4 id="_3-2-4-parameterizedtype-的-getactualtypearguments" tabindex="-1"><a class="header-anchor" href="#_3-2-4-parameterizedtype-的-getactualtypearguments" aria-hidden="true">#</a> 3.2.4 ParameterizedType 的 getActualTypeArguments</h4><p>Class 的 getGenericSuperclass 方法返回的是泛型父类，它的类型是 Type 。</p><p>实际上通过 instanceof 运算符，我们可以判断出泛型父类的实际信息是 ParameterizedType 类型。</p><p>而 ParameterizedType 类型有一个 getActualTypeArguments 方法，它能返回泛型父类的所使用的泛型参数。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code> <span class="token class-name">ParameterizedType</span> superclass <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ParameterizedType</span><span class="token punctuation">)</span> <span class="token class-name">StringLinkedList</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getGenericSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Type</span> cur <span class="token operator">:</span> superclass<span class="token punctuation">.</span><span class="token function">getActualTypeArguments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 这个例子中只有一个：String</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>',68),p={render:function(s,n){return e}}}}]);