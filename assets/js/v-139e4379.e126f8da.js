"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[6385],{78927:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-139e4379",path:"/java8/02-lambda.html",title:"Lambda 表达式",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"接口的原始形式",slug:"接口的原始形式",children:[]},{level:2,title:"改造 1：接口的匿名实现类",slug:"改造-1-接口的匿名实现类",children:[]},{level:2,title:"改造 2：省略引用变量",slug:"改造-2-省略引用变量",children:[]},{level:2,title:"改造 3：lambda 表达式的初级形式",slug:"改造-3-lambda-表达式的初级形式",children:[]},{level:2,title:"改造 4：省略 lambda 表达式的参数类型",slug:"改造-4-省略-lambda-表达式的参数类型",children:[]},{level:2,title:"改造 5：一行代码的 lambda 表达式的缩写",slug:"改造-5-一行代码的-lambda-表达式的缩写",children:[]},{level:2,title:"变量作用域",slug:"变量作用域",children:[{level:3,title:"变量作用域的规则",slug:"变量作用域的规则",children:[]},{level:3,title:"为何要 final？",slug:"为何要-final",children:[]}]},{level:2,title:"方法引用",slug:"方法引用",children:[{level:3,title:"示例",slug:"示例",children:[]},{level:3,title:"方法引用的语法",slug:"方法引用的语法",children:[]}]}],filePathRelative:"java8/02-lambda.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},20538:(n,s,a)=>{a.r(s),a.d(s,{default:()=>e});const p=(0,a(66252).uE)('<h1 id="lambda-表达式" tabindex="-1"><a class="header-anchor" href="#lambda-表达式" aria-hidden="true">#</a> Lambda 表达式</h1><p>在 Java 编程语言中，方法是『二等公民』。一个典型的现象就是：你无法将一个方法（或者说一段代码）直接作为参数传给一个方法。</p><blockquote><p>想实现这样的目的（在 Java 8 之前）你只能采用间接的方式：将方法（一段代码）定义为一个类的实例方法，给目标方法传入这个类的一个对象，再在目标方法内再来调用这个方法。</p></blockquote><p>Java 8 的一个核心升级就是 lambda 表达式。Sun（Oracle）公司借助于『接口』，很巧妙地实现了 lambda 表达式语法。这样，就给初学者提供了一个更简单的了解、学习 lambda 表达式的途径：将它当作接口的升级、缩写。</p><p>我们以 Runnable 接口为例来讲述从接口到 lambda 表达式的演变过程。</p><h2 id="接口的原始形式" tabindex="-1"><a class="header-anchor" href="#接口的原始形式" aria-hidden="true">#</a> 接口的原始形式</h2><p>这是 Runnbale 接口的一个实现类。使用它时，我们需要创建 Hello 类的对象，将其传给目标方法。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Hello</span> hello <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>hello<span class="token punctuation">)</span><span class="token punctuation">;</span>\nthread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="改造-1-接口的匿名实现类" tabindex="-1"><a class="header-anchor" href="#改造-1-接口的匿名实现类" aria-hidden="true">#</a> 改造 1：接口的匿名实现类</h2><p>注意，这一步改造和 lambda 表达式无关，这里所涉及的语法是『接口』本身就有就存在的语法。</p><p>如果我们不会重复利用 Hello 这个类，那么我们可以不把 Hello 这个类的定义独立写成一个 <code>.java</code> 文件，而是直接『内嵌』到它所使用的那个地方（既然不重复利用它，那自然也就只有那一处地方）。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// Hello hello = new Hello();</span>\n<span class="token class-name">Runnable</span> hello <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>Hello 类不以独立的类定义的形式存在，此时，上述代码就称为 Runnable 接口的匿名实现类。</p><h2 id="改造-2-省略引用变量" tabindex="-1"><a class="header-anchor" href="#改造-2-省略引用变量" aria-hidden="true">#</a> 改造 2：省略引用变量</h2><p>由于 <code>hello</code> 变量也没有被重复利用，定义后仅出现在了 <code>Thread thread = new Thread(hello);</code> 这一行，因此，我们可以将两行整合在一起，省略掉 <code>hello</code> 变量。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="改造-3-lambda-表达式的初级形式" tabindex="-1"><a class="header-anchor" href="#改造-3-lambda-表达式的初级形式" aria-hidden="true">#</a> 改造 3：lambda 表达式的初级形式</h2><p>改造到上一步，我们就可以开始进入到 lambda 表达式的范畴。</p><p>Runnable 接口中所定义的方法只有一个，所有它具有唯一性。因此，理论上我们完全可以省略掉 <code>run()</code> 方法的声明，因为我们只要一谈论『 Runnable 接口的实现类』，大家都知道我们要实现的方法是怎样的。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>由于 lambda 表达式是嵌在 <code>new Thread()</code> 中的，所以，将 lambda 表达式单独提取出来就是这样的：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>这里的 <code>()</code> 就是 run 方法的参数列表的那个 <code>()</code>，<code>-&gt;</code> 后面跟的代码片段（<code>{}</code>）就是原来 run 方法的方法体。</p><p>由于 Runnable 接口的 run 方法是无参的，所以上面的 <code>()</code> 中是空的。如果接口的方法是有参数的，那么 <code>()</code> 中的内容给九是方法的形式参数泪飙。</p><p>以 Predicate 接口为例，Predicate 接口的 test 方法的原型是：<code>boolean test(String s)</code> ，那么它的 lambda 表达式的形式就是：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="改造-4-省略-lambda-表达式的参数类型" tabindex="-1"><a class="header-anchor" href="#改造-4-省略-lambda-表达式的参数类型" aria-hidden="true">#</a> 改造 4：省略 lambda 表达式的参数类型</h2><p>对于有参数的接口的方法的 lambda 表达式的参数，参数的类型声明不是必须的，可省略。以 <strong>Predicate</strong> 接口的 <code>test</code> 方法为例：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>可以改造为：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="改造-5-一行代码的-lambda-表达式的缩写" tabindex="-1"><a class="header-anchor" href="#改造-5-一行代码的-lambda-表达式的缩写" aria-hidden="true">#</a> 改造 5：一行代码的 lambda 表达式的缩写</h2><p>如果 lambda 表达式的方法中有且仅有一行，那么 <code>{}</code> 以及这一行代码后的 <code>;</code> 是可以省略的。</p><p>还是回到上述的 Runnable 接口的 run 方法：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>可以简写为：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>这样，<code>new Thread()</code> 就写成了：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>后续，还可以再进一步的简写一点，不过那就是非必要部分的。</p><h2 id="变量作用域" tabindex="-1"><a class="header-anchor" href="#变量作用域" aria-hidden="true">#</a> 变量作用域</h2><p>不少人在使用 Lambda 表达式的尝鲜阶段，可能都遇到过一个错误提示：</p><pre><code>Variable used in lambda expression should be final or effectively final\n</code></pre><p>以上报错，就涉及到外部变量在 Labmda 表达式中的作用域，且有以下几个语法规则。</p><h3 id="变量作用域的规则" tabindex="-1"><a class="header-anchor" href="#变量作用域的规则" aria-hidden="true">#</a> 变量作用域的规则</h3><p>『<strong>局部变量</strong>』是指在我们普通的方法内部，且在 Lambda 表达式外部声明的变量。</p><ul><li><p>规则 1：<strong>局部变量不可变，域变量或静态变量是可变的</strong></p><p>在 Lambda 表达式内使用局部变量时，该局部变量必须是不可变的。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AClass</span> <span class="token punctuation">{</span>\n  <span class="token keyword">private</span> <span class="token class-name">Integer</span> num1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Integer</span> num2 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n      <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>\n      <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>\n      a<span class="token operator">++</span><span class="token punctuation">;</span>\n      <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;a=&quot;</span> <span class="token operator">+</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 在 Lambda 表达式使用前有改动，编译报错</span>\n          b<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// 在 Lambda 表达式中更改，报错</span>\n          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;c=&quot;</span> <span class="token operator">+</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 在 Lambda 表达式使用之后有改动，编译报错</span>\n\n          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;num1=&quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>num1<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 对象变量，或叫域变量，编译通过</span>\n          <span class="token class-name">AClass</span><span class="token punctuation">.</span>num2 <span class="token operator">=</span> <span class="token class-name">AClass</span><span class="token punctuation">.</span>num2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>\n          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;num2=&quot;</span> <span class="token operator">+</span> <span class="token class-name">AClass</span><span class="token punctuation">.</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 静态变量，编译通过</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      c<span class="token operator">++</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div></li><li><p>规则 2：<strong>表达式内的变量名不能与局部变量重名，域变量和静态变量不受限制</strong></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AClass</span> <span class="token punctuation">{</span>\n  <span class="token keyword">private</span> <span class="token class-name">Integer</span> num1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Integer</span> num2 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n      <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n          <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// 与外部的局部变量重名，编译报错</span>\n          <span class="token class-name">Integer</span> num1 <span class="token operator">=</span> <span class="token number">232</span><span class="token punctuation">;</span> <span class="token comment">// 虽与域变量重名，允许，编译通过</span>\n          <span class="token class-name">Integer</span> num2 <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span> <span class="token comment">// 虽与静态变量重名，允许，编译通过</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>虽然域变量和静态变量可以重名，从可读性的角度考虑，最好也不用重复，养成良好的编码习惯。</p></li><li><p>规则 3：<strong>可使用 this、super 关键字，等同于在普通方法中使用</strong></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AClass</span> <span class="token keyword">extends</span> <span class="token class-name">ParentClass</span> <span class="token punctuation">{</span>\n  <span class="token annotation punctuation">@Override</span>\n  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;subClass: hello budy!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token annotation punctuation">@Override</span>\n  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;subClass: name=&quot;</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">printHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出：subClass: hello budy!</span>\n      <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">printName</span><span class="token punctuation">(</span><span class="token string">&quot;susu&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：ParentClass: name=susu</span>\n\n      <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">printHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出：subClass: hello budy!</span>\n          <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">printName</span><span class="token punctuation">(</span><span class="token string">&quot;susu&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出：ParentClass: name=susu</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">ParentClass</span> <span class="token punctuation">{</span>\n  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;ParentClass: hello budy!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;ParentClass: name=&quot;</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div></li><li><p>规则 4：<strong>不能使用接口中的默认方法（default 方法）</strong></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AClass</span> <span class="token keyword">implements</span> testInterface <span class="token punctuation">{</span>\n  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n          <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 编译报错：cannot resolve method &#39;getName()&#39;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">interface</span> testInterface <span class="token punctuation">{</span>\n  <span class="token comment">// 默认方法</span>\n  <span class="token keyword">default</span> <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token string">&quot;susu&quot;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div></li></ul><h3 id="为何要-final" tabindex="-1"><a class="header-anchor" href="#为何要-final" aria-hidden="true">#</a> 为何要 final？</h3><p>不管是 Lambda 表达式，还是匿名内部类，编译器都要求了『<strong>变量必须是 final 类型的，即使不显式声明，也要确保没有修改</strong>』。</p><p>为何编译器要强制设定变量为 final 或 effectively final 呢？</p><ol><li><p>引入的局部变量是副本，改变不了原本的值。</p></li><li><p>局部变量存于栈中，多线程中使用有问题。</p></li><li><p>线程安全问题。</p></li></ol><h2 id="方法引用" tabindex="-1"><a class="header-anchor" href="#方法引用" aria-hidden="true">#</a> 方法引用</h2><p>一句话介绍：</p><blockquote><p>方法引用<small>（Method Reference）</small>是在 Lambda 表达式的基础上引申出来的一个功能。</p></blockquote><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nlist<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>num <span class="token operator">-&gt;</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>上面是一个很普通的 Lambda 表达式：<em>遍历打印列表的元素</em> 。</p><p>相比 JDK 8 版本以前的 <em>for</em> 循环或 <em>Iterator</em> 迭代器方式，这种 Lambda 表达式的写法已经是一种很精简且易读的改进。</p><p>不过它还有进一步精简的余地：使用『<strong>方法引用</strong>』：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>上述代码中间的两个冒号 <code>::</code> ，就是 Java 语言中方法引用的特有标志，出现它，就说明使用到了方法引用。</p><blockquote><p>上述代码中『省』了一个变量，如果把省掉的变量『补』回来，那么上述代码实际上是下面这个样子：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> consumer <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">print</span><span class="token punctuation">;</span>\nlist<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>consumer<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>forEach</strong> 方法的参数是 <strong>Consumer&lt;T&gt;</strong> 接口的实现类的对象。</p></blockquote><p>从编译器的角度来理解，等号右侧的语句是一种方法引用，那么编译器会认为该语句引用的是 <strong>Consumer&lt;T&gt;</strong> 接口的 <strong>accept(T t)</strong> 抽象方法。</p><p>方法引用解决了代码功能复用的问题，使得表达式更为紧凑，可读性更强，借助已有方法来达到传统方式下需多行代码才能达到的目的。</p><h3 id="方法引用的语法" tabindex="-1"><a class="header-anchor" href="#方法引用的语法" aria-hidden="true">#</a> 方法引用的语法</h3><p>方法引用的语法很简单。</p><p>使用一对冒号 <code>::</code> 来完成，分为左右两个部分，左侧为类名或对象名，右侧为方法名或 new 关键字。有以下 4 种主要情况：</p><ol><li><p><code>对象::实例方法</code></p></li><li><p><code>类::静态方法</code></p></li><li><p><code>类::实例方法</code></p></li><li><p><code>类::new</code></p></li></ol><p>在前两种情况中，方法引用等同于提供方法参数的 lambda 表达式。例如，</p><ul><li><p><code>System.out::println</code> 等同于</p><p><code>System.out.println(x)</code></p></li><li><p><code>Math::pow</code> 等同于</p><p><code>(x, y) -&gt; Math.pow(x, y)</code></p></li></ul><p>在第三种情况中，第一个参数会成为执行方法的对象。例如：</p><ul><li><p><code>String::compareToIgnoreCase</code> 等同于</p><p><code>(x, y) -&gt; x.compareToIgnoreCase(y)</code></p></li></ul><p>第四种情况<small>（构造器引用）</small>和方法引用类似，不同的是在构造器引用中方法名是 <strong>new</strong> 。</p><p>你还可以捕获方法引用中的 this 参数。例如</p><ul><li><p><code>this::equals</code> 就等同于</p><p><code>x -&gt; this.equals(x)</code></p></li></ul><p>你也可以使用 super 对象：<code>super::实例方法</code> 。</p>',77),e={render:function(n,s){return p}}}}]);