"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[4343],{95016:(s,n,a)=>{a.r(n),a.d(n,{data:()=>p});const p={key:"v-0ecd97f0",path:"/vue-cli/vue-cli-04-%E8%B7%AF%E7%94%B1.html",title:"Vue-cli 中使用路由",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"改造『老』Demo",slug:"改造『老』demo",children:[]},{level:2,title:"路由重定向",slug:"路由重定向",children:[]},{level:2,title:"嵌套路由",slug:"嵌套路由",children:[]},{level:2,title:"动态路由匹配",slug:"动态路由匹配",children:[{level:3,title:"基本使用",slug:"基本使用",children:[]},{level:3,title:"动态路由的参数解耦",slug:"动态路由的参数解耦",children:[]},{level:3,title:"动态路由和 beforeRouteUpdated 守卫",slug:"动态路由和-beforerouteupdated-守卫",children:[]}]},{level:2,title:"为路由命名",slug:"为路由命名",children:[]},{level:2,title:"编程式导航",slug:"编程式导航",children:[]},{level:2,title:"解决 Vue-router 报 NavigationDuplicated 的三种方法",slug:"解决-vue-router-报-navigationduplicated-的三种方法",children:[]}],filePathRelative:"vue-cli/vue-cli-04-路由.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},12038:(s,n,a)=>{a.r(n),a.d(n,{default:()=>t});const p=(0,a(66252).uE)('<h1 id="vue-cli-中使用路由" tabindex="-1"><a class="header-anchor" href="#vue-cli-中使用路由" aria-hidden="true">#</a> Vue-cli 中使用路由</h1><h2 id="改造『老』demo" tabindex="-1"><a class="header-anchor" href="#改造『老』demo" aria-hidden="true">#</a> 改造『老』Demo</h2><p>在之前的 vue.js 中我们已经演示了路由的基本概念和使用，现在我们在 vue-cli 中将 vue.js 的路由 demo 改造成多模块形式。</p><ol><li><p>创建独立的 LoginForm.vue 和 RegisterForm.vue 文件</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>\n  <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>\n    <span class="token operator">&lt;</span>h2<span class="token operator">&gt;</span>登录页<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span>\n    <span class="token operator">&lt;</span>label<span class="token operator">&gt;</span>用户名：<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">&quot;text&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">&gt;</span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>\n    <span class="token operator">&lt;</span>label<span class="token operator">&gt;</span>密<span class="token operator">&amp;</span>emsp<span class="token punctuation">;</span>码：<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">&quot;password&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">&gt;</span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>\n  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span>\n<span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&quot;LoginForm&quot;</span>\n<span class="token punctuation">}</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>和</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>\n  <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>\n    <span class="token operator">&lt;</span>h2<span class="token operator">&gt;</span>注册页<span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">&gt;</span>\n    <span class="token operator">&lt;</span>label<span class="token operator">&gt;</span>用<span class="token operator">&amp;</span>ensp<span class="token punctuation">;</span>户<span class="token operator">&amp;</span>ensp<span class="token punctuation">;</span>名：<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">&quot;text&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">&gt;</span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>\n    <span class="token operator">&lt;</span>label<span class="token operator">&gt;</span>密<span class="token operator">&amp;</span>emsp<span class="token punctuation">;</span><span class="token operator">&amp;</span>emsp<span class="token punctuation">;</span>码：<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">&quot;password&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">&gt;</span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>\n    <span class="token operator">&lt;</span>label<span class="token operator">&gt;</span>确认密码：<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">&quot;password&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>label<span class="token operator">&gt;</span><span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>\n  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span>\n\n<span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&quot;RegisterForm&quot;</span>\n<span class="token punctuation">}</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div></li><li><p>在 App.vue 中引用上述组件，并添加 <code>router-link</code> 和 <code>router-view</code></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">&quot;app&quot;</span><span class="token operator">&gt;</span>\n  <span class="token operator">&lt;</span>router<span class="token operator">-</span>link to<span class="token operator">=</span><span class="token string">&quot;/login&quot;</span><span class="token operator">&gt;</span>登录<span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">&gt;</span>\n  <span class="token operator">&lt;</span>router<span class="token operator">-</span>link to<span class="token operator">=</span><span class="token string">&quot;/register&quot;</span><span class="token operator">&gt;</span>注册<span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">&gt;</span>\n  <span class="token operator">&lt;</span>hr<span class="token operator">/</span><span class="token operator">&gt;</span>\n  <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>\n    <span class="token operator">&lt;</span>login<span class="token operator">-</span>form<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>login<span class="token operator">-</span>form<span class="token operator">&gt;</span>\n    <span class="token operator">&lt;</span>register<span class="token operator">-</span>form<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>register<span class="token operator">-</span>form<span class="token operator">&gt;</span>\n  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n  <span class="token operator">&lt;</span>router<span class="token operator">-</span>view<span class="token operator">/</span><span class="token operator">&gt;</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div></li><li><p>在 router 中添加路由信息</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>\n<span class="token keyword">import</span> VueRouter <span class="token keyword">from</span> <span class="token string">&#39;vue-router&#39;</span>\n<span class="token comment">/* 引入 Vue compentents 组件页面。@ 表示相对于 src 的路径 */</span>\n<span class="token keyword">import</span> LoginForm <span class="token keyword">from</span> <span class="token string">&quot;@/components/LoginForm&quot;</span><span class="token punctuation">;</span>\n<span class="token comment">// import RegisterForm from &quot;@/components/RegisterForm&quot;; 第二种写法不需要导入</span>\n\nVue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueRouter<span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token comment">/* 请求重定向：/ =&gt; 映射到 /#/login */</span>\n  <span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> redirect<span class="token operator">:</span> <span class="token string">&#39;/login&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token comment">/* 请求方式为 /#/login  =&gt;  映射到 LoginForm 组件页面 */</span>\n  <span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">&quot;/login&quot;</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">&#39;LoginForm&#39;</span><span class="token punctuation">,</span> component<span class="token operator">:</span> LoginForm <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token comment">/* 第二种加载页面组件的写法 */</span>\n  <span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">&quot;/register&quot;</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">&#39;RegisterForm&#39;</span><span class="token punctuation">,</span> <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;@/components/RegisterForm&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>\n<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div></li><li><p>最后：在 <strong>main.js</strong> 引入我们的 <strong>router.js</strong> 文件。这部分代码 vue-cli 会自动生成。</p></li></ol><h2 id="路由重定向" tabindex="-1"><a class="header-anchor" href="#路由重定向" aria-hidden="true">#</a> 路由重定向</h2><blockquote><p>上例中已经演示了路由重定向的效果。</p></blockquote><p>路由重定向指的是，当用户访问 <code>A-URI</code> 时，强制跳转至 <code>B-URI</code>，此时，用户在 <strong>&lt;router-view&gt;</strong> 看到的自然就是 B URI 对应的组件。</p><blockquote><p>逻辑上，路由重定向就是让多个 URI 对应同一个组件。</p></blockquote><p>路由重定向是通过 routers 中的 <strong>redirect</strong> 属性实现的。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>routes<span class="token operator">:</span> <span class="token punctuation">[</span> \n  <span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span> redirect<span class="token operator">:</span> <span class="token string">&#39;/login&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">&quot;/login&quot;</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">&#39;LoginForm&#39;</span><span class="token punctuation">,</span> component<span class="token operator">:</span> LoginForm <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token operator">...</span>\n<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>上述规则中，当访问 <code>/</code> 路径时，会重定向到 <code>/login</code>，从而在页面的 <strong>&lt;router-view&gt;</strong> 中展现 LoginForm 组件。</p><p>逻辑上，无论时访问 <code>/</code>，还是访问 <code>/login</code>，看到的都是 LoginForm 组件。</p><h2 id="嵌套路由" tabindex="-1"><a class="header-anchor" href="#嵌套路由" aria-hidden="true">#</a> 嵌套路由</h2><p>在设计项目的 URI 时，我们通常会将相关功能的 URI 归类到同一个 URI 路径下，例如：</p><ul><li>/about/xxx</li><li>/about/yyy</li><li>/about/zzz</li><li>/about/...</li></ul><p>对于这样的情况，我们可以使用『<strong>嵌套路由</strong>』来实现这样的功能。</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>一级组件/首页（&lt;router-view&gt;）\n│\n│── 二级组件-1\n│\n└── 二级组件-2（&lt;router-view&gt;）\n    │\n    │── 三级组件-A\n    │\n    └── 三级组件-B\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>嵌套路由的页面方面的设计，就是将组件之间的关系组织成如上形式。二级组件和三级组件之间的关系，就是一级组件<small>（或首页）</small>和二级组件之间的关系的“重现”。</p><p>在这里，我们利用 vue-cli 自动生成的 <code>Home</code> 和 <code>About</code> 来演示。</p><p>我们可以将原用于 App.vue 中的 LoginForm 和 RegisterForm 整体『搬家』到 Home.vue 中：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;home&quot;</span><span class="token operator">&gt;</span>\n  <span class="token operator">&lt;</span>router<span class="token operator">-</span>link to<span class="token operator">=</span><span class="token string">&quot;/login&quot;</span><span class="token operator">&gt;</span>登录<span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">&gt;</span>\n  <span class="token operator">&lt;</span>router<span class="token operator">-</span>link to<span class="token operator">=</span><span class="token string">&quot;/register&quot;</span><span class="token operator">&gt;</span>注册<span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">&gt;</span>\n  <span class="token operator">&lt;</span>hr<span class="token operator">/</span><span class="token operator">&gt;</span>\n  <span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>\n    <span class="token operator">&lt;</span>login<span class="token operator">-</span>form<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>login<span class="token operator">-</span>form<span class="token operator">&gt;</span>\n    <span class="token operator">&lt;</span>register<span class="token operator">-</span>form<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>register<span class="token operator">-</span>form<span class="token operator">&gt;</span>\n  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n  <span class="token operator">&lt;</span>router<span class="token operator">-</span>view<span class="token operator">/</span><span class="token operator">&gt;</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>然后将 App.vue 中替换为 Home 和 About：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">&quot;app&quot;</span><span class="token operator">&gt;</span>\n  <span class="token operator">&lt;</span>router<span class="token operator">-</span>link to<span class="token operator">=</span><span class="token string">&quot;/home&quot;</span><span class="token operator">&gt;</span>Home<span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">&gt;</span>\n  <span class="token operator">&lt;</span>router<span class="token operator">-</span>link to<span class="token operator">=</span><span class="token string">&quot;/about&quot;</span><span class="token operator">&gt;</span>About<span class="token operator">&lt;</span><span class="token operator">/</span>router<span class="token operator">-</span>link<span class="token operator">&gt;</span>\n  <span class="token operator">&lt;</span>hr<span class="token operator">/</span><span class="token operator">&gt;</span>\n  <span class="token operator">&lt;</span>router<span class="token operator">-</span>view<span class="token operator">/</span><span class="token operator">&gt;</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>这样，它们几个就组成了类似于如下的层次结构：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>App（&lt;router-view&gt;）\n│── About\n└── Home（&lt;router-view&gt;）\n    │── LoginForm \n    └── RegisterForm\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>最后，我们去做路由配置。在这里，嵌套路由的设置，需要利用上一级路由设置的 <strong>children</strong> 属性：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>\n    <span class="token comment">// {path: &quot;/&quot;, redirect: &#39;/home&#39;},</span>\n    <span class="token punctuation">{</span>\n        path<span class="token operator">:</span> <span class="token string">&quot;/home&quot;</span><span class="token punctuation">,</span> <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;@/views/Home&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> children<span class="token operator">:</span> <span class="token punctuation">[</span>\n            <span class="token comment">// 使用的是绝对路径 </span>\n            <span class="token punctuation">{</span>path<span class="token operator">:</span> <span class="token string">&quot;/login&quot;</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">&#39;LoginForm&#39;</span><span class="token punctuation">,</span> component<span class="token operator">:</span> LoginForm<span class="token punctuation">}</span><span class="token punctuation">,</span>\n            <span class="token punctuation">{</span>path<span class="token operator">:</span> <span class="token string">&quot;/register&quot;</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">&#39;RegisterForm&#39;</span><span class="token punctuation">,</span> <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;@/components/RegisterForm&#39;</span><span class="token punctuation">)</span><span class="token punctuation">}</span>\n        <span class="token punctuation">]</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span>path<span class="token operator">:</span> <span class="token string">&quot;/about&quot;</span><span class="token punctuation">,</span> <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;@/views/About&#39;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p><strong>绝对路径和相对路径</strong>：</p><ul><li>如果，你在子路由中使用的是绝对路径（以 <code>/</code> 开头），那么，你是访问 <code>/login</code> 和 <code>/register</code> 来控制两个子路由的显示；</li><li>如果，你在子路由中使用的是相对路径，那么，子路由的访问路径是父路由路径 + 子路由路径，即，<code>/home/login</code> 和 <code>/home/register</code> 来控制两个子路由的显示。</li></ul><p>无论是绝对路径和相对路径，父路由都不用以 <code>/</code> 结尾。</p><h2 id="动态路由匹配" tabindex="-1"><a class="header-anchor" href="#动态路由匹配" aria-hidden="true">#</a> 动态路由匹配</h2><p>有时<small>（特别是在 RESTful 风格的项目中）</small>，我们会在代表查询的 GET 请求 URI 中嵌入 ID，以表示查询某个人/物的相关信息。例如：</p><ul><li>/user/1</li><li>/user/2</li><li>/user/3</li><li>...</li></ul><p>但是问题是，如果系统中有 10086 个用户信息，那岂不是我们在路由配置中，要写 10086 个配置项？很显然，不可能是这样。对于这种情况，vue-router 提出了『<strong>动态路由匹配</strong>』。</p><h3 id="基本使用" tabindex="-1"><a class="header-anchor" href="#基本使用" aria-hidden="true">#</a> 基本使用</h3><p>在路由配置中，我们可以采用下面的写法<small>（来顶替 10086 个配置项）</small>：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  routes<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token comment">// 动态路径参数 以冒号开头</span>\n    <span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">&#39;/user/:id&#39;</span><span class="token punctuation">,</span> component<span class="token operator">:</span> User <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token operator">...</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><blockquote><p>这里是不是和 Spring MVC 的 <strong>@PathVariable</strong> 注解的使用场景很像？</p></blockquote><p>这样配置以后，无论 URI 是 <code>/user/1</code>，还是 <code>/user/2</code>，亦或者是 <code>/user/10086</code>，都会是在 <strong>&lt;router-view&gt;</strong> 处显示 User 组件 。</p><p>而在 User 组件中，如果你需要用到『嵌』在 URI 中的那个 ID 值，你可以像下面这样取到它：</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>user<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n  <span class="token comment">&lt;!--路由组件中通过 $route.params 获取路由参数 --&gt;</span>\n  User: {{ $route.params.id }}\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li><p>当 URI 路径是 <code>/user/1</code> 时，User 组件中取到并显示就是 1 ；</p></li><li><p>当 URI 路径是 <code>/user/2</code> 时，User 组件中取到并显示就是 2 ；</p></li><li><p>当 URI 路径是 <code>/user/10096</code> 时，User 组件中取到并显示就是 10086 ；</p></li></ul><blockquote><p>这里的 <code>id</code> 和路由配置中的 <code>:id</code> 是遥相呼应的。如果路由配置中是 <code>xxx</code>，那么这里自然也要使用 <code>xxx</code> 。</p></blockquote><h3 id="动态路由的参数解耦" tabindex="-1"><a class="header-anchor" href="#动态路由的参数解耦" aria-hidden="true">#</a> 动态路由的参数解耦</h3><p>上一章节中，User 组件使用了 <code>$route.params.id</code> 来获取 URI 路径中『嵌』着的 id 。这种方式虽然可行，但是它让 User 组件和路由配置耦合在了一起。</p><pre><code>当然，你也可能不在乎这个耦合的问题，那么这一章就没什么好说的了。\n</code></pre><p>你可以利用 <strong>props</strong> 将组件和路由解耦。</p><h4 id="props-的简单使用" tabindex="-1"><a class="header-anchor" href="#props-的简单使用" aria-hidden="true">#</a> props 的简单使用</h4><p>首先，你需要在路由配置中开启 <strong>props</strong> 功能：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  routes<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">&#39;/user/:id&#39;</span><span class="token punctuation">,</span> component<span class="token operator">:</span> User<span class="token punctuation">,</span> props<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>当 <strong>props</strong> 被设置为 true，之前你所见到并使用的 <code>route.params</code> 将会被设置为组件属性。</p><p>然后，你需要在 User 组件中声明对应的 <strong>props</strong> ：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&quot;User&quot;</span><span class="token punctuation">,</span>\n  props<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">]</span> <span class="token comment">// 使用 props 接收路由参数</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>取值时，你也不需要再啰里吧嗦地写那么长了。</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>user<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n  User {{ id }}\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="props-的值是对象" tabindex="-1"><a class="header-anchor" href="#props-的值是对象" aria-hidden="true">#</a> props 的值是对象</h4><ul><li><p>路由设置</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  routes<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token comment">// 如果 props 是一个对象，它会被按原样设置为组件属性</span>\n    <span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">&#39;/user/:id&#39;</span><span class="token punctuation">,</span> component<span class="token operator">:</span> User<span class="token punctuation">,</span> props<span class="token operator">:</span> <span class="token punctuation">{</span> uname<span class="token operator">:</span> <span class="token string">&#39;lisi&#39;</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">12</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></li><li><p>取值</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span>\n  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;user&quot;</span><span class="token operator">&gt;</span>\n    User<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">{</span> uname <span class="token operator">+</span> <span class="token string">&#39;, &#39;</span> <span class="token operator">+</span> age <span class="token punctuation">}</span><span class="token punctuation">}</span>\n  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span>\n\n<span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&quot;User&quot;</span><span class="token punctuation">,</span>\n  props<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;uname&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;age&#39;</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div></li></ul><h4 id="props-的值是函数" tabindex="-1"><a class="header-anchor" href="#props-的值是函数" aria-hidden="true">#</a> props 的值是函数</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  routes<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token comment">// 如果 props 是一个函数，则这个函数接收 route 对象为自己的形参</span>\n    <span class="token punctuation">{</span> \n      path<span class="token operator">:</span> <span class="token string">&#39;/user/:id&#39;</span><span class="token punctuation">,</span>\n      component<span class="token operator">:</span> User<span class="token punctuation">,</span>\n      <span class="token function-variable function">props</span><span class="token operator">:</span> <span class="token parameter">route</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> uname<span class="token operator">:</span> <span class="token string">&#39;tom&#39;</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span> id<span class="token operator">:</span> route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>user<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    User: {{ uname + &#39;, &#39; + age + &#39;, &#39; + id}}\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&quot;User&quot;</span><span class="token punctuation">,</span>\n  props<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;uname&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;age&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;id&#39;</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="动态路由和-beforerouteupdated-守卫" tabindex="-1"><a class="header-anchor" href="#动态路由和-beforerouteupdated-守卫" aria-hidden="true">#</a> 动态路由和 beforeRouteUpdated 守卫</h3><p>当 <strong>/user/1234</strong> 与 <strong>/user/4567</strong> 相互切换时，其中相同的组件会被重用，于是 Vue 的生命周期钩子，例如 <strong>mounted</strong> ，是不会被调用的。那如何让两个页面显示不同的数据呢？</p><p>这里可以使用 <strong>beforeRouteUpdated</strong> 导航守卫，在 URL 动态部分发生变化时，运行一些代码<small>（这些代码发起 ajax 请求去后台读取数据）</small>。</p><p>具体实现思路在《路由守卫》章节专项讲解。</p><h2 id="为路由命名" tabindex="-1"><a class="header-anchor" href="#为路由命名" aria-hidden="true">#</a> 为路由命名</h2><p>为了更方便地表示路由的路径，可以给路由规则起一个别名，即为 <strong>命名路由</strong> 。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>routes<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">&#39;/user/:id&#39;</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">&#39;user&#39;</span><span class="token punctuation">,</span> component<span class="token operator">:</span> User <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token operator">...</span>\n<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>这么干的好处在于，你可以在 <strong>&lt;router-link&gt;</strong> ，以及未来的 <strong>router.push()</strong> 中，用 name 来代替 path 。</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">:to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{ name: <span class="token punctuation">&#39;</span>user<span class="token punctuation">&#39;</span>, params: { id: 123 }}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>User<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;user&#39;</span><span class="token punctuation">,</span> params<span class="token operator">:</span> <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">123</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="编程式导航" tabindex="-1"><a class="header-anchor" href="#编程式导航" aria-hidden="true">#</a> 编程式导航</h2><p>页面的导航方式有 2 种：</p><ul><li><p>声明式导航：通过 <strong>点击链接</strong> 实现导航。</p><p>vue 中的 <strong>&lt;router-link&gt;</strong> 就会被渲染成 &lt;a&gt; 元素。</p></li><li><p>编程式导航：通过执行 JavaScript 代码，调用 BOM 的 API 实现导航。</p><p>本质上就是去改变 location 的 href 属性。</p></li></ul><p>Vue 中编程式导航的常用的核心 API 有 2 个：</p><pre><code>this.$router.push(&#39;hash地址&#39;)\nthis.$router.go(n)\n</code></pre><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>user<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>goRegister<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>跳转到 About 页面<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&quot;User&quot;</span><span class="token punctuation">,</span>\n  methods<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token function-variable function">goRegister</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n      <span class="token comment">// 用编程的方式控制路由跳转</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;/about&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p><code>router.push()</code> 方法的常见参数形式有：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 字符串(路径名称)</span>\nrouter<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;/home&#39;</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 对象</span>\nrouter<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">&#39;/home&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 命名的路由，变成 /user/123</span>\nrouter<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;/user&#39;</span><span class="token punctuation">,</span> params<span class="token operator">:</span> <span class="token punctuation">{</span> userId<span class="token operator">:</span> <span class="token number">123</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 带查询参数，变成 /register?uname=lisi</span>\nrouter<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">&#39;/register&#39;</span><span class="token punctuation">,</span> query<span class="token operator">:</span> <span class="token punctuation">{</span> uname<span class="token operator">:</span> <span class="token string">&#39;lisi&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="解决-vue-router-报-navigationduplicated-的三种方法" tabindex="-1"><a class="header-anchor" href="#解决-vue-router-报-navigationduplicated-的三种方法" aria-hidden="true">#</a> 解决 Vue-router 报 NavigationDuplicated 的三种方法</h2><p>有时候，你会发现控制台会报 <code>[NavigationDuplicated {_name: &quot;NavigationDuplicated&quot;, name: &quot;NavigationDuplicated&quot;}]</code> 错误信息。其原因在于 Vue-router 在 3.1 之后把 <code>$router.push()</code> 方法改为了 Promise 。所以假如没有回调函数，错误信息就会交给全局的路由错误处理，因此就会报上述的错误。</p><blockquote><p>vue-router 是先报了一个 Uncaught (in promise) 的错误（因为 push 没加回调），然后再点击路由的时候才会触发 NavigationDuplicated 的错误（路由出现的错误，全局错误处理打印了出来）。</p></blockquote><ul><li><p>方案一：降低版本，固定 vue-router 版本到 3.0.7 以下。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> vue-router@3.0 -S\n\n<span class="token function">yarn</span> <span class="token function">add</span> vue-router@3.0 -S\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p>方案二：禁止全局路由错误处理打印。这是最常见的解决方案。</p><p>在引入 vue-router 的文件中增加以下代码，对 Router 原型链上的 push、replace 方法进行重写，这样就不用每次调用方法都要加上 catch：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>\n<span class="token keyword">import</span> VueRouter <span class="token keyword">from</span> <span class="token string">&#39;vue-router&#39;</span>\n\nVue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueRouter<span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> originalPush <span class="token operator">=</span> <span class="token class-name">VueRouter</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>push\n<span class="token class-name">VueRouter</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">push</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token parameter">location<span class="token punctuation">,</span> onResolve<span class="token punctuation">,</span> onReject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>onResolve <span class="token operator">||</span> onReject<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">originalPush</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> location<span class="token punctuation">,</span> onResolve<span class="token punctuation">,</span> onReject<span class="token punctuation">)</span>\n    <span class="token keyword">return</span> <span class="token function">originalPush</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> location<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> err<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div></li><li><p>按照 vue-router 的要求，老老实实为每一个 push 方法的调用增加回调函数。</p></li></ul><hr><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 路由导航守卫</span>\nrouter<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>to<span class="token punctuation">.</span>path <span class="token operator">===</span> <span class="token string">&#39;/login&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 如果访问地址不为 /login 检验本地存储 token 值是否过期，不存在跳转到 login 页面，存在则放行</span>\n  <span class="token keyword">const</span> tokenStr <span class="token operator">=</span> window<span class="token punctuation">.</span>sessionStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#39;token&#39;</span><span class="token punctuation">)</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>tokenStr<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token string">&#39;/login&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div>',84),t={render:function(s,n){return p}}}}]);