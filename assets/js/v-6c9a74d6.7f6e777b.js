"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[7571],{49552:(a,s,n)=>{n.r(s),n.d(s,{data:()=>t});const t={key:"v-6c9a74d6",path:"/junit/JUnit-83-H2.html",title:"隔离数据库环境",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"使用 H2 内存数据库提高数据库操作速度",slug:"使用-h2-内存数据库提高数据库操作速度",children:[]}],filePathRelative:"junit/JUnit-83-H2.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},28378:(a,s,n)=>{n.r(s),n.d(s,{default:()=>p});const t=(0,n(66252).uE)('<h1 id="隔离数据库环境" tabindex="-1"><a class="header-anchor" href="#隔离数据库环境" aria-hidden="true">#</a> 隔离数据库环境</h1><h2 id="使用-h2-内存数据库提高数据库操作速度" tabindex="-1"><a class="header-anchor" href="#使用-h2-内存数据库提高数据库操作速度" aria-hidden="true">#</a> 使用 H2 内存数据库提高数据库操作速度</h2><p>在 <code>spring-test</code> 中使用 <code>spring-tx</code> 进行事务回滚，以保证测试代码的隔离之后，我们的测试环境还有一处可改进的地方：提高测试环境中数据库的执行速度。</p><blockquote><p><small>单元测试必须快速执行。因为一个方法不仅会有一个 TestCase，一个业务方法的背后，需要有大量的测试代码对其进行测试。理论上测试代码要远多于业务代码。</small></p></blockquote><p>为了不让 MySQL 的磁盘操作影响到测试代码的执行，我们可以使用内存数据库。通过内存操作，以替代磁盘操作。</p><blockquote><p><small>相较于它的竞争者而言，它最大的特点在于，它兼容 MySQL，虽然仍有些不完全一致的地方，但相较而言那都是些细枝末节，无关紧要之处。</small></p></blockquote><p>H2 是一个由 Java 代码实现的内嵌式数据库，它支持多种运行模式：将数据库数据存储于内存中<small>（<code>内存运行模式</code>）</small>，或存储于磁盘上。H2 数据库不需要专门的去启动/运行它，直接连接即可！</p><ul><li><p>pom.xml</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.h2database<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>h2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.4.197<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- 由于我们仅用它来进行 JUnit 测试，\n                           因此只在测试环境中使用它。\n                           项目发布时，项目的包中不需要包含它 --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></li><li><p>四大数据库连接属性</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">String</span> DRIVER <span class="token operator">=</span> <span class="token string">&quot;org.h2.Driver&quot;</span><span class="token punctuation">;</span>\n<span class="token class-name">String</span> URL <span class="token operator">=</span> <span class="token string">&quot;jdbc:h2:mem:scott;MODE=MYSQL;DB_CLOSE_DELAY=-1&quot;</span><span class="token punctuation">;</span>\n<span class="token class-name">String</span> USERNAME <span class="token operator">=</span> <span class="token string">&quot;sa&quot;</span><span class="token punctuation">;</span>\n<span class="token class-name">String</span> PASSWORD <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><p><strong>jdbc:h2:mem:scott</strong></p><p>这是数据库 URL 的核心部分，其中 <code>mem</code> 就表示使用内存模式的 H2。H2 的各种不同的使用/运行模式，主要体现在这个部分。</p><p>此处指令连接 scott 数据库，h2 就会自动帮我们创建名为 <code>scott</code> 的 database，因此后续的 sql 语句中无须再指定创建 <code>scott</code>，也不用再使用 <code>use scott</code> 切换到它。</p></li><li><p><strong>MODE=MYSQL</strong></p><p>H2 并不是唯一的嵌入式数据库，也不是唯一具有内存模式的嵌入式数据库，但是它是与 MySQL 语法最兼容的具有内存模式的嵌入式数据库，这也是 JUnit中 首选 H2 的原因。</p></li><li><p><strong>DB_CLOSE_DELAY=-1</strong></p><p>默认情况下，H2 内存中的数据库是在最后一个连接断开后关闭数据库，即删除数据库及其中所有数据。</p><p>设置为 -1 表示不以连接数作为判断标准，而是持续保持数据库的存在，直到程序运行结束。</p></li><li><p><strong>用户名和密码</strong></p><p>由于使用的是 h2 的内存模式，所以这里并不存在实际上的连接校验身份的功能。因此用户名密码并没有实际的作用。按惯例写成 <code>&quot;sa&quot;</code> 和 <code>&quot;&quot;</code> 既可。</p></li></ul><p>在 <code>spring-dao.xml</code> 其实很简单，只需要修改数据库连接池的四大连接属性即可。</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token comment">&lt;!-- 数据库连接池  --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dataSource<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.alibaba.druid.pool.DruidDataSource<span class="token punctuation">&quot;</span></span> \n        <span class="token attr-name">init-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>init<span class="token punctuation">&quot;</span></span> <span class="token attr-name">destroy-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>close<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>driverClassName<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.h2.Driver<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>url<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>jdbc:h2:mem:scott;MODE=MYSQL;DB_CLOSE_DELAY=-1<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>username<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sa<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>password<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>初始化数据库可以借助于 <code>spring-dao.xml</code> 中 <code>&lt;jdbc:initialize-database&gt;</code> 配置：</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">jdbc:</span>initialize-database</span> <span class="token attr-name">data-source</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dataSource<span class="token punctuation">&quot;</span></span>  <span class="token attr-name">ignore-failures</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>DROPS<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>  \n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">jdbc:</span>script</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>classpath:sql/schema.sql<span class="token punctuation">&quot;</span></span> <span class="token attr-name">encoding</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>  \n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">jdbc:</span>script</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>classpath:sql/import-data.sql<span class="token punctuation">&quot;</span></span> <span class="token attr-name">encoding</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>  \n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">jdbc:</span>initialize-database</span><span class="token punctuation">&gt;</span></span>  \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><code>jdbc:initialize-database</code> 这个标签的作用是在工程启动时，去执行一些 sql，也就是初始化数据库。比如向数据库中建立一些表及插入一些初始数据等。这些 sql 的路径需要在其子标签 <code>jdbc:script</code> 中去指定。</p><blockquote><p><small>在这里，我们通过 jdbc:initialize-database 去初始化 H2 数据库，在测试代码期间，我们又通过 spring-tx 的回滚机制，确保各个测试方法不会对数据库中的数据造成实质性的修改，从而保证测试环境的干净。</small></p></blockquote><p><strong><code>jdbc:initialize-database</code> 标签</strong></p><table><thead><tr><th style="text-align:left;">属性</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><code>dataSource</code></td><td style="text-align:left;">引一个配置好的数据库连接池</td></tr><tr><td style="text-align:left;"><code>ignore-failures=&quot;NONE&quot;</code></td><td style="text-align:left;">不忽略任何错误，有错即终止执行</td></tr><tr><td style="text-align:left;"><code>ignore-failures=&quot;DROPS&quot;</code></td><td style="text-align:left;">忽略因表不存在而导致的删表错误</td></tr><tr><td style="text-align:left;"><code>ignore-failures=&quot;ALL&quot;</code></td><td style="text-align:left;">忽略任何错误</td></tr></tbody></table>',16),p={render:function(a,s){return t}}}}]);