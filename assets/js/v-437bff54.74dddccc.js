"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[2065],{94040:(n,a,s)=>{s.r(a),s.d(a,{data:()=>p});const p={key:"v-437bff54",path:"/mybatis/05-mybatis-generator-example.html",title:"MyBatis Generator 和 Example 对象",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"Mybatis Generator",slug:"mybatis-generator",children:[{level:3,title:"pom.xml 配置",slug:"pom-xml-配置",children:[]},{level:3,title:"mybatis-generator-config.xml 配置",slug:"mybatis-generator-config-xml-配置",children:[]}]},{level:2,title:"Mybatis Example 对象",slug:"mybatis-example-对象",children:[{level:3,title:"简单的情况",slug:"简单的情况",children:[]},{level:3,title:"复杂的情况",slug:"复杂的情况",children:[]}]}],filePathRelative:"mybatis/05-mybatis-generator-example.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},50257:(n,a,s)=>{s.r(a),s.d(a,{default:()=>b});var p=s(66252);const t=(0,p._)("h1",{id:"mybatis-generator-和-example-对象",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#mybatis-generator-和-example-对象","aria-hidden":"true"},"#"),(0,p.Uk)(" MyBatis Generator 和 Example 对象")],-1),e=(0,p._)("h2",{id:"mybatis-generator",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#mybatis-generator","aria-hidden":"true"},"#"),(0,p.Uk)(" Mybatis Generator")],-1),o=(0,p._)("p",null,[(0,p.Uk)("mybatis 属于『"),(0,p._)("strong",null,"半自动 ORM 框架"),(0,p.Uk)("』，在使用这个框架中，工作量最大的就是书写 mapper 的映射文件，由于手动书写很容易出错，为此 mybatis 官方提供了 "),(0,p._)("strong",null,"mybatis-generator"),(0,p.Uk)(" 来帮我们自动生成文件。")],-1),l=(0,p._)("p",null,"早期的 mybatis-generator 的使用十分原始，使用起来非常麻烦。在开源社区的努力下，现在有多种方案能简化我们对 myBatis-generator 的使用：",-1),c=(0,p.Uk)("使用图形化工具，例如："),u={href:"https://github.com/zouzg/mybatis-generator-gui",target:"_blank",rel:"noopener noreferrer"},i=(0,p.Uk)("mybatis-generator-gui"),r=(0,p._)("li",null,[(0,p._)("p",null,[(0,p.Uk)("如果使用的是 Jetbrains IDEA 开发工具，那么可以使用 "),(0,p._)("strong",null,"Free Mybatis plugin"),(0,p.Uk)(" 插件来进行图形化操作。")])],-1),k=(0,p._)("li",null,[(0,p._)("p",null,"使用 maven 的 mybatis-generator 插件，通过命令直接生成映射文件等内容。")],-1),m=(0,p.uE)('<p>这里推荐第三种方案：使用 maven 的 myabtis-generator 插件。</p><hr><p>在 Maven 中，有一个名为 <strong>mybatis-generator-maven-plugin</strong> 的第三方插件，它能够将 mybatis-genetrator 的功能纳入到 Maven 体系中，允许你通过一条 maven 命令去生成相关的 JaveBean、DAO 接口和 Mapper 映射文件，以简化对 mytabis-generator 的使用。</p><h3 id="pom-xml-配置" tabindex="-1"><a class="header-anchor" href="#pom-xml-配置" aria-hidden="true">#</a> pom.xml 配置</h3><p>具体配置见《模板》。</p><p>mybatis-generator-maven-plugin 依赖于两个包：</p><ul><li><p>mybatis-generator-core</p><p>mybatis-generator-core 是『自动生成』功能的实现者和提供者，mybatis-generator-maven-plugin 是在『利用』它的这个功能。</p></li><li><p>mysql-connector-java</p><p>本质上是因为 mybatis-generator-core 在『自动生成』JavaBean 时，需要去数据库中查询表的相关信息，去『求』表的列名并以此为依据命名你的 JavaBean 的属性。很显然因为需要连接数据库，所以这里需要有数据库驱动包。</p></li></ul><p>mybatis-generator 要能正常工作，需要你提供一个配置文件。在这个配置文件中，你去『告诉』mybatis-generator 去『自动生成』时的相关细节。</p><h3 id="mybatis-generator-config-xml-配置" tabindex="-1"><a class="header-anchor" href="#mybatis-generator-config-xml-配置" aria-hidden="true">#</a> mybatis-generator-config.xml 配置</h3><p>具体配置内容见《模板》。</p><h2 id="mybatis-example-对象" tabindex="-1"><a class="header-anchor" href="#mybatis-example-对象" aria-hidden="true">#</a> Mybatis Example 对象</h2><p>Example 对象是一种简化条件查询的方案。通过它，你避免去编写大量的 DAO 中的 <strong>selectByXxx()</strong> 方法。</p><h3 id="简单的情况" tabindex="-1"><a class="header-anchor" href="#简单的情况" aria-hidden="true">#</a> 简单的情况</h3><p>这里的简单情况指的是：没有，或只有 <strong>and</strong> 关系：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">EmployeeExample</span> example <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EmployeeExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nexample<span class="token punctuation">.</span><span class="token function">createCriteria</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">andEmpnoEqualTo</span><span class="token punctuation">(</span><span class="token number">7369</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">andSalGreaterThanOrEqualTo</span><span class="token punctuation">(</span><span class="token number">1500</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">andSalLessThan</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">selectByExample</span><span class="token punctuation">(</span>example<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p><strong>or()</strong> 方法是一个更通用的形式，可以用于实现任意的查询条件。其原理在于，任何一个复杂的查询语句，总能写成如下形式：</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">where</span> <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">and</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">and</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">and</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">and</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="复杂的情况" tabindex="-1"><a class="header-anchor" href="#复杂的情况" aria-hidden="true">#</a> 复杂的情况</h3><p>这里的复杂情况指的是：有 <strong>or</strong> 关系，甚至是 <strong>and</strong> 和 <strong>or</strong> 混用。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">TestTableExample</span> example <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestTableExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 第 1 个括号中的两个并列条件</span>\nexample<span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">andAaaEqualTo</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">andBbbIsNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 第 2 个括号中的两个并列条件</span>\nexample<span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">andCccNotEqualTo</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">andDddIsNotNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 第 3 个括号中的唯一的条件</span>\n<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nlist<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nlist<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nlist<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nlist<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nexample<span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">andEeeIn</span><span class="token punctuation">(</span>field5Values<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 第 4 个括号中的唯一的条件</span>\nexample<span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">andFffBetween</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p>相当于</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">where</span> <span class="token punctuation">(</span>aaa <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">and</span> bbb <span class="token operator">is</span> <span class="token boolean">null</span><span class="token punctuation">)</span>\n     <span class="token operator">or</span> <span class="token punctuation">(</span>ccc <span class="token operator">!=</span> <span class="token number">9</span> <span class="token operator">and</span> ddd <span class="token operator">is</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">)</span>\n     <span class="token operator">or</span> <span class="token punctuation">(</span>eee <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n     <span class="token operator">or</span> <span class="token punctuation">(</span>fff <span class="token operator">between</span> <span class="token number">3</span> <span class="token operator">and</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>',22),b={render:function(n,a){const s=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.iD)(p.HY,null,[t,e,o,l,(0,p._)("ol",null,[(0,p._)("li",null,[(0,p._)("p",null,[c,(0,p._)("a",u,[i,(0,p.Wm)(s)])])]),r,k]),m],64)}}}}]);