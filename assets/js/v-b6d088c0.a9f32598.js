"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[669],{21059:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-b6d088c0",path:"/ajax/03-SpringMVC.html",title:"AJAX 和 Spring MVC",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"AJAX 请求和 Spring MVC 的参数绑定",slug:"ajax-请求和-spring-mvc-的参数绑定",children:[{level:3,title:"AJAX 发送简单类型参数",slug:"ajax-发送简单类型参数",children:[]},{level:3,title:"ajax() 发送简单类型数组的一个坑",slug:"ajax-发送简单类型数组的一个坑",children:[]},{level:3,title:"ajax 发送 application/json 参数类型的请求",slug:"ajax-发送-application-json-参数类型的请求",children:[]}]},{level:2,title:"Spring MVC 响应 AJAX 请求",slug:"spring-mvc-响应-ajax-请求",children:[]},{level:2,title:"@RestController 注解",slug:"restcontroller-注解",children:[]},{level:2,title:"背后功臣 HttpMessageConverter",slug:"背后功臣-httpmessageconverter",children:[]},{level:2,title:"StringHttpMessageConverter 乱码问题（了解）",slug:"stringhttpmessageconverter-乱码问题-了解",children:[]}],filePathRelative:"ajax/03-SpringMVC.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},70911:(n,s,a)=>{a.r(s),a.d(s,{default:()=>p});const t=(0,a(66252).uE)('<h1 id="ajax-和-spring-mvc" tabindex="-1"><a class="header-anchor" href="#ajax-和-spring-mvc" aria-hidden="true">#</a> AJAX 和 Spring MVC</h1><div class="custom-container tip"><p class="custom-container-title">TIP</p><ol><li>开始本章节前，务必复习下前两章内容！</li><li>本章节仅以 GET 和 POST 请求方式演示，不涉及 RESTful 风格的其它请求方式。</li></ol></div><h2 id="ajax-请求和-spring-mvc-的参数绑定" tabindex="-1"><a class="header-anchor" href="#ajax-请求和-spring-mvc-的参数绑定" aria-hidden="true">#</a> AJAX 请求和 Spring MVC 的参数绑定</h2><h3 id="ajax-发送简单类型参数" tabindex="-1"><a class="header-anchor" href="#ajax-发送简单类型参数" aria-hidden="true">#</a> AJAX 发送简单类型参数</h3><p>这种情况下，和发送 <strong>application/x-www-form-urlencoded</strong> 情况是一样的。</p><p>Spring MVC 该怎么执行参数绑定，就怎么执行参数绑定。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token operator">...</span>\n  data<span class="token operator">:</span> <span class="token punctuation">{</span>\n    username<span class="token operator">:</span> <span class="token string">&#39;tom&#39;</span><span class="token punctuation">,</span>\n    password<span class="token operator">:</span> <span class="token string">&#39;123&#39;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token operator">...</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="ajax-发送简单类型数组的一个坑" tabindex="-1"><a class="header-anchor" href="#ajax-发送简单类型数组的一个坑" aria-hidden="true">#</a> <code>ajax()</code> 发送简单类型数组的一个坑</h3><p>类似于表单元素 checkbox 的那种情况，有时候，你需要通过 <code>$.ajax()</code> 向后台传递同一个 key 的多个 value 。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> str <span class="token operator">=</span> $<span class="token punctuation">.</span><span class="token function">param</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;xxx&quot;</span><span class="token operator">:</span> nums<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 注意此处的输出！</span>\n\n$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token operator">...</span>\n  data<span class="token operator">:</span> str<span class="token punctuation">,</span>\n  <span class="token operator">...</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>这种情况，本质上和普通的请求中的 checkbox 有『<strong>很大但又很不起眼</strong>』的不同，jQuery 会在请求参数字符串的 key 的名字中加上 <code>%5b%5d</code>，其实就是 <code>[]</code> 。</p><p>因此，在 SpringMVC 的 <strong>@RequestParam</strong> 中指明的请求参数并不是 <code>xxx</code> 而应该是 xxx[]` ！例如：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">&quot;xxx[]&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> prodNums<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="ajax-发送-application-json-参数类型的请求" tabindex="-1"><a class="header-anchor" href="#ajax-发送-application-json-参数类型的请求" aria-hidden="true">#</a> ajax 发送 application/json 参数类型的请求</h3><p>如果，我们将 <em><strong>contentType</strong></em> 赋值为 <code>application/json</code> 表示向后台发起请求时，是将一个 <strong>JSON 格式的字符串</strong> 携带在了 Request 的 body 部分，需要 Spring MVC 通过 <em><strong>@RequestBody</strong></em> 进行参数绑定，获取并解析出这个 JSON 格式字符串。此时使用 <em><strong>@RequestParam</strong></em> 注解无效。</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>Spring MVC 在这里有个小【坑】： Spring MVC 默认使用 Jackson 来做对象和 JSON 格式字符串的互转。Spring MVC 中已内置了相关的配置，无需你再在配置文件中进行配置。 但是 spring-webmvc 的依赖关系中并没有包含 jackson 包！！！ 所以，尽管不需要进行配置，但是你的项目的 pom.xml 中，仍然需要你手动加包。</p></div><p>例如，向后台传递一个对象的数组：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> emp1 <span class="token operator">=</span> <span class="token punctuation">{</span> empno<span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span> ename<span class="token operator">:</span> <span class="token string">&#39;tom&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> emp2 <span class="token operator">=</span> <span class="token punctuation">{</span> empno<span class="token operator">:</span> <span class="token number">19</span><span class="token punctuation">,</span> ename<span class="token operator">:</span> <span class="token string">&#39;ben&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>emp1<span class="token punctuation">,</span> emp2<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> jsonStr <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [{&quot;empno&quot;:20,&quot;ename&quot;:&quot;tom&quot;},{&quot;empno&quot;:21,&quot;ename&quot;:&quot;jerry&quot;}]</span>\n\n$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token operator">...</span>\n  contentType<span class="token operator">:</span> <span class="token string">&quot;application/json&quot;</span><span class="token punctuation">,</span>\n  data<span class="token operator">:</span> jsonStr<span class="token punctuation">,</span>  <span class="token comment">// 一定要传入自己转换好的 JSON 格式字符串。直接传入对象的话，jQuery 【帮】你转成了 queryString</span>\n  <span class="token operator">...</span>                              \n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">Employee</span><span class="token punctuation">[</span><span class="token punctuation">]</span> emps<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="spring-mvc-响应-ajax-请求" tabindex="-1"><a class="header-anchor" href="#spring-mvc-响应-ajax-请求" aria-hidden="true">#</a> Spring MVC 响应 AJAX 请求</h2><p>Spring MVC 响应 AJAX 请求，回给客户端浏览器一个 JSON 格式字符串，这很容易实现。</p><p>只需要使用 <em><strong>@ResponseBody</strong></em> 注解，标注在请求处理方法上即可。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/hello.do&quot;</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@ResponseBody</span>\n<span class="token keyword">public</span> <span class="token class-name">Student</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Student</span> tom <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;tom&quot;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> tom<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>当你使用了 <em><strong>@ResponseBody</strong></em> 注解，Spring MVC 会【帮】你做两件事情：</p><ol><li><p>将这个方法的返回值（默认使用jackson）转换为 json 格式字符串。</p></li><li><p>在底层执行 <code>resp.setContentType(&quot;application/json&quot;);</code> 将 HTTP 响应的 content-type 设置为 application/json 。</p></li></ol><p>此时，你的方法的返回值不再是 ModelAndView，或者是 String。它直接就是代表你所要返回的数据的对象，或对象的集合<small>（通常是 List）</small>。</p><h2 id="restcontroller-注解" tabindex="-1"><a class="header-anchor" href="#restcontroller-注解" aria-hidden="true">#</a> @RestController 注解</h2><p>如果你的一个 Controller 类下的所有请求处理方法都返回的是 JSON 格式字符串，而不是逻辑视图名。那么，你的所有的请求处理方法的『头』上一定都加了 <strong><code>@ResponseBody</code></strong> 注解。</p><p>对于这种情况，Spring MVC 提供了一个 <strong><code>@RestController</code></strong> 注解用于替换 <code>@Controller</code> 注解，标注在 Controller 类上。用以表明这个类是一个纯粹的基于 RESTful 风格的 Web 服务。</p><p>这样，你就可以不用在这个 Controller 类下的每个方法上添加 <code>@ResponseBody</code> 了。</p><h2 id="背后功臣-httpmessageconverter" tabindex="-1"><a class="header-anchor" href="#背后功臣-httpmessageconverter" aria-hidden="true">#</a> 背后功臣 HttpMessageConverter</h2><p>你之所以能在 Controller 中收、发 JSON 格式字符串，正是因为有名为 <em><strong>HttpMessageConverter</strong></em> 的部件在为 <em><strong>@RequestBody</strong></em> 和 <em><strong>@ResponseBody</strong></em>『服务』的！</p><blockquote><p>它与 <em>@RequestParam</em> 无关。</p></blockquote><ul><li><p><em><strong>@RequestBody</strong></em> 需要利用 HttpMessageConverter 来从 HTTP 的请求 body 中取数据；</p></li><li><p><em><strong>@ResponseBody</strong></em> 需要利用 HttpMessageConverter 来往 HTTP 的响应的 body 中放数据。</p></li></ul><p>在这里，你可能会用到 2 种不同的 <em>HttpMessageConverter</em><small>（取决于你的参数和返回值类型）</small>：</p><ul><li><p><strong>StringHttpMessageConverter</strong> :</p><ul><li><p>在 Controller 接受、处理请求时，如果你想将请求体中的 JSON String 形式的请求参数字符串作为一个整体取出来，赋给 Controller 的一个 String 类型参数<small>（该参数必然标注了 @RequestBody）</small>，此时，StringHttpMessageConverter 实现了这个工作。</p></li><li><p>在 Controller 准备返回数据，响应请求发起方时，如果，你自己已经在代码逻辑中准备好了 JSON 格式字符串，接下来只需要将它<small>（JSON 格式字符串）</small>放入 HTTP 响应体中，此时，StringHttpMessageConverter 实现了这个工作。</p></li></ul></li><li><p><strong>MappingJackson2HttpMessageConverter</strong>:</p><ul><li><p>在 Controller 接受、处理请求时，如果你想将请求体中的 JSON String 形式的请求参数字符串取出来，并希望『有人』能帮你把它转换成一个 JavaBean，再赋给 Controller 的一个引用类型参数<small>（该参数必然标注了 @RequestBody）</small>，此时，MappingJackson2HttpMessageConverter 实现了这个工作。</p></li><li><p>在 Controller 准备返回数据，响应请求发起方时，如果，你自己在代码逻辑中准备好了要返回的数据：JavaBean<small>（或 JavaBean 的集合）</small>，并希望『有人』帮你把它转换成 JSON 格式字符串，然后再放入 HTTP 响应体中，此时，MappingJackson2HttpMessageConverter 实现了这个工作。</p></li></ul></li></ul><blockquote><p>再次强调，无论是上述哪个 HttpMessageConverter 再工作，前提都是你使用了 <strong>@RequestBody</strong> 和 <strong>@ResponseBody</strong> 注解。</p></blockquote><h2 id="stringhttpmessageconverter-乱码问题-了解" tabindex="-1"><a class="header-anchor" href="#stringhttpmessageconverter-乱码问题-了解" aria-hidden="true">#</a> StringHttpMessageConverter 乱码问题<small>（了解）</small></h2><p>通常，我们不会取直接收、发 JSON 格式字符串，所以，我们用到 <strong>MappingJackson2HttpMessageConverter</strong> 的机会会比 <strong>StringHttpMessageConverter</strong> 要多。<small>毕竟，能偷懒为什么不偷懒。</small></p><p>不过，万一因为某种原因，你要直接收、发 JSON 格式字符串，从而利用到 <strong>StringHttpMessageConverter</strong> 时，要注意，它有个小坑：它默认使用的是 <strong>iso-8859-1</strong> 编码<small>（也就是 <strong>latin-1</strong>）</small>，因此不支持中日韩文。</p><blockquote><p>好在，<strong>MappingJackson2HttpMessageConverter</strong> 没有这个问题，它的默认的编码是 UTF-8 。</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// 在页面上你看到的是 `????`，而非 `酒店查询`。</span>\n<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/test&quot;</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@ResponseBody</span>\n<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token string">&quot;{\\&quot;status\\&quot;:0,\\&quot;errmsg\\&quot;:null,\\&quot;data\\&quot;:{\\&quot;query\\&quot;:\\&quot;酒店查询\\&quot;,\\&quot;num\\&quot;:65544,\\&quot;url\\&quot;:\\&quot;www.test.com\\&quot;}}&quot;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>这种情况下，需要你取显示配置 StringHttpMessageConverter，并在配置中指定它要使用的编码。</p><ul><li><p>代码配置版：SpringWebConfig.java</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureMessageConverters</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HttpMessageConverter</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> converters<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n<span class="token comment">//    Charset charset = StandardCharsets.UTF_8;</span>\n      <span class="token class-name">Charset</span> charset <span class="token operator">=</span> <span class="token class-name">Charset</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token class-name">StringHttpMessageConverter</span> converter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringHttpMessageConverter</span><span class="token punctuation">(</span>charset<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n      converters<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>converter<span class="token punctuation">)</span><span class="token punctuation">;</span>\n <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></li><li><p>.xml 配置文版：spring-web.xml</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>utf8Charset<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>java.nio.charset.Charset<span class="token punctuation">&quot;</span></span> <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>forName<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>message-converters</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.springframework.http.converter.StringHttpMessageConverter<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>utf8Charset<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>message-converters</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>补充，你可以将 <strong>utf8Charset</strong> 的 bean 配置『嵌』在 <strong>StringHttpMessageConverter</strong> 的 bean 配置里面。因为，除了它，也没别的地方用到了 <strong>utf8Charset</strong> Bean。</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>utf8Charset<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>java.nio.charset.Charset<span class="token punctuation">&quot;</span></span> <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>forName<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li></ul><p>『完』</p>',45),p={render:function(n,s){return t}}}}]);