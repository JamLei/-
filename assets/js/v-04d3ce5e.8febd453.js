"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[5592],{233:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-04d3ce5e",path:"/utility/guava/99-BloomFilter.html",title:"布隆过滤器",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"使用 Guava 的布隆过滤器",slug:"使用-guava-的布隆过滤器",children:[]},{level:2,title:"改进版",slug:"改进版",children:[]}],filePathRelative:"utility/guava/99-BloomFilter.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},10964:(n,s,a)=>{a.r(s),a.d(s,{default:()=>i});var p=a(66252);const t=(0,p.uE)('<h1 id="布隆过滤器" tabindex="-1"><a class="header-anchor" href="#布隆过滤器" aria-hidden="true">#</a> <span class="title">布隆过滤器</span></h1><p>在实际工作中，布隆过滤器常见的应用场景如下：</p><ul><li><p>网页爬虫对 URL 去重，避免爬取相同的 URL 地址；</p></li><li><p>反垃圾邮件，从数十亿个垃圾邮件列表中判断某邮箱是否垃圾邮箱；</p></li><li><p>Google Chrome 使用布隆过滤器识别恶意 URL；</p></li><li><p>Medium 使用布隆过滤器避免推荐给用户已经读过的文章；</p></li><li><p>Google BigTable，Apache HBbase 和 Apache Cassandra 使用布隆过滤器减少对不存在的行和列的查找。 除了上述的应用场景之外，布隆过滤器还有一个应用场景就是解决缓存穿透的问题。所谓的缓存穿透就是服务调用方每次都是查询不在缓存中的数据，这样每次服务调用都会到数据库中进行查询，如果这类请求比较多的话，就会导致数据库压力增大，这样缓存就失去了意义。</p></li><li><p>Redis 场景中用于防止缓存击穿</p></li></ul><p>布隆过滤器实际上是一个很长的二进制向量和一系列随机映射函数。布隆过滤器可以用于检索一个元素是否在一个集合中。它的优点是空间效率和查询时间都远远超过一般的算法，缺点是有一定的误识别率和删除困难。</p><p>当一个元素被加入集合时，通过 K 个散列函数将这个元素映射成一个位数组中的 K 个点，把它们置为 1 。检索时，我们只要看看这些点是不是都是 1 就（大约）知道集合中有没有它了：如果这些点有任何一个 0 ，则被检元素一定不在；如果都是 1 ，则被检元素很可能在。因为存在哈希冲突导致 3% 左右的误判，即没有存在的判断存在，但是在的一定就是在的。</p>',5),e={href:"https://www.jasondavies.com/bloomfilter/?spm=a2c4e.11153940.blogcont683602.11.21181fe6hVAGjH",target:"_blank",rel:"noopener noreferrer"},o=(0,p.Uk)("动画演示效果"),l=(0,p.uE)('<blockquote><p>你可以将布隆过滤器想象成是要给【大】超市的老板，因为是大超市，所以他们家卖的东西比不卖东西的种类要多。老板【心怀怨念】哪些东西是他们家没有的，他一清二楚。但是他们家有什么东西他可能会有一定的记忆误差，会记错<small>（毕竟数量太多）</small>。因此，当你问老板他们家有没有 xxx 时，老板说【没有】，那么就一定时没有；老板要是说【有】，那么大概率是有的，不过也不能打包票一定就有。</p></blockquote><h2 id="使用-guava-的布隆过滤器" tabindex="-1"><a class="header-anchor" href="#使用-guava-的布隆过滤器" aria-hidden="true">#</a> 使用 Guava 的布隆过滤器</h2><p>Guava 的布隆过滤器通过调用 BloomFilter 类中的静态函数创建， 传递一个 Funnel 对象以及一个代表预期插入数量整数。同样来自于 Guava 11 中的 Funnel 对象，用于将数据发送给一个接收器（Sink）。 下面的例子是一个默认的实现，有着 3% 的误报率。Guava 提供的 Funnels 类拥有两个静态方法提供了将 CharSequence 或 byte 数组插入到过滤器的 Funnel 接口的实现。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">//Creating the BloomFilter</span>\n<span class="token class-name">BloomFilter</span><span class="token operator">&lt;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> bloomFilter <span class="token operator">=</span> <span class="token class-name">BloomFilter</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Funnels</span><span class="token punctuation">.</span><span class="token function">byteArrayFunnel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name">BigInteger</span> bigInteger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token string">&quot;1234567890&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nbloomFilter<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>bigInteger<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">boolean</span> mayBeContained <span class="token operator">=</span> bloomFilter<span class="token punctuation">.</span><span class="token function">mightContain</span><span class="token punctuation">(</span>bigInteger<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mayBeContained <span class="token operator">?</span> <span class="token string">&quot;存在&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;不存在&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="改进版" tabindex="-1"><a class="header-anchor" href="#改进版" aria-hidden="true">#</a> 改进版</h2><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BigIntegerFunnel</span> <span class="token keyword">implements</span> <span class="token class-name">Funnel</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BigInteger</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">funnel</span><span class="token punctuation">(</span><span class="token class-name">BigInteger</span> from<span class="token punctuation">,</span> <span class="token class-name">PrimitiveSink</span> into<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        into<span class="token punctuation">.</span><span class="token function">putBytes</span><span class="token punctuation">(</span>from<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n<span class="token punctuation">}</span>\n\n<span class="token class-name">BloomFilter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BigInteger</span><span class="token punctuation">&gt;</span></span> bloomFilter <span class="token operator">=</span> <span class="token class-name">BloomFilter</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigIntegerFunnel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name">BigInteger</span> bigInteger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token string">&quot;1234567890&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nbloomFilter<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>bigInteger<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">boolean</span> mayBeContained <span class="token operator">=</span> bloomFilter<span class="token punctuation">.</span><span class="token function">mightContain</span><span class="token punctuation">(</span>bigInteger<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mayBeContained <span class="token operator">?</span> <span class="token string">&quot;存在&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;不存在&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div>',6),c={href:"https://blog.csdn.net/zjerryj/article/details/77628694",target:"_blank",rel:"noopener noreferrer"},u=(0,p.Uk)("stream-lib"),i={render:function(n,s){const a=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.iD)(p.HY,null,[t,(0,p._)("p",null,[(0,p._)("a",e,[o,(0,p.Wm)(a)])]),l,(0,p._)("p",null,[(0,p._)("a",c,[u,(0,p.Wm)(a)])])],64)}}}}]);