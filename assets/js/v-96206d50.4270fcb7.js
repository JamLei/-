"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[2762],{72134:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-96206d50",path:"/shiro/02-Shiro-%E8%BF%9B%E9%98%B6.html",title:"Shiro 高级",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"自定义 Realm",slug:"自定义-realm",children:[{level:3,title:"doGetAuthenticationInfo 方法",slug:"dogetauthenticationinfo-方法",children:[]},{level:3,title:"doGetAuthorizationInfo 方法",slug:"dogetauthorizationinfo-方法",children:[]}]},{level:2,title:"Shiro 中的加密功能",slug:"shiro-中的加密功能",children:[{level:3,title:"使用 SimpleHash 加密 {docsify-ignore}",slug:"使用-simplehash-加密-docsify-ignore",children:[]}]},{level:2,title:"Shiro 和 SpringMVC 整合",slug:"shiro-和-springmvc-整合",children:[{level:3,title:"ShiroFilter 和 DelegatingFilterProxy",slug:"shirofilter-和-delegatingfilterproxy",children:[]},{level:3,title:"一个偶发的问题",slug:"一个偶发的问题",children:[]},{level:3,title:"Spring Shiro 配置",slug:"spring-shiro-配置",children:[]},{level:3,title:"整合后的用户身份校验",slug:"整合后的用户身份校验",children:[]},{level:3,title:"整合后的用户权限校验（通过配置文件）",slug:"整合后的用户权限校验-通过配置文件",children:[]},{level:3,title:"启用注解简化配置",slug:"启用注解简化配置",children:[]}]},{level:2,title:"Shiro 默认过滤器及相关",slug:"shiro-默认过滤器及相关",children:[{level:3,title:"Shiro 默认过滤器",slug:"shiro-默认过滤器",children:[]},{level:3,title:"过滤器 URL 匹配模式",slug:"过滤器-url-匹配模式",children:[]},{level:3,title:"unauthorizedUrl 不跳转问题",slug:"unauthorizedurl-不跳转问题",children:[]}]},{level:2,title:"RememberMe",slug:"rememberme",children:[{level:3,title:"Subject 的状态和 authc 过滤器",slug:"subject-的状态和-authc-过滤器",children:[]},{level:3,title:"user 过滤器",slug:"user-过滤器",children:[]},{level:3,title:"RememberMe 功能的实现原理",slug:"rememberme-功能的实现原理",children:[]},{level:3,title:"RememberMe 功能的取消",slug:"rememberme-功能的取消",children:[]},{level:3,title:"Spring MVC 中使用 Shiro 的 RememberMe 功能",slug:"spring-mvc-中使用-shiro-的-rememberme-功能",children:[]},{level:3,title:"看起来很美",slug:"看起来很美",children:[]}]},{level:2,title:"Shiro 的会话管理",slug:"shiro-的会话管理",children:[{level:3,title:"会话管理的基本概念",slug:"会话管理的基本概念",children:[]},{level:3,title:"Session 超时",slug:"session-超时",children:[]},{level:3,title:"Session DAO （了解、自学）",slug:"session-dao-了解、自学",children:[]}]}],filePathRelative:"shiro/02-Shiro-进阶.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},7879:(n,s,a)=>{a.r(s),a.d(s,{default:()=>p});const t=(0,a(66252).uE)('<h1 id="shiro-高级" tabindex="-1"><a class="header-anchor" href="#shiro-高级" aria-hidden="true">#</a> Shiro 高级</h1><h2 id="自定义-realm" tabindex="-1"><a class="header-anchor" href="#自定义-realm" aria-hidden="true">#</a> 自定义 Realm</h2><p>『认证』和『授权』是 Shiro 要进行的两大操作：</p><ul><li>认证，是判断用户的身份是否合法。 <ul><li>类比于，判断一个人是否是本公司员工，他能否进公司办公大楼。</li></ul></li><li>授权，是判断用户所能做哪些操作。 <ul><li>类比于，判断一个人<small>（本公司员工）</small>的身份，他能进办公大楼的哪些层，哪些个办公区。</li></ul></li></ul><p>在 Shiro 的使用过程中，Shiro 需要从某处获得『标准答案』，以便于来验证当前用户的身份和权限。Shiro 获取标准答案的来源就是 Realm 。</p><p>以 IniRealm 为例，『标准答案』在 <code>.ini</code> 文件中，Realm 就是去获取这个『标准答案』的途径，Shiro 就是通过 IniRealm 从 .ini 文件中获取有关用户认证和授权的『标准答案』。</p><p>我们的应用程序中要做的就是自定义一个 Realm 类，继承 <code>AuthorizingRealm</code> 抽象类，并重写其中两个必要方法：</p><table><thead><tr><th style="text-align:left;">方法</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><code>doGetAuthenticationInfo()</code></td><td style="text-align:left;">认证用户，判断用户身份的合法性</td></tr><tr><td style="text-align:left;"><code>doGetAuthorizationInfo()</code></td><td style="text-align:left;">授权用户，判断用户的使用权限</td></tr></tbody></table><ul><li><p>Shiro 进行『认证校验』时，以 Realm 的 <code>doGetAuthenticationInfo()</code> 方法的返回值作为『标准答案』，以校验当前用户是否是合法用户。</p></li><li><p>Shiro 进行『授权校验』时，以 Realm 的 <code>doGetAuthorizationInfo()</code> 方法的返回值作为『标准答案』，以校验当前用户是否有权限执行当前操作。</p></li></ul><h3 id="dogetauthenticationinfo-方法" tabindex="-1"><a class="header-anchor" href="#dogetauthenticationinfo-方法" aria-hidden="true">#</a> doGetAuthenticationInfo 方法</h3><pre><code>什么时候会触发 doGetAuthenticationInfo 方法\n</code></pre><p>当你直接<small>（或间接）</small>调用 <code>subject.login(token)</code> 方法时，Shiro 的 Security Manager 就回去调用 doGetAuthenticationInfo 方法。</p><hr><p><code>doGetAuthenticationInfo()</code> 方法的功能是：提供用于用户登录认证用到的相关信息的『标准答案』。</p><p>Shiro<small>（的 Sercurity Manager）</small>在从 Realm 的 doGetAuthenticationInfo 获得『标准答案』后，在进行比对、判断工作<small>（这就无需我们程序员参与了）。</small></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>\n<span class="token keyword">protected</span> <span class="token class-name">AuthenticationInfo</span> <span class="token function">doGetAuthenticationInfo</span><span class="token punctuation">(</span><span class="token class-name">AuthenticationToken</span> token<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">AuthenticationException</span> <span class="token punctuation">{</span>\n\n    <span class="token class-name">String</span> username <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> token<span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>username <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnknownAccountException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\t<span class="token comment">// 没找到帐号</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// 这里的密码“123”应该是从数据库中查询出来的结果</span>\n    <span class="token class-name">SimpleAuthenticationInfo</span> authenticationInfo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleAuthenticationInfo</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> <span class="token string">&quot;123&quot;</span><span class="token punctuation">,</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">return</span> authenticationInfo<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><ol><li>判断用户传入的用户名不为null</li><li>判断用户传入的用户名确实是存在的</li><li>查询用户名『配套』的密码</li><li>将用这套户名-密码组成一个『标准答案』返回给Shiro，让 Shiro 去和用户实际输入的密码匹配。</li></ol><h3 id="dogetauthorizationinfo-方法" tabindex="-1"><a class="header-anchor" href="#dogetauthorizationinfo-方法" aria-hidden="true">#</a> doGetAuthorizationInfo 方法</h3><pre><code>什么时候会触发 doGetAuthorizationInfo 方法\n</code></pre><p>当你直接<small>（或间接）</small>调用 <code>subject.hasRole(...)</code> 或 <code>subject.isPermitted(...)</code> 等方法时，Shiro 的 Security Manager 就回去调用 doGetAuthorizationInfo 方法。</p><hr><p>同理，<code>doGetAuthorizationInfo()</code> 方法的功能是：提供用于用户访问 URI 时用到的相关信息的『标准答案』。</p><p>Shiro<small>（的 Sercurity Manager）</small>在从 Realm 的 doGetAuthorizationInfo 获得『标准答案』后，在进行比对、判断工作<small>（这就无需我们程序员参与了）。</small></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>\n<span class="token keyword">protected</span> <span class="token class-name">AuthorizationInfo</span> <span class="token function">doGetAuthorizationInfo</span><span class="token punctuation">(</span><span class="token class-name">PrincipalCollection</span> principals<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> roles <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    roles<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;admin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    roles<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> permissions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    permissions<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;insert&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    permissions<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;delete&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    permissions<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;update&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    permissions<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;select&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">SimpleAuthorizationInfo</span> info <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleAuthorizationInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    info<span class="token punctuation">.</span><span class="token function">setRoles</span><span class="token punctuation">(</span>roles<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    info<span class="token punctuation">.</span><span class="token function">setStringPermissions</span><span class="token punctuation">(</span>permissions<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">return</span> info<span class="token punctuation">;</span>\n\n<span class="token comment">/*\n    // 标准代码\n    String username = (String) principals.getPrimaryPrincipal();\n    username = MoreObjects.firstNonNull(username, Strings.EMPTY);\n\n    ShiroUser user = userMapper.selectByUsername(username);\n\n    // 从数据库或者缓存中获取角色数据\n    Set&lt;String&gt; roleNames= user.getRoleNameSet();\n\n    // 从数据库或者缓存中获取权限数据\n    Set&lt;String&gt; permissionNames = user.getPermissionNameSet();\n\n    SimpleAuthorizationInfo authorizationInfo = new SimpleAuthorizationInfo();\n    authorizationInfo.setRoles(roleNames);\n    authorizationInfo.setStringPermissions(permissionNames);\n\n    log.info(&quot;[用户 [{}] 的角色是 [{}]&quot;, username, roleNames);\n    log.info(&quot;[用户 [{}] 的权限是 [{}]&quot;, username, permissionNames);\n\n    return authorizationInfo;\n*/</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br></div></div><p>在实际项目中，这些 <strong>标准答案</strong> 必然是来源于数据库中，而非在代码中写死的！</p><h2 id="shiro-中的加密功能" tabindex="-1"><a class="header-anchor" href="#shiro-中的加密功能" aria-hidden="true">#</a> Shiro 中的加密功能</h2><p>从数据安全的角度来看，不应该将用户的密码以明文的形式存储于数据库中，以免数据的泄露，从而造成用户的损失。</p><p>通常数据库中存放的是用户密码的加密形式<small>（甚至，其中还可以加盐 Salt）</small>。</p><p>在自定义 Realm 的基础上加上密码加密功能：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomRealm</span> <span class="token keyword">extends</span> <span class="token class-name">AuthorizingRealm</span> <span class="token punctuation">{</span>\n\n    <span class="token comment">/* 因演示需要，简化代码，此处并未连接真实数据库。使用 Map 模拟数据库中的数据 */</span>\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> userMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">static</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 原始密码是 123 ，通过 main 方法运算得到加密后的字符串。</span>\n        userMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;tom&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;5caf72868c94f184650f43413092e82c&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">CustomRealm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">CustomRealm</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// 认证</span>\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">protected</span> <span class="token class-name">AuthenticationInfo</span> <span class="token function">doGetAuthenticationInfo</span><span class="token punctuation">(</span><span class="token class-name">AuthenticationToken</span> t<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">AuthenticationException</span> <span class="token punctuation">{</span>\n\n        <span class="token class-name">UsernamePasswordToken</span> token <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">UsernamePasswordToken</span><span class="token punctuation">)</span> t<span class="token punctuation">;</span>\n\n        <span class="token class-name">String</span> username <span class="token operator">=</span> token<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 2、通过用户名到数据库中获取凭证信息</span>\n        <span class="token class-name">String</span> password <span class="token operator">=</span> <span class="token function">getPasswordByUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>password <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>\n            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 注意，对于密码，字符串“123”和数字123是不同的密码。一定要注意。</span>\n        <span class="token class-name">SimpleAuthenticationInfo</span> authenticationInfo\n                <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleAuthenticationInfo</span><span class="token punctuation">(</span><span class="token string">&quot;tom&quot;</span><span class="token punctuation">,</span> password<span class="token punctuation">,</span> <span class="token class-name">CustomRealm</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 在返回之前，要将盐值加进来</span>\n        authenticationInfo<span class="token punctuation">.</span><span class="token function">setCredentialsSalt</span><span class="token punctuation">(</span><span class="token class-name">ByteSource<span class="token punctuation">.</span>Util</span><span class="token punctuation">.</span><span class="token function">bytes</span><span class="token punctuation">(</span><span class="token string">&quot;tom&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> authenticationInfo<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">getPasswordByUsername</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> userMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// 授权</span>\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">protected</span> <span class="token class-name">AuthorizationInfo</span> <span class="token function">doGetAuthorizationInfo</span><span class="token punctuation">(</span><span class="token class-name">PrincipalCollection</span> principals<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 为演示，简化代码，授权逻辑略</span>\n        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 第一个是原密码，第二个是加盐的值</span>\n        <span class="token class-name">Md5Hash</span> md5Hash <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Md5Hash</span><span class="token punctuation">(</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;tom&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>md5Hash<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>md5Hash<span class="token punctuation">.</span><span class="token function">toBase64</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br></div></div><p>测试代码：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n    <span class="token comment">/* “告知” Shiro 从自定义的 Realm 中获取 『标准答案』*/</span>\n    <span class="token class-name">CustomRealm</span> customRealm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CustomRealm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">DefaultSecurityManager</span> defaultSecurityManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    defaultSecurityManager<span class="token punctuation">.</span><span class="token function">setRealm</span><span class="token punctuation">(</span>customRealm<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">/* \n     * “告知” Shiro『标准答案』中的密码使用 md5 加密算法加密过。\n     * 让它在进行比对时，把用户传入的密码也用 md5 加密后，再进行比对。否则，是肯定不一样的。\n     */</span>\n    <span class="token class-name">HashedCredentialsMatcher</span> matcher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashedCredentialsMatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    matcher<span class="token punctuation">.</span><span class="token function">setHashAlgorithmName</span><span class="token punctuation">(</span><span class="token string">&quot;md5&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 加密操作可以反复执行。设置加密次数。</span>\n    matcher<span class="token punctuation">.</span><span class="token function">setHashIterations</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    customRealm<span class="token punctuation">.</span><span class="token function">setCredentialsMatcher</span><span class="token punctuation">(</span>matcher<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">/* 让 Shiro 正式开始生效/工作 */</span>\n    <span class="token class-name">SecurityUtils</span><span class="token punctuation">.</span><span class="token function">setSecurityManager</span><span class="token punctuation">(</span>defaultSecurityManager<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">/* 模拟用户登录 */</span>\n    <span class="token class-name">Subject</span> subject <span class="token operator">=</span> <span class="token class-name">SecurityUtils</span><span class="token punctuation">.</span><span class="token function">getSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">UsernamePasswordToken</span> token <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UsernamePasswordToken</span><span class="token punctuation">(</span><span class="token string">&quot;tom&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    subject<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 判断用户是否登录成功</span>\n    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;isAuthenticated: [{}]&quot;</span><span class="token punctuation">,</span> subject<span class="token punctuation">.</span><span class="token function">isAuthenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><h3 id="使用-simplehash-加密-docsify-ignore" tabindex="-1"><a class="header-anchor" href="#使用-simplehash-加密-docsify-ignore" aria-hidden="true">#</a> 使用 SimpleHash 加密 {docsify-ignore}</h3><p>上面我们用到的 <strong>Md5Hash</strong> 是 <strong>SimpleHash</strong> 的实现类。除了 Md5Hash，SimpleHash 的实现类还有 5 个：</p><ul><li>Md2Hash</li><li>Md5Hash</li><li>Sha1Hash</li><li>Sha256Hash</li><li>Sha384Hash</li><li>Sha512Hash</li></ul><h2 id="shiro-和-springmvc-整合" tabindex="-1"><a class="header-anchor" href="#shiro-和-springmvc-整合" aria-hidden="true">#</a> Shiro 和 SpringMVC 整合</h2><ul><li><p>pom.xml</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>shiro.version</span><span class="token punctuation">&gt;</span></span>1.5.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>shiro.version</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.shiro<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>shiro-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${shiro.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.shiro<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>shiro-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${shiro.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.shiro<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>shiro-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${shiro.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div></li></ul><h3 id="shirofilter-和-delegatingfilterproxy" tabindex="-1"><a class="header-anchor" href="#shirofilter-和-delegatingfilterproxy" aria-hidden="true">#</a> ShiroFilter 和 DelegatingFilterProxy</h3><p>Shiro 和 Servlet 或 Spring MVC 整合的核心在于一个 Filter。<small>由于 Filter 的处理流程是链式的，所以这一个 Filter 的背后实际上是一串 Filter。</small>。</p><h4 id="shirofilter" tabindex="-1"><a class="header-anchor" href="#shirofilter" aria-hidden="true">#</a> ShiroFilter</h4><p>在用户的请求走到请求处理程序<small>（Controller）</small>之前，会经过这个 Filter <small>链</small>。Filter <small>链</small>来判断当前的请求是否对用户的 <code>登陆状态</code>、<code>角色</code>、<code>权限</code> 有所要求，进而再决定是否将请求放行给请求处理程序。</p><p>因此，我们在相关的配置文件中要配置出这个单例的 Filter：</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>shiroFilter<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.apache.shiro.spring.web.ShiroFilterFactoryBean<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    ...\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="delegatingfilterproxy" tabindex="-1"><a class="header-anchor" href="#delegatingfilterproxy" aria-hidden="true">#</a> DelegatingFilterProxy</h4><blockquote><p>Shiro 的 Filter 的配置为什么写在了 Spring 配置文件中？难道它们不应该写在 <code>web.xml</code> 中吗？</p></blockquote><p>普通的 Filter（和 Servlet）对象是由 Servlet 容器<small>（例如 Tomcat）</small>来管理的。它们是由 Servlet 容器来负责创建、调用和销毁。当我们在 Web 项目中使用 Spring 框架时，对于 Filter 和 Servlet 这样的单例对象，很自然地我们就会想到交由 Spring IoC 容器来管理，这样就能很方便的使用依赖注入功能，在 Filter 和 Servlet 中注入 Spring Ioc 容器中的其它的 Bean 。</p><p>Spring MVC 中的『Servlet』，除了 DispatcherServlet 意外，其它的都是由 Spring IoC 容器创建并管理的？！</p><blockquote><p>表面上看，Spring MVC 中有且仅有 DispacherServlet 一个 Servlet。但是发散一下思维，你很容易想到，Spring MVC 中的 Controller 其实逻辑上就扮演了原来的 Servlet 的角色。</p><p>也就是说，在 Spring MVC 中，除了 DispatcherServlet 这个『真·Servlet』是由 Tomcat 容器创建并管理的，其它的『假·Servlet』<small>（也就是 Controller）</small>都是由 Spring IoC 容器创建并管理的。</p><p>另外，DispatcherServlet 这个『真·Servlet』它是不负责处理任何具体的逻辑的。真正干活的是各个『假·Servlet』：Controller。</p></blockquote><p><strong>Filter 的情况和 Servlet 的情况类似</strong>。Spring 中的 <strong>DelegatingFilterProxy</strong> 就是在起到类似于 DispatcherServlet 的作用。</p><p>DelegatingFilterProxy 是个『真·Filter』，它和 DispatcherServlet 一样由 Tomcat 容器创建并管理。除了这个『真·Filter』之外，还可以有很多逻辑上的扮演 Filter 功能的『假.Filter』。</p><p>上一章节中的 Shiro 的 Filter 就是『假·Filter』。</p><p>对于这些逻辑上的『假』的Filter，它们是否实现 servlet-api 中的 Filter 接口，Spring 不作要求。<small>因为它们都是由 Spring IoC 容器创建并管理，而非 Tomcat 容器。</small></p><p>这就是为什么 Shiro 的 Filter 的配置写在了 Spring 配置文件中，而非 <code>web.xml</code> 中。</p><hr><p>DelegatingFilterProxy 会拦截客户端浏览器发来的请求，并『转交』给 Shiro 的 Filter 处理，根据 Shiro 的 Filter 的处理的结果来决定是回复客户端浏览器，还是放行给 Controller 。</p><p>为了能让 DelegatingFilterProxy『找得到』真正干活的 Shiro 的 Filter，<code>web.xml</code> 和 <code>spring-shiro.xml</code> 中有两处内容要『<strong>保持一致</strong>』。</p><ul><li><p>web.xml</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- 注意这里的 filter-name --&gt;</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>shiroFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">&gt;</span></span>\n        org.springframework.web.filter.DelegatingFilterProxy\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">&gt;</span></span>\n    ...\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- 注意这里的 filter-name --&gt;</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>shiroFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>\n    ...\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div></li><li><p>spring-shiro.xml</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token comment">&lt;!-- 注意这里的 id --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>shiroFilter<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.apache.shiro.spring.web.ShiroFilterFactoryBean<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    ...\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li></ul><h4 id="targetfilterlifecycle" tabindex="-1"><a class="header-anchor" href="#targetfilterlifecycle" aria-hidden="true">#</a> targetFilterLifecycle</h4><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token comment">&lt;!-- 一般情况下，我们不会真的叫 xxxFitler --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>shiroFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">&gt;</span></span>org.springframework.web.filter.DelegatingFilterProxy<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>targetFilterLifecycle<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>shiroFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>targetFilterLifecycle 配置就是指明 DelegatingFilterProxy 所代理的 Filter 是由 Spring IoC 维护的『假·Filter』。</p><h3 id="一个偶发的问题" tabindex="-1"><a class="header-anchor" href="#一个偶发的问题" aria-hidden="true">#</a> 一个偶发的问题</h3><p>如果将所有 SSM 和 Shiro 的配置都写在一个配置文件中，并且只利用 Spring MVC 的一次加载机会<small>（DispatcherServlet 加载）</small>加载配置文件，初始化 Spring IoC 容器，那么在现目启动时，会偶发性出现 <code>No bean named &#39;shiroFilter&#39; is defined</code> 异常。</p><p>原因暂时未知。</p><p>如果利用 Spring MVC 的两次加载机会，将 SSM 和 Shiro 中与 Spring MVC 无关的配置先由 ContextLoaderListener 加载；Spring MVC 有关的配置由 DispatcherServlet 加载，则不会出现这个问题。</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://java.sun.com/xml/ns/javaee<span class="token punctuation">&quot;</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">&quot;</span></span>\n    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://java.sun.com/xml/ns/javaee\n        http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd<span class="token punctuation">&quot;</span></span>\n    <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>3.0<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n\n    ...\n\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener-class</span><span class="token punctuation">&gt;</span></span>\n            org.springframework.web.context.ContextLoaderListener\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener-class</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener</span><span class="token punctuation">&gt;</span></span>\n\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>\n        <span class="token comment">&lt;!-- 你也可以写在一起 --&gt;</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>\n            classpath:spring/spring-shiro.xml,\n            classpath:spring/spring-dao.xml,\n            classpath:spring/spring-service.xml\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">&gt;</span></span>\n\n    <span class="token comment">&lt;!-- shiro filter 过滤器 --&gt;</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>shiroFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">&gt;</span></span>org.springframework.web.filter.DelegatingFilterProxy<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>targetFilterLifecycle<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>shiroFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>*.do<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">&gt;</span></span>\n\n    ...\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br></div></div><h3 id="spring-shiro-配置" tabindex="-1"><a class="header-anchor" href="#spring-shiro-配置" aria-hidden="true">#</a> Spring Shiro 配置</h3><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/beans<span class="token punctuation">&quot;</span></span>\n    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">&quot;</span></span>\n    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>\n    http://www.springframework.org/schema/beans\n    http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n\n    <span class="token comment">&lt;!-- 如果没有使用到 Shiro 的加密功能，则不需要这个 bean --&gt;</span>\n    <span class="token comment">&lt;!-- 另外，盐的设置不在这里设置。在 myRealm 的代码中返回盐值：\n         authenticationInfo\n            .setCredentialsSalt(\n                ByteSource.Util.bytes(&quot;xxx&quot;)\n            );\n    --&gt;</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>credentialsMatcher<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.apache.shiro.authc.credential.HashedCredentialsMatcher<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>hashAlgorithmName<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>md5<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>hashIterations<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>1<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>    <span class="token comment">&lt;!-- 设置加密次数 --&gt;</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>\n\n    <span class="token comment">&lt;!-- 自定义 Realm 。也可以使用 注解 + 包扫描 创建它。 --&gt;</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>myShiroRealm<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>web.shiro.CustomRealm<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n        <span class="token comment">&lt;!-- 根据具体需要，有可能引用到上述的加密器。 --&gt;</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>credentialsMatcher<span class="token punctuation">&quot;</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>credentialsMatcher<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>\n\n    <span class="token comment">&lt;!-- Shiro 核心 Bean --&gt;</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>securityManager<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.apache.shiro.web.mgt.DefaultWebSecurityManager<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>realm<span class="token punctuation">&quot;</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>myShiroRealm<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>\n\n    <span class="token comment">&lt;!-- Shiro web 拦截器配置 --&gt;</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>shiroFilter<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.apache.shiro.spring.web.ShiroFilterFactoryBean<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>securityManager<span class="token punctuation">&quot;</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>securityManager<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n        <span class="token comment">&lt;!-- 这些都是位于 context-path 之后的 url 路径。\n             不一定是 jsp 路径，也可以是 .do。\n             另外，/ 可省略 --&gt;</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>loginUrl<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/login.jsp<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span> \n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>unauthorizedUrl<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/403.jsp<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n        <span class="token comment">&lt;!-- 定义过滤器链，从上向下进行匹配 --&gt;</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>filterChainDefinitions<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>\n                /login.jsp = anon\n                /login.do = anon\n                /logout.do = logout\n                /** = authc\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>\n\n    <span class="token comment">&lt;!-- 截止目前为止，SSM + Shiro 的整合即完成。\n         虽有进一步简化的空间，但至此 SSM + Shiro 功能可用。--&gt;</span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br></div></div><h3 id="整合后的用户身份校验" tabindex="-1"><a class="header-anchor" href="#整合后的用户身份校验" aria-hidden="true">#</a> 整合后的用户身份校验</h3><p>为 <code>/login.do</code> 提供一个 Controller，并在 Congroller 中手动调用 <code>subject.login()</code> 再根据结果执行页面跳转：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Slf4j</span>\n<span class="token annotation punctuation">@Controller</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginController</span> <span class="token punctuation">{</span>\n\n    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">exception</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">IncorrectCredentialsException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;密码错误&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">else</span> <span class="token punctuation">{</span>\n            log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;其它错误&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword">return</span> <span class="token string">&quot;redirect:failure.jsp&quot;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/login.do&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">,</span> <span class="token class-name">String</span> password<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n        <span class="token class-name">Subject</span> subject <span class="token operator">=</span> <span class="token class-name">SecurityUtils</span><span class="token punctuation">.</span><span class="token function">getSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">UsernamePasswordToken</span> token <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UsernamePasswordToken</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        subject<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;登录成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token string">&quot;redirect:success.jsp&quot;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><h3 id="整合后的用户权限校验-通过配置文件" tabindex="-1"><a class="header-anchor" href="#整合后的用户权限校验-通过配置文件" aria-hidden="true">#</a> 整合后的用户权限校验（通过配置文件）</h3><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>shiroFilter<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.apache.shiro.spring.web.ShiroFilterFactoryBean<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>securityManager<span class="token punctuation">&quot;</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>securityManager<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>loginUrl<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>login.jsp<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>unauthorizedUrl<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>403.jsp<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>filterChainDefinitions<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>\n            /login.jsp = anon\n            /login.do = anon\n            /logout.do = logout\n            /role-admin.do = roles[&quot;admin&quot;]\n            /role-user.do = roles[&quot;user&quot;]\n            /opr-1.do = perms[&quot;user:add&quot;]\n            /opr-2.do = perms[&quot;user:delete&quot;]\n            /* = authc\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h3 id="启用注解简化配置" tabindex="-1"><a class="header-anchor" href="#启用注解简化配置" aria-hidden="true">#</a> 启用注解简化配置</h3><p>如果我们要将项目的所有涉及到认证和鉴权的 URL 都写在 .xml 配置文件中，那么整个配置文件的可读性和可维护性就很糟糕。</p><p>对此，Shiro 提供了注解，来帮助我们以另一种方式配置认证和鉴权。</p><blockquote><p>提前说明，以下的配置必须和 Spring MVC 的配置放在一起，否则注解功能无效！</p></blockquote><p>Shiro 通过以下的单例对象<small>（以 AOP 的方式）</small>提供对注解功能的支持：</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>securityManager<span class="token punctuation">&quot;</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>securityManager<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>理论上，仅需配置上述 Bean，Shiro 的注解功能即可用。不过，这里有个『著名』的 <code>$Proxy40</code> 异常。</p><p>Shiro 中大量使用了接口，而 Spring AOP 功能在实现代理类时，如果发现被代理对象实现了某个接口，Spring AOP 就会以 JDK 动态代理方案来实现代理类，而 JDK 动态代理方案在接口/继承体系比较深、复杂的情况下会出问题。</p><p>因此，我们在这里需要额外多配置两个 Bean 来要求 Spring AOP 支持、实现 Shiro 注解的时候，必须使用 CGLib 方案<small>（永不出错）</small>。</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token comment">&lt;!-- 管理 Shiro bean生命周期 --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>lifecycleBeanPostProcessor<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.apache.shiro.spring.LifecycleBeanPostProcessor<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator<span class="token punctuation">&quot;</span></span> <span class="token attr-name">depends-on</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>lifecycleBeanPostProcessor<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>proxyTargetClass<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><hr><dl><dt>@RequiresAuthentication</dt><dd>表示当前 Subject 已经通过 login 进行了身份验证；</dd><dd>即 Subject.isAuthenticated() 返回 true 。</dd><dd></dd><dt>@RequiresUser</dt><dd>表示当前 Subject 已经身份验证或者通过 记住我 登录的。</dd><dt>@RequiresGuest</dt><dd>表示当前Subject没有身份验证或通过记住我登录过，即是游客身份。</dd><dt>@RequiresRoles(value={“admin”, “user”}, logical= Logical.AND)</dt><dt>@RequiresRoles(value={“admin”})</dt><dt>@RequiresRoles({“admin“})</dt><dd>表示当前Subject需要角色admin 和user。</dd><dt>@RequiresPermissions (value={“user:a”, “user:b”}, logical= Logical.OR)</dt><dd>表示当前Subject需要权限user:a或user:b。</dd></dl><h2 id="shiro-默认过滤器及相关" tabindex="-1"><a class="header-anchor" href="#shiro-默认过滤器及相关" aria-hidden="true">#</a> Shiro 默认过滤器及相关</h2><h3 id="shiro-默认过滤器" tabindex="-1"><a class="header-anchor" href="#shiro-默认过滤器" aria-hidden="true">#</a> Shiro 默认过滤器</h3><p><img src="https://hemiao3000.gitee.io/java-note-img/images/shiro/img/shiro-filter.png" alt="shiro-filter"></p><h3 id="过滤器-url-匹配模式" tabindex="-1"><a class="header-anchor" href="#过滤器-url-匹配模式" aria-hidden="true">#</a> 过滤器 URL 匹配模式</h3><ul><li><p>url 模式使用 Ant 风格模式：</p><p>支持 <code>?</code>、<code>*</code>、<code>**</code>（注意通配符匹配不包括目录分隔符 <code>/</code> ）</p></li><li><p><code>?</code>：</p><p>匹配一个字符，如 <code>/admin?</code> 将匹配 <code>/admin1</code>，但不匹配 <code>/admin</code> 或 <code>/admin/</code> ；</p></li><li><p><code>*</code>：</p><p>匹配零个或多个字符串，如 <code>/admin*</code> 将匹配 <code>/admin</code>、<code>/admin123</code>，但不匹配 <code>/admin/1</code> ；</p></li><li><p><code>**</code>：</p><p>匹配路径中的零个或多个路径，如 <code>/admin/**</code> 将匹配 <code>/admin/a</code> 或 <code>/admin/a/b</code></p></li></ul><h3 id="unauthorizedurl-不跳转问题" tabindex="-1"><a class="header-anchor" href="#unauthorizedurl-不跳转问题" aria-hidden="true">#</a> unauthorizedUrl 不跳转问题</h3><p>Shiro 中的过滤器分为两大类：</p><ul><li><p>认证相关过滤器：</p><p>包括：anon、authcBasic、authc、user 过滤器</p></li><li><p>授权相关过滤器：</p><p>包括：perms、roles、ssl、rest、port 过滤器</p></li></ul><p>要通过授权过滤器<small>（至于是哪一个授权过滤器取决于具体的配置）</small>，就先要通过认证过滤器<small>（至于是哪一个认证过滤器取决于具体的配置）</small>。</p><p>顾名思义，unauthorizedUrl 是指请求未能通过授权相关过滤器时的跳转页面。</p><p>因此，请求未通过认证相关过滤器时的跳转页面跟 <code>unauthorizedUrl</code> 半毛钱关系都没有（有关的是 <code>loginUrl</code>）。</p><h2 id="rememberme" tabindex="-1"><a class="header-anchor" href="#rememberme" aria-hidden="true">#</a> RememberMe</h2><h3 id="subject-的状态和-authc-过滤器" tabindex="-1"><a class="header-anchor" href="#subject-的状态和-authc-过滤器" aria-hidden="true">#</a> Subject 的状态和 authc 过滤器</h3><p><small>（在没有引入 RememerMe 的功能的情况下）</small>Shiro 中的 Subject 的登录状态有两种：<code>已登录</code> 和 <code>未登录</code> ：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> subject<span class="token punctuation">.</span><span class="token function">isAuthenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment">// false</span>\n\nsubject<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nlog<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> subject<span class="token punctuation">.</span><span class="token function">isAuthenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment">// true</span>\n\nsubject<span class="token punctuation">.</span><span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nlog<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> subject<span class="token punctuation">.</span><span class="token function">isAuthenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment">// false</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>Shiro 中的 <code>authc</code> 的工作原理就是：当你指定一个 URL 只有在登陆后才能访问时，Shiro 就会使用 <code>authc</code> 拦截你的请求。在 <code>authc</code> 拦截器中，Shiro 会检查你的 Subject 的登陆状态。逻辑上，当你的 Subject 的 <code>isAuthenticated()</code> 方法返回 true 时，authc 拦截器会放行；如果返回 <code>false</code> 那么 authc 拦截去会返回登录页面。</p><p>在你的代码中，你可以通过 Subject 的 <code>login()</code> 和 <code>logout()</code> 方法改变 Subject 的登陆状态。</p><h3 id="user-过滤器" tabindex="-1"><a class="header-anchor" href="#user-过滤器" aria-hidden="true">#</a> user 过滤器</h3><p>当你开启 Shiro 的 RememberMe 功能后，Shiro 在你的 Subject 的登陆状态中就会多引入一种状态：<code>通过 RememeMe 登录</code> 。</p><p>这样，Subject 的登录状态逻辑上就有了 3 种：</p><table><thead><tr><th style="text-align:left;">状态</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><code>isAuthenticated() == true</code></td><td style="text-align:left;">通过用户名密码等方式登录</td></tr><tr><td style="text-align:left;"><code>isRemembered() == true</code></td><td style="text-align:left;">通过记住我功能登录</td></tr><tr><td style="text-align:left;"><code>isAuthenticated() == false</code> <br> <code>isRemembered() == false</code></td><td style="text-align:left;">未登录</td></tr></tbody></table><p><code>user</code> 过滤器的工作原理和 <code>authc</code> 过滤器的工作原理相似。只不过 <code>user</code> 过滤器的要求更低，更宽松。</p><p>当你使用 <code>user</code> 过滤器去拦截、保护一个 URL 时，<code>user</code> 过滤器会去判断当前的 Subject 的状态，只有 <code>subject.isRemembered() == true</code> 时，<code>user</code> 过滤器才会放行，否则 <code>user</code>过滤器会返回登陆页面。</p><h3 id="rememberme-功能的实现原理" tabindex="-1"><a class="header-anchor" href="#rememberme-功能的实现原理" aria-hidden="true">#</a> RememberMe 功能的实现原理</h3><p><code>user</code> 过滤器本质上就是查看当前请求是否有『<strong>附带的用户名和密码的 Cookie</strong>』。</p><p>这个 Cookie 所记录用户名和密码信息类似如下：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>key: rememberMe\nvalue: 6gYvaCGZaDXt1c0xwriXj/Uvz6g8OMT3VSaAK4WL0Fvqvkcm0nf3CfTwkWWTT4EjeSS/EoQjRfCPv4WKUXezQDvoNwVgFMtsLIeYMAfTd17ey5BrZQMxW+xU1lBSDoEM1yOy/i11ENh6eXjmYeQFv0yGbhchGdJWzk5W3MxJjv2SljlW4dkGxOSsol3mucoShzmcQ4VqiDjTcbVfZ7mxSHF/0M1JnXRphi8meDaIm9IwM4Hilgjmai+yzdVHFVDDHv/vsU/fZmjb+2tJnBiZ+jrDhl2Elt4qBDKxUKT05cDtXaUZWYQmP1bet2EqTfE8eiofa1+FO3iSTJmEocRLDLPWKSJ26bUWA8wUl/QdpH07Ymq1W0ho8EIdFhOsELxM66oMcj7a/8LVzypJXAXZdMFaNe8cBSN2dXpv4PwiktCs3J9P9vP4XrmYees5x27UmXNqYFk86xQhRjFdJsw5A9ctDKXzPYvJmWFouo3qT5hugX0uxWALCfWg8MHJnG9w7QgVKM8oy3Xy4Ut8lSvYlA==\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><blockquote><p>这里的 value 的值是用户登录成功后，对代表用户身份信息的 Principal 对象的序列化后再 Base64 的结果。</p></blockquote><p>这就需要我们的程序要让客户端浏览器创建含有用户名和密码的 Cookie ，这样，在客户端浏览器访问我们项目的 URL 时，请求中还会携带这个 Cookie 。否则，<code>subject.isRemembered()</code> 始终将会是 <code>false</code> ，<code>user</code> 过滤器就没有起到应有的作用。</p><p>当然，不需要我们亲自去『要求』客户端浏览器创建这个 Cookie ，通过 Shiro ，我们就可以间接地实现这个效果。</p><p>只需去设置 <strong>UsernamePasswordToken</strong> 的 <strong>RememberMe</strong> 属性值为 <code>true</code>，表示启用该功能即可：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// 这句话的背后，Shiro 会要求客户端浏览器创建 RememberMe Cookie</span>\ntoken<span class="token punctuation">.</span><span class="token function">setRememberMe</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\ncurrentUser<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>默认情况下，该 Cookie 文件的过期时间为一年。</p><p>不过，一般情况下，不会在代码中写死启用 RememberMe 功能。一般情况下，是否启用它，取决于用户是否选中页面上的记住密码 checkbox 。</p><h3 id="rememberme-功能的取消" tabindex="-1"><a class="header-anchor" href="#rememberme-功能的取消" aria-hidden="true">#</a> RememberMe 功能的取消</h3><p>调用 Shiro 的 <strong>Subject#logout</strong> 方法, 在实现原有的退出功能<small>（改变 Subject 的状态）</small>之外，Shiro 会再去『通知』客户端浏览器删除那个名为 rememberMe 的 Cookie 文件。 <small>（直到再一次调用 shiro 的 Subject#login 方法，再次创建这个 Cookie 文件，记录登录用户的信息）</small>。</p><p>另外，如果在登陆页面上没有选中记住密码的 checkbox ，那么最终调用的就是 <strong>token.setRememberMe(false)</strong>，表示不启用 RememberMe 功能，会使得 Shiro 不会去通知客户端浏览器创建名为 rememberMe 的 cookie 。</p><h3 id="spring-mvc-中使用-shiro-的-rememberme-功能" tabindex="-1"><a class="header-anchor" href="#spring-mvc-中使用-shiro-的-rememberme-功能" aria-hidden="true">#</a> Spring MVC 中使用 Shiro 的 RememberMe 功能</h3><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token comment">&lt;!--Shiro 核心对象--&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>securityManager<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>...<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    ...\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>rememberMeManager<span class="token punctuation">&quot;</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>rememberMeManager<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>\n...\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token comment">&lt;!-- rememberMe 管理器，被 securityManager 使用/依赖 --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>rememberMeManager<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.apache.shiro.web.mgt.CookieRememberMeManager<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cipherKey<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>#{T(org.apache.shiro.codec.Base64).decode(<span class="token punctuation">&#39;</span>4AvVhmFLUs0KTA3Kprsdag==<span class="token punctuation">&#39;</span>)}<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cookie<span class="token punctuation">&quot;</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>rememberMeCookie<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token comment">&lt;!-- 手动指定 cookie，被 rememberMemanager 使用/依赖--&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>rememberMeCookie<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.apache.shiro.web.servlet.SimpleCookie<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>rememberMe<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>maxAge<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>604800<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span> <span class="token comment">&lt;!-- 7天 --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h3 id="看起来很美" tabindex="-1"><a class="header-anchor" href="#看起来很美" aria-hidden="true">#</a> 看起来很美</h3><p>自动登录功能有个致命的安全缺陷<small>（与 Shiro 无关）</small>就是随便谁把这个 Cookie 值拿到别的浏览器都可以登录。就算你用再厉害的加密，都无法防止表单伪造。</p><p>所以自动登录功能仍然只能使用在查看一些无关紧要的信息的功能上。</p><h2 id="shiro-的会话管理" tabindex="-1"><a class="header-anchor" href="#shiro-的会话管理" aria-hidden="true">#</a> Shiro 的会话管理</h2><h3 id="会话管理的基本概念" tabindex="-1"><a class="header-anchor" href="#会话管理的基本概念" aria-hidden="true">#</a> 会话管理的基本概念</h3><p>Shiro 的『野心』很大，它的自我定位并非是一个『Web 安全框架』，而是一个『安全框架』。<small>（当然，Shiro 有点想多了，大家实际上还是只把它当做 『Web 安全框架』）</small>。</p><p>因此 Shiro 包装、托管了 Session，这样无论是在 java web 这样天然就有 Session 概念的项目中，还是在 java 这样没有 Session 概念的项目中，你都可以使用 Session 。</p><blockquote><p>简单来说，原本就有 Session 的，Shiro 就利用这个 Session；原本就没有 Session 的，Shiro 就弄出一个 Session 出来给你用。</p></blockquote><p>在 Shiro 中，当你执行 <strong>Subject#login()</strong> 就意味着会话的开始；当你执行 <strong>Subject#logout</strong> 就意味着会话的结束。</p><p>在会话期内，你可以使用 <strong>setAttribute()</strong> 和 <strong>getAttribute()</strong> 方法存取数据。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>subject<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UsernamePasswordToken</span><span class="token punctuation">(</span><span class="token string">&quot;tommy&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 会话开始</span>\n\n<span class="token class-name">Session</span> session <span class="token operator">=</span> subject<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nsession<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;tommy&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 存值</span>\n\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>session<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// tommy</span>\n\nsubject<span class="token punctuation">.</span><span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 会话结束</span>\n\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>session<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// UnknownSessionException</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>在 Java Web 项目中，Shiro<small>（确切地说是 SecurityManager）</small> 默认使用的是 <strong>ServletContainerSessionManager</strong>，通过它，你存入 Shiro Session 中的数据，实际上被转存到了 HttpSession 中。也就是说，我们是在直接使用 Shiro Session，而间接使用 HttpSession 。</p><h3 id="session-超时" tabindex="-1"><a class="header-anchor" href="#session-超时" aria-hidden="true">#</a> Session 超时</h3><p>Shiro Session 的默认超时时间是 30 分钟。如果你对此不满意，可以自己设定合适的超时时间：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Session</span> session <span class="token operator">=</span> subject<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nsession<span class="token punctuation">.</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 单位微秒</span>\n<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>如果你觉得每一个 Session 对象都要单独设置，很麻烦。那么，你可以直接在 <code>web.xml</code> 中直接去设置 HttpSession 的超时时间。这是因为在 Java Web 中 Shiro Session 最终利用就是 HttpSession ：</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>session-config</span><span class="token punctuation">&gt;</span></span>  \n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>session-timeout</span><span class="token punctuation">&gt;</span></span>30<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>session-timeout</span><span class="token punctuation">&gt;</span></span>  \n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>session-config</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="session-dao-了解、自学" tabindex="-1"><a class="header-anchor" href="#session-dao-了解、自学" aria-hidden="true">#</a> Session DAO （了解、自学）</h3><p>以 Java Web 项目为例，我们存往 Shiro Session 的键值对最终会被 Shiro 存到 HttpSession ，但是 Shiro Session 并不是直接操作 HttpSession 进行数据的存取的。</p><blockquote><p>这有点类似于 Service &gt; DAO &gt; MySQL，Service 中的数据最终是要存入到数据库，但是 Service 并不直接操作数据库，它是通过 DAO 将它手里的数据存入数据库的。</p><table><thead><tr><th style="text-align:right;">概念</th><th style="text-align:left;">类比</th></tr></thead><tbody><tr><td style="text-align:right;">Shiro Session</td><td style="text-align:left;">Service</td></tr><tr><td style="text-align:right;">Session DAO</td><td style="text-align:left;">DAO</td></tr><tr><td style="text-align:right;">HttpSession</td><td style="text-align:left;">MySQL</td></tr></tbody></table></blockquote><p>我们这里介绍 SessionDAO 的目的不是为了使用它来实现更复杂的功能，而是为了禁用它。现在流行的分布式的方案<small>（前后端分离的 Restful 方案）</small>中，已经不会在服务端创建 Session，以实现『无状态』化。</p><p>以 <code>.ini</code> 配置为例，禁用 SessionDAO 的配置如下：</p><div class="language-properties ext-properties line-numbers-mode"><pre class="language-properties"><code><span class="token attr-name">securityManager.subjectDAO.sessionStorageEvaluator.sessionStorageEnabled</span> <span class="token punctuation">=</span> <span class="token attr-value">false</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>禁用掉 SessionDAO 功能之后，你在 Shiro Session 中存放的数据，就没有人帮你『送往』HttpSession 或其它地方进行存储。</p><p>需要注意的是，此时你只是禁用了 SessionDAO 功能，而不是整个 SessionManager 功能，如果一旦你在代码中调用 <strong>Subject#getSession</strong> 或 <strong>Subject#getSession(true)</strong> 这样的代码，Shiro 仍然会在你的内存中创建 Shiro Session 对象。</p><p>不过考虑到在无状态的服务中，我们逻辑上不会调用 getSession 方法，所以也无须担心这些 Shiro Session 对象的创建。</p><hr><p><small>（如果你有强迫症）</small> 想彻底禁掉 Shiro Session 整个功能。那么需要自己实现 <strong>DefaultWebSubjectFactory</strong> 的子类，例如：StatelessDefaultSubjectFactory 。这样，由该 Factory 创建的 Subject 不支持 getSession() 方法。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StatelessDefaultSubjectFactory</span> <span class="token keyword">extends</span> <span class="token class-name">DefaultWebSubjectFactory</span> <span class="token punctuation">{</span>  \n  <span class="token keyword">public</span> <span class="token class-name">Subject</span> <span class="token function">createSubject</span><span class="token punctuation">(</span><span class="token class-name">SubjectContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>  \n    <span class="token comment">// 不创建 session  </span>\n    context<span class="token punctuation">.</span><span class="token function">setSessionCreationEnabled</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">createSubject</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>  \n  <span class="token punctuation">}</span>  \n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>securityManager<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.apache.shiro.mgt.DefaultSecurityManager<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>realm<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>...<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>\n    <span class="token comment">&lt;!-- 注意:不存储 session --&gt;</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>subjectDAO.sessionStorageEvaluator.sessionStorageEnabled<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>false<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sessionManager<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.apache.shiro.session.mgt.DefaultSessionManager<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sessionValidationSchedulerEnabled<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>false<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>subjectFactory<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n      <span class="token comment">&lt;!-- 不生产会话 --&gt;</span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>xxx.xxx.StatelessDefaultSubjectFactory<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>这样再在程序中获得的 Subject 对象调用 <code>getSession()</code> 方法时，Shiro 会直接抛出异常。</p><p>『完』</p>',155),p={render:function(n,s){return t}}}}]);