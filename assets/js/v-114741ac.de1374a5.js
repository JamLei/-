"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[8654],{52351:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-114741ac",path:"/ecmascript6/ES6-promise&async&await.html",title:"理解 JavaScript 的 async/await",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"1. Promise 对象",slug:"_1-promise-对象",children:[]},{level:2,title:"2. async 和 await",slug:"_2-async-和-await",children:[{level:3,title:"2.1 async 关键字修饰函数",slug:"_2-1-async-关键字修饰函数",children:[]},{level:3,title:"2.2 await 到底在等啥",slug:"_2-2-await-到底在等啥",children:[]},{level:3,title:"2.3 改造 jQuery 的 Ajax",slug:"_2-3-改造-jquery-的-ajax",children:[]}]}],filePathRelative:"ecmascript6/ES6-promise&async&await.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},49560:(n,s,a)=>{a.r(s),a.d(s,{default:()=>t});const p=(0,a(66252).uE)('<h1 id="理解-javascript-的-async-await" tabindex="-1"><a class="header-anchor" href="#理解-javascript-的-async-await" aria-hidden="true">#</a> 理解 JavaScript 的 async/await</h1><h2 id="_1-promise-对象" tabindex="-1"><a class="header-anchor" href="#_1-promise-对象" aria-hidden="true">#</a> 1. Promise 对象</h2><p><strong>JavaScript 是一个单线程的编程语言，通过异步、回调函数来处理各种事件</strong>。因此，如果要处理多个有先后顺序的事件，那么将会出现多次嵌套回调函数的情况，这也被很多开发人员称为『回调地狱』。</p><p>Promise 对象则是通过将代表异步操作最终完成或者失败的操作封装到了对象中。Promise 本质上是一个绑定了回调的对象，不过这样可以适当缓解多层回调函数的问题。</p><p>Promise 最早由社区提出和实现，随后被 ES6 将其纳入标准种。</p><p>Promise 规定每个 Promise 对象都有『状态』，Promise 对象的初始状态是 pending ，接下来，它可以编程 fulfilled（代表成功）或者 rejected（代表失败）。</p><p>Promise 对象的状态的变化只会发生一次，且不可逆。一旦 Promise 对象的状态一旦变为 2 种终止态中的任意一个，都称它为『<strong>已定型</strong>』（<strong>resolved</strong>）。</p><p>首先要认清最基本的用法。一般学习 Promise 看到的第一段代码是这样：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token doc-comment comment">/**\n * 同步调用实例\n */</span>\n<span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 做一些事情，根据你自己的逻辑来</span>\n\n  <span class="token comment">// 然后在某些条件下调用resolve，或者调用reject</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token comment">/* 条件随便写 ^_^ 根据你自己的逻辑来 */</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token function">reject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\np<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 传给 Promise 的 resolve 回调。一旦它被执行，则意味着 Promise 对象进入成功状态。</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 传给 Promise 的 reject 回调。一旦它被执行，则意味着 Promise 对象进入失败状态。</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n\n<span class="token comment">/*\np.then(函数一, 函数二);\n\n也可以写成：\n\np.then(函数一)\n .catch(函数二);\n*/</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><p>解释一下，第一段调用了 Promise 构造函数，第二段是调用了 promise 实例的 <code>.then</code> 方法</p><ol><li><p>构造实例</p><ul><li><p>构造函数接受一个函数作为参数，这个函数会被浏览器<small>（或 node.js）</small>执行。</p></li><li><p>调用构造函数得到一个 promise 实例，此时，promise 实例处于初始状态。</p></li><li><p>参数函数接受两个回调函数参数 resolve 和 reject 。</p></li><li><p>在参数函数被执行的过程中，如果在其内部调用 resolve，会将 promise 对象的状态变成 fulfilled；或者调用 reject，会将 promise 对象的状态变成 rejected 。</p></li></ul></li><li><p>调用 .then</p><ul><li><p>调用 .then 可以为 promise 对象注册 2 种状态回调函数。</p></li><li><p>当第一个函数被调用执行时，promise 对象的状态为 fulfilled 。</p></li><li><p>当第二个函数被调用执行时，promise 实例的状态为 rejected 。</p></li></ul></li></ol><p><strong>用 Promise 包装 JQuery 的 Ajax 请求：</strong></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">ajax</span><span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n            url<span class="token operator">:</span> params <span class="token operator">&amp;&amp;</span> params<span class="token punctuation">.</span>url <span class="token operator">||</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>\n            type<span class="token operator">:</span> params <span class="token operator">&amp;&amp;</span> params<span class="token punctuation">.</span>type <span class="token operator">||</span> <span class="token string">&#39;post&#39;</span><span class="token punctuation">,</span>\n            contentType<span class="token operator">:</span> params <span class="token operator">&amp;&amp;</span> params<span class="token punctuation">.</span>contentType <span class="token operator">||</span> <span class="token string">&#39;application/x-www-form-urlencoded&#39;</span><span class="token punctuation">,</span>\n            data<span class="token operator">:</span> params <span class="token operator">&amp;&amp;</span> params<span class="token punctuation">.</span>data <span class="token operator">||</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>\n            <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            <span class="token function-variable function">error</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token function">reject</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 测试</span>\n<span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    url<span class="token operator">:</span> <span class="token string">&#39;/departments&#39;</span><span class="token punctuation">,</span>\n    type<span class="token operator">:</span> <span class="token string">&quot;get&quot;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token function">alert</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><h2 id="_2-async-和-await" tabindex="-1"><a class="header-anchor" href="#_2-async-和-await" aria-hidden="true">#</a> 2. async 和 await</h2><p>JavaScript 的 async/await 是 Promise 的升级版，被称为异步编程终级解决方案。</p><p>故名思意，async 是『异步』的简写，而 await 可以认为是 async wait 的简写。所以应该很好理解 async 用于申明一个 function 是异步的，而 await 用于等待一个异步方法执行完成。</p><p>另外还有一个很有意思的语法规定：<strong>await 只能出现在 async 函数中</strong>。</p><h3 id="_2-1-async-关键字修饰函数" tabindex="-1"><a class="header-anchor" href="#_2-1-async-关键字修饰函数" aria-hidden="true">#</a> 2.1 async 关键字修饰函数</h3><p>对于一个普通的函数，我们通常是直接通过 return 语句返回它的返回值。但是如果一个普通的函数被 <strong>async</strong> 关键字修饰，如下：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">testAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token string">&quot;hello async&quot;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">testAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>你会发现，它的返回值的类型就变成了 Promise ！这就是 async 关键字的作用：如果在函数中 return 一个直接量，async 会把这个直接量通过 <code>Promise.resolve()</code> 封装成 Promise 对象。</p><p>注意，由于 async 修饰的函数返回的是一个 Promise 对象，因此，在调用语句没有使用 await 的情况下，我们要按照对 Promise 对象的处理，你要拿到这个函数的『真正的』返回值，需要通过 Promise 的 <code>then()</code> 链来处理：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>result<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 hello async 。即，res 就是 testAsync 函数 return 的直接量。</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><blockquote><p>如果 async 关键字修饰的函数没有是返回值，它会返回 <code>Promise.resolve(undefined)</code> 。</p></blockquote><p>async 修饰的函数的特点就是 Promise 的特点：立刻执行，不会阻塞等待。如果你调用的是 async 函数，那么你的调用语句的下一条语句会紧接着执行。</p><h3 id="_2-2-await-到底在等啥" tabindex="-1"><a class="header-anchor" href="#_2-2-await-到底在等啥" aria-hidden="true">#</a> 2.2 await 到底在等啥</h3><p>从本质上来说，await 等待的是一个 Promise 对象，await 要『等到』这个 Promise 对象变成成功状态，这样，await 才好从中取出返回值。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">temp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> promise <span class="token operator">=</span> <span class="token function">testAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token keyword">await</span> promise<span class="token punctuation">;</span>\n    console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">temp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>await 是个运算符，用于组成表达式，await 表达式的运算结果取决于它等的东西。</p><ul><li><p>如果它等到的不是一个 Promise 对象，那 await 表达式的运算结果就是它等到的东西。</p></li><li><p>如果它等到的是一个 Promise 对象，await 就忙起来了，它会阻塞后面的代码，等着 Promise 对象 resolve，然后得到 resolve 的值，作为 await 表达式的运算结果。</p></li></ul><p>简单来说，<strong>await 会造成阻塞等待。</strong></p><h3 id="_2-3-改造-jquery-的-ajax" tabindex="-1"><a class="header-anchor" href="#_2-3-改造-jquery-的-ajax" aria-hidden="true">#</a> 2.3 改造 jQuery 的 Ajax</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">ajax</span><span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n            url<span class="token operator">:</span> params <span class="token operator">&amp;&amp;</span> params<span class="token punctuation">.</span>url <span class="token operator">||</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>\n            type<span class="token operator">:</span> params <span class="token operator">&amp;&amp;</span> params<span class="token punctuation">.</span>type <span class="token operator">||</span> <span class="token string">&#39;post&#39;</span><span class="token punctuation">,</span>\n            contentType<span class="token operator">:</span> params <span class="token operator">&amp;&amp;</span> params<span class="token punctuation">.</span>contentType <span class="token operator">||</span> <span class="token string">&#39;application/x-www-form-urlencoded&#39;</span><span class="token punctuation">,</span>\n            data<span class="token operator">:</span> params <span class="token operator">&amp;&amp;</span> params<span class="token punctuation">.</span>data <span class="token operator">||</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>\n            <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            <span class="token function-variable function">error</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token function">reject</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">temp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> promise <span class="token operator">=</span> <span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        url<span class="token operator">:</span> <span class="token string">&#39;/departments&#39;</span><span class="token punctuation">,</span>\n        type<span class="token operator">:</span> <span class="token string">&#39;get&#39;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> str <span class="token operator">=</span> <span class="token keyword">await</span> promise<span class="token punctuation">;</span>\n    console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">temp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div>',33),t={render:function(n,s){return p}}}}]);