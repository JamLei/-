"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[7966],{27043:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-b410f390",path:"/vue-cli/vue-cli-05-%E8%B7%AF%E7%94%B1%E5%AE%88%E5%8D%AB.html",title:"路由守卫",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"全局路由守卫",slug:"全局路由守卫",children:[{level:3,title:"基本使用",slug:"基本使用",children:[]},{level:3,title:"利用路由元信息",slug:"利用路由元信息",children:[]},{level:3,title:"嵌套路由的特殊处理",slug:"嵌套路由的特殊处理",children:[]},{level:3,title:"全局后置路由守卫（了解、自学）",slug:"全局后置路由守卫-了解、自学",children:[]}]},{level:2,title:"路由独享守卫",slug:"路由独享守卫",children:[]},{level:2,title:"组件内的守卫",slug:"组件内的守卫",children:[{level:3,title:"beforeRouterEnter 的 this 问题",slug:"beforerouterenter-的-this-问题",children:[]},{level:3,title:"beforeRouteEnter 的触发问题",slug:"beforerouteenter-的触发问题",children:[]},{level:3,title:"beforeRouteUpdate 的使用场景",slug:"beforerouteupdate-的使用场景",children:[]}]},{level:2,title:"完整的导航解析流程",slug:"完整的导航解析流程",children:[]},{level:2,title:"路由的顺序问题",slug:"路由的顺序问题",children:[]},{level:2,title:"404 页面",slug:"_404-页面",children:[]}],filePathRelative:"vue-cli/vue-cli-05-路由守卫.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},57819:(n,s,a)=>{a.r(s),a.d(s,{default:()=>p});const t=(0,a(66252).uE)('<h1 id="路由守卫" tabindex="-1"><a class="header-anchor" href="#路由守卫" aria-hidden="true">#</a> 路由守卫</h1><p>『<strong>导航</strong>』表示路由正在发生改变。</p><p><strong>vue-router</strong> 提供了能让你在导航发生之前运行某些代码的功能，并且遵照你的意愿去取消导航，或将用户导航到其它地方。</p><p>路由守卫有 3 种：</p><ul><li><p>全局路由守卫；</p></li><li><p>路由独享守卫；</p></li><li><p>组件路由守卫。</p></li></ul><h2 id="全局路由守卫" tabindex="-1"><a class="header-anchor" href="#全局路由守卫" aria-hidden="true">#</a> 全局路由守卫</h2><p>全局路由守卫最常见的使用场景就是『<strong>登录</strong>』认证和『<strong>权限</strong>』认证。</p><h3 id="基本使用" tabindex="-1"><a class="header-anchor" href="#基本使用" aria-hidden="true">#</a> 基本使用</h3><p>假设你想限制未登录的用户访问某 URL，你甚至都已经准备好了一个方法<small>（例如，名为 <strong>userAuthenticated()</strong>）</small>可以判断的当前用户是否已登录。该方法根据当前用户的登录情况『有时』返回 true，『有时』会返回 false 。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 为简化逻辑，我们使用生成随机数来代替当前用户有可能登录，有可能没有登录。</span>\n<span class="token keyword">function</span> <span class="token function">userAuthenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> randomNum <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>randomNum<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> randomNum <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>那么，现在你如何将 URL 和这个方法组合起来实现：『<strong>有时</strong>』允许用户访当前它所期望访问的 URL，『<strong>有时</strong>』则不允许其访问？</p><p>你可以为路由器（<strong>router</strong>）添加一个 <strong>router.beforeEach()</strong> 守卫：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nrouter<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>该守卫被传入 3 各参数：<strong>to</strong> 、<strong>from</strong> 以及 <strong>next</strong> ：</p><dl><dt>Route <em>to</em></dt><dd>路由对象，即将要进入的目标</dd><dt>Route <em>from</em></dt><dd>路由对象，当前导航正要离开的路由</dd><dt>Function <em>next</em></dt><dd>回调函数，通过 <em>next</em> 回调函数你可以让 vue-router 去处理导航、取消导航、重定向到其它地方或执行其它操作。</dd><dd><strong>一定要调用 <em>next</em> 方法</strong>。因为直到调用 <em>next</em> 方法之前，路由行为的状态将一致处于等待状态，永远不会被解析<small>（resolved）</small>。</dd></dl><p>例如：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>to<span class="token punctuation">.</span>path<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&quot;/acount&quot;</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">userAuthenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token function">next</span><span class="token punctuation">(</span><span class="token string">&#39;/login&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 重定向到 /login</span>\n  <span class="token keyword">else</span>\n    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 放行</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><strong>next()</strong> 方法的几种常见形式：</p><ul><li><p><code>next()</code></p><p>进行管道中的下一个钩子。如果全部钩子执行完了，则导航的状态就是 <strong>confirmed</strong>：已确认。</p></li><li><p><code>next(&#39;/xxx&#39;)</code></p><p>跳转到一个不同的地址。当前的导航被中断，然后进行一个新的导航。</p></li><li><p><code>next(false)</code></p><p>中断当前的导航。并且强迫用户留在这里（from）。这个时候如果，你去手动修改浏览器的 URL 改变了，或者点击浏览器后退按钮，你会发现无效，你还在这里（from）。</p></li></ul><h3 id="利用路由元信息" tabindex="-1"><a class="header-anchor" href="#利用路由元信息" aria-hidden="true">#</a> 利用路由元信息</h3><p>在守卫中一个个去检查路径会让程序变得冗长不优雅，特别是当你维护一个拥有大量路由的系统时。此时，有一个很有用的特性可以被利用：路由元信息（<strong>route meta fields</strong>）。</p><p>你可以在路由上添加一个 <strong>meta</strong> 属性，并在路由守卫种获得到它。例如：</p><p>在 <strong>/account</strong> 路由上自定义一个 <strong>requiresAuth</strong> 属性，然后在路由守卫中获取该属性的值，并以此为依据决定是否要进行登录认证。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  rooutes<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n      path<span class="token operator">:</span> <span class="token string">&#39;/account&#39;</span><span class="token punctuation">,</span>\n      component<span class="token operator">:</span> AccountPage<span class="token punctuation">,</span>\n      meta<span class="token operator">:</span> <span class="token punctuation">{</span>\n        requiresAuth<span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token comment">// 看这里，自定义的一个 boolean 属性，属性名任意。</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">&#39;...&#39;</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">,</span> meta<span class="token operator">:</span> <span class="token punctuation">{</span> requiresAuth<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>  <span class="token punctuation">}</span>\n    <span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">&#39;...&#39;</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">,</span> meta<span class="token operator">:</span> <span class="token punctuation">{</span> requiresAuth<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>  <span class="token punctuation">}</span>\n    <span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">&#39;...&#39;</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">,</span> meta<span class="token operator">:</span> <span class="token punctuation">{</span> requiresAuth<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>\n    <span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">&#39;...&#39;</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">,</span> meta<span class="token operator">:</span> <span class="token punctuation">{</span> requiresAuth<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nrouter<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>to<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>requiresAuth <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">userAuthenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">next</span><span class="token punctuation">(</span><span class="token string">&#39;/login&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 重定向 login 页面</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 放行</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p>利用 meta ，上述代码实现了批量设置，而无需每个 URL 设置一次。</p><h3 id="嵌套路由的特殊处理" tabindex="-1"><a class="header-anchor" href="#嵌套路由的特殊处理" aria-hidden="true">#</a> 嵌套路由的特殊处理</h3><p>当遇到嵌套路由的时候，meta 的设置还有简化的空间。例如，原版是这样：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>routes<span class="token operator">:</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">{</span>\n    path<span class="token operator">:</span> <span class="token string">&#39;/account&#39;</span><span class="token punctuation">,</span> <span class="token operator">...</span>\n    children<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">&#39;/account/xxx&#39;</span><span class="token punctuation">,</span> <span class="token operator">...</span> meta<span class="token operator">:</span> <span class="token punctuation">{</span> requiresAuth<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">&#39;/account/yyy&#39;</span><span class="token punctuation">,</span> <span class="token operator">...</span> meta<span class="token operator">:</span> <span class="token punctuation">{</span> requiresAuth<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">&#39;/account/zzz&#39;</span><span class="token punctuation">,</span> <span class="token operator">...</span> meta<span class="token operator">:</span> <span class="token punctuation">{</span> requiresAuth<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>\n<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>逻辑上，由于 <strong>/account</strong> 的子路由都需要进行登录校验，那么一个很自然的想法就是将，<strong>requiresAuth</strong> 加在父路由上，而没有必要每个子路由都加。这样配置将变为：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>routes<span class="token operator">:</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">{</span>\n    <span class="token comment">// 父路由</span>\n    path<span class="token operator">:</span> <span class="token string">&#39;/account&#39;</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">,</span> meta<span class="token operator">:</span> <span class="token punctuation">{</span> requiresAuth<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token comment">// 子路由</span>\n    children<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">&#39;/account/xxx&#39;</span><span class="token punctuation">,</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">&#39;/account/yyy&#39;</span><span class="token punctuation">,</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">&#39;/account/zzz&#39;</span><span class="token punctuation">,</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>\n<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>上述的优化思路是正确的。<strong>但是</strong>，如果仍用前例的路由守卫代码，则达不到预期效果：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 此时 to.meta.requiresAuth 有问题</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>to<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>requiresAuth <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">userAuthenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> \n    <span class="token function">next</span><span class="token punctuation">(</span><span class="token string">&#39;/login&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n  <span class="token keyword">else</span>\n    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>原因在于，当你要路由至 <em>/account/xxx</em> 、 <em>/account/yyy</em> 或 <em>/account/zzz</em> 时，<strong>to.meta.requiresAuth</strong> 取到的是子路由上的 <strong>requiresAuth</strong>，而这三个子路由的配置上是没有 <strong>requiresAuth</strong> 的！结果就成了：无需校验。</p><p>这种情况下需要使用 <strong>to.matched</strong> 的方式来曲线救国。</p><p><strong>to</strong> 的 <strong>matched</strong> 属性是一个数组，逻辑上，它记录的是目标路由的 <strong>层级</strong> 数组。例如：</p><table><thead><tr><th style="text-align:left;">目标路由</th><th style="text-align:center;">matched 数组长度</th><th style="text-align:left;">内容</th></tr></thead><tbody><tr><td style="text-align:left;">/account</td><td style="text-align:center;">1</td><td style="text-align:left;">/account</td></tr><tr><td style="text-align:left;">/account/xxx</td><td style="text-align:center;">2</td><td style="text-align:left;">/account <br> /account/xxx</td></tr><tr><td style="text-align:left;">/account/xxx/yyy</td><td style="text-align:center;">3</td><td style="text-align:left;">/account <br> /account/xxx <br> /account/xxx/yyy</td></tr><tr><td style="text-align:left;">/account/xxx/yyy/zzz</td><td style="text-align:center;">4</td><td style="text-align:left;">/account <br> /account/xxx <br> /account/xxx/yyy <br> /account/xxx/yyy/zzz</td></tr></tbody></table><p>通过 <strong>to.matched</strong> 数组，你总能找到目标路由的父路由，而它的父路由上，有你所设置的 <strong>requiresAuth</strong>：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\n    <span class="token comment">// 查看目标路由及其父路由上有没有 requiresAuth</span>\n    <span class="token keyword">const</span> requiresAuth <span class="token operator">=</span> to<span class="token punctuation">.</span>matched<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">record</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> record<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>requiresAuth<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>requiresAuth <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">userAuthenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">next</span><span class="token punctuation">(</span><span class="token string">&#39;/login&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="全局后置路由守卫-了解、自学" tabindex="-1"><a class="header-anchor" href="#全局后置路由守卫-了解、自学" aria-hidden="true">#</a> 全局后置路由守卫（了解、自学）</h3><p>全局路由除了前置路由守卫，还有后置路由守卫。</p><p>然而和前置路由守卫不同的是，这些后置路由不会接受 <strong>next</strong> 函数，即它们不会也无法改变本次导航本身<small>（毕竟它们是后置守卫，当它们被触发时，导航已经完成了）</small>：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>router<span class="token punctuation">.</span><span class="token function">afterEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> <span class="token keyword">from</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="路由独享守卫" tabindex="-1"><a class="header-anchor" href="#路由独享守卫" aria-hidden="true">#</a> 路由独享守卫</h2><p>路由独享守卫和全局守卫功能上是一样的。只不过全局守卫对每个路由有效，而路由独享守卫只针对『<strong>当前路由</strong>』有效。</p><p>你可以在路由配置上直接定义 <strong>beforeEnter</strong> 守卫：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  routes<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token punctuation">{</span>\n      path<span class="token operator">:</span> <span class="token string">&#39;/account&#39;</span><span class="token punctuation">,</span>\n      component<span class="token operator">:</span> AccountPage<span class="token punctuation">,</span>\n      <span class="token function-variable function">beforeEnter</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">authenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token function">next</span><span class="token punctuation">(</span><span class="token string">&#39;/login&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">else</span> <span class="token punctuation">{</span>\n          <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>这些守卫与全局前置守卫的方法参数是一样的。</p><h2 id="组件内的守卫" tabindex="-1"><a class="header-anchor" href="#组件内的守卫" aria-hidden="true">#</a> 组件内的守卫</h2><p>组件内部守卫是指你在定义组件的时候<small>（<em>.vue</em> 文件中）</small>，指定路由守卫。</p><p>能使用的守卫有 3 个：</p><ul><li><p>beforeRouteEnter<small>（等效于 beforeEach）</small></p></li><li><p>beforeRouteUpdate</p></li><li><p>beforeRouteLeave<small>（等效于 afterEach）</small></p></li></ul><h3 id="beforerouterenter-的-this-问题" tabindex="-1"><a class="header-anchor" href="#beforerouterenter-的-this-问题" aria-hidden="true">#</a> beforeRouterEnter 的 this 问题</h3><p>顾名思义，<strong>beforeRouterEnter</strong> 是在进入当前地址，渲染本组件『<strong>之前</strong>』被调用的，那么此时，当前的组件对象自然还没有创建好！</p><p>因此，<strong>beforeRouterEnter</strong> 中『<strong>不能、不能、不能</strong>』获取组件实例 <strong>this</strong> 。</p><h3 id="beforerouteenter-的触发问题" tabindex="-1"><a class="header-anchor" href="#beforerouteenter-的触发问题" aria-hidden="true">#</a> beforeRouteEnter 的触发问题</h3><p>beforeRouteEnter 只有在你彻底离开（触发了 beforeRouteLeave）组件/页面之后，再次进来时才会触发。一般情况下，好像并没有太大的问题，但是一旦是遇到动态路由的情况，就并非你所想。例如，<code>/students/1</code> 、<code>/students/2</code> 和 <code>/students/3</code> 在你看来是 3 个 URL，但是它们使用的是同一个组件！</p><p>因此，你在它们三个之间来回“跳转”时，你会发现 beforeRouteEnter 根本就没有触发！不光是 beforeRouteEnter，beforeRouteLeave 也没有触发。</p><p>这是因为，你根本就没有离开这个页面，只是在“切换”页面上的数据而已。</p><h3 id="beforerouteupdate-的使用场景" tabindex="-1"><a class="header-anchor" href="#beforerouteupdate-的使用场景" aria-hidden="true">#</a> beforeRouteUpdate 的使用场景</h3><p>对于上述（动态路由）的情况，你需要使用的是 <strong>beforeRouteUpdate</strong> 路由守卫，这就是它的最常用场景。</p><blockquote><p>不过，需要注意的是，你第一次“进来”的时候，触发的还是 beforeRouteEnter ，即它们的触发次数分别是 1 次和 N-1 次。</p></blockquote><p>为了在同一个页面上，显示不同的数据，你需要在 <strong>beforeRouterUpdate</strong> 中去请求新的数据。</p><p>例如：</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>state === <span class="token punctuation">&#39;</span>loading<span class="token punctuation">&#39;</span><span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n      Loading user ...\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>User: {{ userInfo.name }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>\n      ... etc ...\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n  props<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">data</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n      state<span class="token operator">:</span> <span class="token string">&#39;loading&#39;</span><span class="token punctuation">,</span>\n      userInfo<span class="token operator">:</span> <span class="token punctuation">{</span>\n        name<span class="token operator">:</span> <span class="token keyword">undefined</span>\n      <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;mounted()&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token function">beforeRouteUpdate</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;beforeRouteUpdated()&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token string">&#39;loading&#39;</span><span class="token punctuation">;</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>to<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  methods<span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token function">init</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;执行 ajax 请求，去获取 &#39;</span> <span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">&#39; 的信息。并更新页面数据&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br></div></div><h2 id="完整的导航解析流程" tabindex="-1"><a class="header-anchor" href="#完整的导航解析流程" aria-hidden="true">#</a> 完整的导航解析流程</h2><table><thead><tr><th style="text-align:center;">#</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">1</td><td style="text-align:left;">导航被触发。</td></tr><tr><td style="text-align:center;">2</td><td style="text-align:left;">在失活的组件里调用离开守卫。</td></tr><tr><td style="text-align:center;">3</td><td style="text-align:left;">调用全局的 beforeEach 守卫。</td></tr><tr><td style="text-align:center;">4</td><td style="text-align:left;">在重用的组件里调用 beforeRouteUpdate 守卫 (2.2+)。</td></tr><tr><td style="text-align:center;">5</td><td style="text-align:left;">在路由配置里调用 beforeEnter。</td></tr><tr><td style="text-align:center;">6</td><td style="text-align:left;">解析异步路由组件。</td></tr><tr><td style="text-align:center;">7</td><td style="text-align:left;">在被激活的组件里调用 beforeRouteEnter。</td></tr><tr><td style="text-align:center;">8</td><td style="text-align:left;">调用全局的 beforeResolve 守卫 (2.5+)。</td></tr><tr><td style="text-align:center;">9</td><td style="text-align:left;">导航被确认。</td></tr><tr><td style="text-align:center;">10</td><td style="text-align:left;">调用全局的 afterEach 钩子。</td></tr><tr><td style="text-align:center;">11</td><td style="text-align:left;">触发 DOM 更新。</td></tr><tr><td style="text-align:center;">12</td><td style="text-align:left;">用创建好的实例调用 beforeRouteEnter 守卫中传给 next 的回调函数。</td></tr></tbody></table><h2 id="路由的顺序问题" tabindex="-1"><a class="header-anchor" href="#路由的顺序问题" aria-hidden="true">#</a> 路由的顺序问题</h2><p>有两套路由设置：</p><ul><li><p>方案一：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>routes<span class="token operator">:</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">&#39;/user/:id&#39;</span><span class="token punctuation">,</span> component<span class="token operator">:</span> UserPage <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">&#39;/user/me&#39;</span><span class="token punctuation">,</span> component<span class="token operator">:</span> MePage <span class="token punctuation">}</span>\n<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><p>方案二：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>routes<span class="token operator">:</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">&#39;/user/me&#39;</span><span class="token punctuation">,</span> component<span class="token operator">:</span> MePage <span class="token punctuation">}</span><span class="token punctuation">,</span> \n  <span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">&#39;/user/:id&#39;</span><span class="token punctuation">,</span> component<span class="token operator">:</span> UserPage <span class="token punctuation">}</span>\n<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li></ul><p>上述两个方案区别并不大，都是定义了两个路由，一个是让当前用户访问自己的页面<small>（<code>/user/me</code>）</small>，另一个是用于访问其它用户的页面<small>（例如，<code>/user/9527</code>）</small>。</p><p>两种方案的区别仅仅是两个路由的先后顺序的不同而已。</p><p>但是，方案一有一个问题：MePage 组件/页面永远不会被展示。因为，当你输入 <strong>/user/me</strong> 时，先匹配到的是 <strong>/user/:id</strong> ，此时，URI 中的 <strong>me</strong> 会被当作参数 <strong>id</strong> 的值！</p><p>方案二则不会有这个问题。</p><p>所以，当安排路由的先后顺序时，『<strong>精确的路由在前，含有统配含义的路由在后</strong>』。</p><h2 id="_404-页面" tabindex="-1"><a class="header-anchor" href="#_404-页面" aria-hidden="true">#</a> 404 页面</h2><p>可以利用 vue-router 的路由的『顺序搜索』规则与通配符 <code>*</code> 匹配的特点，来渲染一个显示错误页面。例如：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>routes<span class="token operator">:</span> <span class="token punctuation">[</span>\n  <span class="token operator">...</span> 其它路由 <span class="token operator">...</span>\n  <span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">,</span> component<span class="token operator">:</span> PageNotFound <span class="token punctuation">}</span>\n<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>当其它路由都匹配不到时，就会显示 PageNotFound 组件。</p><p>如果想让子路由的错误页面也能在父组件中显示，则需要在子路由中添加该通配符路由：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>routes<span class="token operator">:</span> <span class="token punctuation">[</span>\n  <span class="token operator">...</span> 其它路由 <span class="token operator">...</span><span class="token punctuation">,</span>\n\n  <span class="token punctuation">{</span> \n    path<span class="token operator">:</span> <span class="token string">&#39;/settings&#39;</span><span class="token punctuation">,</span> component<span class="token operator">:</span> SettingsPage<span class="token punctuation">,</span> children<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">&#39;profile&#39;</span><span class="token punctuation">,</span> component<span class="token operator">:</span> SettingProfilePage <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">,</span> component<span class="token operator">:</span> PageNotFound <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n  <span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">,</span> component<span class="token operator">:</span> PageNotFound <span class="token punctuation">}</span>\n<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div>',80),p={render:function(n,s){return t}}}}]);