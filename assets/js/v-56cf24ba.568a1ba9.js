"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[5180],{55626:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-56cf24ba",path:"/utility/guava/81-%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B7%A5%E5%85%B7%E7%B1%BB%20-%20%E5%90%ABapache.html",title:"字符串工具类",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"对字符串的判断空",slug:"对字符串的判断空",children:[{level:3,title:"guava 的 Strings 类",slug:"guava-的-strings-类",children:[]},{level:3,title:"commons-lang3 在 StringUtils 中提供了类似的功能（自学、了解）",slug:"commons-lang3-在-stringutils-中提供了类似的功能-自学、了解",children:[]}]},{level:2,title:"对字符串作拼接",slug:"对字符串作拼接",children:[{level:3,title:"guava 的 Joiner 类",slug:"guava-的-joiner-类",children:[]},{level:3,title:"commons-lang3 的 StringUtils 类（自学、了解）",slug:"commons-lang3-的-stringutils-类-自学、了解",children:[]}]},{level:2,title:"对字符串的拆分",slug:"对字符串的拆分",children:[{level:3,title:"guava 的 Splitter 类",slug:"guava-的-splitter-类",children:[]},{level:3,title:"commons-lang3 的 StringUtils 工具类（自学、了解）",slug:"commons-lang3-的-stringutils-工具类-自学、了解",children:[]}]},{level:2,title:"字符串内容的替换",slug:"字符串内容的替换",children:[{level:3,title:"guava 的 CharMatcher 类",slug:"guava-的-charmatcher-类",children:[]},{level:3,title:"commons-lang3 的 StringUtils 工具类（自学、了解）",slug:"commons-lang3-的-stringutils-工具类-自学、了解-1",children:[]}]}],filePathRelative:"utility/guava/81-字符串工具类 - 含apache.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},69906:(n,s,a)=>{a.r(s),a.d(s,{default:()=>p});const t=(0,a(66252).uE)('<h1 id="字符串工具类" tabindex="-1"><a class="header-anchor" href="#字符串工具类" aria-hidden="true">#</a> 字符串工具类</h1><p>对字符串的操作常见的有：</p><table><thead><tr><th style="text-align:center;">#</th><th style="text-align:left;">常见操作</th></tr></thead><tbody><tr><td style="text-align:center;">1</td><td style="text-align:left;">字符串的判断空</td></tr><tr><td style="text-align:center;">2</td><td style="text-align:left;">字符串的拼接</td></tr><tr><td style="text-align:center;">3</td><td style="text-align:left;">字符串的拆分</td></tr><tr><td style="text-align:center;">4</td><td style="text-align:left;">字符串内容的替换</td></tr></tbody></table><h2 id="对字符串的判断空" tabindex="-1"><a class="header-anchor" href="#对字符串的判断空" aria-hidden="true">#</a> 对字符串的判断空</h2><p>中文语境中的『<strong>空</strong>』在编程领域中细分为三种：<code>null</code>、<code>&quot;&quot;</code> 和 <code>仅含空白符的字符串</code>。<small>即，英语中的 null、empty 和 blank 。</small></p><h3 id="guava-的-strings-类" tabindex="-1"><a class="header-anchor" href="#guava-的-strings-类" aria-hidden="true">#</a> guava 的 Strings 类</h3><p>guava 在 com.google.common.base 包下提供的 <strong>Strings</strong> 工具类中有一个 <strong>isNullOrEmpty</strong> 方法，它的判断逻辑显而易见：</p><p>伪代码如下：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Strings</span><span class="token punctuation">.</span><span class="token function">isNullOrEmpty</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>   <span class="token operator">=</span> <span class="token boolean">true</span>\n<span class="token class-name">Strings</span><span class="token punctuation">.</span><span class="token function">isNullOrEmpty</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span>     <span class="token operator">=</span> <span class="token boolean">true</span>\n<span class="token class-name">Strings</span><span class="token punctuation">.</span><span class="token function">isNullOrEmpty</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span>    <span class="token operator">=</span> <span class="token boolean">false</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="commons-lang3-在-stringutils-中提供了类似的功能-自学、了解" tabindex="-1"><a class="header-anchor" href="#commons-lang3-在-stringutils-中提供了类似的功能-自学、了解" aria-hidden="true">#</a> commons-lang3 在 StringUtils 中提供了类似的功能（自学、了解）</h3><p>伪代码如下：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>   <span class="token operator">=</span> <span class="token boolean">true</span>\n<span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span>     <span class="token operator">=</span> <span class="token boolean">true</span>\n<span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span>    <span class="token operator">=</span> <span class="token boolean">false</span>\n\n<span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>   <span class="token operator">=</span> <span class="token boolean">true</span>\n<span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span>     <span class="token operator">=</span> <span class="token boolean">true</span>\n<span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span>    <span class="token operator">=</span> <span class="token boolean">true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><blockquote><p>工具类的命名风格：<br> 通常，存在两种工具类的命名风格： Xxxs 和 XxxUtils 。很显然，Guava 库采用的是前种风格，apache commons 采用的是后种。</p></blockquote><h2 id="对字符串作拼接" tabindex="-1"><a class="header-anchor" href="#对字符串作拼接" aria-hidden="true">#</a> 对字符串作拼接</h2><h3 id="guava-的-joiner-类" tabindex="-1"><a class="header-anchor" href="#guava-的-joiner-类" aria-hidden="true">#</a> guava 的 Joiner 类</h3><p>guava 在 com.google.common.base 包下为我们提供了 <strong>Joiner</strong> 类来做字符串的拼接、合并。</p><p>伪代码如下：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// 结果：&quot;hello world&quot;</span>\n<span class="token class-name">Joiner</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;world&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> \n\n<span class="token comment">// 结果：sb = &quot;hello, world, goodbye&quot;</span>\n<span class="token class-name">StringBuffer</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">Joiner</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;, &quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appendTo</span><span class="token punctuation">(</span>sb<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;world&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;goodbye&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="commons-lang3-的-stringutils-类-自学、了解" tabindex="-1"><a class="header-anchor" href="#commons-lang3-的-stringutils-类-自学、了解" aria-hidden="true">#</a> commons-lang3 的 StringUtils 类（自学、了解）</h3><p>commons-lang3 在 <em>org.apache.commons.lang3</em> 包下提供了一个 <em><strong>StringUtils</strong></em> 工具类，其中有名为 <em><strong>join</strong></em> 和 <em><strong>joinWith</strong></em> 的方法，可用于字符串的拼接。</p><p>伪代码如下：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token operator">=</span> <span class="token keyword">null</span>\n<span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>              <span class="token operator">=</span> <span class="token string">&quot;&quot;</span>\n<span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token keyword">null</span><span class="token punctuation">]</span><span class="token punctuation">)</span>          <span class="token operator">=</span> <span class="token string">&quot;&quot;</span>\n<span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">&quot;abc&quot;</span>\n<span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">&quot;a&quot;</span>\n\n<span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">joinWith</span><span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token operator">=</span> <span class="token string">&quot;a,b&quot;</span>\n<span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">joinWith</span><span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>     <span class="token operator">=</span> <span class="token string">&quot;a,b,&quot;</span>\n<span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">joinWith</span><span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token operator">=</span> <span class="token string">&quot;a,,b&quot;</span>\n<span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">joinWith</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>       <span class="token operator">=</span> <span class="token string">&quot;ab&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="对字符串的拆分" tabindex="-1"><a class="header-anchor" href="#对字符串的拆分" aria-hidden="true">#</a> 对字符串的拆分</h2><h3 id="guava-的-splitter-类" tabindex="-1"><a class="header-anchor" href="#guava-的-splitter-类" aria-hidden="true">#</a> guava 的 Splitter 类</h3><p>guava 在 <em>com.google.common.base</em> 包下提供了 <em><strong>Splitter</strong></em> 类来做字符串的拆分。</p><p>伪代码如下：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// 拆出 4 个：&quot;hello&quot;, &quot; world&quot;, &quot; &quot;, &quot; goodbye&quot;  </span>\n<span class="token class-name">Splitter</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;hello, world, , goodbye&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li><p><em><strong>.on</strong></em> 方法用于指明分隔符；</p></li><li><p><em><strong>.split</strong></em> 方法表示对目标字符串进行拆分。<em>split</em> 方法还有一个 <em><strong>.splitToList</strong></em> 的“兄弟”方法 。</p></li></ul><p>由于目标字符串的原因，上述代码拆分的结果中有两样“讨厌”的东西：『空格』和『空字符串』。对此我们可以进一步改进：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// 拆出 3 个：&quot;hello&quot;, &quot;world&quot;, &quot;goodbye&quot;  </span>\n<span class="token class-name">Splitter</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">omitEmptyStrings</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">trimResults</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;hello, world, , goodbye&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>多出来的两个方法调用：</p><ul><li><p><em><strong>.omitEmptyStrings</strong></em> 表示忽略拆出来的空字符串</p></li><li><p><em><strong>.trimResults</strong></em> 方法表示要对每个拆分结果做 <em><strong>trim</strong></em> 操作</p></li></ul><p><em>.on</em> 方法有一个更高级的支持正则表达式的“兄弟”方法：<em><strong>.onPattern</strong></em> ：</p><p>伪代码如下：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// 拆出 4 个：&quot;hello&quot; &quot;word&quot; &quot;世界&quot; &quot;和平&quot;</span>\n<span class="token class-name">Splitter</span><span class="token punctuation">.</span><span class="token function">onPattern</span><span class="token punctuation">(</span><span class="token string">&quot;[,，]{1,}&quot;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">trimResults</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">omitEmptyStrings</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">splitToList</span><span class="token punctuation">(</span><span class="token string">&quot;hello,world,,世界, 和平&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="commons-lang3-的-stringutils-工具类-自学、了解" tabindex="-1"><a class="header-anchor" href="#commons-lang3-的-stringutils-工具类-自学、了解" aria-hidden="true">#</a> commons-lang3 的 StringUtils 工具类（自学、了解）</h3><p>commons-lang3 在 <em>org.apache.commons.lang3</em> 包下提供了一个 <em>StringUtils</em> 工具类，其中有名为 <em><strong>.split</strong></em> 的方法，可用于字符串的拆分。</p><p>伪代码如下：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">)</span>         <span class="token operator">=</span> <span class="token keyword">null</span>\n<span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">)</span>           <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n<span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;a.b.c&quot;</span><span class="token punctuation">,</span> <span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span>    <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">]</span>\n<span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;a..b.c&quot;</span><span class="token punctuation">,</span> <span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span>   <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">]</span>\n<span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;a:b:c&quot;</span><span class="token punctuation">,</span> <span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span>    <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;a:b:c&quot;</span><span class="token punctuation">]</span>\n<span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;a b c&quot;</span><span class="token punctuation">,</span> <span class="token string">&#39; &#39;</span><span class="token punctuation">)</span>    <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="字符串内容的替换" tabindex="-1"><a class="header-anchor" href="#字符串内容的替换" aria-hidden="true">#</a> 字符串内容的替换</h2><h3 id="guava-的-charmatcher-类" tabindex="-1"><a class="header-anchor" href="#guava-的-charmatcher-类" aria-hidden="true">#</a> guava 的 CharMatcher 类</h3><p>guava 在 <code>com.google.common.base</code> 包下提供了 <em><strong>CharMatcher</strong></em> 类用于查找并处理字符串内容。</p><p><em>CharMatcher</em> 提供了多种对字符串处理的方法, 它的主要意图有:</p><ol><li><p>找到匹配的字符</p></li><li><p>处理匹配的字符</p></li></ol><p>通过 <em>CharMatcher</em> 对字符串进行操作<small>（包括但不仅包括『替换』）</small>，也是分为两个步：选中、匹配字符串中的某部分，而后进行某种操作。</p><p>伪代码：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// 结果：&quot;hell wrld&quot;</span>\n<span class="token class-name">CharMatcher</span><span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token string">&#39;o&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeFrom</span><span class="token punctuation">(</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li><p><em><strong>is</strong></em> 方法表示所需要选中、匹配的内容</p></li><li><p><em><strong>removeFrom</strong></em> 表示对目标字符串中所选中的内容进行的操作。<small>上例中是删除。</small></p></li></ul><p>伪代码：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// 结果：&quot;heLLo worLd&quot; </span>\n<span class="token class-name">CharMatcher</span><span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token string">&#39;l&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replaceFrom</span><span class="token punctuation">(</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">,</span> <span class="token string">&#39;L&#39;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>CharMatcher 提供的选中、匹配方法包括但不仅包括 <em><strong>is</strong></em> 方法，提供的操作方法包括但不仅包括 <em><strong>removeFrom</strong></em> 方法和 <em><strong>replaceFrom</strong></em> 方法。</p><h3 id="commons-lang3-的-stringutils-工具类-自学、了解-1" tabindex="-1"><a class="header-anchor" href="#commons-lang3-的-stringutils-工具类-自学、了解-1" aria-hidden="true">#</a> commons-lang3 的 StringUtils 工具类（自学、了解）</h3><p>commons-lang3 在 <em>org.apache.commons.lang3</em> 包下提供了一个 <em>StringUtils</em> 工具类，其中有名为 <em><strong>replace</strong></em> 的方法，可用于替换字符串中的指定内容。</p><p>伪代码：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">)</span>        <span class="token operator">=</span> <span class="token keyword">null</span>\n<span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">)</span>          <span class="token operator">=</span> <span class="token string">&quot;&quot;</span>\n<span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&quot;any&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">)</span>    <span class="token operator">=</span> <span class="token string">&quot;any&quot;</span>\n<span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&quot;any&quot;</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span>    <span class="token operator">=</span> <span class="token string">&quot;any&quot;</span>\n<span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&quot;any&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">)</span>      <span class="token operator">=</span> <span class="token string">&quot;any&quot;</span>\n<span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&quot;aba&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span>  <span class="token operator">=</span> <span class="token string">&quot;aba&quot;</span>\n<span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&quot;aba&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span>    <span class="token operator">=</span> <span class="token string">&quot;b&quot;</span>\n<span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&quot;aba&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;z&quot;</span><span class="token punctuation">)</span>   <span class="token operator">=</span> <span class="token string">&quot;zbz&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>',55),p={render:function(n,s){return t}}}}]);