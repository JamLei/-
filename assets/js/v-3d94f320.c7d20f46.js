"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[5832],{60247:(s,n,t)=>{t.r(n),t.d(n,{data:()=>a});const a={key:"v-3d94f320",path:"/servlet/Servlet-01-%E5%9F%BA%E7%A1%80.html",title:"Servlet 基础",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"Servlet API",slug:"servlet-api",children:[{level:3,title:"概述",slug:"概述",children:[]},{level:3,title:"相关对象概述",slug:"相关对象概述",children:[]},{level:3,title:"Servlet 接口",slug:"servlet-接口",children:[]},{level:3,title:"GenericServlet 抽象类",slug:"genericservlet-抽象类",children:[]},{level:3,title:"HTTPServlet 类",slug:"httpservlet-类",children:[]},{level:3,title:"ServletRequest 和 HTTPServletRequest",slug:"servletrequest-和-httpservletrequest",children:[]},{level:3,title:"HttpServletRequest",slug:"httpservletrequest",children:[]},{level:3,title:"ServletResponse 和 HTTPServletResponse",slug:"servletresponse-和-httpservletresponse",children:[]},{level:3,title:"ServletConfig 和 ServletContext",slug:"servletconfig-和-servletcontext",children:[]}]},{level:2,title:"配置 Servlet 及其映射",slug:"配置-servlet-及其映射",children:[{level:3,title:"老式配置：web.xml 配置",slug:"老式配置-web-xml-配置",children:[]},{level:3,title:"新式配置：注解配置",slug:"新式配置-注解配置",children:[]},{level:3,title:"URL 匹配规则",slug:"url-匹配规则",children:[]}]},{level:2,title:"JSP",slug:"jsp",children:[{level:3,title:"JSP 概述",slug:"jsp-概述",children:[]},{level:3,title:"隐式对象",slug:"隐式对象",children:[]},{level:3,title:"指令",slug:"指令",children:[]},{level:3,title:"脚本元素",slug:"脚本元素",children:[]},{level:3,title:"动作（了解、自学）",slug:"动作-了解、自学",children:[]}]},{level:2,title:"Servlet 版本和 web.xml",slug:"servlet-版本和-web-xml",children:[{level:3,title:"Servlet 的版本和对应的 Tomcat",slug:"servlet-的版本和对应的-tomcat",children:[]},{level:3,title:"不同版本的 web.xml 声明",slug:"不同版本的-web-xml-声明",children:[]}]}],filePathRelative:"servlet/Servlet-01-基础.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},33703:(s,n,t)=>{t.r(n),t.d(n,{default:()=>e});const a=(0,t(66252).uE)('<h1 id="servlet-基础" tabindex="-1"><a class="header-anchor" href="#servlet-基础" aria-hidden="true">#</a> Servlet 基础</h1><h2 id="servlet-api" tabindex="-1"><a class="header-anchor" href="#servlet-api" aria-hidden="true">#</a> Servlet API</h2><h3 id="概述" tabindex="-1"><a class="header-anchor" href="#概述" aria-hidden="true">#</a> 概述</h3><p>Servlet API 是你的 Java Web 程序与 Servlet 容器<small>（例如，Tomcat）</small>之间的『约定』。</p><blockquote><p>注意，Servlet 容器有且不仅只有 Tomcat 一种。后续内容就不再强调 Servlet 容器和 Tomcat 之间的关系，但凡提到 Tomcat 容器的场景，使用其它的 Servlet 容器也是可以的。</p></blockquote><p>这个约定归结起来就是，<strong>Tomcat 将 Servlet 类载入内存，并由 Tomcat 调用 Servlet 对象的具体的方法</strong> 。<small>这些方法所需的参数也是由 Tomcat 准备并传入的</small>。</p><blockquote><p>简单来说就是一句话，你按照某种特定规则写好代码『放在这里等着』Tomcat 来调用。</p></blockquote><p>Servlet 技术的核心是 Servlet 接口：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Servlet 接口\n└── GenericServlet 抽象类\n    └── HttpServlet \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>你的 Servlet 类必须直接或间接实现的 Servlet 接口。通常，我们是继承 HttpServlet，从而间接实现 Servlet 接口。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// 直接实现 Servlet 接口</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AServlet</span> <span class="token keyword">implements</span> <span class="token class-name">Servlet</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>\n\n<span class="token comment">// 间接实现 Servlet 接口</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BServlet</span> <span class="token keyword">extends</span> <span class="token class-name">GenericServlet</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>\n\n<span class="token comment">// 间接实现 Servlet 接口</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="相关对象概述" tabindex="-1"><a class="header-anchor" href="#相关对象概述" aria-hidden="true">#</a> 相关对象概述</h3><p>在 web 项目运行期间，每个 Servlet 类最多只能有一个对象。它们都是『<strong>单例</strong>』的，它们都是<small>（被动地）</small>由 Tomcat 创建的。</p><p>如果你是直接实现的 Servlet 接口， Tomcat 在调用你的 Servlet 的 <em><strong>.service</strong></em> 方法时，会传入两个参数：</p><ul><li><p><strong>ServletRequest</strong> 其中封装了当前的 HTTP 请求，因此，Servlet 开发人员不必解析和操作原始的 HTTP 数据。</p></li><li><p><strong>ServletResponse</strong> 表示对当前用户的 HTTP 响应，它使得将响应发回给用户变得十分容易。</p></li></ul><p>如果你是间接实现的 Servlet 接口，本质上也是如此。</p><p>ServletRequest 和 ServletResponse 对象是『<strong>多实例</strong>』的。</p><p>对于每一个 WebApp，Tomcat 还会创建一个 <strong>ServletContext</strong> 实例，它也是『<strong>单例</strong>』的。这个对象中中封装了上下文的环境详情。</p><p>每个 Servlet 实例也都有一个封装 Servlet 配置的 <strong>ServletCongfig</strong> ，Servlet 和 ServletConfig 是『<strong>一一对应</strong>』的。</p><p>总结：一个 WebApp 在运行时，有：</p><ul><li><p>1 个 ServletContext 实例</p></li><li><p>N 个 Servlet 实例 <small>（取决于 Servlet 类的数量）</small></p></li><li><p>N 个 ServletConfig 实例 <small>（取决于 Servlet 类的数量）</small></p></li><li><p>任意个 HTTPRequest / HTTPResponse 实例 <small>（取决于用户请求的次数）</small></p></li></ul><h3 id="servlet-接口" tabindex="-1"><a class="header-anchor" href="#servlet-接口" aria-hidden="true">#</a> Servlet 接口</h3><p>Servlet 接口中定义了 5 个方法：</p><table><thead><tr><th style="text-align:center;">#</th><th style="text-align:left;">方法</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">1</td><td style="text-align:left;"><em><strong>.init</strong></em></td><td style="text-align:left;">在 Servlet 第一次被请求时，被 Servlet 容器调用。<br>Tomcat 调用 <em><strong>.init</strong></em> 时，容器会传入一个 <strong>ServletConfig</strong> 对象。</td></tr><tr><td style="text-align:center;">2</td><td style="text-align:left;"><em><strong>.service</strong></em></td><td style="text-align:left;">在每次用户发起请求时，被容器调用。<br>Tomcat 调用 <em><strong>.service</strong></em> 时，容器会传入代表用户请求和相应的 <strong>HTTPRequest</strong> 对象和 <strong>HTTPResponse</strong> 对象。</td></tr><tr><td style="text-align:center;">3</td><td style="text-align:left;"><em><strong>.destroy</strong></em></td><td style="text-align:left;">在销毁 Servlet 时，被 Tomcat 调用。一般发生在卸载 WebApp 或关闭容器时。</td></tr><tr><td style="text-align:center;">4</td><td style="text-align:left;"><em><strong>.getServletInfo</strong></em></td><td style="text-align:left;">这个方法返回一个用于描述 Servlet 的字符串。</td></tr><tr><td style="text-align:center;">5</td><td style="text-align:left;"><em><strong>.getServlet</strong></em></td><td style="text-align:left;">这个方法用于返回由 Servlet 传给 <em><strong>.init</strong></em> 方法的 <strong>ServletConfig</strong> 对象。</td></tr></tbody></table><p><em><strong>.init</strong></em>、<em><strong>.service</strong></em> 和 <em><strong>.destroy</strong></em> 方法是 Servlet 的生命周期方法，另外两个方法是非生命周期方法。</p><h3 id="genericservlet-抽象类" tabindex="-1"><a class="header-anchor" href="#genericservlet-抽象类" aria-hidden="true">#</a> GenericServlet 抽象类</h3><p>GenericServlet 抽象类实现了 Servlet 接口，它为这些方法提供了默认的实现，并新增了一个 <strong>servletConfig</strong> 实例变量，用于在 <strong>init()</strong> 方法中将容器传入的 ServletConfig 对象保存起来。</p><h3 id="httpservlet-类" tabindex="-1"><a class="header-anchor" href="#httpservlet-类" aria-hidden="true">#</a> HTTPServlet 类</h3><p>HTTPServlet 在其父类 GenericServlet 的基础上进一步简化了实现了 Servlet 接口的工作。</p><p>HTTPServlet 有两个特性是 GenericServlet 所不具备的：</p><ol><li><p>不用 Override <strong>service()</strong> 方法，而是 Override <code>doGet()</code> 或者 <code>doPost()</code> 方法。</p></li><li><p>使用 HttpServletRequest/HttpServletResponse，而非 ServletRequest/ServletResponse。</p></li></ol><h3 id="servletrequest-和-httpservletrequest" tabindex="-1"><a class="header-anchor" href="#servletrequest-和-httpservletrequest" aria-hidden="true">#</a> ServletRequest 和 HTTPServletRequest</h3><p>每当 Tomcat 调用你的 Servlet 的 service 方法时，它都会创建一对新的 Request 和 Response 对象传入其中。</p><blockquote><p>Tomcat 何时会调用你的Servlet 的 service 方法？</p></blockquote><p><strong><code>getParameter()</code></strong> 方法是 ServletRequest 中最常用的方法，该方法用于从 Request 对象中获取请求参数的值。</p><p>除了 <code>getParameter()</code> 外，类似用于获取请求参数的值的方法还有：</p><ul><li><p><strong><code>getParameterNames()</code></strong></p></li><li><p><strong><code>getParameterMap()</code></strong></p></li><li><p><strong><code>getParameterValues()</code></strong></p></li></ul><h3 id="httpservletrequest" tabindex="-1"><a class="header-anchor" href="#httpservletrequest" aria-hidden="true">#</a> HttpServletRequest</h3><blockquote><p>由于我们更长使用的是 HTTPServlet 类，而不是 Servlet 接口，因此，我们更多地是接触并使用 HttpServletRequest，而不是 ServletRequest 。</p></blockquote><p>HTTPServletRequest 实现并扩展了 ServletRequest 接口。</p><p>HttpServletRequest 扩展的常用方法有：</p><ul><li><p>Stirng getRequestURL( )</p></li><li><p>Stirng getRequestURI( )</p></li><li><p>Stirng getContextPath( )</p></li><li><p>String getMethod( )</p></li><li><p>Cookie[] getCookies( )</p></li><li><p>HttpSession getSession( )</p></li></ul><h3 id="servletresponse-和-httpservletresponse" tabindex="-1"><a class="header-anchor" href="#servletresponse-和-httpservletresponse" aria-hidden="true">#</a> ServletResponse 和 HTTPServletResponse</h3><p>Tomcat 在调用你的 Servlet 的 <code>service()</code> / <code>doGet()</code> / <code>doPost()</code> 方法时，除了会传入要给 Request 对象，还会传入一个 Response 对象：<strong>ServletResponse</strong> / <strong>HttpServletResponse</strong> 。</p><p>ServletResponse 隐藏了向浏览器发送响应的复杂过程。</p><p>在 ServletResponse 所有的方法中，最常用的方法之一是 <strong><code>getWriter()</code></strong> 方法，它返回一个可以向客户端发送文本的 <strong><code>java.io.PrintWriter</code></strong> 对象。默认情况下，PrintWriter 对象使用 ISO-8859-1 编码。</p><blockquote><p>注意，有另外的一个向浏览器发送数据的方法叫 <code>getOutputStream()</code>，但这个方法是用于发送二进制数据的。因此大多数情况下使用的是 <code>getWriter()</code>，而非 <code>getOutPutStream()</code>。不要调用错了方法。</p></blockquote><p>大多数情况下，你的 Servlet 通过 Tomcat 向客户端发送响应数据应该是一个 HTML 格式的字符串。</p><p>在发送这个 HTML 格式字符串前，应该先调用 <strong><code>setContentType()</code></strong> 方法，设置响应的内容类型，并将 <strong><code>text/html</code></strong> 作为参数传入。<small>这是告诉浏览器，所发送给它的数据内容是 HTML 格式内容。</small></p><p>HTTPServletResponse 实现并扩展了 ServletResponse 接口。它所扩展的常用的方法有：</p><ul><li><p>void addCookie ( Cookie cookie )</p></li><li><p>void sendRedirect ( String location )</p></li></ul><h3 id="servletconfig-和-servletcontext" tabindex="-1"><a class="header-anchor" href="#servletconfig-和-servletcontext" aria-hidden="true">#</a> ServletConfig 和 ServletContext</h3><p>当 Tomcat 创建出你的 Servlet 的单例对象后，它会调用你的 Servlet 的 <code>init()</code> 方法，并传入一个 <strong>ServletConfig</strong> 对象。</p><p><strong>ServletConfig</strong> 对象中封装这由 <strong><code>@WebServlet</code></strong> 注解或者 <strong>部署描述符</strong> 传给 Servlet 的配置信息。</p><blockquote><p>这样传入的每一条信息就叫做 <strong>初始化参数</strong>，一个初始化参数由 key 和 value 组成。</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&quot;HelloServlet&quot;</span><span class="token punctuation">,</span>\n            urlPatterns <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;/hello.do&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n            initParams <span class="token operator">=</span> <span class="token punctuation">{</span>\n                <span class="token annotation punctuation">@WebInitParam</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&quot;author&quot;</span><span class="token punctuation">,</span> value<span class="token operator">=</span><span class="token string">&quot;ben&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n                <span class="token annotation punctuation">@WebInitParam</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&quot;email&quot;</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">&quot;hemiao3000@126.com&quot;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>为了获得 Servlet 的初始化参数，可以从容器传给 Servlet 的 ServletConfig 对象中调用 <strong><code>getInitParameter()</code></strong> 方法来获得。</p><hr><p><strong>ServletContext</strong> 代表着 WebbApp。每个 WebApp 只有一个 <strong>ServletContext</strong> 对象。</p><p>通过调用 <strong>ServletConfig</strong> 实例的 <strong>getServletContext()</strong> 方法，可以获得该 Servlet 所属的 WebApp 的 ServietContext 对象。</p><p>###0. 部署描述符</p><p>在 servlet 3.0 之前，不支持注解的形式来配置 servlet，而是在 <code>web.xml</code> 中使用配置描述符。</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>HelloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">&gt;</span></span>HelloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>author<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>ben<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>email<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>hemiao3000@126.com<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>HelloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/HelloWorld/hello.do<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h2 id="配置-servlet-及其映射" tabindex="-1"><a class="header-anchor" href="#配置-servlet-及其映射" aria-hidden="true">#</a> 配置 Servlet 及其映射</h2><p>不同版本的 Sevlet 的 <em><code>web.xml</code></em> 配置文件的头部信息是不一样的。不建议使用 Servlet 3.0 和 3.0 以下版本，太过于老旧了。建议使用 3.1 和 4.0 版本。</p><blockquote><p>Tomcat 8 支持 Servlet 3.1；Tomcat 9 支持 Servlet 4.0。</p></blockquote><h3 id="老式配置-web-xml-配置" tabindex="-1"><a class="header-anchor" href="#老式配置-web-xml-配置" aria-hidden="true">#</a> 老式配置：web.xml 配置</h3><p>Servlet 3.0 以下版本，配置 Servlet 及其映射关系，只能在 <em><strong>web.xml</strong></em> 中配置。</p><p>语法如下：</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>字符串<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">&gt;</span></span>Servlet 类的完全限定名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>字符串<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>url 匹配规则<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>配置一个 Servlet 需要出现一对 <em><code>servlet</code></em> 和 <em><code>servlet-mapping</code></em>。简而言之，<em><code>servlet</code></em> 和 <em><code>servlet-mapping</code></em> 总是成对出现的。</p><p>配对的 <em><code>servlet</code></em> 和 <em><code>servelt-mapping</code></em> 中的 <em><code>servlet-name</code></em> <strong>必须一样</strong> 。</p><h3 id="新式配置-注解配置" tabindex="-1"><a class="header-anchor" href="#新式配置-注解配置" aria-hidden="true">#</a> 新式配置：注解配置</h3><p>Servlet 3.0 开始支持注解配置。语法如下：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>urlPatterns <span class="token operator">=</span> <span class="token string">&quot;url匹配规则&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XxxServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="url-匹配规则" tabindex="-1"><a class="header-anchor" href="#url-匹配规则" aria-hidden="true">#</a> URL 匹配规则</h3><h4 id="首先需要明确几个容易混淆的规则" tabindex="-1"><a class="header-anchor" href="#首先需要明确几个容易混淆的规则" aria-hidden="true">#</a> 首先需要明确几个容易混淆的规则：</h4><ul><li><p>servlet 容器中的匹配规则既不是简单的通配，也不是正则表达式，而是特定的规则。所以不要用通配符或者正则表达式的匹配规则来看待 servlet 的 <em><code>url-pattern</code></em> 。</p></li><li><p>Servlet 2.5 开始，一个 servlet 可以使用多个 url-pattern 规则，<em><code>&lt;servlet-mapping&gt;</code></em> 标签声明了与该 servlet 相应的匹配规则，每个 <em><code>&lt;url-pattern&gt;</code></em> 标签代表 1 个匹配规则；</p></li><li><p>当 servlet 容器接收到浏览器发起的一个 url 请求后，容器会用 url 减去当前应用的上下文路径，以剩余的字符串作为 servlet 映射，假如 url 是 <em><code>http://localhost:8080/appDemo/index.html</code></em>，其应用上下文是 appDemo，容器会将 <em><code>http://localhost:8080/appDemo</code></em> 去掉，用剩下的 <em><code>/index.html</code></em> 部分拿来做 servlet 的映射匹配</p></li><li><p>url-pattern 映射匹配过程是 <strong>有优先顺序</strong> 的，而且当有一个 servlet 匹配成功以后，就不会去理会剩下的 servlet了。</p></li></ul><h4 id="精确匹配" tabindex="-1"><a class="header-anchor" href="#精确匹配" aria-hidden="true">#</a> 精确匹配</h4><p>精确匹配是优先级最高，最不会产生歧义的匹配。</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/user/users.html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/index.html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/user/addUser.action<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>当在浏览器中输入如下几种 url 时，都会被匹配到该 servlet</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>http://localhost:8080/appDemo/user/users.html\nhttp://localhost:8080/appDemo/index.html\nhttp://localhost:8080/appDemo/user/addUser.action\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p><code>http://localhost:8080/appDemo/user/addUser/</code>（最后有斜杠符）是非法的 url，不会被当作 <code>http://localhost:8081/appDemo/user/addUser</code>（最后没有斜杠府）识别。</p></div><p>另外上述 url 后面可以跟任意的查询条件，都会被匹配，如</p><p><code>http://localhost:8080/appDemo/user/addUser?username=Tom&amp;age=23</code> 会被匹配。</p><h4 id="路径匹配" tabindex="-1"><a class="header-anchor" href="#路径匹配" aria-hidden="true">#</a> 路径匹配</h4><p>路径匹配的优先级仅次于精确匹配。</p><p>以 <code>/</code> 字符开头，并以 <code>/*</code> 结尾的字符串都表示是路径匹配。</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/user/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>上述规则表示 URL 以 <code>/user</code> 开始，后面的路径可以任意。比如下面的 url 都会被匹配。</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>http://localhost:8080/appDemo/user/users.html\nhttp://localhost:8080/appDemo/user/addUser.action\nhttp://localhost:8080/appDemo/user/updateUser.do\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="扩展名匹配" tabindex="-1"><a class="header-anchor" href="#扩展名匹配" aria-hidden="true">#</a> 扩展名匹配</h4><p>也叫 <strong>后缀匹配</strong> 。</p><p>以 <code>*.</code> 开头的字符串被用于扩展名匹配</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>*.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>*.action<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>则任何扩展名为 jsp 或 action 的 url 请求都会匹配，比如下面的 url 都会被匹配</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>http://localhost:8080/appDemo/user/users.jsp\nhttp://localhost:8080/appDemo/toHome.action\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="缺省匹配" tabindex="-1"><a class="header-anchor" href="#缺省匹配" aria-hidden="true">#</a> 缺省匹配</h4><p>缺省匹配也是“兜底”的匹配，一个 url 不符合精确匹配、路径匹配、扩展品匹配的任何一种情况，那么它所触发的 Servlet 就是由缺省匹配决定。</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="注意事项-1-匹配规则不能混用" tabindex="-1"><a class="header-anchor" href="#注意事项-1-匹配规则不能混用" aria-hidden="true">#</a> 注意事项 1：匹配规则不能混用</h4><p>匹配规则不是正则表达式规则，不要想当然的使用通配符：精确匹配、路径匹配、后缀匹配 三者 <strong>不能混用</strong> 。</p><ul><li><p>要么以 <code>/</code> 开头，并以 <code>/*</code> 结尾，表示路径匹配。</p></li><li><p>要么以 <code>*.</code> 开头，表示后缀匹配。</p></li><li><p>要么就是精确匹配。</p></li></ul><p>例如：</p><ul><li><code>&lt;url-pattern&gt;/user/*.action&lt;/url-pattern&gt;</code> 是非法的</li></ul><p>另外：</p><ul><li><code>&lt;url-pattern&gt;/aa/*/bb&lt;/url-pattern&gt;</code> 是合法的。是精确匹配，合法，</li></ul><h4 id="注意事项-2-和-含义并不相同" tabindex="-1"><a class="header-anchor" href="#注意事项-2-和-含义并不相同" aria-hidden="true">#</a> 注意事项 2：<code>/*</code> 和 <code>/</code> 含义并不相同</h4><p><strong><code>/*</code></strong> 属于路径匹配，<strong><code>/</code></strong> 属于 default 匹配。<code>.jsp</code> 的访问<small>（JSP Servlet）</small>的优先级刚好『卡』在它们俩的中间！</p><p><strong><code>/*</code></strong> 会拦截你对 .jsp 页面的访问，<strong><code>/</code></strong> 则不会。很多 404 错误均由此引起。</p><p>除非是真的需要，否则不要使用 <code>/*</code> ！</p><p>除非是真的需要，否则不要使用 <code>/*</code> ！</p><p>除非是真的需要，否则不要使用 <code>/*</code> ！</p><p>从效果上看，<code>/*</code> 和 <code>/</code> 均会拦截对静态资源的访问请求，需要特别注意。</p><h2 id="jsp" tabindex="-1"><a class="header-anchor" href="#jsp" aria-hidden="true">#</a> JSP</h2><p>Servlet 有两个缺点无法克服：</p><ul><li><p>写在 Servlet 中的所有 HTML 标签必须包含 Java 字符串，这使得处理 HTTP 响应报文的工作十分繁琐。</p></li><li><p>所有的文本和 HTML 标记是硬编码的，这导致即使是表现层的微小变化，也需要重新编译代码。</p></li></ul><p>JSP 技术解决了上述两个问题。</p><h3 id="jsp-概述" tabindex="-1"><a class="header-anchor" href="#jsp-概述" aria-hidden="true">#</a> JSP 概述</h3><p>JSP 页面本质上是一个 Servlet。当一个 JSP 页面第一次被请求时，容器（Tomcat）会将 JSP 页面转换成 Servlet 代码，如果转换成功，容器随后编译该 Servlet 类，并实例化该 Servlet 的对象，之后就是 Servlet 代码执行正常流程。</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code>&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;\n&lt;%@ page import=&quot;java.util.Date&quot; %&gt;\n&lt;%@ page import=&quot;java.text.DateFormat&quot; %&gt;\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>\n\n&lt;%\n    DateFormat dateFormat = DateFormat.getDateInstance(DateFormat.LONG);\n    String s = dateFormat.format(new Date());\n    out.println(&quot;Today is &quot; + s);\n%&gt;\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>在 JSP 页面中可以使用 Java 代码来生成动态页面。Java 代码可以出现在 JSP 页面中的任何位置，并通过 <code>&lt;%</code> 和 <code>%&gt;</code> 包括起来。其次可以使用 <code>page</code> 指令的 <code>import</code> 属性导入在 JSP 页面中使用的 Java 类型。</p><p>&lt;% ... %&gt; 块被称为 <strong>scriplet</strong> 。</p><p>在 JSP 页面中，可以使用 HTML 注释，也可以使用 JSP 特有的注释，它以 <code>&lt;%--</code> 开始，以 <code>--%&gt;</code> 结束。</p><h3 id="隐式对象" tabindex="-1"><a class="header-anchor" href="#隐式对象" aria-hidden="true">#</a> 隐式对象</h3><p>对于容器传入给 Servlet 的对象，在 JSP 中，可以通过 <strong>隐式对象</strong> 来访问。</p><table><thead><tr><th style="text-align:left;">JSP隐式对象</th><th style="text-align:left;">类型</th></tr></thead><tbody><tr><td style="text-align:left;">request</td><td style="text-align:left;">HttpServletRequest</td></tr><tr><td style="text-align:left;">response</td><td style="text-align:left;">HttpservletResponse</td></tr><tr><td style="text-align:left;">out</td><td style="text-align:left;">JspWriter</td></tr><tr><td style="text-align:left;">session</td><td style="text-align:left;">HttpSession</td></tr><tr><td style="text-align:left;">application</td><td style="text-align:left;">ServletContext</td></tr><tr><td style="text-align:left;">config</td><td style="text-align:left;">ServletConfig</td></tr><tr><td style="text-align:left;">pageContext</td><td style="text-align:left;">PageContext</td></tr><tr><td style="text-align:left;">page</td><td style="text-align:left;">HttpJspPage</td></tr><tr><td style="text-align:left;">exception</td><td style="text-align:left;">Throwable</td></tr></tbody></table><p>pageContext 它提供了有用的上下文信息，并通过它的方法可以获得用各种 Servlet 对象。如：<code>getRequest()</code>、<code>getResponse()</code>、<code>getServletContext()</code>、<code>getServletConfig()</code> 和 <code>getSession()</code>。</p><p>此外，pageContext 中提供了另一组有趣/有用的方法：用于获取和设置<strong>属性</strong>的方法，即 <code>getAttribute()</code> 和 <code>setAttribute()</code> 方法。属性值可以被存储于4个范围之一：页面（Page）、请求（Request）、会话（Session）和应用程序（Application）。</p><p>隐式对象 <code>out</code> 引用了一个 JspWriter 对象，它相当于 Servlet 中通过 <code>response.getWriter()</code> 方法获得的 PrintWriter 对象。</p><h3 id="指令" tabindex="-1"><a class="header-anchor" href="#指令" aria-hidden="true">#</a> 指令</h3><p>指令是 JSP 语法元素的第一种类型。它们指示 JSP 如何翻译为 Servlet 。JSP 2.2 中定义了多个指令，其中以 page 最为重要。</p><p>page 指令的语法如下 ：</p><pre><code>&lt;%@ page 属性1=&quot;值1&quot; 属性2=&quot;值2&quot; ... %&gt;\n</code></pre><p><strong>@</strong> 和 <strong>page</strong> 之间的空格不是必须的。<strong>page</strong> 指令的常用属性如下：</p><table><thead><tr><th style="text-align:left;">指令</th><th style="text-align:left;">说明</th><th style="text-align:left;">默认值</th></tr></thead><tbody><tr><td style="text-align:left;">import</td><td style="text-align:left;">定义一个或多个页面中将被导入和使用的 java 类型。<br>如果需要同时导入多个 java 类型时，用 “,” 分隔。</td><td style="text-align:left;">默认值：无</td></tr><tr><td style="text-align:left;">session</td><td style="text-align:left;">指定本页面是否参与一个 HTTP 会话，<br>即，当前页面中 session 对象是否可用。</td><td style="text-align:left;">默认值：<code>true</code></td></tr><tr><td style="text-align:left;">pageEncoding</td><td style="text-align:left;">指定本页面的字符编码</td><td style="text-align:left;">默认值是：<code>ISO-8859-1</code></td></tr><tr><td style="text-align:left;">contentType</td><td style="text-align:left;">定义隐式对象 response 的内容内省</td><td style="text-align:left;">默认值：<code>text/html</code></td></tr><tr><td style="text-align:left;">errorPage</td><td style="text-align:left;">定义当发生错误时用来处理错误/展现错误信息的页面</td><td style="text-align:left;">默认值：无</td></tr><tr><td style="text-align:left;">isErrorPage</td><td style="text-align:left;">标识本页面是否是一个处理错误/展现错误信息的页面</td><td style="text-align:left;">默认值：false</td></tr><tr><td style="text-align:left;">isELIgnored</td><td style="text-align:left;">配置是否在本页面中略 EL 表达式</td><td style="text-align:left;">默认值：&quot;fasle&quot;</td></tr><tr><td style="text-align:left;">language</td><td style="text-align:left;">定义本页面中的脚本语言类型。</td><td style="text-align:left;">默认值：java，这也是 JSP 2.2 中唯一的选项。</td></tr></tbody></table><h3 id="脚本元素" tabindex="-1"><a class="header-anchor" href="#脚本元素" aria-hidden="true">#</a> 脚本元素</h3><p>一个脚本程序是一个 Java 代码块，以 <code>&lt;%</code> 开始， 以 <code>%&gt;</code> 结束。</p><blockquote><p>脚本元素是早期的 JSP 解决方案，随着技术的发展，在 JSP 页面中嵌入大段的 Java 代码表现出了很大的局限性，随之而来的替代方案是『<strong>表达式</strong>』和『<strong>动作</strong>』。而再往后，更新、更方便的『<strong>EL 表达式</strong>』又进一步替代了『表达式』和『动作』。</p></blockquote><p>每个 <strong>表达式</strong> 都会被容器执行，并使用隐式对象 out 的打印方法输出结果。</p><p>表达式以 <code>&lt;%=</code> 开始，以 <code>%&gt;</code> 结束。<code>注意</code>，表达式必须无分号结尾。</p><p>在JSP页面中，可以 <strong>声明</strong> 能在JSP页面中使用的变量和方法。声明以 <code>&lt;%!</code> 开始，并以 <code>%&gt;</code> 结束。</p><p>在JSP页面中，一个生命可以出现在任何地方，并且一个页面可以有多个声明。</p><h3 id="动作-了解、自学" tabindex="-1"><a class="header-anchor" href="#动作-了解、自学" aria-hidden="true">#</a> 动作（了解、自学）</h3><p>『<strong>动作</strong>』的目的是简化常见 scriplet 代码，将其“浓缩”成一个标签。它是早期用于分离表示层和业务层的手段，但随着其他技术的法阵（EL表达式），现在很少使用<strong>动作</strong>了。</p><p><code>&lt;jsp:useBean&gt;</code> 本质上是创建一个Java对象，“变量名”为其id属性的值，变量类型为其class属性的值。该变量在当前JSP页面可用。</p><p><code>&lt;jsp:setProperty&gt;</code> 和 <code>&lt;jsp:getProperty&gt;</code> 本质上就是调用已知对象的get/set方法，以为其设置属性值。被设置的变量由其name属性值决定，被设置的属性由其property属性决定。另外，<code>&lt;jsp:setProperty&gt;</code> 还需要靠value属性值来决定设置的值。</p><p><code>&lt;jsp:include page=&quot;&quot;&gt;</code> 动作用来动态地引用另一个资源，“另一个资源”可以是另一个 JSP 页面，或一个静态的 HTML 页面。</p><p>通过其子元素 <code>&lt;jsp:param name=&quot;&quot; value=&quot;&quot;&gt;</code> 可以在引入另一个 JSP 页面时，向其传参。</p><p><code>&lt;jsp:forward page=&quot;&quot;&gt;</code> 将当前页转向其他资源。类似于<code>&lt;jsp:include&gt;</code>，通过其子元素 <code>&lt;jsp:param&gt;</code>可以向转向的页面传参。</p><h2 id="servlet-版本和-web-xml" tabindex="-1"><a class="header-anchor" href="#servlet-版本和-web-xml" aria-hidden="true">#</a> Servlet 版本和 web.xml</h2><h3 id="servlet-的版本和对应的-tomcat" tabindex="-1"><a class="header-anchor" href="#servlet-的版本和对应的-tomcat" aria-hidden="true">#</a> Servlet 的版本和对应的 Tomcat</h3><table><thead><tr><th style="text-align:left;">Tomcat 版本</th><th style="text-align:left;">Servlet 版本</th><th style="text-align:left;">JSP 版本</th><th style="text-align:left;">EL 版本</th><th style="text-align:left;">WebSocket 版本</th></tr></thead><tbody><tr><td style="text-align:left;">9.0.x</td><td style="text-align:left;">4.0</td><td style="text-align:left;">2.4</td><td style="text-align:left;">3.1</td><td style="text-align:left;">1.2</td></tr><tr><td style="text-align:left;">8.0.x</td><td style="text-align:left;">3.1</td><td style="text-align:left;">2.3</td><td style="text-align:left;">3.0</td><td style="text-align:left;">1.1</td></tr><tr><td style="text-align:left;">7.0.x</td><td style="text-align:left;">3.0</td><td style="text-align:left;">2.2</td><td style="text-align:left;">2.2</td><td style="text-align:left;">1.1</td></tr><tr><td style="text-align:left;">6.0.x</td><td style="text-align:left;">2.5</td><td style="text-align:left;">2.1</td><td style="text-align:left;">2.1</td><td style="text-align:left;">N/A</td></tr></tbody></table><p>不同的 Servelt 版本会影响到 <strong><code>web.xml</code></strong> 配置文件中的头部的声明。越高版本的 Servlet 功能越丰富也越强大。</p><h3 id="不同版本的-web-xml-声明" tabindex="-1"><a class="header-anchor" href="#不同版本的-web-xml-声明" aria-hidden="true">#</a> 不同版本的 web.xml 声明</h3><ul><li><p>Servlet 3.1</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">&quot;</span></span>\n  <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">&quot;</span></span>\n  <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://xmlns.jcp.org/xml/ns/javaee\n  http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd<span class="token punctuation">&quot;</span></span>\n  <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>3.1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n      \n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>display-name</span><span class="token punctuation">&gt;</span></span>Servlet 3.1 Web Application<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>display-name</span><span class="token punctuation">&gt;</span></span>  \n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div></li><li><p>Servlet 4.0</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">&quot;</span></span>\n  <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">&quot;</span></span> \n  <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://xmlns.jcp.org/xml/ns/javaee  \n  http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd<span class="token punctuation">&quot;</span></span> \n  <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>4.0<span class="token punctuation">&quot;</span></span> <span class="token punctuation">&gt;</span></span>\n      \n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>display-name</span><span class="token punctuation">&gt;</span></span>Servlet 4.0 Web Application<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>display-name</span><span class="token punctuation">&gt;</span></span>  \n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div></li></ul>',157),e={render:function(s,n){return a}}}}]);