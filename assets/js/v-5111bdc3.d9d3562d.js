"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[5251],{59585:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-5111bdc3",path:"/vue-cli/vue-cli-06-vuex.html",title:"Vuex",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"安装及初识",slug:"安装及初识",children:[]},{level:2,title:"State",slug:"state",children:[]},{level:2,title:"State 辅助函数",slug:"state-辅助函数",children:[]},{level:2,title:"Mutation",slug:"mutation",children:[]},{level:2,title:"Mutation 辅助函数",slug:"mutation-辅助函数",children:[]},{level:2,title:"Getter 和 Getter 辅助函数",slug:"getter-和-getter-辅助函数",children:[{level:3,title:"Getter",slug:"getter",children:[]},{level:3,title:"Getter 辅助函数",slug:"getter-辅助函数",children:[]}]},{level:2,title:"vuex 的多模块写法",slug:"vuex-的多模块写法",children:[]}],filePathRelative:"vue-cli/vue-cli-06-vuex.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},25558:(n,s,a)=>{a.r(s),a.d(s,{default:()=>i});var p=a(66252),t=a(3577);const e=(0,p.uE)('<h1 id="vuex" tabindex="-1"><a class="header-anchor" href="#vuex" aria-hidden="true">#</a> Vuex</h1><p>在简单的应用场景中，组件之间的通信可以采用自定义事件<small>（$emit）</small>方式和属性<small>（props）</small>方式：</p><ul><li><p>父组件向子组件传值，使用 props ；</p></li><li><p>子组件向父组件传值，使用自定义事件。</p></li></ul><p>不过随着应用的复杂程度的增加，这套方案就显得很不方便。</p><p>vuex 可以帮助开发者管理 Vue 应用中的状态<small>（数据）</small>。它提供了一种集中式存储，可以在应用中使用它来存储和维护全局状态<small>（数据）</small>。</p><blockquote><p>一般情况下，只有组件之间共享的数据，才有必要存储到 vuex 中；对于组件中的私有数据，依旧存储在组件自身的 data 中即可。</p></blockquote><h2 id="安装及初识" tabindex="-1"><a class="header-anchor" href="#安装及初识" aria-hidden="true">#</a> 安装及初识</h2><blockquote><p>和 vue-router 一样，vuex 也可以以引入 <strong>.js</strong> 文件的方式在 vue.js 中使用。不过通常情况下，我们还是在 vue-cli 中去使用它。</p></blockquote><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> vuex\n\n<span class="token function">yarn</span> <span class="token function">add</span> vuex\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>或者在使用 vue-cli 创建项目的时候，一开始就选中 vuex</p><blockquote><p>一个常规的 vue 项目，vue + vue-router + vuex 三大件是必不可少的。通常，vue-router 和 vuex 都是在创建项目的过程中就选好的，不太可能是后期再决定添加的。</p></blockquote><p>在 vue 项目中引入 vuex 的依赖包之后，有几处地方与 vuex 有关：</p><ul><li><p>store/index.js</p><p>这个文件起到了 3 个作用：</p><ol><li><p>引入了 Vuex 组件。</p></li><li><p>启用、激活了 Vuex 组件的使用。</p></li><li><p>作为 Vuex 的数据存储仓库。</p></li></ol></li><li><p>main.js</p><p>这个文件起到了 2 个作用：</p><ol><li><p>引入了上面的 store/index.js 。</p></li><li><p>将 store 对象挂载到 Vue 实例中。</p></li></ol></li></ul><h2 id="state" tabindex="-1"><a class="header-anchor" href="#state" aria-hidden="true">#</a> State</h2><p><strong>State</strong> 提供唯一的公共数据源，所有共享的数据都要统一放到 Store 的 State 中进行存储。</p><p><strong>State 就像一个在应用的任何角落都能访问到的庞大对象。</strong></p>',16),o=(0,p.uE)('<li><p>store/index.js</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  state<span class="token operator">:</span> <span class="token punctuation">{</span>\n    count<span class="token operator">:</span> <span class="token number">0</span> <span class="token comment">// 看这里，看这里，看这里</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token operator">...</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></li><li><p>在组件中访问 State 中数据的第 1 种方式：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span><span class="token operator">&lt;</span>全局数据名称<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li>',2),c=(0,p.uE)('<p>通常我们会把它放在计算属性中会更方便：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>computed<span class="token operator">:</span> <span class="token punctuation">{</span>\n  <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>',2),l=(0,p.Uk)("这样，你就可以在页面上直接使用了："),u=(0,p.Uk)(" 。"),r=(0,p.uE)('<h2 id="state-辅助函数" tabindex="-1"><a class="header-anchor" href="#state-辅助函数" aria-hidden="true">#</a> State 辅助函数</h2><p>当引用的 store 的属性不多的时候，像上述的方式那样通过计算属性的方式访问是没有问题的。但是当你要引用大量的 store 的属性时，需要去定义大量的计算属性，很显然，这就很麻烦了。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> mapState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vuex&#39;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>鉴于这种情况，vuex 提供了一个辅助函数 <strong>.mapState</strong> ，可以简化你对大量的 store 的属性的引用：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>computed<span class="token operator">:</span> <span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;count&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;xxx&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;yyy&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;zzz&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>考虑到你的计算属性除了与 state 有关的这些以外，可能还有其它的。因此， <strong>.mapState</strong> 会使用对象扩展符（<code>...</code>）写成这样：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>computed<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token function">val1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token function">val2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token comment">// 这里的 ... 不是省略号，而是对象扩展符。</span>\n    <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;count&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;xxx&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;yyy&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;zzz&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><hr><p>大多数情况下 <strong>.mapState</strong> 方法的参数都是数组。不过有两种情况，是以数组作为参数的 <strong>.mapState</strong> 所解决不了的：</p><ol><li><p>你在 store 中存的是一个对象，而你现在关心的、需要取出的是这个对象的某个属性<small>（而对它的其它属性不感兴趣）</small>。</p></li><li><p>你不想直接使用 store 中所存储的数据的名字，而像换个名字。</p></li></ol><p>对于上述两个问题，你传给 <strong>.mapState</strong> 方法的参数就『<strong>不能是数组，而是对象</strong>』：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token function-variable function">age</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> state<span class="token punctuation">.</span>tom<span class="token punctuation">.</span>age<span class="token punctuation">,</span> <span class="token comment">// 解决情况 1 的问题</span>\n    xxxx<span class="token operator">:</span> <span class="token string">&#39;xxxx&#39;</span> <span class="token comment">// 解决情况 2 的问题</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="mutation" tabindex="-1"><a class="header-anchor" href="#mutation" aria-hidden="true">#</a> Mutation</h2><p><strong>state 对象的值是只读的，不可以直接修改，得使用 mutation</strong> 。</p><p>要使用 Mutation 要做到 2 点：</p><ol><li><p>在 sotre/index.js 中的 <strong>mutations</strong> 中提供一个方法，用以改变 <strong>state</strong> 中的某个属性的值。例如:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>state<span class="token operator">:</span> <span class="token punctuation">{</span>\n   count<span class="token operator">:</span> <span class="token number">0</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>\nmutations<span class="token operator">:</span> <span class="token punctuation">{</span>\n   <span class="token comment">// 第一个参数必定是 state，这是固定的。</span>\n   <span class="token function">setCount</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> newCount</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n       state<span class="token punctuation">.</span>count <span class="token operator">=</span> newCount<span class="token punctuation">;</span>\n   <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div></li><li><p>在需要改变 <code>count</code> 的地方，使用 <strong>store.commit()</strong> 方法来间接调用 <strong>setCount</strong> 方法。例如：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">&#39;setCount&#39;</span><span class="token punctuation">,</span> <span class="token number">9527</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li></ol><h2 id="mutation-辅助函数" tabindex="-1"><a class="header-anchor" href="#mutation-辅助函数" aria-hidden="true">#</a> Mutation 辅助函数</h2><p>与 state 一样，mutation 也有 mapMutaions 方法，用以简化你对 mutation 的使用。</p><p>它有数组写法，例如：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>methods<span class="token operator">:</span> <span class="token punctuation">{</span>\n  <span class="token function">btn_click</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setCount</span><span class="token punctuation">(</span><span class="token number">9527</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token operator">...</span><span class="token function">mapMutations</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;setCount&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="getter-和-getter-辅助函数" tabindex="-1"><a class="header-anchor" href="#getter-和-getter-辅助函数" aria-hidden="true">#</a> Getter 和 Getter 辅助函数</h2><h3 id="getter" tabindex="-1"><a class="header-anchor" href="#getter" aria-hidden="true">#</a> Getter</h3><p>Getter 之于 State，就如同 computed（计算属性）之于 data 。如果，你要将 state 中的数据进行过滤、筛选、处理之后再展示到页面上，那么这些『处理』的逻辑可以写在一个 getter 中，让 getter 直接返回<small>（对 state）</small>加工处理之后的数据。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>state<span class="token operator">:</span> <span class="token punctuation">{</span>\n  messages<span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token operator">...</span> <span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>\ngetters<span class="token operator">:</span> <span class="token punctuation">{</span>\n  <span class="token function-variable function">unreadFrom</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> state<span class="token punctuation">.</span>messages\n                            <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">message</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">!</span>message<span class="token punctuation">.</span>read<span class="token punctuation">)</span>\n                            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">message</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> message<span class="token punctuation">.</span>user<span class="token punctuation">.</span>name<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>现在，在组件中，你可以通过 unreadFrom 这个 getter 即可通过 store.getters.unreadFrom来访问：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>computed<span class="token operator">:</span> <span class="token punctuation">{</span>\n  <span class="token function">unreadFrom</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>getters<span class="token punctuation">.</span>unreadFrom<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>另外，可以通过使用 getter 的第二个参数，实现 getter 之间的访问调用。例如，把上面的 getter 拆分成 2 个更小的 getter：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>getters<span class="token operator">:</span> <span class="token punctuation">{</span>\n  <span class="token function-variable function">unread</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> state<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">message</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token operator">!</span>message<span class="token punctuation">.</span>read<span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">unreadFrom</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> getters</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> getters<span class="token punctuation">.</span>unread<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">message</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span>message<span class="token punctuation">.</span>user<span class="token punctuation">.</span>name<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="getter-辅助函数" tabindex="-1"><a class="header-anchor" href="#getter-辅助函数" aria-hidden="true">#</a> Getter 辅助函数</h3><p>State 和 Mutation 有辅助函数，Getter 自然也有：<strong>mapGetters</strong> 。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>computed<span class="token operator">:</span> <span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;unread&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;unreadFrom&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>等效于下面的写法：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>computed<span class="token operator">:</span> <span class="token punctuation">{</span>\n  <span class="token function">unread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>getters<span class="token punctuation">.</span>unread<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token function">unreadFrom</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>getters<span class="token punctuation">.</span>unreadFrom<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>当然，你想『重命名』就可以采用对象写法：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>computed<span class="token operator">:</span> <span class="token function">mapGettes</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  unreadMessages<span class="token operator">:</span> <span class="token string">&#39;unread&#39;</span><span class="token punctuation">,</span>         <span class="token comment">// unreadMessage() { ... }</span>\n  unreadMessagesFrom<span class="token operator">:</span> <span class="token string">&#39;unreadFrom&#39;</span>  <span class="token comment">// unreadMessagesFrom() { ... }</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="vuex-的多模块写法" tabindex="-1"><a class="header-anchor" href="#vuex-的多模块写法" aria-hidden="true">#</a> vuex 的多模块写法</h2><p>在项目开发过程中，会涉及到多个相对独立的模块。如果将所有的公共数据都直接放啊在 vuex 对象中，那么 store.js 文件的内容会变得又臭又长，不易维护。</p><p>对于这种常见情况，vuex 支持创建多个仓库，即多模块写法。</p><p>你可以在 store 目录下新建 <code>modules</code> 目录，其下创建多个 .js 文件。<small>modules 目录并非必须，只是为了方便代码管理。</small></p><p>每一个 .js 文件的写法，都是曾经 store/index.js 的标准写法。例如：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n    namespaced<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>   <span class="token comment">// 这个开关配置是关键。</span>\n    state<span class="token operator">:</span> <span class="token punctuation">{</span>\n        name<span class="token operator">:</span> <span class="token string">&#39;tommy&#39;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    mutations<span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token function">setName</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> newVal</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            state<span class="token punctuation">.</span>name <span class="token operator">=</span> newVal<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    actions<span class="token operator">:</span> <span class="token punctuation">{</span>\n        \n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    modules<span class="token operator">:</span> <span class="token punctuation">{</span>\n        \n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>然后，你可以在 store/index.js 中引入它们：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> xxx <span class="token keyword">from</span> <span class="token string">&quot;@/store/modules/xxx&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> yyy <span class="token keyword">from</span> <span class="token string">&quot;@/store/modules/yyy&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> zzz <span class="token keyword">from</span> <span class="token string">&quot;@/store/modules/zzz&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    modules<span class="token operator">:</span> <span class="token punctuation">{</span>\n        xxx<span class="token punctuation">,</span> yyy<span class="token punctuation">,</span> zzz\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>未来，你在各个组件中使用 vuex<small>（的 data 和 mutations）</small>时，代码就要调整成如下形式：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>cosnt name <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>xxx<span class="token punctuation">.</span>name<span class="token punctuation">;</span>\n<span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">&#39;xxx/setName&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;tommytommy&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>结合 mapState 和 mapMutations 使用：</strong></p><p>data 结合 mapState 的使用有 2 种写法：</p><ol><li><p>如果你想一口气引入整个 xxx（的所有的数据），那么你 mapState 的就是 xxx：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>computed<span class="token operator">:</span> <span class="token punctuation">{</span>\n  <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;xxx&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>在使用时，你就可以直接使用 <code>this.xxx.name</code> 。</p></li><li><p>如果你想『绕过』xxx（这个变量名）去直接使用其下的各个数据，那么你就要自己去在 mapState 中写函数了：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>computed<span class="token operator">:</span> <span class="token punctuation">{</span>\n  <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token function-variable function">name</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> state<span class="token punctuation">.</span>xxx<span class="token punctuation">.</span>name<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>这样，你在使用时，才能使用 <code>this.name</code> 。</p></li></ol><p>mutations 结合 mapMutations 的使用要自己去在 mapMutaions 中写函数：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>methods<span class="token operator">:</span> <span class="token punctuation">{</span>\n  <span class="token operator">...</span><span class="token function">mapMutations</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token function">setName</span><span class="token punctuation">(</span><span class="token parameter">commit<span class="token punctuation">,</span> newVal</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">&quot;xxx/setName&quot;</span><span class="token punctuation">,</span> newVal<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>在使用时，你不要管第一个参数，直接为第二个参数传参即可：<code>this.setName(&#39;...&#39;)</code> 。</p>',51),i={render:function(n,s){return(0,p.wg)(),(0,p.iD)(p.HY,null,[e,(0,p._)("ul",null,[o,(0,p._)("li",null,[c,(0,p._)("p",null,[l,(0,p._)("code",null,(0,t.zw)(n.count),1),u])])]),r],64)}}}}]);