"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[253],{48814:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-4d0ac310",path:"/utility/3rd/06-Bucket4j.html",title:"Bucket4j",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"基本使用",slug:"基本使用",children:[]},{level:2,title:"阻塞式消费",slug:"阻塞式消费",children:[]},{level:2,title:"探针",slug:"探针",children:[]},{level:2,title:"Refill 和 classic 方法",slug:"refill-和-classic-方法",children:[]},{level:2,title:"初始化令牌数量",slug:"初始化令牌数量",children:[]},{level:2,title:"非贪婪式创建令牌",slug:"非贪婪式创建令牌",children:[]}],filePathRelative:"utility/3rd/06-Bucket4j.md",git:{updatedTime:1629826614e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},21345:(n,s,a)=>{a.r(s),a.d(s,{default:()=>t});const p=(0,a(66252).uE)('<h1 id="bucket4j" tabindex="-1"><a class="header-anchor" href="#bucket4j" aria-hidden="true">#</a> Bucket4j</h1><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.github.vladimir-bukhtoyarov<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>bucket4j-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.10.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>『<strong>令牌桶</strong>』是一种限速算法，与之相对的是『<strong>漏桶</strong>』。</p><p>当进行任务的操作时，消耗一定的令牌，后台以一定的速率生产令牌。在没有令牌的情况下，就阻塞任务，或者拒绝服务。令牌的生产速率，代表了大部分情况下的平均流速。</p><p>桶的作用就是存储令牌，消耗的令牌都是从桶中获取。</p><p>桶的作用是用来限制流速的峰值，当桶中有额外令牌的时候，实际的流速就会高于限定的令牌生产速率。</p><p>为了保证功能的完整，后台必须保证令牌生产，而且是持续服务，不能中断。同时，为了桶功能的正确作用，当桶满了以后，后续生产的令牌会溢出，不会存储到桶内部。</p><h2 id="基本使用" tabindex="-1"><a class="header-anchor" href="#基本使用" aria-hidden="true">#</a> 基本使用</h2><p>最简单的 bucket4j 的使用需要提供、涵盖以下几个概念：</p><ol><li><p>桶对象。</p></li><li><p>带宽。即，每秒提供多少个 token，以允许操作。</p></li><li><p>消费。即，从桶中一次性取走多少个 token 。</p></li></ol><p>代码示例：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// 带宽，也就是每秒能够通过的流量，自动维护令牌生产。</span>\n<span class="token class-name">Bandwidth</span> limit <span class="token operator">=</span> <span class="token class-name">Bandwidth</span><span class="token punctuation">.</span><span class="token function">simple</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 桶。bucket 是我们操作的入口。</span>\n<span class="token class-name">Bucket</span> bucket <span class="token operator">=</span> <span class="token class-name">Bucket4j</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLimit</span><span class="token punctuation">(</span>limit<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 尝试消费 n 个令牌，返回布尔值，表示能够消费或者不能够消费。</span>\nlog<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> bucket<span class="token punctuation">.</span><span class="token function">tryConsume</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">&quot;do something&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;do nothing&quot;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="阻塞式消费" tabindex="-1"><a class="header-anchor" href="#阻塞式消费" aria-hidden="true">#</a> 阻塞式消费</h2><p>在上面的基础案例中，如果 bucket 中的令牌的数量不够你的当前消费时，<strong>.tryConsume</strong> 方法会以失败的方式返回。</p><p>不过，有时我们希望的效果是等待，等到 bucket 中新增令牌后，再消费，返回。</p><p>这种情况下，我们需要使用 <strong>.asScheduler</strong> 方法。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Bandwidth</span> limit <span class="token operator">=</span> <span class="token class-name">Bandwidth</span><span class="token punctuation">.</span><span class="token function">simple</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">Bucket</span> bucket <span class="token operator">=</span> <span class="token class-name">Bucket4j</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLimit</span><span class="token punctuation">(</span>limit<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 看这里，看这里，看这里。</span>\n    bucket<span class="token punctuation">.</span><span class="token function">asScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">consume</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">String</span> time <span class="token operator">=</span> <span class="token class-name">LocalTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span>ISO_LOCAL_TIME<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="探针" tabindex="-1"><a class="header-anchor" href="#探针" aria-hidden="true">#</a> 探针</h2><p>通过创建并使用 <strong>ConsumptionProbe</strong> 对象，除了可以实现正常的消费功能之外，还可以通过它去查询消费后的桶中的“余额”。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// 探针</span>\n<span class="token class-name">Bandwidth</span> limit <span class="token operator">=</span> <span class="token class-name">Bandwidth</span><span class="token punctuation">.</span><span class="token function">simple</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">Bucket</span> bucket <span class="token operator">=</span> <span class="token class-name">Bucket4j</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLimit</span><span class="token punctuation">(</span>limit<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 获取探针，消费令牌</span>\n    <span class="token class-name">ConsumptionProbe</span> probe <span class="token operator">=</span> bucket<span class="token punctuation">.</span><span class="token function">tryConsumeAndReturnRemaining</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// 判断【上一步】是否消费成功</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>probe<span class="token punctuation">.</span><span class="token function">isConsumed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">String</span> time <span class="token operator">=</span> <span class="token class-name">LocalTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span>ISO_TIME<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 查询剩余令牌数量</span>\n        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;{} 剩余令牌: {}&quot;</span><span class="token punctuation">,</span> time<span class="token punctuation">,</span> probe<span class="token punctuation">.</span><span class="token function">getRemainingTokens</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;waiting...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h2 id="refill-和-classic-方法" tabindex="-1"><a class="header-anchor" href="#refill-和-classic-方法" aria-hidden="true">#</a> <strong>Refill</strong> 和 <strong>classic</strong> 方法</h2><p>在之前的例子中，我们使用的都是 <strong>Bandwidth.simple</strong> 方法，实际上，它相当于是 <strong>Bandwidth.classic</strong> 方法的简写。</p><p><strong>Bandwidth.classic</strong> 方法的第二个参数需要一个 <strong>Refill</strong> 对象，而 <strong>Refill</strong> 对象就代表着你对桶的填充规则的设定。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// 桶控制。桶容量初始化时默认是满的</span>\n<span class="token keyword">long</span> bucketSize <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>\n<span class="token class-name">Refill</span> filler <span class="token operator">=</span> <span class="token class-name">Refill</span><span class="token punctuation">.</span><span class="token function">greedy</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">Bandwidth</span> limit <span class="token operator">=</span> <span class="token class-name">Bandwidth</span><span class="token punctuation">.</span><span class="token function">classic</span><span class="token punctuation">(</span>bucketSize<span class="token punctuation">,</span> filler<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name">Bucket</span> bucket <span class="token operator">=</span> <span class="token class-name">Bucket4j</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLimit</span><span class="token punctuation">(</span>limit<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">ConsumptionProbe</span> probe <span class="token operator">=</span> bucket<span class="token punctuation">.</span><span class="token function">tryConsumeAndReturnRemaining</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>probe<span class="token punctuation">.</span><span class="token function">isConsumed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;{}: 剩余令牌 {}&quot;</span><span class="token punctuation">,</span> <span class="token class-name">LocalTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span>ISO_TIME<span class="token punctuation">)</span><span class="token punctuation">,</span> probe<span class="token punctuation">.</span><span class="token function">getRemainingTokens</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;waiting...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h2 id="初始化令牌数量" tabindex="-1"><a class="header-anchor" href="#初始化令牌数量" aria-hidden="true">#</a> 初始化令牌数量</h2><p>『<strong>桶的容量</strong>』和桶中的『<strong>令牌的数量</strong>』是两个概念。</p><p>默认情况下<small>（上述例子中）</small>，在创建桶对象之后，桶都是满的。</p><p>不过，你可能不需要这种情况。这是，你需要在创建桶时使用 <strong>withInitialTokens</strong> 方法指定其中的令牌数量。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">long</span> bucketSize <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>\n<span class="token class-name">Refill</span> filler <span class="token operator">=</span> <span class="token class-name">Refill</span><span class="token punctuation">.</span><span class="token function">greedy</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 看这里，看这里，看这里。</span>\n<span class="token class-name">Bandwidth</span> limit <span class="token operator">=</span> <span class="token class-name">Bandwidth</span><span class="token punctuation">.</span><span class="token function">classic</span><span class="token punctuation">(</span>bucketSize<span class="token punctuation">,</span> filler<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withInitialTokens</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">Bucket</span> bucket <span class="token operator">=</span> <span class="token class-name">Bucket4j</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLimit</span><span class="token punctuation">(</span>limit<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">ConsumptionProbe</span> probe <span class="token operator">=</span> bucket<span class="token punctuation">.</span><span class="token function">tryConsumeAndReturnRemaining</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>probe<span class="token punctuation">.</span><span class="token function">isConsumed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;{}: 剩余令牌 {}&quot;</span><span class="token punctuation">,</span> <span class="token class-name">LocalTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span>ISO_TIME<span class="token punctuation">)</span><span class="token punctuation">,</span> probe<span class="token punctuation">.</span><span class="token function">getRemainingTokens</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;waiting...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="非贪婪式创建令牌" tabindex="-1"><a class="header-anchor" href="#非贪婪式创建令牌" aria-hidden="true">#</a> 非贪婪式创建令牌</h2><p>在之前的示例中，令牌的创建方式都是贪婪式的。所谓贪婪式，指的就是在每一次的添加令牌的周期中，都是在周期的一开始就向桶中添加了全部的令牌。</p><p>不过有时，你可能需要这个添加过程更均匀一些，这种情况下，你就需要使用 <strong>Refill.intervally</strong> 方法。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">long</span> bucketSize <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>\n<span class="token comment">// Refill filler = Refill.greedy(10, Duration.ofSeconds(1));</span>\n<span class="token class-name">Refill</span> filler <span class="token operator">=</span> <span class="token class-name">Refill</span><span class="token punctuation">.</span><span class="token function">intervally</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name">Bandwidth</span> limit <span class="token operator">=</span> <span class="token class-name">Bandwidth</span><span class="token punctuation">.</span><span class="token function">classic</span><span class="token punctuation">(</span>bucketSize<span class="token punctuation">,</span> filler<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withInitialTokens</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">Bucket</span> bucket <span class="token operator">=</span> <span class="token class-name">Bucket4j</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLimit</span><span class="token punctuation">(</span>limit<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 获取探针</span>\n    <span class="token class-name">ConsumptionProbe</span> probe <span class="token operator">=</span> bucket<span class="token punctuation">.</span><span class="token function">tryConsumeAndReturnRemaining</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// 判断是否能消耗</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>probe<span class="token punctuation">.</span><span class="token function">isConsumed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">String</span> time <span class="token operator">=</span> <span class="token class-name">LocalTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span>ISO_TIME<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// 查询剩余令牌数量</span>\n        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;{} 剩余令牌: {}&quot;</span><span class="token punctuation">,</span> time<span class="token punctuation">,</span> probe<span class="token punctuation">.</span><span class="token function">getRemainingTokens</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div>',33),t={render:function(n,s){return p}}}}]);