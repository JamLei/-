"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[3352],{35248:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-fe13abc2",path:"/shiro/05-Shiro-JWT.html",title:"Shiro 整合 JWT 实现无状态 Web 服务",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"Subject 工厂（非必须）",slug:"subject-工厂-非必须",children:[]},{level:2,title:"JwtAuthenticationFilter",slug:"jwtauthenticationfilter",children:[]},{level:2,title:"JwtToken",slug:"jwttoken",children:[]},{level:2,title:"JwtRealm",slug:"jwtrealm",children:[]},{level:2,title:"基于 starter 整合 JWT",slug:"基于-starter-整合-jwt",children:[]}],filePathRelative:"shiro/05-Shiro-JWT.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},38441:(n,s,a)=>{a.r(s),a.d(s,{default:()=>e});const p=(0,a(66252).uE)('<h1 id="shiro-整合-jwt-实现无状态-web-服务" tabindex="-1"><a class="header-anchor" href="#shiro-整合-jwt-实现无状态-web-服务" aria-hidden="true">#</a> Shiro 整合 JWT 实现无状态 Web 服务</h1><h2 id="subject-工厂-非必须" tabindex="-1"><a class="header-anchor" href="#subject-工厂-非必须" aria-hidden="true">#</a> Subject 工厂（非必须）</h2><p>无状态的 Web 服务（RESTful），意味着我们不会使用 Shiro 的 Session 功能，更用不上 SessionDAO 。因此，严谨的做法可以在 Security Manager 的配置中将这两个功能关闭掉。</p><blockquote><p>当然，你不关闭也可以，不使用它们即可。</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JwtDefaultSubjectFactory</span> <span class="token keyword">extends</span> <span class="token class-name">DefaultWebSubjectFactory</span> <span class="token punctuation">{</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token class-name">Subject</span> <span class="token function">createSubject</span><span class="token punctuation">(</span><span class="token class-name">SubjectContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 不创建 session</span>\n        context<span class="token punctuation">.</span><span class="token function">setSessionCreationEnabled</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">createSubject</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>通过调用 <code>context.setSessionCreationEnabled(false)</code> 表示不创建会话；如果之后调用 <code>subject.getSession()</code> 将抛出 <code>DisabledSessionException</code> 异常。</p><blockquote><p>在之前的『页面跳转式』的项目中，Shiro 将 Subject 的信息存入了 Session 中，并且每个 Subject 是有『状态』的概念的<small>（已经登录、未登录）</small>。</p></blockquote><h2 id="jwtauthenticationfilter" tabindex="-1"><a class="header-anchor" href="#jwtauthenticationfilter" aria-hidden="true">#</a> JwtAuthenticationFilter</h2><p>类似于 FormAuthenticationFilter，但是根据当前请求上下文信息每次请求时都要登录的认证过滤器。</p><p>AccessControlFilter 有两个方法：<strong>isAccessAllowed</strong> 方法和 <strong>onAccessDenied</strong> 方法：</p><ul><li><p>如果 <code>isAccessAllowed()</code> 返回 true ，Shiro 将放过请求，允许访问 URL<small>（这时 Shiro 不考虑 onAccessDenied() 方法）</small>，接下来流程就会走到 Controller ；</p></li><li><p>如果 <code>isAccessAllowed()</code> 返回 false，那么 Shiro 再来考虑 <code>onAccessDenied()</code> 方法。<code>onAccessDenied()</code> 方法返回 true，则表示请求继续，返回 fase，则表示认证不通过，需要返回给用户登陆页面<small>（或表示错误信息的 JSON 信息）</small>。</p></li></ul><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Slf4j</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JwtAuthenticationFilter</span> <span class="token keyword">extends</span> <span class="token class-name">AccessControlFilter</span> <span class="token punctuation">{</span>\n\n    <span class="token doc-comment comment">/**\n     * 该方法决定 JwtFilter 是否放行请求。\n     * 该方法返回 true，那么当前请求将走向 Controller 。\n     * 该方法返回 false，那么当前请求有可能走向下一个 Filter，也有可能就此打回。这取决于下面的 onAccessDenied 方法的返回值。\n     */</span>\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">isAccessAllowed</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> mappedValue<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Subject</span> subject <span class="token operator">=</span> <span class="token function">getSubject</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token class-name">HttpServletRequest</span> httpServletRequest <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">)</span> request<span class="token punctuation">;</span>\n        <span class="token class-name">String</span> jwt <span class="token operator">=</span> httpServletRequest<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">&quot;x-jwt-token&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;jwt: {}&quot;</span><span class="token punctuation">,</span> jwt<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>jwt<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;进入 onAccessDenied 方法&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token class-name">JwtToken</span> token <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JwtToken</span><span class="token punctuation">(</span>jwt<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">try</span> <span class="token punctuation">{</span>\n            subject<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;jwt 合法，进入Controller。&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;进入 onAccessDenied 方法&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token doc-comment comment">/**\n     * 该方法决定当前请求在不符合当前 Filter 的同行标准的前提下，接下来是走向下一个 Filter ，还是就此打回。\n     * 该方法返回 true，那么当前请求将走向下一个 Filter 。\n     * 该方法返回 false，那么当前请求将不再触发下一个 Filter 的执行，就此打回。\n     */</span>\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">onAccessDenied</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 当前请求到此为止了：控制跳转显示登录页面，或显示 JSON 串</span>\n        <span class="token function">onAuthenticatedFailure</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token doc-comment comment">/**\n     * 私有方法，onAccessDenied 返回 false 时调用，控制重定向登录页面，或返回 JSON 字符串。\n     */</span>\n    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">onAuthenticatedFailure</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n\n        <span class="token comment">// 跳转页面</span>\n        <span class="token function">saveRequestAndRedirectToLogin</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">/*\n        // 返回 JSON 串\n        HttpServletResponse httpResponse = (HttpServletResponse) response;\n        httpResponse.setStatus(HttpServletResponse.SC_UNAUTHORIZED);\n        httpResponse.getWriter().write(&quot;unlogin&quot;);\n        */</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br></div></div><p>和客户端约定好，要求客户端发送的请求，在请求头中传递 jwt-token-string ，然后生成 JwtToken 对象，再触发 Security Manager 进行 subject 的认证。</p><h2 id="jwttoken" tabindex="-1"><a class="header-anchor" href="#jwttoken" aria-hidden="true">#</a> JwtToken</h2><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JwtToken</span> <span class="token keyword">implements</span> <span class="token class-name">AuthenticationToken</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">private</span> <span class="token class-name">String</span> token<span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">JwtToken</span> <span class="token punctuation">(</span><span class="token class-name">String</span>  token<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">this</span><span class="token punctuation">.</span>token <span class="token operator">=</span> token<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> token<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getCredentials</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> token<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>用户身份和凭证都是 token 。</p><h2 id="jwtrealm" tabindex="-1"><a class="header-anchor" href="#jwtrealm" aria-hidden="true">#</a> JwtRealm</h2><p>用于认证的 Realm 。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JwtRealm</span> <span class="token keyword">extends</span> <span class="token class-name">AuthorizingRealm</span> <span class="token punctuation">{</span>\n\n    <span class="token annotation punctuation">@Autowired</span>\n    <span class="token keyword">private</span> <span class="token class-name">JwtUtil</span> jwtUtil<span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">supports</span><span class="token punctuation">(</span><span class="token class-name">AuthenticationToken</span> token<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> token <span class="token keyword">instanceof</span> <span class="token class-name">JwtToken</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token doc-comment comment">/**\n     * 认证\n     */</span>\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">protected</span> <span class="token class-name">AuthenticationInfo</span> <span class="token function">doGetAuthenticationInfo</span><span class="token punctuation">(</span><span class="token class-name">AuthenticationToken</span> token<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">AuthenticationException</span> <span class="token punctuation">{</span>\n\n        <span class="token class-name">JwtToken</span> jwtToken <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">JwtToken</span><span class="token punctuation">)</span> token<span class="token punctuation">;</span>\n\n        <span class="token class-name">String</span> jwt <span class="token operator">=</span> jwtToken<span class="token punctuation">.</span><span class="token function">getJwt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;待校验的 jwt 为 {}&quot;</span><span class="token punctuation">,</span> jwt<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token class-name">SimpleAuthenticationInfo</span> info <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">try</span> <span class="token punctuation">{</span>\n            jwtUtil<span class="token punctuation">.</span><span class="token function">isVerify</span><span class="token punctuation">(</span>jwt<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;realm 认为 jwt 合法&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            info <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleAuthenticationInfo</span><span class="token punctuation">(</span>jwt<span class="token punctuation">,</span> jwt<span class="token punctuation">,</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">return</span> info<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;relm 认为 jwt 非法&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">protected</span> <span class="token class-name">AuthorizationInfo</span> <span class="token function">doGetAuthorizationInfo</span><span class="token punctuation">(</span><span class="token class-name">PrincipalCollection</span> principals<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 逻辑上，doGetAuthorizationInfo 方法与 JwtAuthenticationFilter 的工作无关。</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br></div></div><h2 id="基于-starter-整合-jwt" tabindex="-1"><a class="header-anchor" href="#基于-starter-整合-jwt" aria-hidden="true">#</a> 基于 starter 整合 JWT</h2><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ShiroConfig</span> <span class="token punctuation">{</span>\n\n    <span class="token annotation punctuation">@Bean</span>\n    <span class="token keyword">public</span> <span class="token class-name">JwtRealm</span> <span class="token function">realm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">JwtRealm</span> realm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JwtRealm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> realm<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token doc-comment comment">/**\n     * 由于使用自定义 Realm，所以要显式配置 SecurityManager 。\n     */</span>\n    <span class="token annotation punctuation">@Bean</span>\n    <span class="token keyword">public</span> <span class="token class-name">DefaultWebSecurityManager</span> <span class="token function">securityManager</span><span class="token punctuation">(</span><span class="token class-name">JwtRealm</span> realm<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">DefaultWebSecurityManager</span> manager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultWebSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        manager<span class="token punctuation">.</span><span class="token function">setRealm</span><span class="token punctuation">(</span>realm<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token doc-comment comment">/**\n         * 非必须。以下配置与 Shiro 整合 JWT 的核心功能无关。\n         */</span>\n        <span class="token comment">// 关闭 ShiroDAO 功能。</span>\n        <span class="token class-name">DefaultSubjectDAO</span> subjectDAO <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultSubjectDAO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">DefaultSessionStorageEvaluator</span> defaultSessionStorageEvaluator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultSessionStorageEvaluator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 不需要将 Shiro Session 中的东西存到任何地方（包括 Http Session 中）</span>\n        defaultSessionStorageEvaluator<span class="token punctuation">.</span><span class="token function">setSessionStorageEnabled</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        subjectDAO<span class="token punctuation">.</span><span class="token function">setSessionStorageEvaluator</span><span class="token punctuation">(</span>defaultSessionStorageEvaluator<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        manager<span class="token punctuation">.</span><span class="token function">setSubjectDAO</span><span class="token punctuation">(</span>subjectDAO<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 禁止 Subject 的 getSession 方法</span>\n<span class="token comment">//        manager.setSubjectFactory(new JwtDefaultSubjectFactory());</span>\n\n        <span class="token keyword">return</span> manager<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n\n    <span class="token doc-comment comment">/**\n     * 由于需要自定义 filter chain，所以相关配置要配置在 ShiroFilterFactoryBean 中，而不是『页面跳转』式项目那样的 ShiroFilterChainDefinition 里。\n     */</span>\n    <span class="token annotation punctuation">@Bean</span>\n    <span class="token keyword">public</span> <span class="token class-name">ShiroFilterFactoryBean</span> <span class="token function">shiroFilterFactoryBean</span><span class="token punctuation">(</span><span class="token class-name">DefaultWebSecurityManager</span> securityManager<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">ShiroFilterFactoryBean</span> shiroFilterFactoryBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ShiroFilterFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        shiroFilterFactoryBean<span class="token punctuation">.</span><span class="token function">setSecurityManager</span><span class="token punctuation">(</span>securityManager<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        shiroFilterFactoryBean<span class="token punctuation">.</span><span class="token function">setLoginUrl</span><span class="token punctuation">(</span><span class="token string">&quot;/login-page&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 未授权界面;</span>\n        shiroFilterFactoryBean<span class="token punctuation">.</span><span class="token function">setUnauthorizedUrl</span><span class="token punctuation">(</span><span class="token string">&quot;/403-page&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">/*\n         * 定义Filter链\n         */</span>\n        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Filter</span><span class="token punctuation">&gt;</span></span> filters <span class="token operator">=</span> shiroFilterFactoryBean<span class="token punctuation">.</span><span class="token function">getFilters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        filters<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;anon&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">AnonymousFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        filters<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;jwt&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">JwtFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 这里只能 new ，不能 @Autowired</span>\n        shiroFilterFactoryBean<span class="token punctuation">.</span><span class="token function">setFilters</span><span class="token punctuation">(</span>filters<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">/*\n         * 拦截规则\n         */</span>\n        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> filterChainDefinitionMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        filterChainDefinitionMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;/login-page&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;anon&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        filterChainDefinitionMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;/login&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;anon&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 认证靠 jwt-filter，鉴权靠注解。</span>\n        filterChainDefinitionMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;/**&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;jwt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        shiroFilterFactoryBean<span class="token punctuation">.</span><span class="token function">setFilterChainDefinitionMap</span><span class="token punctuation">(</span>filterChainDefinitionMap<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">return</span> shiroFilterFactoryBean<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token doc-comment comment">/**\n     * 但是 ShiroFilterChainDefinition 的配置仍然需要。\n     */</span>\n    <span class="token annotation punctuation">@Bean</span>\n    <span class="token keyword">public</span> <span class="token class-name">ShiroFilterChainDefinition</span> <span class="token function">shiroFilterChainDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DefaultShiroFilterChainDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n<span class="token comment">//    @Bean</span>\n<span class="token comment">//    @DependsOn(&quot;lifecycleBeanPostProcessor&quot;)</span>\n<span class="token comment">//    public DefaultAdvisorAutoProxyCreator getDefaultAdvisorAutoProxyCreator() {</span>\n<span class="token comment">//        DefaultAdvisorAutoProxyCreator defaultAdvisorAutoProxyCreator = new DefaultAdvisorAutoProxyCreator();</span>\n<span class="token comment">//         强制指定注解的底层实现使用 cglib 方案</span>\n<span class="token comment">//        defaultAdvisorAutoProxyCreator.setProxyTargetClass(true);</span>\n<span class="token comment">//        return defaultAdvisorAutoProxyCreator;</span>\n<span class="token comment">//    }</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br></div></div>',21),e={render:function(n,s){return p}}}}]);