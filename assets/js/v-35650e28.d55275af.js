"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[3849],{27330:(n,a,s)=>{s.r(a),s.d(a,{data:()=>e});const e={key:"v-35650e28",path:"/interview-questions/03-%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6.html",title:"Java Collection Framework 面试题",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"1. Collection 部分",slug:"_1-collection-部分",children:[{level:3,title:"1.1 List 和 Set 有什么区别？",slug:"_1-1-list-和-set-有什么区别",children:[]},{level:3,title:"1.2 哪种集合可以实现自动排序？",slug:"_1-2-哪种集合可以实现自动排序",children:[]},{level:3,title:"1.3 Vector 和 ArrayList 初始化大小和容量扩充有什么区别？",slug:"_1-3-vector-和-arraylist-初始化大小和容量扩充有什么区别",children:[]},{level:3,title:"1.4 Vector、ArrayList、LinkedList 有什么区别？",slug:"_1-4-vector、arraylist、linkedlist-有什么区别",children:[]},{level:3,title:"1.5 Vector、ArrayList、LinkedList 使用场景有什么区别？",slug:"_1-5-vector、arraylist、linkedlist-使用场景有什么区别",children:[]},{level:3,title:"1.6 Collection 和 Collections 有什么区别？",slug:"_1-6-collection-和-collections-有什么区别",children:[]},{level:3,title:"1.7 以下选项没有继承 Collection 接口的是？",slug:"_1-7-以下选项没有继承-collection-接口的是",children:[]},{level:3,title:"1.8 LinkedHashSet 如何保证有序和唯一性？",slug:"_1-8-linkedhashset-如何保证有序和唯一性",children:[]},{level:3,title:"1.9 HashSet 是如何保证数据不可重复的？",slug:"_1-9-hashset-是如何保证数据不可重复的",children:[]},{level:3,title:"1.10 执行以下程序会输出什么结果？为什么？",slug:"_1-10-执行以下程序会输出什么结果-为什么",children:[]},{level:3,title:"1.11 如何用程序实现后进先出的栈结构？",slug:"_1-11-如何用程序实现后进先出的栈结构",children:[]},{level:3,title:"1.12 LinkedList 中的 peek() 和 poll() 有什么区别？",slug:"_1-12-linkedlist-中的-peek-和-poll-有什么区别",children:[]},{level:3,title:"1.13 Comparable 和 Comparator 有哪些区别？",slug:"_1-13-comparable-和-comparator-有哪些区别",children:[]}]},{level:2,title:"2. Map 部分",slug:"_2-map-部分",children:[{level:3,title:"2.1 Map 常见实现类有哪些？",slug:"_2-1-map-常见实现类有哪些",children:[]},{level:3,title:"2.2 使用 HashMap 可能会遇到什么问题？如何避免？",slug:"_2-2-使用-hashmap-可能会遇到什么问题-如何避免",children:[]},{level:3,title:"2.3 以下说法正确的是？",slug:"_2-3-以下说法正确的是",children:[]},{level:3,title:"2.4 TreeMap 怎么实现根据 value 值倒序？",slug:"_2-4-treemap-怎么实现根据-value-值倒序",children:[]},{level:3,title:"2.5 以下哪个 Set 实现了自动排序？",slug:"_2-5-以下哪个-set-实现了自动排序",children:[]},{level:3,title:"2.6 以下程序运行的结果是什么？",slug:"_2-6-以下程序运行的结果是什么",children:[]},{level:3,title:"2.7 HashMap 有哪些重要的参数？用途分别是什么？",slug:"_2-7-hashmap-有哪些重要的参数-用途分别是什么",children:[]},{level:3,title:"2.8 HashMap 和 Hashtable 有什么区别？",slug:"_2-8-hashmap-和-hashtable-有什么区别",children:[]},{level:3,title:"2.9 什么是哈希冲突？",slug:"_2-9-什么是哈希冲突",children:[]},{level:3,title:"2.10 有哪些方法可以解决哈希冲突？",slug:"_2-10-有哪些方法可以解决哈希冲突",children:[]},{level:3,title:"2.11 HashMap 的扩容为什么是 2^n ？",slug:"_2-11-hashmap-的扩容为什么是-2-n",children:[]},{level:3,title:"2.12 有哈希冲突的情况下 HashMap 如何取值？",slug:"_2-12-有哈希冲突的情况下-hashmap-如何取值",children:[]},{level:3,title:"2.13 以下程序会输出什么结果？",slug:"_2-13-以下程序会输出什么结果",children:[]},{level:3,title:"2.14 为什么重写 equals() 时一定要重写 hashCode()？",slug:"_2-14-为什么重写-equals-时一定要重写-hashcode",children:[]},{level:3,title:"2.15 HashMap 在 JDK 7 多线程中使用会导致什么问题？",slug:"_2-15-hashmap-在-jdk-7-多线程中使用会导致什么问题",children:[]},{level:3,title:"2.16 HashMap 在 JDK 7 和 JDK 8 中有哪些不同？",slug:"_2-16-hashmap-在-jdk-7-和-jdk-8-中有哪些不同",children:[]}]},{level:2,title:"3. Queue",slug:"_3-queue",children:[{level:3,title:"3.1 ArrayBlockingQueue 和 LinkedBlockingQueue 的区别是什么？",slug:"_3-1-arrayblockingqueue-和-linkedblockingqueue-的区别是什么",children:[]},{level:3,title:"3.2 LinkedList 中 add() 和 offer() 有什么关系？",slug:"_3-2-linkedlist-中-add-和-offer-有什么关系",children:[]},{level:3,title:"3.3 Queue 和 Deque 有什么区别？",slug:"_3-3-queue-和-deque-有什么区别",children:[]},{level:3,title:"3.4 LinkedList 属于一般队列还是双端队列？",slug:"_3-4-linkedlist-属于一般队列还是双端队列",children:[]},{level:3,title:"3.5 以下说法错误的是？",slug:"_3-5-以下说法错误的是",children:[]},{level:3,title:"3.6 关于 ArrayBlockingQueue 说法不正确的是？",slug:"_3-6-关于-arrayblockingqueue-说法不正确的是",children:[]},{level:3,title:"3.7 以下程序执行的结果是什么？",slug:"_3-7-以下程序执行的结果是什么",children:[]},{level:3,title:"3.8 Java 中常见的阻塞队列有哪些？",slug:"_3-8-java-中常见的阻塞队列有哪些",children:[]},{level:3,title:"3.9 有界队列和无界队列有哪些区别？",slug:"_3-9-有界队列和无界队列有哪些区别",children:[]},{level:3,title:"3.10 如何手动实现一个延迟消息队列？",slug:"_3-10-如何手动实现一个延迟消息队列",children:[]}]}],filePathRelative:"interview-questions/03-集合框架.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},88111:(n,a,s)=>{s.r(a),s.d(a,{default:()=>t});const e=(0,s(66252).uE)('<h1 id="java-collection-framework-面试题" tabindex="-1"><a class="header-anchor" href="#java-collection-framework-面试题" aria-hidden="true">#</a> Java Collection Framework 面试题</h1><h2 id="_1-collection-部分" tabindex="-1"><a class="header-anchor" href="#_1-collection-部分" aria-hidden="true">#</a> 1. Collection 部分</h2><h3 id="_1-1-list-和-set-有什么区别" tabindex="-1"><a class="header-anchor" href="#_1-1-list-和-set-有什么区别" aria-hidden="true">#</a> 1.1 List 和 Set 有什么区别？</h3><p>答：</p><p>List 接口和 Set 接口它们都是 Collection 接口的子接口，它们的区别分为以下几个方面：</p><ol><li><p><strong>从历史角度看</strong>：List 比 Set 要早。List 出现在 JDK <code>1.0</code> ，而 Set 出现在 JDK <code>1.2</code> 。</p></li><li><p><strong>从底层实现看</strong>：List 的常用实现方式是动态数组和链表，Set 的常用实现方式都是利用 Map 实现的。这个根本原因导致了以下现象：</p><ul><li>List 允许有重复元素，而 Set 不允许有重复元素。</li><li>List 允许有多个 null 值，而 Set 只允许有一个 null 值。</li><li>List 可以保证元素的存储顺序，Set 无法保证元素的存储顺序。</li></ul></li></ol><h3 id="_1-2-哪种集合可以实现自动排序" tabindex="-1"><a class="header-anchor" href="#_1-2-哪种集合可以实现自动排序" aria-hidden="true">#</a> 1.2 哪种集合可以实现自动排序？</h3><p>答：TreeSet 。TreeSet 除了实现了 Set 接口之外，还实现了 SortedSet ，而 SortedSet 接口要求它的实现类必须有自动排序能力。TreeSet 自然必须有这种能力。</p><h3 id="_1-3-vector-和-arraylist-初始化大小和容量扩充有什么区别" tabindex="-1"><a class="header-anchor" href="#_1-3-vector-和-arraylist-初始化大小和容量扩充有什么区别" aria-hidden="true">#</a> 1.3 Vector 和 ArrayList 初始化大小和容量扩充有什么区别？</h3><blockquote><p>Vector 和 ArrayList 初始化大小和容量扩充区别，并非它们的核心区别。</p></blockquote><p>答：</p><ul><li>初始化容量相同。默认都是 10 。</li><li>容量扩充不同。Vector 是增加 1 倍；ArrayList 是增加 0.5 倍。</li></ul><h3 id="_1-4-vector、arraylist、linkedlist-有什么区别" tabindex="-1"><a class="header-anchor" href="#_1-4-vector、arraylist、linkedlist-有什么区别" aria-hidden="true">#</a> 1.4 Vector、ArrayList、LinkedList 有什么区别？</h3><p>答：这三者都是 List 的子类，它们的差异如下：</p><ol><li><p><strong>从历史角度看</strong>：Vector 出现最早，JDK <code>1.0</code> 就有了；ArrayList 和 LinkedList 是 JDK <code>1.2</code> 出现的。</p></li><li><p><strong>从线程安全角度看</strong>：Vector 是线程安全的；ArrayList 和 LinkedList 是线程不安全的。</p></li><li><p><strong>从底层接口看</strong>：Vector 是基于动态数组的；ArrayList 也是基于动态数组的；LinkedList 是基于双向链表的。这也导致了：</p><ol><li><p>Vector 和 ArrayList 内存总开销更小，但需要是连续内存空间；LinkedList 内存总开销更大，但可以利用零碎的内存空间，无需连续内存空间。</p></li><li><p>Vector 和 ArrayList 访问更快；LinkedList 增删更快。</p></li></ol></li><li><p>其它细节上的区别：</p><ul><li>Vector 扩容是增加 1 倍；ArrayList 扩容是增加 0.5 倍；LinkedList 无需考虑扩容问题。</li></ul></li></ol><h3 id="_1-5-vector、arraylist、linkedlist-使用场景有什么区别" tabindex="-1"><a class="header-anchor" href="#_1-5-vector、arraylist、linkedlist-使用场景有什么区别" aria-hidden="true">#</a> 1.5 Vector、ArrayList、LinkedList 使用场景有什么区别？</h3><p>答：</p><ol><li><p>因为『线程安全』方面的差异导致使用场景的不同：Vector 可以直接用于多线程场景，因为它是线程安全的；ArrayList 和 LinkedList 在多线程场景下则需要我们自己去处理线程安全问题。</p></li><li><p>因为『底层实现』方面的差异导致使用场景的不同：Vector 和 ArrayList 适合随机访问场景，通过下标索引<small>（位置）</small>直接访问数据；而 LinkedList 则使用频繁增删的场景。</p></li></ol><h3 id="_1-6-collection-和-collections-有什么区别" tabindex="-1"><a class="header-anchor" href="#_1-6-collection-和-collections-有什么区别" aria-hidden="true">#</a> 1.6 Collection 和 Collections 有什么区别？</h3><p>答：</p><p>常见的工具类的命名风格有 2 种：</p><ol><li><p>以 <code>util</code> 或 <code>utils</code> 结尾；</p></li><li><p>以 <code>s</code> 结尾。</p></li></ol><p>Collection 是接口，它是 List、Set 和 Queue 接口的父接口，是 Java 集合框架的 2 个顶层接口之一。</p><p>Collections 是一个服务于 Collection 的工具类，它提供了一系列静态方法帮我们简化对 Collection<small>（及其子接口的实现类）</small>的操作。例如：Collections.sort() 排序。</p><h3 id="_1-7-以下选项没有继承-collection-接口的是" tabindex="-1"><a class="header-anchor" href="#_1-7-以下选项没有继承-collection-接口的是" aria-hidden="true">#</a> 1.7 以下选项没有继承 Collection 接口的是？</h3><p>A：List<br> B：Set<br> C：Map<br> D：HashSet</p><p>答：C</p><p>从『辈分』上讲，Map 和 Collection 是平级的同辈。</p><h3 id="_1-8-linkedhashset-如何保证有序和唯一性" tabindex="-1"><a class="header-anchor" href="#_1-8-linkedhashset-如何保证有序和唯一性" aria-hidden="true">#</a> 1.8 LinkedHashSet 如何保证有序和唯一性？</h3><p>答：LinkedHashSet 底层最终使用到了 LinkedHashMap，所以，这个问题的本质在于：<strong>LinkedHashMap 如何保证 key 的有序和唯一性？</strong></p><ul><li><p>唯一性：存入到 LinkedHashSet 中的的值最终会作为 key 值<small>（value 值为 null）</small>，存入到 LinkedHashMap 中，而 Map 的 key 要求唯一，因此 LinkedHashSet 中的值也就是唯一的。</p></li><li><p>有序性：LinkedHashMap 会用一个双链表按插入顺序，将所有键值对<small>（的键）</small>『串』起来。这样就能够按加入顺序来依次访问各个键值对。因此，LinkedHashMap 自然也就是有序的。</p></li></ul><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>map <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">LinkedHashSet</span> <span class="token operator">?</span>\n      \t<span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>capacity<span class="token punctuation">,</span> loadFactor<span class="token punctuation">)</span> <span class="token operator">:</span>\n      \t<span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>capacity<span class="token punctuation">,</span> loadFactor<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_1-9-hashset-是如何保证数据不可重复的" tabindex="-1"><a class="header-anchor" href="#_1-9-hashset-是如何保证数据不可重复的" aria-hidden="true">#</a> 1.9 HashSet 是如何保证数据不可重复的？</h3><p>答：</p><p>HashSet 底层最终使用到了 HashMap ，所以，这个问题的本质在于：HashMap 是如何保证数据不重复的？</p><p>添加到 Set 中的值，会作为一个键值对的 key（value 为null）添加到 HashMap 中，而 HashMap 对键值对的键的要求是唯一，因此 HashSet 的键自然就是要求唯一。</p><h3 id="_1-10-执行以下程序会输出什么结果-为什么" tabindex="-1"><a class="header-anchor" href="#_1-10-执行以下程序会输出什么结果-为什么" aria-hidden="true">#</a> 1.10 执行以下程序会输出什么结果？为什么？</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Integer</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>\n<span class="token class-name">Integer</span> num2 <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><code>num.compareTo(num2)</code> 表达的逻辑就是 <code>num - num2</code> 的逻辑，当然，它的值并不是实际相减的值，而是代表 大、小、相等的 <code>1</code>、<code>-1</code> 和 <code>0</code> 。</p><p>因此，上面的值自然就是 <code>1</code> 。</p><h3 id="_1-11-如何用程序实现后进先出的栈结构" tabindex="-1"><a class="header-anchor" href="#_1-11-如何用程序实现后进先出的栈结构" aria-hidden="true">#</a> 1.11 如何用程序实现后进先出的栈结构？</h3><p>答：</p><ol><li><p>线程安全的方案：使用 Stack 。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></li><li><p>线程不安全的方案：使用 LinkedList<small>（它实现了 Deque 接口）</small>。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nlist<span class="token punctuation">.</span><span class="token function">addFirst</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nlist<span class="token punctuation">.</span><span class="token function">addFirst</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nlist<span class="token punctuation">.</span><span class="token function">addFirst</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div></li></ol><p>程序执行结果：<code>c b a</code></p><h3 id="_1-12-linkedlist-中的-peek-和-poll-有什么区别" tabindex="-1"><a class="header-anchor" href="#_1-12-linkedlist-中的-peek-和-poll-有什么区别" aria-hidden="true">#</a> 1.12 LinkedList 中的 peek() 和 poll() 有什么区别？</h3><p>答：peek 方法是在查询头部元素，poll 方法是删除头部元素，并返回删除的那个元素。</p><p>虽然返回值一样，但是执行完 peek 方法后，LinkedList 中元素不会少，而执行完 poll 方法后，会少一个。</p><h3 id="_1-13-comparable-和-comparator-有哪些区别" tabindex="-1"><a class="header-anchor" href="#_1-13-comparable-和-comparator-有哪些区别" aria-hidden="true">#</a> 1.13 Comparable 和 Comparator 有哪些区别？</h3><p>答：Comparable 和 Comparator 的主要区别如下：</p><ul><li>Comparable 位于 java.lang 包下，而 Comparator 位于 java.util 包下；</li><li>Comparable 在排序类的内部实现，而 Comparator 在排序类的外部实现；</li><li>Comparable 需要重写 CompareTo() 方法，而 Comparator 需要重写 Compare() 方法；</li><li>Comparator 在类的外部实现，更加灵活和方便。</li></ul><h2 id="_2-map-部分" tabindex="-1"><a class="header-anchor" href="#_2-map-部分" aria-hidden="true">#</a> 2. Map 部分</h2><h3 id="_2-1-map-常见实现类有哪些" tabindex="-1"><a class="header-anchor" href="#_2-1-map-常见实现类有哪些" aria-hidden="true">#</a> 2.1 Map 常见实现类有哪些？</h3><p>答：Map 的常见实现类如下列表：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Map                    (jdk 1.0)\n|── Hashtable          (jdk 1.0)\n|── TreeMap            (jdk 1.2)\n|── HashMap            (jdk 1.2)\n|   └── LinkedHashMap  (jdk 1.4)\n└── ConcurrentHashMap  (jdk 1.5)\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="_2-2-使用-hashmap-可能会遇到什么问题-如何避免" tabindex="-1"><a class="header-anchor" href="#_2-2-使用-hashmap-可能会遇到什么问题-如何避免" aria-hidden="true">#</a> 2.2 使用 HashMap 可能会遇到什么问题？如何避免？</h3><p>答：</p><p>在 JDK 1.8 之前，在并发场景中，如果有两个线程对同一个 HashMap 进行扩容，会出现循环依赖，造成死循环。</p><blockquote><p>这是因为 HashMap 在扩容的时候会对链表进行一次倒序处理，假设两个线程同时执行扩容操作，第一个线程正在执行 B→A 的时候，第二个线程又执行了 A→B ，这个时候就会出现 B→A→B 的问题，造成死循环。</p></blockquote><p>多线程场景，本就不应该使用 HashMap，因该使用多线程版本 ConcurrentHashMap 。</p><p>另外，JDK 1.8 中上述算法有变动，也不会出现这个问题。</p><h3 id="_2-3-以下说法正确的是" tabindex="-1"><a class="header-anchor" href="#_2-3-以下说法正确的是" aria-hidden="true">#</a> 2.3 以下说法正确的是？</h3><p>A：Hashtable 和 HashMap 都是非线程安全的<br> B：ConcurrentHashMap 允许 null 作为 key<br> C：HashMap 允许 null 作为 key<br> D：Hashtable 允许 null 作为 key</p><p>答：C</p><table><thead><tr><th style="text-align:left;"></th><th style="text-align:left;">线程安全</th><th style="text-align:left;">允许 null-key</th><th style="text-align:left;">允许 null-val</th></tr></thead><tbody><tr><td style="text-align:left;">Hashtable</td><td style="text-align:left;">Yes</td><td style="text-align:left;">No</td><td style="text-align:left;">No</td></tr><tr><td style="text-align:left;">HashMap</td><td style="text-align:left;">No</td><td style="text-align:left;">Yes</td><td style="text-align:left;">Yes</td></tr><tr><td style="text-align:left;">ConcurrentHashMap</td><td style="text-align:left;">yes</td><td style="text-align:left;">No</td><td style="text-align:left;">No</td></tr></tbody></table><h3 id="_2-4-treemap-怎么实现根据-value-值倒序" tabindex="-1"><a class="header-anchor" href="#_2-4-treemap-怎么实现根据-value-值倒序" aria-hidden="true">#</a> 2.4 TreeMap 怎么实现根据 value 值倒序？</h3><p>答：使用 <code>Collections.sort(list, new Comparator&lt;Map.Entry&lt;String, Integer&gt;&gt;()</code> 自定义比较器实现，先把 TreeMap 转换为 ArrayList，在使用 Collections.sort() 根据 value 进行倒序，完整的实现代码如下。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">TreeMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> treeMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ntreeMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ntreeMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;2&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ntreeMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;3&quot;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ntreeMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;4&quot;</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// map.entrySet() 转成 List</span>\n<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>treeMap<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 通过比较器实现比较排序</span>\n<span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> m1<span class="token punctuation">,</span> <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> m2<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> m2<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>m1<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 打印结果，验证</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> item <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;:&quot;</span> <span class="token operator">+</span> item<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>程序执行结果：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>4:4\n3:3\n2:2\n1:1 \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="_2-5-以下哪个-set-实现了自动排序" tabindex="-1"><a class="header-anchor" href="#_2-5-以下哪个-set-实现了自动排序" aria-hidden="true">#</a> 2.5 以下哪个 Set 实现了自动排序？</h3><p>A：LinedHashSet<br> B：HashSet<br> C：TreeSet<br> D：AbstractSet</p><p>答：C</p><p>TreeSet 实现了 SortedSet 接口，而 <code>内部有序</code> 是 SortedSet 对它的实现类的要求。</p><h3 id="_2-6-以下程序运行的结果是什么" tabindex="-1"><a class="header-anchor" href="#_2-6-以下程序运行的结果是什么" aria-hidden="true">#</a> 2.6 以下程序运行的结果是什么？</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Hashtable</span> hashtable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hashtable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nhashtable<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;table&quot;</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hashtable<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;table&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>答：</p><p>程序执行报错：java.lang.NullPointerException。</p><p>Hashtable 不允许 <code>null-key</code> 和 <code>null-value</code> 。<small>它的替代者 ConcurrentHashMap 和它保持一致，也不允许 null-key 和 null-value </small>。</p><h3 id="_2-7-hashmap-有哪些重要的参数-用途分别是什么" tabindex="-1"><a class="header-anchor" href="#_2-7-hashmap-有哪些重要的参数-用途分别是什么" aria-hidden="true">#</a> 2.7 HashMap 有哪些重要的参数？用途分别是什么？</h3><p>答：HashMap 有两个重要的参数：容量<small>（Capacity）</small>和负载因子（LoadFactor）。</p><ul><li><p>容量（Capacity）：是指 HashMap 中桶<small>（也就是数组的单元）</small>的数量，默认的初始值为 16。</p></li><li><p>负载因子（LoadFactor）：也被称为装载因子，用于 Map 的扩容。</p></li></ul><h3 id="_2-8-hashmap-和-hashtable-有什么区别" tabindex="-1"><a class="header-anchor" href="#_2-8-hashmap-和-hashtable-有什么区别" aria-hidden="true">#</a> 2.8 HashMap 和 Hashtable 有什么区别？</h3><p>答：</p><ul><li><p>从历史角度看：Hashtable 要早于 HashMap 出现<small>（1.0 VS 1.2）</small>。</p></li><li><p>从线程安全角度看：Hashtable 是线程安全的；HashMap 是线程不安全的。</p></li><li><p>从底层数据结构看：从 JDK 1.8 之前，两者底层数据结构一样，都是数组+链表，但是 JDK 1.8 中 HashMap 有变动<small>（升级）</small>，底层数据结构变成了数组+链表+红黑树。</p></li><li><p>从其他的一些零碎细节看：</p><ul><li><p>Hashtalbe 不允许 null-key 和 null-value，而 HashMap 允许。</p></li><li><p>Hashtable 还继承了 Dictonary 类，而 HashMap<small>（和其它 Map 实现类）</small>则没有。</p></li></ul></li></ul><h3 id="_2-9-什么是哈希冲突" tabindex="-1"><a class="header-anchor" href="#_2-9-什么是哈希冲突" aria-hidden="true">#</a> 2.9 什么是哈希冲突？</h3><p>答：</p><p>当输入两个不同值（对象），根据同一散列函数计算出相同的散列值的现象，我们就把它叫做哈希冲突，也叫哈希碰撞。</p><blockquote><p>哈希冲突是现象，不是问题。</p></blockquote><h3 id="_2-10-有哪些方法可以解决哈希冲突" tabindex="-1"><a class="header-anchor" href="#_2-10-有哪些方法可以解决哈希冲突" aria-hidden="true">#</a> 2.10 有哪些方法可以解决哈希冲突？</h3><p>答：</p><p>Hashtable、HashMap 它们采用的处理方式叫『<strong>链地址法</strong>』。</p><p>这种方法的基本思想是将所有哈希地址为 i 的元素构成一个称为同义词链的单链表，并将单链表的头指针存在哈希表的第 i 个单元中，因而查找、插入和删除主要在同义词链<small>（红黑树）</small>中进行。链地址法适用于经常进行插入和删除的情况。</p><p>还有其它的一些处理方式。</p><h3 id="_2-11-hashmap-的扩容为什么是-2-n" tabindex="-1"><a class="header-anchor" href="#_2-11-hashmap-的扩容为什么是-2-n" aria-hidden="true">#</a> 2.11 HashMap 的扩容为什么是 2^n ？</h3><p>答：这样做的目的是为了让散列更加均匀，从而减少哈希碰撞，以提供代码的执行效率。</p><h3 id="_2-12-有哈希冲突的情况下-hashmap-如何取值" tabindex="-1"><a class="header-anchor" href="#_2-12-有哈希冲突的情况下-hashmap-如何取值" aria-hidden="true">#</a> 2.12 有哈希冲突的情况下 HashMap 如何取值？</h3><p>答：</p><p>遍历链表<small>（红黑树）</small>。</p><h3 id="_2-13-以下程序会输出什么结果" tabindex="-1"><a class="header-anchor" href="#_2-13-以下程序会输出什么结果" aria-hidden="true">#</a> 2.13 以下程序会输出什么结果？</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>\n    <span class="token comment">// getter /setter</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">Person</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">)</span> o<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> hashMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hashMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>答：1</p><p>题目解析：因为 Person 重写了 equals 和 hashCode 方法，所有 person 对象和 new Person(18) 的键值相同，所以结果就是 1。</p><h3 id="_2-14-为什么重写-equals-时一定要重写-hashcode" tabindex="-1"><a class="header-anchor" href="#_2-14-为什么重写-equals-时一定要重写-hashcode" aria-hidden="true">#</a> 2.14 为什么重写 equals() 时一定要重写 hashCode()？</h3><p>答：因为 Java 规定：<strong>如果两个对象 equals 比较相等（结果为 true），那么调用 hashCode 也必须相等。</strong></p><p>如果重写了 <code>equals()</code> 但没有重写 <code>hashCode()</code>，就会与规定相违背。</p><h3 id="_2-15-hashmap-在-jdk-7-多线程中使用会导致什么问题" tabindex="-1"><a class="header-anchor" href="#_2-15-hashmap-在-jdk-7-多线程中使用会导致什么问题" aria-hidden="true">#</a> 2.15 HashMap 在 JDK 7 多线程中使用会导致什么问题？</h3><p>答：HashMap 在 JDK 7 中会导致循环引用，从而造成死循环的问题。</p><p>因为在 JDK 7 中，多线程进行 HashMap 扩容时会导致链表的循环引用，这个时候使用 get() 获取元素时就会导致死循环，造成 CPU 100% 的情况。</p><h3 id="_2-16-hashmap-在-jdk-7-和-jdk-8-中有哪些不同" tabindex="-1"><a class="header-anchor" href="#_2-16-hashmap-在-jdk-7-和-jdk-8-中有哪些不同" aria-hidden="true">#</a> 2.16 HashMap 在 JDK 7 和 JDK 8 中有哪些不同？</h3><p>答：HashMap 在 JDK 7 和 JDK 8 的主要区别如下。</p><ul><li>存储结构：JDK 7 使用的是数组 + 链表；JDK 8 使用的是数组 + 链表 + 红黑树。</li><li>存放数据的规则：JDK 7 无冲突时，存放数组；冲突时，存放链表；JDK 8 在没有冲突的情况下直接存放数组，有冲突时，当链表长度小于 8 时，存放在单链表结构中，当链表长度大于 8 时，树化并存放至红黑树的数据结构中。</li><li>插入数据方式：JDK 7 使用的是头插法（先将原位置的数据移到后 1 位，再插入数据到该位置）；JDK 8 使用的是尾插法（直接插入到链表尾部/红黑树）。</li></ul><h2 id="_3-queue" tabindex="-1"><a class="header-anchor" href="#_3-queue" aria-hidden="true">#</a> 3. Queue</h2><h3 id="_3-1-arrayblockingqueue-和-linkedblockingqueue-的区别是什么" tabindex="-1"><a class="header-anchor" href="#_3-1-arrayblockingqueue-和-linkedblockingqueue-的区别是什么" aria-hidden="true">#</a> 3.1 ArrayBlockingQueue 和 LinkedBlockingQueue 的区别是什么？</h3><p>答：</p><p>从底层实现角度看：ArrayBlockingQueue 是基于数组实现的；LinkedBlockingQueue 是基于链表实现的。这个根本原因导致了如下现象：</p><ul><li>ArrayBlockingQueue 使用时必须指定容量值，LinkedBlockingQueue 可以不用指定；</li><li>ArrayBlockingQueue 的最大容量值是使用时指定的，并且指定之后就不允许修改；而 LinkedBlockingQueue 最大的容量为 Integer.MAX_VALUE；</li></ul><h3 id="_3-2-linkedlist-中-add-和-offer-有什么关系" tabindex="-1"><a class="header-anchor" href="#_3-2-linkedlist-中-add-和-offer-有什么关系" aria-hidden="true">#</a> 3.2 LinkedList 中 add() 和 offer() 有什么关系？</h3><p>答：add() 和 offer() 都是添加元素到队列尾部。offer 方法是基于 add 方法实现的，Offer 的源码如下：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">offer</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n   <span class="token keyword">return</span> <span class="token function">add</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_3-3-queue-和-deque-有什么区别" tabindex="-1"><a class="header-anchor" href="#_3-3-queue-和-deque-有什么区别" aria-hidden="true">#</a> 3.3 Queue 和 Deque 有什么区别？</h3><p>答：Deque 是双端队列，Queue 则是一般队列<small>（单端队列）</small>。Deque 功能比 Queue 功能更多。</p><p>一般队列是先进先出，也就是只有先进的才能先出；而双端队列则是两端都能插入和删除元素。</p><h3 id="_3-4-linkedlist-属于一般队列还是双端队列" tabindex="-1"><a class="header-anchor" href="#_3-4-linkedlist-属于一般队列还是双端队列" aria-hidden="true">#</a> 3.4 LinkedList 属于一般队列还是双端队列？</h3><p>答：LinkedList 实现了 Deque 接口，属于双端队列。</p><h3 id="_3-5-以下说法错误的是" tabindex="-1"><a class="header-anchor" href="#_3-5-以下说法错误的是" aria-hidden="true">#</a> 3.5 以下说法错误的是？</h3><p>A：DelayQueue 内部是基于 PriorityQueue 实现的<br> B：PriorityBlockingQueue 不是先进先出的数据存储方式<br> C：LinkedBlockingQueue 默认容量是无限大的<br> D：ArrayBlockingQueue 内部的存储单元是数组，初始化时必须指定队列容量</p><p>答：C</p><p>LinkedBlockingQueue 默认容量是 Integer.MAX_VALUE，并不是无限大的。</p><h3 id="_3-6-关于-arrayblockingqueue-说法不正确的是" tabindex="-1"><a class="header-anchor" href="#_3-6-关于-arrayblockingqueue-说法不正确的是" aria-hidden="true">#</a> 3.6 关于 ArrayBlockingQueue 说法不正确的是？</h3><p>A：ArrayBlockingQueue 是线程安全的<br> B：ArrayBlockingQueue 元素允许为 null<br> C：ArrayBlockingQueue 主要应用场景是“生产者-消费者”模型<br> D：ArrayBlockingQueue 必须显示地设置容量</p><p>答：B</p><p>ArrayBlockingQueue 不允许元素为 null，如果添加一个 null 元素，会抛 NullPointerException 异常。</p><h3 id="_3-7-以下程序执行的结果是什么" tabindex="-1"><a class="header-anchor" href="#_3-7-以下程序执行的结果是什么" aria-hidden="true">#</a> 3.7 以下程序执行的结果是什么？</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">PriorityQueue</span> priorityQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\npriorityQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>priorityQueue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>答：程序执行报错，PriorityQueue 不能插入 null。</p><h3 id="_3-8-java-中常见的阻塞队列有哪些" tabindex="-1"><a class="header-anchor" href="#_3-8-java-中常见的阻塞队列有哪些" aria-hidden="true">#</a> 3.8 Java 中常见的阻塞队列有哪些？</h3><p>答：Java 中常见的阻塞队列如下：</p><ul><li>ArrayBlockingQueue，由数组结构组成的有界阻塞队列；</li><li>PriorityBlockingQueue，支持优先级排序的无界阻塞队列；</li><li>LinkedBlockingQueue，由链表结构组成的阻塞队列；</li></ul><h3 id="_3-9-有界队列和无界队列有哪些区别" tabindex="-1"><a class="header-anchor" href="#_3-9-有界队列和无界队列有哪些区别" aria-hidden="true">#</a> 3.9 有界队列和无界队列有哪些区别？</h3><p>答：有界队列和无界队列的区别如下：</p><ul><li><p>有界队列：有固定大小的队列叫做有界队列，比如：new ArrayBlockingQueue(6)，6 就是队列的大小。</p></li><li><p>无界队列：指的是没有设置固定大小的队列，这些队列的特点是可以直接入列，直到溢出。它们并不是真的无界，它们最大值通常为 Integer.MAX_VALUE，只是平常很少能用到这么大的容量（超过 Integer.MAX_VALUE），因此从使用者的体验上，就相当于 “无界”。</p></li></ul><h3 id="_3-10-如何手动实现一个延迟消息队列" tabindex="-1"><a class="header-anchor" href="#_3-10-如何手动实现一个延迟消息队列" aria-hidden="true">#</a> 3.10 如何手动实现一个延迟消息队列？</h3><p>答：说到延迟消息队列，我们应该可以第一时间想到要使用 DelayQueue 延迟队列来解决这个问题。实现思路，消息队列分为生产者和消费者，生产者用于增加消息，消费者用于获取并消费消息，我们只需要生产者把消息放入到 DelayQueue 队列并设置延迟时间，消费者循环使用 take() 阻塞获取消息即可。完整的实现代码如下：</p><pre><code>public class CustomDelayQueue {\n    // 消息编号\n    static AtomicInteger MESSAGENO = new AtomicInteger(1);\n\n    public static void main(String[] args) throws InterruptedException {\n        DelayQueue&lt;DelayedElement&gt; delayQueue = new DelayQueue&lt;&gt;();\n        // 生产者1\n        producer(delayQueue, &quot;生产者1&quot;);\n        // 生产者2\n        producer(delayQueue, &quot;生产者2&quot;);\n        // 消费者\n        consumer(delayQueue);\n    }\n\n    //生产者\n    private static void producer(DelayQueue&lt;DelayedElement&gt; delayQueue, String name) {\n        new Thread(new Runnable() {\n            @Override\n            public void run() {\n                while (true) {\n                    // 产生 1~5 秒的随机数\n                    long time = 1000L * (new Random().nextInt(5) + 1);\n                    try {\n                        Thread.sleep(time);\n                    } catch (InterruptedException e) {\n                        e.printStackTrace();\n                    }\n                    // 组合消息体\n                    String message = String.format(&quot;%s，消息编号：%s 发送时间：%s 延迟：%s 秒&quot;,\n                            name, MESSAGENO.getAndIncrement(), DateFormat.getDateTimeInstance().format(new Date()), time / 1000);\n                    // 生产消息\n                    delayQueue.put(new DelayedElement(message, time));\n                }\n            }\n        }).start();\n    }\n\n    //消费者\n    private static void consumer(DelayQueue&lt;DelayedElement&gt; delayQueue) {\n        new Thread(new Runnable() {\n            @Override\n            public void run() {\n                while (true) {\n                    DelayedElement element = null;\n                    try {\n                        // 消费消息\n                        element = delayQueue.take();\n                        System.out.println(element);\n                    } catch (InterruptedException e) {\n                        e.printStackTrace();\n                    }\n                }\n            }\n        }).start();\n    }\n\n    // 延迟队列对象\n    static class DelayedElement implements Delayed {\n        // 过期时间（单位：毫秒）\n        long time = System.currentTimeMillis();\n        // 消息体\n        String message;\n        // 参数：delayTime 延迟时间（单位毫秒）\n        public DelayedElement(String message, long delayTime) {\n            this.time += delayTime;\n            this.message = message;\n        }\n        @Override\n        // 获取过期时间\n        public long getDelay(TimeUnit unit) {\n            return unit.convert(time - System.currentTimeMillis(), TimeUnit.MILLISECONDS);\n        }\n        @Override\n        // 队列元素排序\n        public int compareTo(Delayed o) {\n            if (this.getDelay(TimeUnit.MILLISECONDS) &gt; o.getDelay(TimeUnit.MILLISECONDS))\n                return 1;\n            else if (this.getDelay(TimeUnit.MILLISECONDS) &lt; o.getDelay(TimeUnit.MILLISECONDS))\n                return -1;\n            else\n                return 0;\n        }\n        @Override\n        public String toString() {\n            // 打印消息\n            return message + &quot; |执行时间：&quot; + DateFormat.getDateTimeInstance().format(new Date());\n        }\n    }\n}\n</code></pre><p>以上程序支持多生产者，执行的结果如下：</p><blockquote><p>生产者1，消息编号：1 发送时间：2019-6-12 20:38:37 延迟：2 秒 |执行时间：2019-6-12 20:38:39</p><p>生产者2，消息编号：2 发送时间：2019-6-12 20:38:37 延迟：2 秒 |执行时间：2019-6-12 20:38:39</p><p>生产者1，消息编号：3 发送时间：2019-6-12 20:38:41 延迟：4 秒 |执行时间：2019-6-12 20:38:45</p><p>生产者1，消息编号：5 发送时间：2019-6-12 20:38:43 延迟：2 秒 |执行时间：2019-6-12 20:38:45</p><p>......</p></blockquote>',146),t={render:function(n,a){return e}}}}]);