"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[7896],{63042:(n,a,s)=>{s.r(a),s.d(a,{data:()=>t});const t={key:"v-baba2714",path:"/spring/05-tx.html",title:"Spring 中 @Transactional 的使用",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"Transactional 注解管理事务的实现步骤",slug:"transactional-注解管理事务的实现步骤",children:[]},{level:2,title:"使用位置",slug:"使用位置",children:[]},{level:2,title:"注解的事务注意事项（出错未回滚）",slug:"注解的事务注意事项-出错未回滚",children:[{level:3,title:"正确的设置 @Transactional 的 propagation 属性",slug:"正确的设置-transactional-的-propagation-属性",children:[]},{level:3,title:"正确的设置 @Transactional 的 rollbackFor 属性",slug:"正确的设置-transactional-的-rollbackfor-属性",children:[]},{level:3,title:"@Transactional 只能应用到 public 方法才有效",slug:"transactional-只能应用到-public-方法才有效",children:[]},{level:3,title:"避免 Spring 的 AOP 的自调用问题",slug:"避免-spring-的-aop-的自调用问题",children:[]}]}],filePathRelative:"spring/05-tx.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},10465:(n,a,s)=>{s.r(a),s.d(a,{default:()=>e});const t=(0,s(66252).uE)('<h1 id="spring-中-transactional-的使用" tabindex="-1"><a class="header-anchor" href="#spring-中-transactional-的使用" aria-hidden="true">#</a> Spring 中 @Transactional 的使用</h1><p>事务管理是应用系统开发中必不可少的一部分。Spring 为事务管理提供了丰富的功能支持。</p><p>声明式事务有两种方式：</p><ul><li><p>一种是在配置文件<small>（xml）</small>中做相关的事务规则声明，</p></li><li><p>另一种是基于 <strong>@Transactional</strong> 注解的方式。</p></li></ul><p>注释配置是目前流行的使用方式。</p><h2 id="transactional-注解管理事务的实现步骤" tabindex="-1"><a class="header-anchor" href="#transactional-注解管理事务的实现步骤" aria-hidden="true">#</a> Transactional 注解管理事务的实现步骤</h2><p>使用 <strong>@Transactional</strong> 注解管理事务的实现步骤分为 2 步：</p><ol><li><p>在代码配置中添加事务配置信息</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>\n<span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token string">&quot;com.example.service&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 包扫描</span>\n<span class="token annotation punctuation">@EnableTransactionManagement</span> <span class="token comment">// 开启事务支持</span>\n<span class="token annotation punctuation">@EnableAspectJAutoProxy</span><span class="token punctuation">(</span>proxyTargetClass <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token comment">// 强制指定使用 cglib 动态代理</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringServiceConfig</span> <span class="token punctuation">{</span>\n\n    <span class="token doc-comment comment">/**\n     * PlantformTransactionManager 的具体是先有 4 种：\n     * \n     * - DataSourceTransactionManager for JDBC\n     * - HibernateTransactionManager for Hibernate\n     * - JpaTransactionManager for JPA\n     * - JtaTransactionManager for JTA \n     * \n     * Mybatis 使用的是 JDBC 的那个。\n     *\n     * 不要无脑复制粘贴。\n     */</span>\n    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">&quot;txManager&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">public</span> <span class="token class-name">DataSourceTransactionManager</span> <span class="token function">getTXManager</span><span class="token punctuation">(</span><span class="token class-name">DataSource</span> ds<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">DataSourceTransactionManager</span> manager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceTransactionManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        manager<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span>ds<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> manager<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div></li><li><p>将 <strong>@Transactional</strong> 注解添加到合适的方法上，并设置合适的属性信息。</p></li></ol><p><strong>@Transactional</strong> 注解的属性信息</p><table><thead><tr><th style="text-align:left;">属性名</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">name</td><td style="text-align:left;">当在配置文件中有多个 <em>TransactionManager</em> ，<br>可以用该属性指定选择哪个事务管理器。</td></tr><tr><td style="text-align:left;">propagation</td><td style="text-align:left;">事务的传播行为，默认值为 <em>REQUIRED</em> 。各种不同的值的含义见下表。</td></tr><tr><td style="text-align:left;">isolation</td><td style="text-align:left;">事务的隔离度，默认值采用 <em>DEFAULT</em> 。</td></tr><tr><td style="text-align:left;">timeout</td><td style="text-align:left;">事务的超时时间，默认值为 -1 。<br>如果超过该时间限制但事务还没有完成，则自动回滚事务。</td></tr><tr><td style="text-align:left;">read-only</td><td style="text-align:left;">指定事务是否为只读事务，默认值为 <em>false</em> ；<br>为了忽略那些不需要事务的方法，比如读取数据，可以设置 read-only 为 <em>true</em> 。</td></tr><tr><td style="text-align:left;">rollback-for</td><td style="text-align:left;">用于指定能够触发事务回滚的异常类型，<br>如果有多个异常类型需要指定，各类型之间可以通过逗号分隔。</td></tr><tr><td style="text-align:left;">no-rollback-for</td><td style="text-align:left;">抛出 <em>no-rollback-for</em> 指定的异常类型，不回滚事务。</td></tr></tbody></table><p>propagation 的各种值的含义：</p><table><thead><tr><th style="text-align:left;">传播行为</th><th style="text-align:left;">含义</th><th style="text-align:left;">备注</th></tr></thead><tbody><tr><td style="text-align:left;">REQUIRED</td><td style="text-align:left;">当方法调用时，如果不存在当前事务，那么就创建事务；如果之前已经存在了事物，那么就沿用之前的事务。</td><td style="text-align:left;">默认值，<strong>最常用</strong>。</td></tr><tr><td style="text-align:left;">SUPPORTS</td><td style="text-align:left;">当方法调用时，如果不存在当前事务，就不启用事务；如果当前启用事务，那么就沿用当前事务。</td><td style="text-align:left;">——</td></tr><tr><td style="text-align:left;">MANATORY</td><td style="text-align:left;">方法必须在事务内运行。</td><td style="text-align:left;">如果不存在当前事务，则直接抛出异常。</td></tr><tr><td style="text-align:left;">REQUIRES_NEW</td><td style="text-align:left;">无论是否存在当前事务，方法都会在新的事务中运行</td><td style="text-align:left;">总是开启一个新事务，执行本方法。<strong>次常用</strong>。</td></tr><tr><td style="text-align:left;">NOT_SUPPORTED</td><td style="text-align:left;">不支持事务，不存在当前事务也不会创建新事务；如果存在当前事务则挂起它，直到方法结束后才恢复当前事务</td><td style="text-align:left;">适用于那些不支持事务的数据库和SQL语句</td></tr><tr><td style="text-align:left;">NEVER</td><td style="text-align:left;">不支持事务。</td><td style="text-align:left;">MANATORY 的“反面”，如果存在当前事务，就直接抛出异常。</td></tr><tr><td style="text-align:left;">NESTED</td><td style="text-align:left;">嵌套事务。REQUIRES_NEW 的高级版</td><td style="text-align:left;">支持当前事务中使用保存点（savepoint），可以回滚到保存点；如果当前事务没有保存点，则完全等价于 REQUIRES_NEW</td></tr></tbody></table><p>传播机制本质上描述的是：在一个整体行为中，一个部分行为的失败，会不会对整体行为造成影响，以及造成何种影响。</p><h2 id="使用位置" tabindex="-1"><a class="header-anchor" href="#使用位置" aria-hidden="true">#</a> 使用位置</h2><p>除此可以放在方法上，<strong>@Transactional</strong> 注解也可以添加到类级别上。当把 <strong>@Transactional</strong> 注解放在类级别时，表示所有该类的公共方法都配置相同的事务属性信息。</p><p>方法级别的事务属性信息会覆盖类级别的相关配置信息。</p><p><strong>@Transactional</strong> 注解的标注于类上：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>propagation<span class="token operator">=</span> <span class="token class-name">Propagation</span><span class="token punctuation">.</span>SUPPORTS<span class="token punctuation">,</span> readOnly<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span>value <span class="token operator">=</span><span class="token string">&quot;employeeService&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmployeeService</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="注解的事务注意事项-出错未回滚" tabindex="-1"><a class="header-anchor" href="#注解的事务注意事项-出错未回滚" aria-hidden="true">#</a> 注解的事务注意事项（出错未回滚）</h2><p>当您对 Spring 的基于注解方式的实现步骤和事务内在实现机制有较好的理解之后，就会更好的使用注解方式的事务管理，避免当系统抛出异常，数据不能回滚的问题。</p><h3 id="正确的设置-transactional-的-propagation-属性" tabindex="-1"><a class="header-anchor" href="#正确的设置-transactional-的-propagation-属性" aria-hidden="true">#</a> 正确的设置 <em>@Transactional</em> 的 <em>propagation</em> 属性</h3><p>本来期望目标方法进行事务管理，但若是错误的配置了 <em>propagation</em> 属性，使用了以下 3 个值之一，那么将会发生『出错未回滚』的 Bug ：</p><blockquote><p>考虑到我们通常情况下不会去改变 <em>propagation</em> 属性的值，，即一般都是使用它的默认值。因此，因为这个原因导致的『出错未回滚』的情况不大。</p></blockquote><dl><dt>TransactionDefinition.PROPAGATION_SUPPORTS</dt><dd>如果当前存在事务，则加入该事务；</dd><dd>如果当前没有事务，则以非事务的方式继续运行。</dd><dt>TransactionDefinition.PROPAGATION_NOT_SUPPORTED</dt><dd>以非事务方式运行，如果当前存在事务，则把当前事务挂起。</dd><dt>TransactionDefinition.PROPAGATION_NEVER`</dt><dd>以非事务方式运行，如果当前存在事务，则抛出异常。</dd></dl><h3 id="正确的设置-transactional-的-rollbackfor-属性" tabindex="-1"><a class="header-anchor" href="#正确的设置-transactional-的-rollbackfor-属性" aria-hidden="true">#</a> 正确的设置 <em>@Transactional</em> 的 <em>rollbackFor</em> 属性</h3><p>默认情况下，如果在事务中抛出了未检查异常<small>（继承自 RuntimeException 的异常）</small>或者 Error，则 Spring 将回滚事务；除此之外的异常，Spring 都不会回滚事务！</p><blockquote><p>这是造成『<strong>出错未回滚</strong>』的最常见原因！</p></blockquote><p>如果在事务中抛出其他类型的异常，并期望 Spring 能够回滚事务，可以指定 <strong>rollbackFor</strong> 。例：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>propagation<span class="token operator">=</span> <span class="token class-name">Propagation</span><span class="token punctuation">.</span>REQUIRED<span class="token punctuation">,</span> rollbackFor<span class="token operator">=</span> <span class="token class-name">MyException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>若在目标方法中抛出的异常是 <strong>rollbackFor</strong> 指定的异常<small>（及其子类）</small>，事务同样会回滚。</p><h3 id="transactional-只能应用到-public-方法才有效" tabindex="-1"><a class="header-anchor" href="#transactional-只能应用到-public-方法才有效" aria-hidden="true">#</a> <em>@Transactional</em> 只能应用到 <em>public</em> 方法才有效</h3><p>只有 <strong>@Transactional</strong> 注解应用到 <strong>public</strong> 方法，才能进行事务管理。</p><p>Spring AOP 会检查目标方法的修饰符是不是 <strong>public</strong> ，若不是 <strong>public</strong> ，就不会获取 <strong>@Transactional</strong> 的属性配置信息，最终会造成不会用 <strong>TransactionInterceptor</strong> 来拦截该目标方法进行事务管理。</p><h3 id="避免-spring-的-aop-的自调用问题" tabindex="-1"><a class="header-anchor" href="#避免-spring-的-aop-的自调用问题" aria-hidden="true">#</a> 避免 Spring 的 AOP 的自调用问题</h3><p>在 Spring 的 AOP 代理下，只有目标方法由外部调用，目标方法才由 Spring 生成的代理对象来管理，这会造成自调用问题。</p><p>若同一类中的其他没有 <strong>@Transactional</strong> 注解的方法内部调用有 <strong>@Transactional</strong> 注解的方法，有 <strong>@Transactional</strong> 注解的方法的事务被忽略，不会发生回滚。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderService</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">insertOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Transactional</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">//insert log info</span>\n        <span class="token comment">//insertOrder</span>\n        <span class="token comment">//updateAccount</span>\n    <span class="token punctuation">}</span>\n\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p><strong>.insertOrder</strong> 方法尽管有 <strong>@Transactional</strong> 注解，但它被内部方法 <strong>insert</strong> 方法调用，因此 <strong>.insertOrder</strong> 方法的事务被忽略，出现异常事务不会发生回滚。</p><p>『完』</p>',39),e={render:function(n,a){return t}}}}]);