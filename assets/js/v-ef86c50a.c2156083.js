"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[445],{96520:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-ef86c50a",path:"/docker-install/05-rabbitmq.html",title:"Docker RabbitMQ",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"安装及测试",slug:"安装及测试",children:[]},{level:2,title:"容器中的配置文件和数据的存储",slug:"容器中的配置文件和数据的存储",children:[]},{level:2,title:"配置与挂载",slug:"配置与挂载",children:[]}],filePathRelative:"docker-install/05-rabbitmq.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},87923:(n,s,a)=>{a.r(s),a.d(s,{default:()=>i});var e=a(66252);const p=(0,e._)("h1",{id:"docker-rabbitmq",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#docker-rabbitmq","aria-hidden":"true"},"#"),(0,e.Uk)(" Docker RabbitMQ")],-1),t=(0,e.Uk)("RabbitMQ 的 Docker 镜像在 dockerhub 上的网址："),r={href:"https://hub.docker.com/_/rabbitmq",target:"_blank",rel:"noopener noreferrer"},l=(0,e._)("em",null,"https://hub.docker.com/_/rabbitmq",-1),c=(0,e.uE)('<p>当前<small>（2021-04-02）</small>的 <strong>latest</strong> 和 <strong>3.8.14</strong> 是同一个镜像 。</p><p>不过，我们选择带有 <strong>management</strong> 的版本的镜像，因为其中包含 web 管理页面。例如：<strong>rabbitmq:3.8.14-management</strong> 。</p><h2 id="安装及测试" tabindex="-1"><a class="header-anchor" href="#安装及测试" aria-hidden="true">#</a> 安装及测试</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># 查询中央仓库</span>\ndocker search -f is-official<span class="token operator">=</span>true rabbitmq\n    \n<span class="token comment"># 从中央仓库下载</span>\ndocker pull rabbitmq:3.8.14-management\n\n<span class="token comment"># 或，直接导入已有的镜像文件</span>\n<span class="token comment"># docker load -i rabbitmq-3.8.14-management.tar</span>\n\n<span class="token comment"># 查看本地镜像</span>\ndocker images\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>会出现类似如下内容：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>REPOSITORY      TAG                 IMAGE ID       CREATED        SIZE\nrabbitmq        3.8.14-management   edd581f906b9   2 days ago     187MB\nrabbitmq        3.8.14              f83a0c22b15a   2 days ago     156MB\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>运行容器：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># 删除曾经已有的同名容器</span>\ndocker stop rabbitmq-test\ndocker <span class="token function">rm</span> rabbitmq-test\n\n<span class="token comment"># 创建并运行 rabbitmq 容器的语法</span>\ndocker run <span class="token punctuation">\\</span>\n  -d <span class="token punctuation">\\</span>\n  --name <span class="token operator">&lt;</span>指定容器名<span class="token operator">&gt;</span> <span class="token punctuation">\\</span>\n  -p <span class="token operator">&lt;</span>指定宿主机端口<span class="token operator">&gt;</span>:5672 <span class="token punctuation">\\</span>\n  rabbitmq:3.8.14-management\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>例如：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>docker run <span class="token punctuation">\\</span>\n  -d <span class="token punctuation">\\</span>\n  --name rabbitmq-test <span class="token punctuation">\\</span>\n  -p <span class="token number">5672</span>:5672 <span class="token punctuation">\\</span>\n  -p <span class="token number">15672</span>:15672 <span class="token punctuation">\\</span>\n  rabbitmq:3.8.14-management\n\n<span class="token comment"># docker run -d --name rabbitmq-test -p 5672:5672 -p 15672:15672 rabbitmq:3.8.14-management</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>验证安装成功</p><ul><li><p>通过 <strong>docker ps</strong> 命令查看容器的运行信息：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>docker <span class="token function">ps</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>会看到类似如下信息：</p><p>略</p></li><li><p>访问 management web 管理系统。</p><p>由于我们使用的是 management 镜像创建的容器，因此，容器自带了后台管理系统。我们可以通过我们映射的 <strong>15672</strong> 端口访问。</p><p>访问网址 <code>http://宿主机IP:15672</code> ，使用 guest / guest 登录。<small>有一点点延迟，启动容器后稍等片刻。</small></p><blockquote><p>注意，虽然用户名是叫 <strong>guest</strong> ，但是它的角色是管理员 administrator 。</p></blockquote><p>当然，你也可以手动指定登录管理系统的用户名和密码：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>docker run <span class="token punctuation">\\</span>\n  <span class="token punctuation">..</span>. <span class="token punctuation">\\</span>\n  -e <span class="token assign-left variable">RABBITMQ_DEFAULT_USER</span><span class="token operator">=</span><span class="token operator">&lt;</span>自定义用户名<span class="token operator">&gt;</span> <span class="token punctuation">\\</span> \n  -e <span class="token assign-left variable">RABBITMQ_DEFAULT_PASS</span><span class="token operator">=</span><span class="token operator">&lt;</span>自定义密码<span class="token operator">&gt;</span> <span class="token punctuation">\\</span> \n  rabbitmq:3.8.14-management\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li></ul><h2 id="容器中的配置文件和数据的存储" tabindex="-1"><a class="header-anchor" href="#容器中的配置文件和数据的存储" aria-hidden="true">#</a> 容器中的配置文件和数据的存储</h2><p>Docker RabbitMQ 的配置文件时容器中的</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>/etc/rabbitmq/rabbitmq.config\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>其中的有效内容为：</p><div class="language-properties ext-properties line-numbers-mode"><pre class="language-properties"><code><span class="token attr-name">loopback_users.guest</span> <span class="token punctuation">=</span> <span class="token attr-value">false</span>\n<span class="token attr-name">listeners.tcp.default</span> <span class="token punctuation">=</span> <span class="token attr-value">5672</span>\n<span class="token attr-name">management.tcp.port</span> <span class="token punctuation">=</span> <span class="token attr-value">15672</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><hr><p>RabbitMQ 的数据存储依赖于 <strong>docker run</strong> 命令中的 <strong>--hostname</strong> 属性的属性值。</p><p>由于我们在创建容器时并没有指定容器的 <strong>--hostname</strong> ，Docker 会为我们创建的容器随机分配一个 <em>hostname</em> ，例如：<em><code>12e22c2be88d</code></em> 。</p><p>这种情况下，rabbitmq 的数据的存储路径就是容器中的：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>/var/lib/rabbitmq/mnesia/rabbit@12e22c2be88d\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>很显然，这种随机性很不方便，因此我们还是创建容器时自己指定 <strong>--hostname</strong> 的好。</p><h2 id="配置与挂载" tabindex="-1"><a class="header-anchor" href="#配置与挂载" aria-hidden="true">#</a> 配置与挂载</h2><ul><li><p>删除已存在的同名容器</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>docker stop rabbitmq-5672\ndocker <span class="token function">rm</span> rabbitmq-5672\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><p>创建宿主机挂载目录</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">mkdir</span> -p ~/docker/rabbitmq/5672/<span class="token punctuation">{</span>data,config<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li><p>创建并运行容器</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>docker run <span class="token punctuation">\\</span>\n      -d <span class="token punctuation">\\</span>\n      --rm <span class="token punctuation">\\</span>\n      --hostname rabbitmq-5672 <span class="token punctuation">\\</span>\n      --name rabbitmq-5672 <span class="token punctuation">\\</span>\n      -p <span class="token number">5672</span>:5672 <span class="token punctuation">\\</span>\n      -p <span class="token number">15672</span>:15672 <span class="token punctuation">\\</span>\n      -v ~/docker/rabbitmq/5672/data:/var/lib/rabbitmq/mnesia/rabbit@rabbitmq-5672 <span class="token punctuation">\\</span>\n      rabbitmq:3.8.14-management\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div></li></ul>',25),i={render:function(n,s){const a=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.iD)(e.HY,null,[p,(0,e._)("p",null,[t,(0,e._)("a",r,[l,(0,e.Wm)(a)])]),c],64)}}}}]);