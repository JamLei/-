"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[3941],{68133:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-6851b486",path:"/spring/09-%E5%85%B6%E5%AE%83%E6%B3%A8%E8%A7%A3.html",title:"Spring 其它注解和杂项",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"@Lazy 注解",slug:"lazy-注解",children:[]},{level:2,title:"Spring 的 @Import 注解",slug:"spring-的-import-注解",children:[]},{level:2,title:"用于单元测试中的注解",slug:"用于单元测试中的注解",children:[{level:3,title:"Spring 的 @Sql 注解",slug:"spring-的-sql-注解",children:[]},{level:3,title:"@AutoConfigureWebMvc 和 @AutoConfigureMockMvc",slug:"autoconfigurewebmvc-和-autoconfiguremockmvc",children:[]},{level:3,title:"@MockBean 和 @SpyBean",slug:"mockbean-和-spybean",children:[]}]},{level:2,title:"特殊情况下的 Bean 注入",slug:"特殊情况下的-bean-注入",children:[{level:3,title:"非托管对象中获取托管对象",slug:"非托管对象中获取托管对象",children:[]},{level:3,title:"单例 Bean 中注入多例 Bean",slug:"单例-bean-中注入多例-bean",children:[]}]}],filePathRelative:"spring/09-其它注解.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},36894:(n,s,a)=>{a.r(s),a.d(s,{default:()=>p});const t=(0,a(66252).uE)('<h1 id="spring-其它注解和杂项" tabindex="-1"><a class="header-anchor" href="#spring-其它注解和杂项" aria-hidden="true">#</a> Spring 其它注解和杂项</h1><h2 id="lazy-注解" tabindex="-1"><a class="header-anchor" href="#lazy-注解" aria-hidden="true">#</a> @Lazy 注解</h2><p>使用 @Lazy 注解的典型场景就是解决循环依赖问题。特别是构造注入，@Lazy 是弥补构造注入的『缺点』的关键。</p><p>当你对注入的 JavaBean 使用 @Lazy 注解时，Spring 注入的并非是这个单例对象，而是它的一个代理。当你（在未来）第一次使用这个 Bean 时，这个代理对象才会去 IoC 容器中找这个真正的 Bean 。</p><h2 id="spring-的-import-注解" tabindex="-1"><a class="header-anchor" href="#spring-的-import-注解" aria-hidden="true">#</a> Spring 的 @Import 注解</h2><p>在使用 maven 多模块的概念去构建项目时，我们的各个 @Bean 会分散在各个子模块中。</p><p>当然，我们可以仍在入口模块<small>（web）</small>中通过配置去配置各个模块必须创建的单例 Bean ，不过更好的方式是：将各个模块的配置也分散在各个模块中，由各个模块自己负责，最后让入口模块引入各个模块的配置即可。这样的话，责任更加分明。</p><ul><li><p>一个独立的配置类：ConfigA.java</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token string">&quot;com.example.commandpattern.config.a&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigA</span> <span class="token punctuation">{</span>\n\n    <span class="token annotation punctuation">@Bean</span>\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token string">&quot;hello world&quot;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></li><li><p>另一个独立的配置类：ConfigB.java</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token string">&quot;com.example.commandpattern.config.b&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigB</span> <span class="token punctuation">{</span>\n\n    <span class="token annotation punctuation">@Bean</span>\n    <span class="token keyword">public</span> <span class="token class-name">LocalDate</span> <span class="token function">localDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></li><li><p>主配置类：MainConfig.java</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// 主配置类引入各个独立配置类</span>\n<span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ConfigA</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">ConfigB</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainConfig</span> <span class="token punctuation">{</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><p>引入，使用：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// 只需要将主配之类交给 Spring IoC 容器即可。</span>\n<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">MainConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">StudentDao</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">StudentService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></li></ul><h2 id="用于单元测试中的注解" tabindex="-1"><a class="header-anchor" href="#用于单元测试中的注解" aria-hidden="true">#</a> 用于单元测试中的注解</h2><p>Spring 中有一些注解，主要的使用场景是用于单元测试中。</p><h3 id="spring-的-sql-注解" tabindex="-1"><a class="header-anchor" href="#spring-的-sql-注解" aria-hidden="true">#</a> Spring 的 @Sql 注解</h3><p><strong>@Sql</strong> 注解主要用于 JUnit 测试代码中，结合 @Transactional 和 @Rollback 它可以执行测试代码之前，先执行指定的 SQL 脚本或 SQL 语句，用以构造数据库测试环境。</p><h4 id="核心注解-sql-docsify-ignore" tabindex="-1"><a class="header-anchor" href="#核心注解-sql-docsify-ignore" aria-hidden="true">#</a> 核心注解 @Sql {docsify-ignore}</h4><p><strong>@Sql</strong> 注解可以执行 SQL 脚本，也可以执行 SQL 语句。它既可以加上类上面，也可以加在方法上面。</p><p>默认情况下，方法上的 @Sql 注解会覆盖类上的 @Sql 注解。<small>但可以通过 @SqlMergeMode 注解来修改此默认行为。</small></p><p><strong>@Sql</strong> 有下面的属性：</p><table><thead><tr><th style="text-align:left;">属性</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">config</td><td style="text-align:left;">与注解 @SqlConfig 作用一样，用来配置“注释前缀”、“分隔符”等。</td></tr><tr><td style="text-align:left;">executionPhase</td><td style="text-align:left;">决定 SQL 脚本或语句什么时候会执行，默认是 BEFORE_TEST_METHOD 。</td></tr><tr><td style="text-align:left;">statements</td><td style="text-align:left;">配置要一起执行的 SQL 语句。</td></tr><tr><td style="text-align:left;">scripts</td><td style="text-align:left;">配置 SQL 脚本路径。</td></tr><tr><td style="text-align:left;">value</td><td style="text-align:left;">scripts 的别名，它不能和 scripts 同时配置，但 statements 可以。</td></tr></tbody></table><p>例如：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Sql</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token string">&quot;/drop_schema.sql&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/create_schema.sql&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@Sql</span><span class="token punctuation">(</span>scripts <span class="token operator">=</span> <span class="token string">&quot;/insert_data1.sql&quot;</span><span class="token punctuation">,</span> statements <span class="token operator">=</span> <span class="token string">&quot;insert into student(id, name) values (100, &#39;Shiva&#39;)&quot;</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@ExtendWith</span><span class="token punctuation">(</span><span class="token class-name">SpringExtension</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@ContextConfiguration</span><span class="token punctuation">(</span>classes <span class="token operator">=</span> <span class="token class-name">AppConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SqlTest</span> <span class="token punctuation">{</span>\n\t<span class="token annotation punctuation">@Autowired</span>\n\t<span class="token keyword">private</span> <span class="token class-name">JdbcTemplate</span> jdbcTemplate<span class="token punctuation">;</span>\n\n\t<span class="token annotation punctuation">@Test</span>\n\t<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fetchRows1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> students <span class="token operator">=</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">queryForList</span><span class="token punctuation">(</span><span class="token string">&quot;SELECT * FROM student&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> students<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n\n\t<span class="token annotation punctuation">@Sql</span><span class="token punctuation">(</span><span class="token string">&quot;/insert_more_data1.sql&quot;</span><span class="token punctuation">)</span>\n\t<span class="token annotation punctuation">@Test</span>\n\t<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fetchRows2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> students <span class="token operator">=</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">queryForList</span><span class="token punctuation">(</span><span class="token string">&quot;SELECT * FROM student&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> students<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span> \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><ul><li><p>drop_schema.sql ：</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">drop</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token keyword">exists</span> student<span class="token punctuation">;</span> \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li><p>create_schema.sql ：</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> student <span class="token punctuation">(</span>\n    id <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n    name <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span> \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li><li><p>insert_data1.sql ：</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">insert</span> <span class="token keyword">into</span> student<span class="token punctuation">(</span>id<span class="token punctuation">,</span> name<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">,</span> <span class="token string">&#39;Mohan&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">insert</span> <span class="token keyword">into</span> student<span class="token punctuation">(</span>id<span class="token punctuation">,</span> name<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">102</span><span class="token punctuation">,</span> <span class="token string">&#39;Krishna&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><p>insert_more_data1.sql ：</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">insert</span> <span class="token keyword">into</span> student<span class="token punctuation">(</span>id<span class="token punctuation">,</span> name<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">103</span><span class="token punctuation">,</span> <span class="token string">&#39;Indra&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">insert</span> <span class="token keyword">into</span> student<span class="token punctuation">(</span>id<span class="token punctuation">,</span> name<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">104</span><span class="token punctuation">,</span> <span class="token string">&#39;Chandra&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li></ul><h4 id="相关注解-sqlconfig-了解-docsify-ignore" tabindex="-1"><a class="header-anchor" href="#相关注解-sqlconfig-了解-docsify-ignore" aria-hidden="true">#</a> 相关注解 @SqlConfig（了解） {docsify-ignore}</h4><p>@SqlConfig 用于配置如何去解释 @Sql 注解中指定的 Sql 脚本。</p><p>@SqlConfig 可以用于类上，也可以用于方法上。</p><blockquote><p>@Sql 注解也有一个 config 属性，作用与 @SqlConfig 相同，不同的是作用域只在对应的 @Sql 注解范围。它的优先级也大于类注解的 @SqlConfig 。</p></blockquote><table><thead><tr><th style="text-align:left;">属性</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">blockCommentStartDelimiter</td><td style="text-align:left;">多行注释开始字符，默认是 <code>/*</code> 。</td></tr><tr><td style="text-align:left;">blockCommentEndDelimiter</td><td style="text-align:left;">多行注释结束字符，默认是 <code>*/</code> 。</td></tr><tr><td style="text-align:left;">commentPrefix</td><td style="text-align:left;">单行注释前缀，默认是 <code>–</code> 。</td></tr><tr><td style="text-align:left;">commentPrefixes</td><td style="text-align:left;">指定多个单行注释前缀，默认是 <code>[&quot;–&quot;]</code></td></tr><tr><td style="text-align:left;">dataSource</td><td style="text-align:left;">指定脚本执行的数据库的名字，只有在多个数据源时需要指定</td></tr><tr><td style="text-align:left;">encoding</td><td style="text-align:left;">指定 sql 脚本文件的字符编码。</td></tr><tr><td style="text-align:left;">errorMode</td><td style="text-align:left;">配置错误模式，默认是 SqlConfig.ErrorMode 的 DEFAULT</td></tr><tr><td style="text-align:left;">separator</td><td style="text-align:left;">配置脚本语句分隔符，默认是 <code>\\n</code></td></tr><tr><td style="text-align:left;">transactionManager</td><td style="text-align:left;">指定 transactionManager bean，只有有多个 transactionManager 时需要指定</td></tr><tr><td style="text-align:left;">transactionMode</td><td style="text-align:left;">指定脚本执行的事务模式，默认是 SqlConfig.TransactionMode 的 DEFAULT</td></tr></tbody></table><p>例子：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@SqlConfig</span><span class="token punctuation">(</span>commentPrefix <span class="token operator">=</span> <span class="token string">&quot;#&quot;</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@Sql</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token string">&quot;/drop_schema.sql&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/create_schema.sql&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@Sql</span><span class="token punctuation">(</span>scripts <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">&quot;/insert_data2.sql&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@ExtendWith</span><span class="token punctuation">(</span><span class="token class-name">SpringExtension</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@ContextConfiguration</span><span class="token punctuation">(</span>classes <span class="token operator">=</span> <span class="token class-name">AppConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SqlConfigTest</span> <span class="token punctuation">{</span>\n\t<span class="token annotation punctuation">@Autowired</span>\n\t<span class="token keyword">private</span> <span class="token class-name">JdbcTemplate</span> jdbcTemplate<span class="token punctuation">;</span>\n\n\t<span class="token annotation punctuation">@Test</span>\n\t<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fetchRows1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> students <span class="token operator">=</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">queryForList</span><span class="token punctuation">(</span><span class="token string">&quot;SELECT * FROM student&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> students<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n\n\t<span class="token annotation punctuation">@Sql</span><span class="token punctuation">(</span>scripts <span class="token operator">=</span> <span class="token string">&quot;/insert_more_data2.sql&quot;</span><span class="token punctuation">,</span> config<span class="token operator">=</span> <span class="token annotation punctuation">@SqlConfig</span><span class="token punctuation">(</span>commentPrefix <span class="token operator">=</span> <span class="token string">&quot;~&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\t<span class="token annotation punctuation">@Test</span>\n\t<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fetchRows2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> students <span class="token operator">=</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">queryForList</span><span class="token punctuation">(</span><span class="token string">&quot;SELECT * FROM student&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> students<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p>insert_data2.sql ：</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token comment">-- Insert initial data</span>\n<span class="token keyword">insert</span> <span class="token keyword">into</span> student<span class="token punctuation">(</span>id<span class="token punctuation">,</span> name<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">,</span> <span class="token string">&#39;Mohan&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">insert</span> <span class="token keyword">into</span> student<span class="token punctuation">(</span>id<span class="token punctuation">,</span> name<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">102</span><span class="token punctuation">,</span> <span class="token string">&#39;Krishna&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="相关注解-sqlmergemode-了解-docsify-ignore" tabindex="-1"><a class="header-anchor" href="#相关注解-sqlmergemode-了解-docsify-ignore" aria-hidden="true">#</a> 相关注解 @SqlMergeMode（了解） {docsify-ignore}</h4><p>@SqlMergeMode 可以加在类上，也可以加在方法上。用于指示方法上的 @Sql 和类上 @Sql 注解配置是否合并。方法上的 @SqlMergeMode 注解优先级更高。默认值是 SqlMergeMode.MergeMode 的 OVERRIDE 。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@SqlMergeMode</span><span class="token punctuation">(</span><span class="token class-name">MergeMode</span><span class="token punctuation">.</span>MERGE<span class="token punctuation">)</span>\n<span class="token annotation punctuation">@Sql</span><span class="token punctuation">(</span><span class="token punctuation">{</span> \n\t<span class="token string">&quot;/drop_schema.sql&quot;</span><span class="token punctuation">,</span> \n\t<span class="token string">&quot;/create_schema.sql&quot;</span><span class="token punctuation">,</span> \n\t<span class="token string">&quot;/insert_data1.sql&quot;</span> \n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@ExtendWith</span><span class="token punctuation">(</span><span class="token class-name">SpringExtension</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@ContextConfiguration</span><span class="token punctuation">(</span>classes <span class="token operator">=</span> <span class="token class-name">AppConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SqlMergeModeTest</span> <span class="token punctuation">{</span>\n\t\n\t<span class="token annotation punctuation">@Autowired</span>\n\t<span class="token keyword">private</span> <span class="token class-name">JdbcTemplate</span> jdbcTemplate<span class="token punctuation">;</span>\n\n\t<span class="token annotation punctuation">@Sql</span><span class="token punctuation">(</span>statements <span class="token operator">=</span> <span class="token string">&quot;insert into student(id, name) values (100, &#39;Shiva&#39;)&quot;</span><span class="token punctuation">)</span>\t\n\t<span class="token annotation punctuation">@Test</span>\n\t<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fetchRows1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> students <span class="token operator">=</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">queryForList</span><span class="token punctuation">(</span><span class="token string">&quot;SELECT * FROM student&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> students<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n\n\t<span class="token annotation punctuation">@SqlMergeMode</span><span class="token punctuation">(</span><span class="token class-name">MergeMode</span><span class="token punctuation">.</span>OVERRIDE<span class="token punctuation">)</span>\t\n\t<span class="token annotation punctuation">@Sql</span><span class="token punctuation">(</span><span class="token string">&quot;/insert_more_data1.sql&quot;</span><span class="token punctuation">)</span>\n\t<span class="token annotation punctuation">@Test</span>\n\t<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fetchRows2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> students <span class="token operator">=</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">queryForList</span><span class="token punctuation">(</span><span class="token string">&quot;SELECT * FROM student&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> students<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span> \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><h3 id="autoconfigurewebmvc-和-autoconfiguremockmvc" tabindex="-1"><a class="header-anchor" href="#autoconfigurewebmvc-和-autoconfiguremockmvc" aria-hidden="true">#</a> @AutoConfigureWebMvc 和 @AutoConfigureMockMvc</h3><ul><li><p>@AutoConfigureWebMvc</p><p>主要用于 JUnit 测试代码中，特别是测试 Web 层的测试代码。它用于构建『仅包含』Web 层<small>（及相关）</small>的 Java Bean 的 Spring IoC 容器。</p><p>简单来说，对比与 @SpringBootTest，@AutoConfigureWebMvc 构造出来的 Spring IoC 容器只是 @SpringBootTest 构造出来的 IoC 容器的子集。</p><p>在这种情况下，你如果去 @Autowired 一个 Service 或 Dao，你会发现 Junit 代码执行报错，因为，这里的 Spring IoC 容器中没有 Service 和 Dao 的单例对象。</p><p>它启用与 Web 层相关的所有自动配置，并且仅启用 Web 层。这是整体自动配置的子集。</p></li><li><p>@AutoConfigureMockMvc</p><p><strong>@AutoConfigureMockMvc</strong> 注解用于测试 Web 层 Controller 的 JUnit 代码中。它会在 Spring IoC 容器中自动创建、配置一个 MockMvc 单例对象。而后，我们可以在测试代码中 @Autowired 它，并发起对 @Controller 的 HTTP 请求测试。</p><p>需要注意的是，正常情况下，Spring IoC 容器中是没有 MockMvc 单例对象的，你必须使用 @AutoconfigureMockMvc 才会导致 Spring IoC 容器创建、维护它。</p></li><li><p><strong>@WebMvcTest</strong></p><p>它是 @AutoConfigureWebMvc 和 @AutoConfigureMockMvc 的组合，一个顶俩。</p></li></ul><p>另外，</p><h3 id="mockbean-和-spybean" tabindex="-1"><a class="header-anchor" href="#mockbean-和-spybean" aria-hidden="true">#</a> @MockBean 和 @SpyBean</h3><p><strong>@MockBean</strong> 注解会代理 bean 的所有方法，对于未 mock 的方法调用均是返回 null：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@MockBean</span>\n<span class="token keyword">private</span> <span class="token class-name">UsersService</span> usersService<span class="token punctuation">;</span>\n\n<span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createUsersTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n    <span class="token comment">/* \n     * @MockBean 注解会代理 bean 的所有方法，对于未 mock 的方法调用均是返回 null，\n     * 这里的意思是针对调用 createUsers 方法的任意入参，均返回指定的结果\n     */</span>\n    <span class="token function">given</span><span class="token punctuation">(</span>usersService<span class="token punctuation">.</span><span class="token function">createUsers</span><span class="token punctuation">(</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">willReturn</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><hr><p>@SpyBean 可达到部分 mock 的效果，未被 mock 的方法会被真实调用</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@SpyBean</span>\n<span class="token keyword">private</span> <span class="token class-name">UsersService</span> usersService<span class="token punctuation">;</span>\n\n<span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createUsersTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Users</span> users <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Users</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    users<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">&quot;jufeng98&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">/* @SpyBean可达到部分mock的效果,仅当 doReturn(&quot;&quot;).when(service).doSomething() 时，doSomething方法才被mock，\n     * 其他的方法仍被真实调用。\n     * 未发生实际调用\n     */</span>\n    <span class="token function">doReturn</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">when</span><span class="token punctuation">(</span>usersService<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createUsers</span><span class="token punctuation">(</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h2 id="特殊情况下的-bean-注入" tabindex="-1"><a class="header-anchor" href="#特殊情况下的-bean-注入" aria-hidden="true">#</a> 特殊情况下的 Bean 注入</h2><h3 id="非托管对象中获取托管对象" tabindex="-1"><a class="header-anchor" href="#非托管对象中获取托管对象" aria-hidden="true">#</a> 非托管对象中获取托管对象</h3><p>有时你需要在非托管对象中获取 Spring 的 ApplicationContext</p><h4 id="方案一-通用方案" tabindex="-1"><a class="header-anchor" href="#方案一-通用方案" aria-hidden="true">#</a> 方案一：通用方案</h4><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Slf4j</span>\n<span class="token annotation punctuation">@Component</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApplicationContextHolder</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ApplicationContext</span> APPLICATION_CONTEXT<span class="token punctuation">;</span>\n\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ApplicationContext</span> context<span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">ApplicationContextHolder</span><span class="token punctuation">(</span><span class="token class-name">ApplicationContext</span> applicationContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        application <span class="token operator">=</span> applicationContext<span class="token punctuation">;</span>\n        APPLICATION_CONTEXT <span class="token operator">=</span> applicationContext<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ApplicationContext</span> <span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> APPLICATION_CONTEXT<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>使用时调用：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">ApplicationContextRegister</span><span class="token punctuation">.</span><span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">Xxx</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h4 id="方案二-spring-可用-spring-boot-不可用" tabindex="-1"><a class="header-anchor" href="#方案二-spring-可用-spring-boot-不可用" aria-hidden="true">#</a> 方案二：Spring 可用，Spring Boot 不可用</h4><p>在 Spring 项目中可用，在 Spring Boot 项目中不可用。</p><p>还有一种方案可以实现同样效果，直接调用 Spring 提供的工具类：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">ContextLoader</span><span class="token punctuation">.</span><span class="token function">getCurrentWebApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">Xxx</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>经测试发现，在 Spring Boot 项目中该方案无效。有人跟踪源码分析，因为 Spring Boot 的内嵌 Tomcat 和真实 Tomcat 还是有一定的区别，从而导致 Spring Boot 中该方案无法起到一起效果。</p><h3 id="单例-bean-中注入多例-bean" tabindex="-1"><a class="header-anchor" href="#单例-bean-中注入多例-bean" aria-hidden="true">#</a> 单例 Bean 中注入多例 Bean</h3><pre><code>保证每次获取都是新的多例 Bean 。\n</code></pre><p>在 Spring 中 如果需要一个对象为多例，需要使用 <strong>@Scope</strong> 注解，指明作用于为 <strong>SCOPE_PROTOTYPE</strong> 即可。</p><p>当我们在一个单例的 Bean <strong>A</strong> 中注入多例 Bean <strong>B</strong> 时，由于 Spring 在初始化过程中加载 <strong>A</strong> 的时候已经将 <strong>B</strong> 注入到 <strong>A</strong> 中，所以直接当做成员变量时，只会获取一个实例。</p><p>我们可以通过以下两种优雅的方法解决：</p><ul><li><p>使用 Spring 的 <strong>ObjectFactory</strong></p></li><li><p>使用 <strong>@Looup</strong> 注解</p></li></ul><h4 id="方案一-spring-的-objectfactory" tabindex="-1"><a class="header-anchor" href="#方案一-spring-的-objectfactory" aria-hidden="true">#</a> 方案一：Spring 的 ObjectFactory</h4><p>为你的单例对象注入一个 Spring 提供的 <strong>ObjectFactory</strong> ，毫无疑问，<strong>ObjectFacotry</strong> 也是一个单例对象。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingleBean</span> <span class="token punctuation">{</span>\n\n    <span class="token annotation punctuation">@Autowired</span>\n    <span class="token class-name">ObjectFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PrototypeBean</span><span class="token punctuation">&gt;</span></span> factory<span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;single service is &quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        factory<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>但是，在单例对象中，你只要通过 <strong>ObjectFactory</strong><small>（的封装）</small>的 <strong>ObjectFactory.getObject()</strong> 方法去获得多例对象，每次它返回给你的都是一个『新』的对象。</p><h4 id="方案二-lookup-注解" tabindex="-1"><a class="header-anchor" href="#方案二-lookup-注解" aria-hidden="true">#</a> 方案二：<strong>@Lookup</strong> 注解</h4><p>我们可以使用 Spring 的 <strong>@Lookup</strong> 注解。该注解主要为单例 Bean 实现一个 cglib 代理类，并通过 <strong>BeanFacoty.getBean()</strong> 来获取对象。</p><p><strong>@Lookup</strong> 注解是一个作用在方法上的注解，被其标注的方法会被 Spring 通过 cglib 实现的代理类重写，然后根据其返回值的类型，容器调用 BeanFactory 的 getBean() 方法来返回一个 bean 。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingleBean</span> <span class="token punctuation">{</span>\n\n  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;This is SingleBean: &quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">getPrototypeBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">xxx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n \n  <span class="token doc-comment comment">/**\n   * 方法的存在，以及方法的返回值是关键。\n   * 该方法会被 Spring 重写：Spring 会来保证在『别处』你调用这个方法时，每次都返回一个新的 PrototypeBean 对象给你。\n   */</span>\n  <span class="token annotation punctuation">@Lookup</span>\n  <span class="token keyword">public</span> <span class="token class-name">PrototypeBean</span> <span class="token function">getPrototypeBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div>',67),p={render:function(n,s){return t}}}}]);