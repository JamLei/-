"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[6852],{43054:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-f8c7305c",path:"/utility/guava/10-EventBus.html",title:"Guava 中的 EventBus",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"自定义 Event",slug:"自定义-event",children:[]},{level:2,title:"定义 EventHandler",slug:"定义-eventhandler",children:[]},{level:2,title:"注册 EventHandler",slug:"注册-eventhandler",children:[]},{level:2,title:"触发事件",slug:"触发事件",children:[]},{level:2,title:"异步调用",slug:"异步调用",children:[]}],filePathRelative:"utility/guava/10-EventBus.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},11351:(n,s,a)=>{a.r(s),a.d(s,{default:()=>t});const e=(0,a(66252).uE)('<h1 id="guava-中的-eventbus" tabindex="-1"><a class="header-anchor" href="#guava-中的-eventbus" aria-hidden="true">#</a> Guava 中的 EventBus</h1><p>EventBus 是 Guava 的事件处理机制，是设计模式中的观察者模式<small>（生产/消费者编程模型）</small>的优雅实现。对于事件监听和发布订阅模式，EventBus 是一个非常优雅和简单解决方案，我们不用创建复杂的类和接口层次结构。</p><blockquote><p>如果你的项目中本来就会用到 Guava 包，而碰巧你又想来利用 EventBus 功能，那么，你完全没有必要再引入 Android 中的“著名”的 EventBus 包。Guava 中本身就有 EventBus 功能。</p><p>当然，考虑到你的项目大概率肯定是要使用 Spring 的包的，而 Spring 的包里也有 EventBus 功能。</p></blockquote><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token comment">&lt;!-- https://mvnrepository.com/artifact/com.google.guava/guava --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.google.guava<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>guava<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>29.0-jre<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>Guava 中的 EventBus 和 EventBus 包中的相关概念是一样的。</p><p>使用 EventBus 需要做三方面的工作：</p><h2 id="自定义-event" tabindex="-1"><a class="header-anchor" href="#自定义-event" aria-hidden="true">#</a> 自定义 Event</h2><blockquote><p>和 EventBus 包一样</p></blockquote><p>在最简单的情况下，这一步并不是必须的，你可以直接利用 JDK 自带的例如 String 这样内置类。因为 Guava 的 EventBus 机制也不要求必须实现某个接口，或继承某个类。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloEvent</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">HelloEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">}</span>\n\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="定义-eventhandler" tabindex="-1"><a class="header-anchor" href="#定义-eventhandler" aria-hidden="true">#</a> 定义 EventHandler</h2><blockquote><p>和 EventBus 包一样</p></blockquote><p>和定义 Event 一样，Guava 不强求你的自定义类必须实现某个接口，或继承某个类。在事件处理方法上标注 <code>@Subscribe</code> 注解即可。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloEventHandler</span> <span class="token punctuation">{</span>\n\n    <span class="token annotation punctuation">@Subscribe</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">HelloEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;触发执行&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// 可以再注册一个方法，实现多个方法同时响应 HelloEvent 。</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>这里需要注意再次强调的是：@Subscribe 方法的参数要与消息类【遥相呼应】。</p><h2 id="注册-eventhandler" tabindex="-1"><a class="header-anchor" href="#注册-eventhandler" aria-hidden="true">#</a> 注册 EventHandler</h2><p>你需要在一个合适的地方<small>（例如 main 方法）</small>创建一个 EventBus 对象，并在合适的地方通过它注册你的 EventHandler 。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">EventBus</span> eventBus <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventBus</span><span class="token punctuation">(</span><span class="token string">&quot;xxx&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\neventBus<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HelloEventHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 向 EventBus 注册</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="触发事件" tabindex="-1"><a class="header-anchor" href="#触发事件" aria-hidden="true">#</a> 触发事件</h2><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>eventBus<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HelloEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="异步调用" tabindex="-1"><a class="header-anchor" href="#异步调用" aria-hidden="true">#</a> 异步调用</h2><p>Guava 中的 EventBus 也支持异步调用，只需要在创建 EventBus 时使用异步 EventBus 即可：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// EventBus eventBus = new EventBus();</span>\n<span class="token class-name">AsyncEventBus</span> eventBus <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AsyncEventBus</span><span class="token punctuation">(</span><span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\neventBus<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringEventHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\neventBus<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>',23),t={render:function(n,s){return e}}}}]);