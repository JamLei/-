"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[8164],{96734:(a,n,s)=>{s.r(n),s.d(n,{data:()=>t});const t={key:"v-1d67bbcd",path:"/spring-mvc/303-%E5%9B%BD%E9%99%85%E5%8C%96.html",title:"国际化",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"基本概念",slug:"基本概念",children:[]},{level:2,title:"指明（并加载）资源文件",slug:"指明-并加载-资源文件",children:[]},{level:2,title:"获得 Locale 对象",slug:"获得-locale-对象",children:[{level:3,title:"AcceptHeaderLocaleResolver",slug:"acceptheaderlocaleresolver",children:[]},{level:3,title:"SessionLocaleResolver",slug:"sessionlocaleresolver",children:[]},{level:3,title:"CookieLocaleResolver",slug:"cookielocaleresolver",children:[]}]},{level:2,title:"修改 Locale 信息",slug:"修改-locale-信息",children:[{level:3,title:"非常规办法",slug:"非常规办法",children:[]},{level:3,title:"常规办法： LocaleChangeInterceptor 拦截器",slug:"常规办法-localechangeinterceptor-拦截器",children:[]}]}],filePathRelative:"spring-mvc/303-国际化.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},29283:(a,n,s)=>{s.r(n),s.d(n,{default:()=>e});const t=(0,s(66252).uE)('<h1 id="国际化" tabindex="-1"><a class="header-anchor" href="#国际化" aria-hidden="true">#</a> 国际化</h1><h2 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念" aria-hidden="true">#</a> 基本概念</h2><p><strong>国际化</strong> 是开发支持多语言和数据格式的应用程序的技术，无需重新编写编程逻辑。国际化单词 internationlization 常缩写为 <code>i18n</code> 。</p><p><strong>本地化</strong> 这是将国际化应用程序改成支持特定 <strong>语言区域</strong> （locale）的技术。语言区域是指一个特定的地理、政治或文化区域。会影响到文字、时间日期格式等的形式。</p><p>在 Java 中，<code>java.util.Locale</code> 类表示一个语言区域。一个 Locale 对象主要包含 2 个主要概念：<code>language</code>（语言） 和 <code>country</code>（国家）。为此 <strong>国家化标准组织</strong> 专门制定了 <code>ISO 639</code> 标准（用于标识语言）和 <code>ISO 3166</code>标准（用于标识国家）。</p><p>SpringMVC 的国际化问题，就是回答两个问题：</p><ul><li>提供资源文件在哪里？（<small>以及如何加载？</small>）</li><li>如何获得 Locale 对象？（<small>以决定使用哪个资源文件</small>）</li></ul><ol><li>如何加载某个地方的资源文件，常见有两种途径。</li><li>如何获得 Locale 对象，有三种途径。</li></ol><p>使用国际化功能，再次强调，不要直接访问 JSP 页面，而是通过 Controller “转到” JSP 页面，因为 JSP 页面的显示，需要 Spring MVC 做一些准备工作，一旦“绕过”Controller，导致“准备工作”不充分会造成 JSP 页面无法正常显示。</p><h2 id="指明-并加载-资源文件" tabindex="-1"><a class="header-anchor" href="#指明-并加载-资源文件" aria-hidden="true">#</a> 指明（并加载）资源文件</h2><p>资源文件有固定的命名规则：有一个任意的基准名，后面再接下划线、语言码，还可以选择加一条下划线和国家码。如：</p><ul><li>messages_zh_CN.properties</li><li>messages_en_US.properties</li><li>messages_de_DE.properties</li></ul><p>这里 <strong>基准名</strong> 是代表这一系列文件的标志，后续所使用的“文件名”或“文件路径名”的概念，通常都只算到 基准名 部分位置。</p><p>在 Spring MVC 中，通过配置 <code>ReloadableResourceBundleMessageSource</code> 类，或 <code>ResourceBundleMessageSource</code> 类来查找/加载上述资源文件。</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>messageSource<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>\n        org.springframework.context.support .ReloadableResourceBundleMessageSource<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>basenames<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n       \t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">&gt;</span></span>\n   \t\t\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>classpath:message<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>\t    <span class="token comment">&lt;!-- 需要使用 classpath 关键字 --&gt;</span>\n   \t\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>messageSource<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>\n        org.springframework.context.support.ResourceBundleMessageSource<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>basenames<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">&gt;</span></span>\n   \t        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">&gt;</span></span>message<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">&gt;</span></span>\t        <span class="token comment">&lt;!-- 不需要使用 classpath 关键字 --&gt;</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>以上两个类二选一，让 Spring 容器去创建其中一个的单例对象即可。对它们两个的配置，就相当于实现了国际化的第一步：<em>告诉 Spring MVC 资源文件在哪</em> 。</p><h2 id="获得-locale-对象" tabindex="-1"><a class="header-anchor" href="#获得-locale-对象" aria-hidden="true">#</a> 获得 Locale 对象</h2><p>在第一步工作告知 Spring MVC 资源文件在什么地方后，Spring MVC 需要考虑的就是如果获取 Locale 对象，以决定使用“一堆”资源文件中的哪一个。</p><p>Spring MVC 有三种方式获得 Locale 对象：</p><ul><li>AcceptHeaderLocaleResolver，从 Http 请求头中获取</li><li>SessionLocaleResolver，从 Session 对象中获取</li><li>CookieLocaleResolver，从 Cookie 对象中获取</li></ul><p><code>注意</code>，以上三种途径是互斥的，期望采用那种途径，就让 Spring 去创建/维护这个类的一个单例对象。且名字必须为 <code>localeResolver</code>。</p><h3 id="acceptheaderlocaleresolver" tabindex="-1"><a class="header-anchor" href="#acceptheaderlocaleresolver" aria-hidden="true">#</a> AcceptHeaderLocaleResolver</h3><p>AcceptHeaderLocaleResolver 是 Spring MVC 默认的区域解析器，它会在 HTTP 请求的 accept-language 头部查找 Locale 信息，并以此决定使用哪个资源文件。</p><p>这个头部是由用户的web浏览器根据底层操作系统的区域设置进行设定。</p><h3 id="sessionlocaleresolver" tabindex="-1"><a class="header-anchor" href="#sessionlocaleresolver" aria-hidden="true">#</a> SessionLocaleResolver</h3><p>AcceptHeaderLocaleResolver 它会从当前请求的 Session 中查找Locale信息，如果 Session 中没有，那么它会根据 accept-language 头部信息确定区域信息。</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>localeResolver<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.springframewrok.web.servlet\n    .i18n.SessionLocaleResolver<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>defaultLocale<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="cookielocaleresolver" tabindex="-1"><a class="header-anchor" href="#cookielocaleresolver" aria-hidden="true">#</a> CookieLocaleResolver</h3><p>CookieLocaleResolver 它会从请求的 cookie 中查找 Locale 信息，如果 cookie 中没有，那么它会根据 accept-language 头部信息确定区域信息。</p><p>这个区域解析器所采用的 Cookie 可以通过 cookieName 和 cookieMaxAge 属性进行定制。cookieMaxAge 属性表示这个 Cookie 应该持续多少秒，-1表示这个 Cookie 在浏览器关闭之后就失效。</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>localeResolver<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.springframework.web.servlet.i18n.CookieLocaleResolver<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cookieName<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>language<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cookieMaxAge<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>3600<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>defaultLocale<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="修改-locale-信息" tabindex="-1"><a class="header-anchor" href="#修改-locale-信息" aria-hidden="true">#</a> 修改 Locale 信息</h2><h3 id="非常规办法" tabindex="-1"><a class="header-anchor" href="#非常规办法" aria-hidden="true">#</a> 非常规办法</h3><p>如果使用的是 <code>AcceptHeaderLocaleResolver</code>，那么需要修改用户的浏览器设置，以实现locale信息的修改。</p><p>如果使用的是 <code>SessionLocaleResolver</code> 或 <code>CookieLocaleResolver</code>，可以在代码中通过显示调用 <code>LocaleResolver.setLocale()</code> 来修改客户端的 locale 信息，并且该信息会存储于 Session，或 Cookie 中。但这不是首选方案。</p><h3 id="常规办法-localechangeinterceptor-拦截器" tabindex="-1"><a class="header-anchor" href="#常规办法-localechangeinterceptor-拦截器" aria-hidden="true">#</a> 常规办法： LocaleChangeInterceptor 拦截器</h3><p>Spring MVC 提供了 <code>LocaleChangeInterceptor</code> 拦截器，该拦截器会发现当前 HTTP 请求中出现的 <strong>特殊参数</strong> 。如果这种参数出现在当前请求中，拦截器就会根据参数值来改变用户的区域。</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptors</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>localeChangeInterceptor<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.springframework.web.servlet.i18n.LocaleChangeInterceptor<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>paramName<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>lang<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptors</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>http://localhost:8080/court/welcome.do?lang=en_US\nhttp://localhost:8080/court/welcome.do?lang=zh_CN\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',39),e={render:function(a,n){return t}}}}]);