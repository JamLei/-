"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[892],{70607:(s,n,a)=>{a.r(n),a.d(n,{data:()=>e});const e={key:"v-288b6bfa",path:"/docker/04-compose.html",title:"Docker-Compose",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"docker compose 安装与卸载",slug:"docker-compose-安装与卸载",children:[]},{level:2,title:"docker compose 重要命令",slug:"docker-compose-重要命令",children:[{level:3,title:"命令选项",slug:"命令选项",children:[]},{level:3,title:"常用 & 重要命令",slug:"常用-重要命令",children:[]},{level:3,title:"docker up 命令",slug:"docker-up-命令",children:[]}]},{level:2,title:"docker-compose.yml 文件",slug:"docker-compose-yml-文件",children:[{level:3,title:"docker-compose.yml 文件内容详解",slug:"docker-compose-yml-文件内容详解",children:[]},{level:3,title:"docker-compose.yml 的 volumes 的第二种写法",slug:"docker-compose-yml-的-volumes-的第二种写法",children:[]}]}],filePathRelative:"docker/04-compose.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},86104:(s,n,a)=>{a.r(n),a.d(n,{default:()=>l});const e=(0,a(66252).uE)('<h1 id="docker-compose" tabindex="-1"><a class="header-anchor" href="#docker-compose" aria-hidden="true">#</a> Docker-Compose</h1><p>Compose 项目是 Docker 官方的开源项目，负责实现对 Docker 容器集群的快速编排。使用前面介绍的 Dockerfile 我们很容易定义一个单独的应用容器。然而在日常开发工作中，经常会碰到需要多个容器相互配合来完成某项任务的情况。例如要实现一个 Web 项目，除了 Web 服务容器本身，往往还需要再加上后端的数据库服务容器；再比如在分布式应用一般包含若干个服务，每个服务一般都会部署多个实例。如果每个服务都要手动启停，那么效率之低、维护量之大可想而知。这时候就需要一个工具能够管理一组相关联的的应用容器，这就是 Docker Compose 。</p><p>Compose 有 2 个重要的概念：</p><ul><li><p><strong>项目</strong><small>（Project）</small>：由一组关联的应用容器组成的一个完整业务单元，在 docker-compose.yml 文件中定义。</p></li><li><p><strong>服务</strong><small>（Service）</small>：一个应用的容器，实际上可以包括若干运行相同镜像的容器实例。</p></li></ul><h2 id="docker-compose-安装与卸载" tabindex="-1"><a class="header-anchor" href="#docker-compose-安装与卸载" aria-hidden="true">#</a> docker compose 安装与卸载</h2><ul><li><p>step 1:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>sudo curl -L &quot;https://github.com/docker/compose/releases/download/1.29.0/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose\n或者\ncp docker-compose-Linux-x86_64 /usr/local/bin/docker-compose\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p>step 2:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">chmod</span> +x /usr/local/bin/docker-compose\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li><p>step 3:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">ln</span> -s /usr/local/bin/docker-compose /usr/bin/docker-compose\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li><p>step 4:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>docker-compose --version\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li></ul><h2 id="docker-compose-重要命令" tabindex="-1"><a class="header-anchor" href="#docker-compose-重要命令" aria-hidden="true">#</a> docker compose 重要命令</h2><h3 id="命令选项" tabindex="-1"><a class="header-anchor" href="#命令选项" aria-hidden="true">#</a> 命令选项</h3><table><thead><tr><th style="text-align:left;">命令选项</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>-f</strong> &lt;FILE&gt;</td><td style="text-align:left;">指定使用的 Compose 模板文件，默认为 docker-compose.yml</td></tr><tr><td style="text-align:left;"><strong>-p &lt;NAME&gt;</strong></td><td style="text-align:left;">指定项目名称，<br>默认将使用所在目录名称作为项目名</td></tr><tr><td style="text-align:left;">–verbose</td><td style="text-align:left;">输出更多调试信息</td></tr><tr><td style="text-align:left;">-v</td><td style="text-align:left;">打印版本并退出</td></tr></tbody></table><h3 id="常用-重要命令" tabindex="-1"><a class="header-anchor" href="#常用-重要命令" aria-hidden="true">#</a> 常用 &amp; 重要命令</h3><p><strong>docker-compose</strong> 等同于 <strong>docker-compose -f docker-compose.yml</strong> 命令，很显然，默认的编排文件的文件名是 docker-compose.yml 。<small>如果你的编排文件的文件名不是 docker-compose.yml，那么你就需要使用 -f 选项给指定。</small></p><table><thead><tr><th style="text-align:left;">docker-compose -f xxx.yml</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>config</strong></td><td style="text-align:left;">验证 Compose 文件格式是否正确，若正确则显示配置，若格式错误显示错误原因。<br>此命令不会执行真正的操作，而是显示 docker-compose 程序解析到的配置文件内容。</td></tr><tr><td style="text-align:left;"><strong>images</strong></td><td style="text-align:left;">列出 Compose 文件中包含的镜像。</td></tr><tr><td style="text-align:left;"><strong>ps</strong></td><td style="text-align:left;">列出项目中目前的所有容器。</td></tr><tr><td style="text-align:left;"><strong>build</strong></td><td style="text-align:left;">构建<small>（重新构建）</small>项目中的服务容器。<br> 一般搭配自定义镜像，比如编写的 Dockfile ，功能类似于 <code>docker build .</code></td></tr><tr><td style="text-align:left;"><strong>up</strong></td><td style="text-align:left;">该命令十分强大<small>（<strong>重点掌握</strong>）</small>，它将尝试自动完成包括构建镜像，<small>（重新）</small>创建服务，启动服务，并关联服务相关容器的一系列操作。具体见下章。</td></tr><tr><td style="text-align:left;"><strong>down</strong></td><td style="text-align:left;">此命令停止用 up 命令所启动的容器并移除网络。</td></tr><tr><td style="text-align:left;"><strong>stop</strong></td><td style="text-align:left;">停止已经处于运行状态的容器，但不删除它。通过 <strong>docker-compose start</strong> 可以再次启动这些容器。<br>如果不指定 service 时是默认停止所有的容器。如 docker-compose -f skywalking.yml stop elasticsearch<br> 选项：-t, --timeout &lt;TIMEOUT&gt; 停止容器时候的超时<small>（默认为 10 秒）</small>。</td></tr><tr><td style="text-align:left;"><strong>start</strong></td><td style="text-align:left;">启动已经存在的服务容器。用法跟上面的 stop 刚好相反。如果不指定 service 时是默认启动所有的容器。</td></tr><tr><td style="text-align:left;"><strong>restart</strong></td><td style="text-align:left;">重启项目中的服务。用法跟上面的 stop，start 一样。</td></tr><tr><td style="text-align:left;">logs</td><td style="text-align:left;">查看服务容器的输出。默认情况下，docker-compose 将对不同的服务输出使用不同的颜色来区分。可以通过 <code>--no-color</code> 来关闭颜色。该命令在调试问题的时候十分有用。如<br> <strong>docker-compose -f xxx.yml logs</strong> 查看整体的日志<br> <strong>docker-compose -f xxx.yml logs elasticsearch</strong> 查看单独容器的日志<br></td></tr></tbody></table><h3 id="docker-up-命令" tabindex="-1"><a class="header-anchor" href="#docker-up-命令" aria-hidden="true">#</a> docker up 命令</h3><p><strong>docker-compose -f xxx.yml up</strong> 命令十分强大<small>（<strong>重点掌握</strong>）</small>，它将尝试自动完成包括构建镜像，<small>（重新）</small>创建服务，启动服务，并关联服务相关容器的一系列操作。</p><ul><li><p><strong>docker-compose -f xxx.yml up -d</strong></p><p>默认情况，<strong>docker-compose up</strong> 启动的容器都在前台，控制台将会同时打印所有容器的输出信息，可以很方便进行调试。</p><p>如果使用<strong>docker-compose up -d</strong> 将会在后台启动并运行所有的容器。一般推荐生产环境下使用该选项。</p></li><li><p><strong>docker-compose -f xxx.yml up --no-recreate</strong></p><p>默认情况，如果服务容器已经存在，<strong>docker-compose up</strong> 将会尝试停止容器，然后重新创建<small>（保持使用 volumes-from 挂载的卷）</small>，以保证新启动的服务匹配 docker-compose.yml 文件的最新内容。</p><p>如果用户不希望容器被停止并重新创建，可以使用 <strong>docker-compose up --no-recreate</strong> 。这样将只会启动处于停止状态的容器，而忽略已经运行的服务。</p></li><li><p><strong>docker-compose -f xxx.yml up --no-deps -d &lt;SERVICE_NAME&gt;</strong></p><p>如果用户只想重新部署某个服务，可以使用 <strong>docker-compose up --no-deps -d &lt;SERVICE_NAME&gt;</strong> 来重新创建服务并后台停止旧服务，启动新服务，并不会影响到其所依赖的服务。</p></li></ul><p>docker-compose -f xxx.yml up 命令总结</p><ol><li>-d 在后台运行服务容器。</li><li>--no-color 不使用颜色来区分不同的服务的控制台输出。</li><li>--no-deps 不启动服务所链接的容器。</li><li>--force-recreate 强制重新创建容器，不能与 --no-recreate 同时使用。</li><li>--no-recreate 如果容器已经存在了，则不重新创建，不能与 --force-recreate 同时使用。</li><li>--no-build 不自动构建缺失的服务镜像。</li><li>-t, --timeout TIMEOUT 停止容器时候的超时<small>（默认为 10 秒）</small>。</li></ol><h2 id="docker-compose-yml-文件" tabindex="-1"><a class="header-anchor" href="#docker-compose-yml-文件" aria-hidden="true">#</a> docker-compose.yml 文件</h2><p>默认的模板文件名称为 docker-compose.yml，格式为 YAML 格式。其内容例如：</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&#39;3&#39;</span>\n<span class="token key atrule">services</span><span class="token punctuation">:</span>\n  <span class="token key atrule">mysql-3306</span><span class="token punctuation">:</span>\n    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> mysql<span class="token punctuation">-</span><span class="token number">3306</span>\n    <span class="token key atrule">image</span><span class="token punctuation">:</span> mysql<span class="token punctuation">:</span>5.7.33\n    <span class="token key atrule">network_mode</span><span class="token punctuation">:</span> <span class="token string">&quot;bridge&quot;</span>\n    <span class="token comment"># restart: always</span>\n    <span class="token key atrule">environment</span><span class="token punctuation">:</span>\n      <span class="token punctuation">-</span> MYSQL_ROOT_PASSWORD=123456\n    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>\n      <span class="token punctuation">-</span> ./3306/conf.d<span class="token punctuation">:</span>/etc/mysql/conf.d\n      <span class="token punctuation">-</span> ./3306/mysql.conf.d<span class="token punctuation">:</span>/etc/mysql/mysql.conf.d\n      <span class="token punctuation">-</span> ./3306/data<span class="token punctuation">:</span>/var/lib/mysql\n    <span class="token key atrule">ports</span><span class="token punctuation">:</span>\n      <span class="token punctuation">-</span> <span class="token string">&quot;3306:3306&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>注意每个服务都必须通过 image 指令指定镜像或 build 指令<small>（需要 Dockerfile）</small>等来自动构建生成镜像。如果使用 build 指令，在 Dockerfile 中设置的选项<small>（例如：CMD, EXPOSE, VOLUME, ENV 等）</small>将会自动被获取，无需在 docker-compose.yml 中重复设置。</p><h3 id="docker-compose-yml-文件内容详解" tabindex="-1"><a class="header-anchor" href="#docker-compose-yml-文件内容详解" aria-hidden="true">#</a> docker-compose.yml 文件内容详解</h3><ul><li><p>images</p><p>指定为镜像名称或镜像 ID 。如果镜像在本地不存在，Compose 将会尝试拉取这个镜像。</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>image: apache/skywalking-oap-server:6.5.0\nimage: apache/skywalking-ui:6.5.0\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><p>ports</p><p>暴露端口信息。使用 <code>宿主端口:容器端口</code> <small>(HOST:CONTAINER)</small>格式，或者仅仅指定容器的端口<small>（宿主将会随机选择端口）</small>都可以，端口字符串都使用引号包括起来的字符串格式。</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">ports</span><span class="token punctuation">:</span> \n    <span class="token punctuation">-</span> <span class="token string">&quot;3000&quot;</span> \n    <span class="token punctuation">-</span> <span class="token string">&quot;8080:8080&quot;</span> \n    <span class="token punctuation">-</span> <span class="token string">&quot;127.0.0.1:8001:8001&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><p>volumes</p><p>数据卷所挂载路径设置。可以设置为宿主机路径<small>（<code>HOST:CONTAINER</code>）</small>或者数据卷名称<small>（<code>VOLUME:CONTAINER</code>）</small>，并且可以设置访问模式<small>（<code>HOST:CONTAINER:ro</code>）</small>。</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">volumes</span><span class="token punctuation">:</span>\n  <span class="token punctuation">-</span> /app/skywalking/elasticsearch/data<span class="token punctuation">:</span>/usr/share/elasticsearch/data<span class="token punctuation">:</span>rw\n  <span class="token punctuation">-</span> conf/elasticsearch.yml<span class="token punctuation">:</span>/usr/share/elasticsearch/config/elasticsearch.yml\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p>ulimits</p><p>指定容器的 ulimits 限制值。例如，指定最大进程数为 65535 ，指定文件句柄数为 20000<small>（软限制，应用可以随时修改，不能超过硬限制）</small>和 40000<small>（系统硬限制，只能 root 用户提高）</small>。</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">ulimits</span><span class="token punctuation">:</span>\n  <span class="token key atrule">nproc</span><span class="token punctuation">:</span> <span class="token number">65535</span>\n  <span class="token key atrule">nofile</span><span class="token punctuation">:</span>\n    <span class="token key atrule">soft</span><span class="token punctuation">:</span> <span class="token number">20000</span>\n    <span class="token key atrule">hard</span><span class="token punctuation">:</span> <span class="token number">40000</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li><li><p>depends_on</p><p>解决容器的依赖、启动先后的问题。以下例子中会先启动 redis mysql 再启动 web</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&#39;3&#39;</span>\n<span class="token key atrule">services</span><span class="token punctuation">:</span>\n  <span class="token key atrule">web</span><span class="token punctuation">:</span>\n    <span class="token key atrule">build</span><span class="token punctuation">:</span> .\n    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>\n      <span class="token punctuation">-</span> db\n      <span class="token punctuation">-</span> redis\n  <span class="token key atrule">redis</span><span class="token punctuation">:</span>\n    <span class="token key atrule">image</span><span class="token punctuation">:</span> redis\n  <span class="token key atrule">db</span><span class="token punctuation">:</span>\n    <span class="token key atrule">image</span><span class="token punctuation">:</span> mysql\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div></li><li><p>environment</p><p>设置环境变量。你可以使用数组或字典两种格式。</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">environment</span><span class="token punctuation">:</span>\n  <span class="token key atrule">SW_STORAGE</span><span class="token punctuation">:</span> elasticsearch\n  <span class="token key atrule">SW_STORAGE_ES_CLUSTER_NODES</span><span class="token punctuation">:</span> elasticsearch<span class="token punctuation">:</span><span class="token number">9200</span>\n\n<span class="token key atrule">environment</span><span class="token punctuation">:</span>\n  <span class="token punctuation">-</span> SW_STORAGE=elasticsearch\n  <span class="token punctuation">-</span> SW_STORAGE_ES_CLUSTER_NODES=elasticsearch<span class="token punctuation">:</span><span class="token number">9200</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></li><li><p>restart</p><p>指定容器退出后的重启策略为始终重启。该命令对保持服务始终运行十分有效，在生产环境中推荐配置为 always 或者 unless-stopped 。</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">restart</span><span class="token punctuation">:</span> always\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li></ul><h3 id="docker-compose-yml-的-volumes-的第二种写法" tabindex="-1"><a class="header-anchor" href="#docker-compose-yml-的-volumes-的第二种写法" aria-hidden="true">#</a> docker-compose.yml 的 volumes 的第二种写法</h3><p>docker-compose 里 2 种设置方式都是可以持久化的。</p><ol><li><p>绝对路径的</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">ghost</span><span class="token punctuation">:</span>  \n  <span class="token key atrule">image</span><span class="token punctuation">:</span> ghost\n    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>\n      <span class="token punctuation">-</span> ./ghost/config.js<span class="token punctuation">:</span>/var/lib/ghost/config.js\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><p>卷标的</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">services</span><span class="token punctuation">:</span>\n  <span class="token key atrule">mysql</span><span class="token punctuation">:</span>  \n    <span class="token key atrule">image</span><span class="token punctuation">:</span> mysql\n    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> mysql\n    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>\n      <span class="token punctuation">-</span> mysql<span class="token punctuation">:</span>/var/lib/mysql\n    <span class="token punctuation">...</span>\n<span class="token key atrule">volumes</span><span class="token punctuation">:</span>\n  <span class="token key atrule">mysql</span><span class="token punctuation">:</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div></li></ol><p>第一种情况路径直接挂载到本地，比较直观，但需要管理本地的路径，而第二种使用卷标的方式，比较简洁，但你不知道数据存在本地什么位置。</p><p>下面说明如何查看 docker 的卷标：</p><ol><li><p>查看所有卷标</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>docker volume <span class="token function">ls</span> \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li><p>查看批量的卷标</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>docker volume <span class="token function">ls</span> <span class="token operator">|</span> <span class="token function">grep</span> mysql\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>其结果类似如下：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>local     docker_mysql-3306-data\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li><p>查看具体的 volume 对应的真实地址</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>docker volume inspect docker_mysql-3306-data\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>其结果类似如下：</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">[</span>\n  <span class="token punctuation">{</span>\n    <span class="token property">&quot;CreatedAt&quot;</span><span class="token operator">:</span> <span class="token string">&quot;2021-04-20T05:32:02+08:00&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;Driver&quot;</span><span class="token operator">:</span> <span class="token string">&quot;local&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;Labels&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token property">&quot;com.docker.compose.project&quot;</span><span class="token operator">:</span> <span class="token string">&quot;docker&quot;</span><span class="token punctuation">,</span>\n        <span class="token property">&quot;com.docker.compose.version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1.29.0&quot;</span><span class="token punctuation">,</span>\n        <span class="token property">&quot;com.docker.compose.volume&quot;</span><span class="token operator">:</span> <span class="token string">&quot;mysql-3306-data&quot;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;Mountpoint&quot;</span><span class="token operator">:</span> <span class="token string">&quot;/var/lib/docker/volumes/docker_mysql-3306-data/_data&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;Name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;docker_mysql-3306-data&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;Options&quot;</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;Scope&quot;</span><span class="token operator">:</span> <span class="token string">&quot;local&quot;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div></li></ol><p>另外， 如果使用到了 volumes一定要注意，在进行 <code>docker-compose down</code> 时，会自动删除原有容器以及虚拟网。但是其中定义的 volumes 会保留。如果要 down 的同时清理干净，就直接加参数 <code>--volumes</code> 。</p>',30),l={render:function(s,n){return e}}}}]);