"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[111],{68517:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-38e3360c",path:"/rabbitmq/02-spring-boot.html",title:"Spring Boot 整合 RabbitMQ",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"01. pom.xml",slug:"_01-pom-xml",children:[]},{level:2,title:"02. 配置文件",slug:"_02-配置文件",children:[]},{level:2,title:"03. 简单示例",slug:"_03-简单示例",children:[{level:3,title:"03.1 定义队列",slug:"_03-1-定义队列",children:[]},{level:3,title:"03.2 定义消息接收者/消费者",slug:"_03-2-定义消息接收者-消费者",children:[]},{level:3,title:"03.3 发送消息（测试并验证）",slug:"_03-3-发送消息-测试并验证",children:[]}]},{level:2,title:"04. 创建 Exchange、Queue 和 Binding",slug:"_04-创建-exchange、queue-和-binding",children:[{level:3,title:"04.a 创建 Exchange",slug:"_04-a-创建-exchange",children:[]},{level:3,title:"04.b 创建 Queue",slug:"_04-b-创建-queue",children:[]},{level:3,title:"04.c 创建 Binding",slug:"_04-c-创建-binding",children:[]}]},{level:2,title:"05. 发送消息",slug:"_05-发送消息",children:[]},{level:2,title:"06. 接收/消费消息（PUSH 型）",slug:"_06-接收-消费消息-push-型",children:[]},{level:2,title:"07. 对象的支持",slug:"_07-对象的支持",children:[]},{level:2,title:"08. Topic Exchange",slug:"_08-topic-exchange",children:[]},{level:2,title:"09. Fanout Exchange",slug:"_09-fanout-exchange",children:[]},{level:2,title:"10. 接收/消费消息（PULL 型）",slug:"_10-接收-消费消息-pull-型",children:[]},{level:2,title:"11. 发送者确认",slug:"_11-发送者确认",children:[{level:3,title:"11.a 确认消息已到 Exchange",slug:"_11-a-确认消息已到-exchange",children:[]},{level:3,title:"11.b 确认消息已到 Message Queue",slug:"_11-b-确认消息已到-message-queue",children:[]}]},{level:2,title:"12. 消费端的确认与拒绝",slug:"_12-消费端的确认与拒绝",children:[{level:3,title:"12.1 确认消息",slug:"_12-1-确认消息",children:[]},{level:3,title:"12.2 拒绝消息",slug:"_12-2-拒绝消息",children:[]}]}],filePathRelative:"rabbitmq/02-spring-boot.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},60569:(n,s,a)=>{a.r(s),a.d(s,{default:()=>t});const p=(0,a(66252).uE)('<h1 id="spring-boot-整合-rabbitmq" tabindex="-1"><a class="header-anchor" href="#spring-boot-整合-rabbitmq" aria-hidden="true">#</a> Spring Boot 整合 RabbitMQ</h1><p>Spring Boot 提供了 <strong>spring-boot-starter-amqp</strong> 组件对实现了 AMQP 协议的消息队列<small>（RabbitMQ）</small>的快速整合。</p><h2 id="_01-pom-xml" tabindex="-1"><a class="header-anchor" href="#_01-pom-xml" aria-hidden="true">#</a> 01. pom.xml</h2><p><img src="https://hemiao3000.gitee.io/java-note-img/images/rabbitmq/img/spring-boot-rabbitmq-01.png" alt="rabbitmq-01"></p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-amqp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="_02-配置文件" tabindex="-1"><a class="header-anchor" href="#_02-配置文件" aria-hidden="true">#</a> 02. 配置文件</h2><p>配置 rabbitmq 的安装地址、端口以及账户信息：</p><div class="language-properties ext-properties line-numbers-mode"><pre class="language-properties"><code><span class="token attr-name">spring.application.name</span><span class="token punctuation">=</span><span class="token attr-value">spring-rabbitmq-demo</span>\n<span class="token comment">## -----------------------------------------------</span>\n<span class="token attr-name">spring.rabbitmq.host</span><span class="token punctuation">=</span><span class="token attr-value">127.0.0.1</span>\n<span class="token attr-name">spring.rabbitmq.port</span><span class="token punctuation">=</span><span class="token attr-value">5672</span>\n<span class="token attr-name">spring.rabbitmq.username</span><span class="token punctuation">=</span><span class="token attr-value">guest</span>\n<span class="token attr-name">spring.rabbitmq.password</span><span class="token punctuation">=</span><span class="token attr-value">guest</span>\n<span class="token comment">## -----------------------------------------------</span>\n<span class="token attr-name">logging.level.root</span><span class="token punctuation">=</span><span class="token attr-value">INFO</span>\n<span class="token attr-name">logging.level.xxx.yyy.zzz</span><span class="token punctuation">=</span><span class="token attr-value">DEBUG</span>\n<span class="token attr-name">logging.pattern.console</span><span class="token punctuation">=</span><span class="token attr-value">${CONSOLE_LOG_PATTERN:\\\n  %clr(${LOG_LEVEL_PATTERN:%5p}) \\\n  %clr([%15.15t]){faint} \\\n  %clr(%-40.40logger{39}){cyan} \\\n  %clr(:){faint} %m%n\\\n  ${LOG_EXCEPTION_CONVERSION_WORD:%wEx}}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h2 id="_03-简单示例" tabindex="-1"><a class="header-anchor" href="#_03-简单示例" aria-hidden="true">#</a> 03. 简单示例</h2><p>老规矩，使用 <strong>@EnableRabbit</strong> 注解标注于配置类上，以表示使用 RabbitMQ 的注解功能。</p><h3 id="_03-1-定义队列" tabindex="-1"><a class="header-anchor" href="#_03-1-定义队列" aria-hidden="true">#</a> 03.1 定义队列</h3><blockquote><p>虽然我们可以在代码中再定义、创建 Queue，但是通常我们是在 RabbitMQ 的管理台创建好 Queue 之后，再在代码中直接使用。</p></blockquote><p>RabbitMQConfig.java：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// import org.springframework.amqp.core.Queue;</span>\n\n<span class="token annotation punctuation">@Configuration</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitMQConfig</span> <span class="token punctuation">{</span>\n\n    <span class="token annotation punctuation">@Bean</span>\n    <span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="_03-2-定义消息接收者-消费者" tabindex="-1"><a class="header-anchor" href="#_03-2-定义消息接收者-消费者" aria-hidden="true">#</a> 03.2 定义消息接收者/消费者</h3><p>HelloReceiver.java</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Slf4j</span>\n<span class="token annotation punctuation">@Component</span>\n<span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloReceiver</span> <span class="token punctuation">{</span>\n\n    <span class="token annotation punctuation">@RabbitHandler</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">String</span> hello<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Receiver : {}&quot;</span><span class="token punctuation">,</span> hello<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>注意使用注解 <strong>@RabbitListener</strong> 的 <strong>queues</strong> 属性指明队列名称，<strong>@RabbitHandler</strong> 为具体接收的方法。</p><h3 id="_03-3-发送消息-测试并验证" tabindex="-1"><a class="header-anchor" href="#_03-3-发送消息-测试并验证" aria-hidden="true">#</a> 03.3 发送消息（测试并验证）</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Autowired</span>\n<span class="token keyword">private</span> <span class="token class-name">RabbitTemplate</span> rabbitTemplate<span class="token punctuation">;</span>\n\n<span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>\n    <span class="token class-name">String</span> context <span class="token operator">=</span> <span class="token string">&quot;hello &quot;</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Sender : {}&quot;</span><span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>这是一个最简单的案例。上述的代码种，并未明确涉及到 <strong>Exchange</strong> 的概念，因为这里使用到的是 <strong>Default Exchange</strong> 。</p><p>Default Exchange 的投递规则是：以 <strong>Queue Name</strong> 作为 <strong>Binding Key</strong>。因此，我们在代码中，使用 <em><code>hello</code></em> 作为 Binding Key 时，消息最终被投递到了 hello 队列。</p><blockquote><p>注意，再次强调一下，上述的 <em>hello</em> 本质上不是 queue-name，而是 binding-key 。</p></blockquote><h2 id="_04-创建-exchange、queue-和-binding" tabindex="-1"><a class="header-anchor" href="#_04-创建-exchange、queue-和-binding" aria-hidden="true">#</a> 04. 创建 Exchange、Queue 和 Binding</h2><p>虽然可以，但是还是不建议在代码中去创建 Exchange、Queue 和 Binding。通常还是在 RabbitMQ 中把这些东西都建好，然后再在代码中访问/操作。</p><p><small>其实，这很类似于 Hibernate/JPA 的建表功能。虽然有这种功能存在，但是使用的机会和场景并不多。通常都是现在数据库中把表建好之后直接使用。除非是测试环境中的临时表，才会用到这种功能。</small></p><h3 id="_04-a-创建-exchange" tabindex="-1"><a class="header-anchor" href="#_04-a-创建-exchange" aria-hidden="true">#</a> 04.a 创建 Exchange</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>\n<span class="token keyword">public</span> <span class="token class-name">Exchange</span> <span class="token function">exchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n<span class="token comment">//  return new TopicExchange(&quot;test-exchange-1&quot;); </span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TopicExchange</span><span class="token punctuation">(</span><span class="token string">&quot;test-exchange-1&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>参数说明：</p><table><thead><tr><th style="text-align:left;">参数</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">name</td><td style="text-align:left;">字符串值，exchange 的名称。</td></tr><tr><td style="text-align:left;">durable</td><td style="text-align:left;">布尔值，表示该 exchage 是否持久化。<br> 持久化意味着当 RabbitMQ 重启后，该 exchange 是否会恢复/仍存在。</td></tr><tr><td style="text-align:left;">autoDelete</td><td style="text-align:left;">布尔值，表示当该 exchange 没“人”<small>（queue）</small>用时，是否会被自动删除。</td></tr></tbody></table><p>不指定 durable 和 autoDelete 时，默认为 <em><code>true</code></em> 和 <em><code>false</code></em> 。表示持久化、不用自动删除。</p><p><small>补充，这背后调用的是原生 API 中的 <strong><code>Channel</code></strong> 的 <em><code>.exchangeDeclare()</code></em> 方法。</small></p><h3 id="_04-b-创建-queue" tabindex="-1"><a class="header-anchor" href="#_04-b-创建-queue" aria-hidden="true">#</a> 04.b 创建 Queue</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>\n<span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n<span class="token comment">//  return new Queue(&quot;test-queue-1&quot;); </span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token string">&quot;test-queue-1&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>参数说明：</p><table><thead><tr><th style="text-align:left;">参数</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">name</td><td style="text-align:left;">字符串值，exchange 的名称。</td></tr><tr><td style="text-align:left;">durable</td><td style="text-align:left;">布尔值，表示该 queue 是否持久化。<br> 持久化意味着当 RabbitMQ 重启后，该 queue 是否会恢复/仍存在。<br>另外，需要注意的是，queue 的持久化不等于其中的消息也会被持久化。</td></tr><tr><td style="text-align:left;">exclusive</td><td style="text-align:left;">布尔值，表示该 queue 是否排它式使用。排它式使用意味着仅声明他的连接可见/可用，其它连接不可见/不可用。</td></tr><tr><td style="text-align:left;">autoDelete</td><td style="text-align:left;">布尔值，表示当该 queue 没“人”<small>（connection）</small>用时，是否会被自动删除。</td></tr></tbody></table><p>不指定 durable、exclusive 和 autoDelete 时，默认为 <em>true</em> 、 <em>false</em> 和 <em>false</em> 。表示持久化、非排它、不用自动删除。</p><p><small>补充，这背后调用的是原生 API 中的 <em>Channel</em> 的 <em>.queueDeclare()</em> 方法。</small></p><h3 id="_04-c-创建-binding" tabindex="-1"><a class="header-anchor" href="#_04-c-创建-binding" aria-hidden="true">#</a> 04.c 创建 Binding</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>\n<span class="token keyword">public</span> <span class="token class-name">Binding</span> <span class="token function">binding</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token class-name">BindingBuilder</span>\n        <span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token function">queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span><span class="token function">exchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token string">&quot;*.orange.*&quot;</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">noargs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="_05-发送消息" tabindex="-1"><a class="header-anchor" href="#_05-发送消息" aria-hidden="true">#</a> 05. 发送消息</h2><p>spring-rabbit 提供了 RabbitTemplate 来简化原生 API 的消息发送方法。</p><p><small>（最简单的情况下），</small>你可以直接要求 Spring 给你注入一个 <strong>RabbitTemplate</strong>，通过它来发送消息：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Autowired</span>\n<span class="token keyword">private</span> <span class="token class-name">RabbitTemplate</span> rabbitTemplate<span class="token punctuation">;</span>\n\n<span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">&quot;queue-demo-1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><strong>.convertAndSend</strong> 方法的第一个参数是 <strong>routing-key</strong>，第二个参数是你所要发送的消息。</p><p>在没有明确指定 Exchange 的情况下，该消息发送给了 RabbitMQ 的 <strong>default-exchange</strong>。而 default-exchage 是将 <strong>routing-key</strong> 视为 queue-name 。</p><p>也就是说，上述代码中的 <strong>routing-key</strong> 是 <em>queue-demo-1</em>，那么该消息最终是发送给 <em>queue-demo-1</em> 队列。</p><p><small><strong>.convertAndSend</strong> 方法是 <strong>.send</strong> 方法的包装/简化。<strong>.send</strong> 方法的调用相对比较繁琐。</small></p><h2 id="_06-接收-消费消息-push-型" tabindex="-1"><a class="header-anchor" href="#_06-接收-消费消息-push-型" aria-hidden="true">#</a> 06. 接收/消费消息（PUSH 型）</h2><p>接收/消费消息的方式有两种：Push 型和 Pull 型。</p><p>Push 型表示由 RabbitMQ Broker 负责将消息推送给消费者。消费者在一开始指定/配置监听哪个队列的消息后，就无需考虑其它。当该队列收到消息后，消费者的指定方法就会被触发执行。</p><p>PUSH 消费的配置非常简单，对你的消费者类标注 <strong>@RabbitListener</strong> 注解，为你的消费方法标注 <strong>@RabbitHandler</strong> 注解即可。当然，前提是消费者类要托管给 Spring：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>\n<span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">&quot;queue-demo-1&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Consumer1</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> log <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">Consumer1</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@RabbitHandler</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Consumer 1: {}&quot;</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>甚至，你可以直接将 <strong>@RabbitListener</strong> 标注在方法上，此时，不需要配套使用 <strong>@RabbitHandler</strong> 注解。</p><h2 id="_07-对象的支持" tabindex="-1"><a class="header-anchor" href="#_07-对象的支持" aria-hidden="true">#</a> 07. 对象的支持</h2><p>Spring Boot 已经完美支持对象的发送和接收，不需要额外的配置。不过，需要注意的是所传递的对象需要实现 <strong>Serializable</strong> 接口。</p><p>!声明队列</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>\n<span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">departmentQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Autowired</span>\n<span class="token keyword">private</span> <span class="token class-name">RabbitTemplate</span> rabbitTemplate<span class="token punctuation">;</span>\n\n<span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span> <span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n\n<span class="token annotation punctuation">@Slf4j</span>\n<span class="token annotation punctuation">@Component</span>\n<span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MessageReceiver</span> <span class="token punctuation">{</span>\n\n    <span class="token annotation punctuation">@RabbitHandler</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">LocalDate</span> date<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Receiver : {}&quot;</span><span class="token punctuation">,</span> date<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h2 id="_08-topic-exchange" tabindex="-1"><a class="header-anchor" href="#_08-topic-exchange" aria-hidden="true">#</a> 08. Topic Exchange</h2><p>Topic 是 RabbitMQ 中最灵活的一种方式，可以根据 routing_key 自由地绑定不同的队列。</p><blockquote><small>考虑到环境中残留的之前的相关信息对测试的影响，如果发现测试代码的执行结果『莫名其妙』，记得在 RabbitMQ 的 web 管理系统中将相关内容清除干净，构造一个纯净的测试环境测试。</small></blockquote><p><img src="https://hemiao3000.gitee.io/java-note-img/images/rabbitmq/img/spring-boot-rabbitmq-02.png" alt="rabbitmq"></p><p>首先对 Topic 规则配置：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">/* 两个 Queue */</span>\n<span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">&quot;Q1&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">queue1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token string">&quot;Q1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n\n<span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">&quot;Q2&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">queue2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token string">&quot;Q2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n\n<span class="token comment">/* 一个 Exchange */</span>\n<span class="token annotation punctuation">@Bean</span>\n<span class="token keyword">public</span> <span class="token class-name">TopicExchange</span> <span class="token function">topicExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TopicExchange</span><span class="token punctuation">(</span><span class="token string">&quot;topic-exchange&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n\n<span class="token comment">/* 三个 Binding：关联 Exchange 和 Queue */</span>\n<span class="token annotation punctuation">@Bean</span>\n<span class="token keyword">public</span> <span class="token class-name">Binding</span> <span class="token function">binding1</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">&quot;Q1&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Queue</span> queue<span class="token punctuation">,</span> <span class="token class-name">TopicExchange</span> topicExchange<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token class-name">BindingBuilder</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span>topicExchange<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token string">&quot;*.orange.*&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token annotation punctuation">@Bean</span>\n<span class="token keyword">public</span> <span class="token class-name">Binding</span> <span class="token function">binding21</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">&quot;Q2&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Queue</span> queue<span class="token punctuation">,</span> <span class="token class-name">TopicExchange</span> topicExchange<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token class-name">BindingBuilder</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span>topicExchange<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token string">&quot;*.*.rabbit&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token annotation punctuation">@Bean</span>\n<span class="token keyword">public</span> <span class="token class-name">Binding</span> <span class="token function">binding22</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">&quot;Q2&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Queue</span> queue<span class="token punctuation">,</span> <span class="token class-name">TopicExchange</span> topicExchange<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token class-name">BindingBuilder</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span>topicExchange<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token string">&quot;lazy.#&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><blockquote><p>即便不编写消费者，你也可以在管理台页面上，直接看到各个 Queue 中有多少条消息。</p></blockquote><p>创建两个消费者：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Slf4j</span>\n<span class="token annotation punctuation">@Component</span>\n<span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">&quot;Q1&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> C1 <span class="token punctuation">{</span>\n\n    <span class="token annotation punctuation">@RabbitHandler</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;C1: {}&quot;</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n<span class="token punctuation">}</span>\n\n<span class="token annotation punctuation">@Slf4j</span>\n<span class="token annotation punctuation">@Component</span>\n<span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">&quot;Q2&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> C2 <span class="token punctuation">{</span>\n\n    <span class="token annotation punctuation">@RabbitHandler</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;C2: {}&quot;</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p>测试：<small>（这里偷了个懒，没有去创建发送者类，直接在 Junit 中使用了 <strong>AmqpTemplate</strong> 发送消息）</small>。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Autowired</span>\n<span class="token keyword">private</span> <span class="token class-name">AmqpTemplate</span> rabbitTemplate<span class="token punctuation">;</span>\n\n\n<span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>\n    rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">&quot;testTopic&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;hello.orange&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;hello orange&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">&quot;testTopic&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;hello.orange.world&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;hello orange world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">&quot;testTopic&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;hello.world.rabbit&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;hello world rabbit&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">&quot;testTopic&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;lazy&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;lazy&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">&quot;testTopic&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;lazy.good&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;good&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">&quot;testTopic&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;lazy.good.bye&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;goodbye&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="_09-fanout-exchange" tabindex="-1"><a class="header-anchor" href="#_09-fanout-exchange" aria-hidden="true">#</a> 09. Fanout Exchange</h2><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span> \n<span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">green</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token string">&quot;green&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n\n<span class="token annotation punctuation">@Bean</span> \n<span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">red</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token string">&quot;red&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n\n<span class="token annotation punctuation">@Bean</span> \n<span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">orange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token string">&quot;orange&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n\n<span class="token annotation punctuation">@Bean</span>\n<span class="token keyword">public</span> <span class="token class-name">FanoutExchange</span> <span class="token function">exchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FanoutExchange</span><span class="token punctuation">(</span><span class="token string">&quot;testFanout&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n\n<span class="token annotation punctuation">@Bean</span>\n<span class="token keyword">public</span> <span class="token class-name">Binding</span> <span class="token function">binging1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token class-name">BindingBuilder</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token function">green</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span><span class="token function">exchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n\n<span class="token annotation punctuation">@Bean</span>\n<span class="token keyword">public</span> <span class="token class-name">Binding</span> <span class="token function">binging2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token class-name">BindingBuilder</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token function">red</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span><span class="token function">exchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n\n<span class="token annotation punctuation">@Bean</span>\n<span class="token keyword">public</span> <span class="token class-name">Binding</span> <span class="token function">binging3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token class-name">BindingBuilder</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token function">orange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span><span class="token function">exchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>\n    rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">&quot;testFanout&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;green&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">&quot;testFanout&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;red&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">&quot;testFanout&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;orange&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>Customer-A、Customer-B、Customer-C 都会收到这三条消息，即，控制台会打印出 9 条日志。</p><h2 id="_10-接收-消费消息-pull-型" tabindex="-1"><a class="header-anchor" href="#_10-接收-消费消息-pull-型" aria-hidden="true">#</a> 10. 接收/消费消息（PULL 型）</h2><p>PULL 型消费意味着需要消费者主动从 RabbitMQ Broker 上『取』消息。</p><p>PULL 型消费『<strong>不依靠</strong>』@RabbitListener 和 @RabbitHandler 注解。而是需要在代码中手动调用 <strong>.receiveAndConvert</strong> 方法。</p><p><small><em>.receiveAndConvert</em> 方法是 <em>.receive</em> 方法的简化版。</small></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo5</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">&quot;queue-demo-1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> rabbitTemplate<span class="token punctuation">.</span><span class="token function">receiveAndConvert</span><span class="token punctuation">(</span><span class="token string">&quot;queue-demo-1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="_11-发送者确认" tabindex="-1"><a class="header-anchor" href="#_11-发送者确认" aria-hidden="true">#</a> 11. 发送者确认</h2><blockquote><p>发送者如何知道自己所发送的消费成功抵达了 RabbitMQ Broker 中的 Exchange 中，乃至成功抵达了 RabbitMQ Broker 中的 Queue 中？</p><p><strong>生产者确认</strong></p></blockquote><h3 id="_11-a-确认消息已到-exchange" tabindex="-1"><a class="header-anchor" href="#_11-a-确认消息已到-exchange" aria-hidden="true">#</a> 11.a 确认消息已到 Exchange</h3><p>RabbitMQ 有一个配置属性 <code>spring.rabbitmq.publisher-confirm-type</code> 控制是否开启确认功能。该属性默认值是 <strong>NONE</strong> ，表示不开启消息确认。</p><ul><li><p>publisher-confirm-type = SIMPLE</p><p>当改属性的值为 <strong>SIMPLE</strong> 时，表示支持以简单<small>（同步阻塞等待）</small>方式获得确认与否的信息。</p><p>这里会调用 <strong>Template#waitForConfirms</strong> 方法，不过这个方法有个要求，它必须在 <strong>Template#invoke</strong> 方法中使用。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">String</span> str <span class="token operator">=</span> rabbitTemplate<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token punctuation">(</span>operations<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 参数 operations 实际上就是 Template 。</span>\n    operations<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">&quot;red&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> operations<span class="token punctuation">.</span><span class="token function">waitForConfirms</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 阻塞等待 1 秒，以获得确认信息。</span>\n    <span class="token keyword">return</span> <span class="token string">&quot;over&quot;</span><span class="token punctuation">;</span> <span class="token comment">// lambda 表达式的值将成为 invoke 方法的返回值。</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nlog<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>你可以向不存在的 Exchange 发送消息已验证效果。</p></li><li><p>publisher-confirm-type = CORRELATED</p><p>当改属性的值为 <strong>CORRELATED</strong> 时，表示支持以异步回调方式获得确认与否的信息。</p><p>在之前的代码中，是 <code>spring-rabbit</code> 帮我们创建 <strong>ConnectionFactory</strong>，再进一步创建 <strong>RabbitTemplate</strong>，并注入到我们的代码中进而被我们使用。</p><p>现在由于需要对 <strong>RabbitTemplate</strong> 进行设置，因此，我们需要自己创建并设置 <strong>RabbitTemplate</strong>。<small>（不过，还是需要 spring-rabbit 帮我们创建 Connection Factory，并注入）</small></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>\n<span class="token keyword">public</span> <span class="token class-name">RabbitTemplate</span> <span class="token function">createRabbitTemplate</span><span class="token punctuation">(</span><span class="token class-name">ConnectionFactory</span> connectionFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">RabbitTemplate</span> rabbitTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RabbitTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    rabbitTemplate<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>connectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 设置开启 Mandatory，才能触发回调函数，无论消息推送结果怎么样都强制调用回调函数</span>\n    rabbitTemplate<span class="token punctuation">.</span><span class="token function">setMandatory</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 当 Exchange 收到消息后，这里设置的回调方法会被触发执行</span>\n    rabbitTemplate<span class="token punctuation">.</span><span class="token function">setConfirmCallback</span><span class="token punctuation">(</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">return</span> rabbitTemplate<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>你可以使用 lamda 表达式来简化下列匿名实现类。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>rabbitTemplate<span class="token punctuation">.</span><span class="token function">setConfirmCallback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RabbitTemplate<span class="token punctuation">.</span>ConfirmCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token doc-comment comment">/**\n     * 该方法无论 Exchange 能否收到消息都会执行。\n     */</span>\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">confirm</span><span class="token punctuation">(</span><span class="token class-name">CorrelationData</span> correlationData<span class="token punctuation">,</span> <span class="token keyword">boolean</span> ack<span class="token punctuation">,</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span> cause<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>ack<span class="token punctuation">)</span>\n            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;消息已发送至 Exchange&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">else</span> \n            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;消息未能发送到 Exchange。{}&quot;</span><span class="token punctuation">,</span> cause<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\n\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div></li></ul><h3 id="_11-b-确认消息已到-message-queue" tabindex="-1"><a class="header-anchor" href="#_11-b-确认消息已到-message-queue" aria-hidden="true">#</a> 11.b 确认消息已到 Message Queue</h3><div class="language-properties ext-properties line-numbers-mode"><pre class="language-properties"><code><span class="token comment">## 确认消息已发送到队列（Queue）</span>\n<span class="token attr-name">spring.rabbitmq.publisher-returns</span><span class="token punctuation">=</span><span class="token attr-value">true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>\n<span class="token keyword">public</span> <span class="token class-name">RabbitTemplate</span> <span class="token function">createRabbitTemplate</span><span class="token punctuation">(</span><span class="token class-name">ConnectionFactory</span> connectionFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">RabbitTemplate</span> rabbitTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RabbitTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    rabbitTemplate<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>connectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 设置开启 Mandatory，才能触发回调函数，无论消息推送结果怎么样都强制调用回调函数</span>\n    rabbitTemplate<span class="token punctuation">.</span><span class="token function">setMandatory</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n\n    <span class="token comment">// 关键就是以下两句</span>\n    rabbitTemplate<span class="token punctuation">.</span><span class="token function">setReturnCallback</span><span class="token punctuation">(</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">return</span> rabbitTemplate<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>你可以使用 lamda 表达式来简化下列匿名实现类。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>rabbitTemplate<span class="token punctuation">.</span><span class="token function">setReturnCallback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RabbitTemplate<span class="token punctuation">.</span>ReturnCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token doc-comment comment">/**\n     * 该方法在 Queue 无法收到消息时被触发执行。Queue 能收到消息，反而不会执行。\n     */</span>\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">returnedMessage</span><span class="token punctuation">(</span><span class="token class-name">Message</span> message<span class="token punctuation">,</span> <span class="token keyword">int</span> replyCode<span class="token punctuation">,</span> <span class="token class-name">String</span> replyText<span class="token punctuation">,</span> <span class="token class-name">String</span> exchange<span class="token punctuation">,</span> <span class="token class-name">String</span> routingKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;ReturnCallback 消息：{}&quot;</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;ReturnCallback 回应码：{}&quot;</span><span class="token punctuation">,</span> replyCode<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;ReturnCallback 回应信息：{}&quot;</span><span class="token punctuation">,</span> replyText<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;ReturnCallback 交换机：{}&quot;</span><span class="token punctuation">,</span> exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;ReturnCallback 路由键：{}&quot;</span><span class="token punctuation">,</span> routingKey<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>你可以向不存在的 Exchange 和 Queue 发送消息已验证效果。</p><h2 id="_12-消费端的确认与拒绝" tabindex="-1"><a class="header-anchor" href="#_12-消费端的确认与拒绝" aria-hidden="true">#</a> 12. 消费端的确认与拒绝</h2><p>默认情况下，RabbitMQ 启用的是消费端自动<small>（auto）</small>回复。即，当消费端收到消息，就会给 RabbitMQ Broker 作出回复，表示已收到。</p><p><strong>只有在消费端回复 RabbitMQ Broker 之后，RabbitMQ Broker 才会将该消息从消息队列中移除。</strong></p><p>回复的行为除了有 AUTO 之外，还有 NONE 和 MANUAL 。</p><p>NONE 表示不回复，即，RabbitMQ Broker 永远不可能知道消费者端到底有没有收到消息。RabbitMQ Broker 发出</p><p>MANUAL 则意味着需要在消费者端手动发送回复信息。在消费者回复前，该消息在消费端未回复前在 RabbitMQ Brocker 上一直处于 <strong>Unacked</strong> 状态。<small>如果消费者始终都不回复该消息，那么直到消费者与 RabbitMQ 断开连接之后，这条消息才会重新变为 Ready 状态。</small></p><p>启用消费端的确认功能需要打开配置开关：</p><div class="language-properties ext-properties line-numbers-mode"><pre class="language-properties"><code><span class="token attr-name">spring.rabbitmq.listener.simple.acknowledge-mode</span><span class="token punctuation">=</span><span class="token attr-value">manual</span>\n<span class="token attr-name">spring.rabbitmq.listener.direct.acknowledge-mode</span><span class="token punctuation">=</span><span class="token attr-value">manual</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>于此同时，消息消费者的处理方法需要改造成以下形式：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>\n<span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">&quot;queue-demo-1&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Consumer2</span> <span class="token punctuation">{</span>\n\n    <span class="token annotation punctuation">@RabbitHandler</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">,</span> \n            <span class="token class-name">Channel</span> channel<span class="token punctuation">,</span> \n            <span class="token annotation punctuation">@Header</span><span class="token punctuation">(</span><span class="token class-name">AmqpHeaders</span><span class="token punctuation">.</span>DELIVERY_TAG<span class="token punctuation">)</span> <span class="token keyword">long</span> tag<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="_12-1-确认消息" tabindex="-1"><a class="header-anchor" href="#_12-1-确认消息" aria-hidden="true">#</a> 12.1 确认消息</h3><p>确认消息使用 <strong>channel</strong> 的 <strong>.basicAck</strong> 方法：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>channel<span class="token punctuation">.</span><span class="token function">basicAck</span><span class="token punctuation">(</span>tag<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>basicAck 方法需要传递两个参数：</p><ul><li><p>deliveryTag<small>（唯一标识 ID）</small>：当一个消费者向 RabbitMQ 注册后，会建立起一个 Channel<small>（Channel 是比 Connection 更小的单位）</small>，RabbitMQ 通过 Channel 向消费者投递消息时，都会为该消息分配一个唯一性标识：delivery tag 。同一个 Channel 中的消息的 delivery tag 都是唯一且单调递增的。</p></li><li><p>multiple：是否批量确认。当参数为 false 时，意味着确认单条消息，RabbitMQ 仅从消息队列中删除该消息；当参数为 true 时，意味着批量确认，RabbitMQ 会从消息队列中删除编号小于等于该消息的所有信息。</p></li></ul><h3 id="_12-2-拒绝消息" tabindex="-1"><a class="header-anchor" href="#_12-2-拒绝消息" aria-hidden="true">#</a> 12.2 拒绝消息</h3><p>拒绝消息使用 <em>channel</em> 的 <strong>.basicReject</strong> 方法：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>channel<span class="token punctuation">.</span><span class="token function">basicReject</span><span class="token punctuation">(</span>tag<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>basicReject 方法也需要传力两个参数：</p><ul><li><p>deliveryTag（唯一标识 ID）：同上。</p></li><li><p>requeue（重入标识）：标识该消息是否需要 RabbitMQ Broker 重新入队。<small>（有可能的话，会被该队列的其它消费者消费）。</small></p></li></ul><p>另外，拒绝的方法还有 <strong>.basicNack</strong>，表示批量拒绝。</p>',111),t={render:function(n,s){return p}}}}]);