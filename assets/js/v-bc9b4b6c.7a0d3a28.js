"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[8879],{80783:(e,s,n)=>{n.r(s),n.d(s,{data:()=>a});const a={key:"v-bc9b4b6c",path:"/other/03-redis-lock.html",title:"Redis 实现分布式锁",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"0. 分布式锁使用场景",slug:"_0-分布式锁使用场景",children:[]},{level:2,title:"1. 实现原理",slug:"_1-实现原理",children:[]},{level:2,title:"2. 工具类",slug:"_2-工具类",children:[]}],filePathRelative:"other/03-redis-lock.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},57099:(e,s,n)=>{n.r(s),n.d(s,{default:()=>t});const a=(0,n(66252).uE)('<h1 id="redis-实现分布式锁" tabindex="-1"><a class="header-anchor" href="#redis-实现分布式锁" aria-hidden="true">#</a> Redis 实现分布式锁</h1><h2 id="_0-分布式锁使用场景" tabindex="-1"><a class="header-anchor" href="#_0-分布式锁使用场景" aria-hidden="true">#</a> 0. 分布式锁使用场景</h2><p>一般我们使用分布式锁有两个场景：</p><ul><li><p><strong>效率</strong>：使用分布式锁可以避免不同节点重复相同的工作，这些工作会浪费资源。比如用户付了钱之后有可能不同节点会发出多封短信。</p></li><li><p><strong>正确性</strong>：加分布式锁同样可以避免破坏正确性的发生，如果两个节点在同一条数据上面操作，比如多个节点机器对同一个订单操作不同的流程有可能会导致该笔订单最后状态出现错误，造成损失。</p></li></ul><p>Redis 因为其性能好，实现起来分布式锁简单，所以让很多人都对基于 Redis 实现的分布式锁十分青睐。</p><h2 id="_1-实现原理" tabindex="-1"><a class="header-anchor" href="#_1-实现原理" aria-hidden="true">#</a> 1. 实现原理</h2><p>Redis 实现『<strong>分布式锁</strong>』功能的原子操作主要是 <strong>SET</strong> 和 <strong>EXPIRE</strong> 操作，从 Redis 的 2.6.x 版本开始，其提供的 SET 命令格式如下：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>SET <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>value<span class="token operator">&gt;</span> <span class="token punctuation">[</span>EX seconds<span class="token punctuation">]</span> <span class="token punctuation">[</span>PX milliseconds<span class="token punctuation">]</span> <span class="token punctuation">[</span>NX <span class="token operator">|</span> XX<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><strong>EX</strong> 值的是 <code>key</code> 的存活时间，单位为秒。<strong>PX</strong> 与 <strong>EX</strong> 作用一样，唯一的不同就是后者的单位是微秒<small>（使用较少）</small>。</p><p><strong>NX</strong> 和 <strong>XX</strong> 作用是相反的。<strong>NX</strong> 表示只有当 key『<strong>不存在时</strong>』才会设置其值；<strong>XX</strong> 表示当 <code>key</code> 存在时才设置 <code>key</code> 的值。</p><p>对于使用 <code>NX</code> 选项的 <code>SET</code> 命令，Redis 提供了一个别名命令：<code>SETNX</code> 。</p><p>在使用 <code>SETNX</code> 操作实现分布式锁功能时，需要注意以下几点：</p><ul><li><p>这里的『锁』指的是 Redis 中的一个认为约定的键值对。谁能创建这个键值对，就意味着谁拥有这整个『锁』。</p></li><li><p>使用 <code>SETNX</code> 命令获取『锁』时，如果操作返回结果是 0<small>（表示 key 已存在，设值失败）</small>，则意味着获取『锁』失败<small>（该锁被其它线程先获取）</small>，反之，则设值成功，表示获取『锁』成功。</p><ul><li><p>如果这个 <strong>key</strong> 不存在，SETNX 才会设置该 key 的值。此时 Redis 返回 1 。</p></li><li><p>如果这个 <strong>key</strong> 存在，SETNX 则不会设置该 key 的值。此时 Redis 返回 0 。</p></li></ul></li><li><p>为了防止其它线程获得『锁』之后，有意或无意，长期持有『锁』而不释放<small>（导致其它线程无法获得该『锁』）</small>。因此，需要为 key 设置一个合理的过期时间。</p></li><li><p>当成功获得『锁』并成功完成响应操作之后，需要释放『锁』<small>（可以执行 DEL 命令将『锁』删除）</small>。</p></li></ul><p>在代码层面，与 Setnx 命令对应的接口是 ValueOperations 的 <strong>setIfAbsent</strong> 方法。</p><h2 id="_2-工具类" tabindex="-1"><a class="header-anchor" href="#_2-工具类" aria-hidden="true">#</a> 2. 工具类</h2><p>见其它笔记。</p>',16),t={render:function(e,s){return a}}}}]);