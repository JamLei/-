"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[8463],{12232:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-f3ddd0e8",path:"/es/99-ESTemplate.html",title:"ElasticsearchTemplate",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"创建索引",slug:"创建索引",children:[]},{level:2,title:"创建、添加数据",slug:"创建、添加数据",children:[]},{level:2,title:"单字符串查询",slug:"单字符串查询",children:[]},{level:2,title:"排序",slug:"排序",children:[]},{level:2,title:"模糊查询",slug:"模糊查询",children:[]},{level:2,title:"其余匹配",slug:"其余匹配",children:[]},{level:2,title:"Term全等查询",slug:"term全等查询",children:[]},{level:2,title:"组合查询",slug:"组合查询",children:[]}],filePathRelative:"es/99-ESTemplate.md",git:{updatedTime:1629826614e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},50263:(n,s,a)=>{a.r(s),a.d(s,{default:()=>p});const t=(0,a(66252).uE)('<h1 id="elasticsearchtemplate" tabindex="-1"><a class="header-anchor" href="#elasticsearchtemplate" aria-hidden="true">#</a> ElasticsearchTemplate</h1><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Autowired</span>\n<span class="token keyword">private</span> <span class="token class-name">ElasticsearchTemplate</span> elasticsearchTemplate<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="创建索引" tabindex="-1"><a class="header-anchor" href="#创建索引" aria-hidden="true">#</a> 创建索引</h2><ul><li><p>方式一：直接用名称创建</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>elasticsearchTemplate<span class="token punctuation">.</span><span class="token function">createIndex</span><span class="token punctuation">(</span><span class="token string">&quot;book&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li><p>方式二：填入 class 对象</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>elasticsearchTemplate<span class="token punctuation">.</span><span class="token function">createIndex</span><span class="token punctuation">(</span><span class="token class-name">BookEntity</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li></ul><h2 id="创建、添加数据" tabindex="-1"><a class="header-anchor" href="#创建、添加数据" aria-hidden="true">#</a> 创建、添加数据</h2><ul><li><p>创建、添加单条数据</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">BookEntity</span> bookEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BookEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nbookEntity<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token string">&quot;2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nbookEntity<span class="token punctuation">.</span><span class="token function">setAuthor</span><span class="token punctuation">(</span><span class="token string">&quot;老李&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nbookEntity<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;一起学习es&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name">IndexQuery</span> indexQuery <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IndexQueryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">withId</span><span class="token punctuation">(</span>bookEntity<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">withObject</span><span class="token punctuation">(</span>bookEntity<span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nelasticsearchTemplate<span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span>indexQuery<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div></li><li><p>创建、添加多条数据</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">BookEntity</span> bookEntity <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n\n<span class="token class-name">IndexQuery</span> indexQuery1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IndexQueryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">withId</span><span class="token punctuation">(</span>bookEntity<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">withObject</span><span class="token punctuation">(</span>bookEntity<span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nindexQueries<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>indexQuery1<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name">BookEntity</span> bookEntity2 <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n\n<span class="token class-name">IndexQuery</span> indexQuery2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IndexQueryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">withId</span><span class="token punctuation">(</span>bookEntity2<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">withObject</span><span class="token punctuation">(</span>bookEntity<span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nindexQueries<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>indexQuery2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nelasticsearchTemplate<span class="token punctuation">.</span><span class="token function">bulkIndex</span><span class="token punctuation">(</span>indexQueries<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div></li></ul><h2 id="单字符串查询" tabindex="-1"><a class="header-anchor" href="#单字符串查询" aria-hidden="true">#</a> 单字符串查询</h2><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">SearchQuery</span> searchQuery <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NativeSearchQueryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\t\t<span class="token punctuation">.</span><span class="token function">withQuery</span><span class="token punctuation">(</span><span class="token class-name">QueryBuilders</span><span class="token punctuation">.</span><span class="token function">queryStringQuery</span><span class="token punctuation">(</span><span class="token string">&quot;菜鸟&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\t\t<span class="token punctuation">.</span><span class="token function">withPageable</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PageRequest</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\t\t<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BookEntity</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> elasticsearchTemplate<span class="token punctuation">.</span><span class="token function">queryForList</span><span class="token punctuation">(</span>searchQuery<span class="token punctuation">,</span> <span class="token class-name">BookEntity</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="排序" tabindex="-1"><a class="header-anchor" href="#排序" aria-hidden="true">#</a> 排序</h2><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Pageable</span> pageable<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PageRequest</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Sort</span><span class="token punctuation">(</span><span class="token class-name">Sort<span class="token punctuation">.</span>Direction</span><span class="token punctuation">.</span>DESC<span class="token punctuation">,</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">SearchQuery</span> searchQuery <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NativeSearchQueryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\t\t<span class="token punctuation">.</span><span class="token function">withQuery</span><span class="token punctuation">(</span><span class="token class-name">QueryBuilders</span><span class="token punctuation">.</span><span class="token function">queryStringQuery</span><span class="token punctuation">(</span><span class="token string">&quot;菜鸟&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\t\t<span class="token punctuation">.</span><span class="token function">withPageable</span><span class="token punctuation">(</span>pageable<span class="token punctuation">)</span>\n\t\t<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BookEntity</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> elasticsearchTemplate<span class="token punctuation">.</span><span class="token function">queryForPage</span><span class="token punctuation">(</span>searchQuery<span class="token punctuation">,</span> <span class="token class-name">BookEntity</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>注意：如果出现此异常</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>java.lang.IllegalArgumentException: Fielddata is disabled on text fields by default\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>官方解释5.x后对排序，聚合这些操作用单独的数据结构(fielddata)缓存到内存里了，需要单独开启（主要是占用资源太多，所以是否开启，需要仔细斟酌）</p><p>关于fielddata更多内容：https://www.elastic.co/guide/en/elasticsearch/reference/current/fielddata.html</p><h2 id="模糊查询" tabindex="-1"><a class="header-anchor" href="#模糊查询" aria-hidden="true">#</a> 模糊查询</h2><p>此模糊查询与mysql中的模糊查询不太一样，此模糊查询类似分词匹配。搜索条件会被分词。 比如有两条数据：1、我今天非常高兴 2、他摔倒很高兴 输入：今天高兴 这两条数据都能匹配上。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Pageable</span> pageable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PageRequest</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">SearchQuery</span> searchQuery <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NativeSearchQueryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\t\t<span class="token punctuation">.</span><span class="token function">withQuery</span><span class="token punctuation">(</span><span class="token class-name">QueryBuilders</span><span class="token punctuation">.</span><span class="token function">matchQuery</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;菜鸟&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\t\t<span class="token punctuation">.</span><span class="token function">withPageable</span><span class="token punctuation">(</span>pageable<span class="token punctuation">)</span>\n\t\t<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BookEntity</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> elasticsearchTemplate<span class="token punctuation">.</span><span class="token function">queryForList</span><span class="token punctuation">(</span>searchQuery<span class="token punctuation">,</span> <span class="token class-name">BookEntity</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="其余匹配" tabindex="-1"><a class="header-anchor" href="#其余匹配" aria-hidden="true">#</a> 其余匹配</h2><p>其余匹配类似mysql中like &quot;%word%&quot;的模糊匹配</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Pageable</span> pageable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PageRequest</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">SearchQuery</span> searchQuery <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NativeSearchQueryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\t\t<span class="token punctuation">.</span><span class="token function">withQuery</span><span class="token punctuation">(</span><span class="token class-name">QueryBuilders</span><span class="token punctuation">.</span><span class="token function">matchPhraseQuery</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;菜鸟&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\t\t<span class="token punctuation">.</span><span class="token function">withPageable</span><span class="token punctuation">(</span>pageable<span class="token punctuation">)</span>\n\t\t<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BookEntity</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> elasticsearchTemplate<span class="token punctuation">.</span><span class="token function">queryForList</span><span class="token punctuation">(</span>searchQuery<span class="token punctuation">,</span> <span class="token class-name">BookEntity</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="term全等查询" tabindex="-1"><a class="header-anchor" href="#term全等查询" aria-hidden="true">#</a> Term全等查询</h2><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Pageable</span> pageable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PageRequest</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">SearchQuery</span> searchQuery <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NativeSearchQueryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\t\t<span class="token punctuation">.</span><span class="token function">withQuery</span><span class="token punctuation">(</span><span class="token class-name">QueryBuilders</span><span class="token punctuation">.</span><span class="token function">termQuery</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;菜鸟&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\t\t<span class="token punctuation">.</span><span class="token function">withPageable</span><span class="token punctuation">(</span>pageable<span class="token punctuation">)</span>\n\t\t<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BookEntity</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> elasticsearchTemplate<span class="token punctuation">.</span><span class="token function">queryForList</span><span class="token punctuation">(</span>searchQuery<span class="token punctuation">,</span> <span class="token class-name">BookEntity</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="组合查询" tabindex="-1"><a class="header-anchor" href="#组合查询" aria-hidden="true">#</a> 组合查询</h2><p>即boolQuery，可以设置多个条件的查询方式。它的作用是用来组合多个Query，有四种方式来组合，must，mustnot，filter，should。 must代表返回的文档必须满足must子句的条件，会参与计算分值； filter代表返回的文档必须满足filter子句的条件，但不会参与计算分值； should代表返回的文档可能满足should子句的条件，也可能不满足，有多个should时满足任何一个就可以，通过minimum_should_match设置至少满足几个。 mustnot代表必须不满足子句的条件。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">QueryBuilder</span> filterQuery <span class="token operator">=</span> <span class="token class-name">QueryBuilders</span>\n\t\t\t\t<span class="token punctuation">.</span><span class="token function">boolQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\t\t\t\t<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">QueryBuilders</span><span class="token punctuation">.</span><span class="token function">termQuery</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;菜鸟&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\t\t\t\t<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">QueryBuilders</span><span class="token punctuation">.</span><span class="token function">termQuery</span><span class="token punctuation">(</span><span class="token string">&quot;author&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;小菜&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">BookEntity</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> elasticsearchTemplate<span class="token punctuation">.</span><span class="token function">queryForList</span><span class="token punctuation">(</span>filterQuery<span class="token punctuation">,</span> <span class="token class-name">BookEntity</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>',25),p={render:function(n,s){return t}}}}]);