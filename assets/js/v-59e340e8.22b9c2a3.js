"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[7506],{73702:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-59e340e8",path:"/spring-cloud/05-netflix-hystrix.html",title:"断路器：Hystrix",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"1. 容错",slug:"_1-容错",children:[]},{level:2,title:"2. Hystrix 简介",slug:"_2-hystrix-简介",children:[]},{level:2,title:"3. 集成并使用 Hystrix",slug:"_3-集成并使用-hystrix",children:[{level:3,title:"3.1 集成",slug:"_3-1-集成",children:[]},{level:3,title:"3.2 配置",slug:"_3-2-配置",children:[]},{level:3,title:"3.3 验证",slug:"_3-3-验证",children:[]}]},{level:2,title:"4. 服务降级（failback）",slug:"_4-服务降级-failback",children:[]},{level:2,title:"5. 配置单个 HystrixCommand（了解）",slug:"_5-配置单个-hystrixcommand-了解",children:[]},{level:2,title:"6. Feign 指定 fallback",slug:"_6-feign-指定-fallback",children:[]},{level:2,title:"7. Hystrix 的超时和重试",slug:"_7-hystrix-的超时和重试",children:[]},{level:2,title:"8. Hystrix 的线程池隔离策略",slug:"_8-hystrix-的线程池隔离策略",children:[]},{level:2,title:"9. 其它",slug:"_9-其它",children:[]}],filePathRelative:"spring-cloud/05-netflix-hystrix.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},88211:(n,s,a)=>{a.r(s),a.d(s,{default:()=>u});var e=a(66252);const t=(0,e.uE)('<h1 id="断路器-hystrix" tabindex="-1"><a class="header-anchor" href="#断路器-hystrix" aria-hidden="true">#</a> 断路器：Hystrix</h1><h2 id="_1-容错" tabindex="-1"><a class="header-anchor" href="#_1-容错" aria-hidden="true">#</a> 1. 容错</h2><p>微服务架构的系统通常会包含多个微服务，各个微服务可能部署在不同的机器上并通过网络进行通信，那么就不可避免会遇到 <code>网络请求超时</code>、<code>微服务不可用</code> 等问题，这就会进一步引起依赖它的微服务不可用，这样不断引发服务故障的现象称为『<strong>雪崩效应</strong>』，最终的结果是整个应用系统瘫痪。</p><p>针对上述问题，处理容错有以下常用手段：</p><ul><li><p>超时重试</p><p>在 HTTP 请求中通常会设置请求的超时时间，超过一定时间后我们<small>（主调方）</small>就会断开连接<small>（不再等待被调方的响应）</small>。</p><p>在设置『超时』的同时，一般会配合设置请求『重试』，也就是在请求失败时再次自动发起请求，但要注意重试次数不能设置太多。</p><p>具体的超时时间和重试次数需要结合具体的业务来指定。</p></li><li><p>熔断器</p><p>使用熔断器模式，如果请求出现异常，所有请求都会直接返回，而不会等待或阻塞，这样可以减少资源的浪费。</p><p>熔断器所造成的这种现象也叫『快速失败』。</p><p>熔断器还有一种半开的状态，当熔断器发现异常后会进入半开状态，此时它会『放行一个请求』来检测被调系统是否已经恢复，如果请求调用成功，则代表被调系统已经恢复正常，那么就会关掉熔断器，否则继续打开。</p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/spring-cloud/img/hystrix-1.png" alt="hystrix-1"></p></li><li><p>限流</p><p>由于被调系统处理能力时有限，如果请求方访问量过大会导致被调系统不可用。除了可以增加机器的物理配置，也可以对系统进行限流。常见的限流措施有控制并发数量。</p></li></ul><h2 id="_2-hystrix-简介" tabindex="-1"><a class="header-anchor" href="#_2-hystrix-简介" aria-hidden="true">#</a> 2. Hystrix 简介</h2><p>Hystrix 是 Netflix 公司推出的一款针对分布式系统延迟和容错的开源库，其设计目的是通过添加延迟容忍和容错逻辑，从而控制分布式服务之间的交互。</p><p>Hystrix 封装了微服务调用过程中的每一个依赖，使每个依赖彼此隔离，当延迟情况发生时，它会被限制在资源中，并包含回退<small>（fallback）</small>逻辑，该逻辑决定在依赖发生任何类型故障时应做出何种响应。</p><p>Hystrix 的目标是阻止级联故障，对通过第三方客户端访问的依赖的延迟和故障进行保护和访问。Hystrix 实现这一目标的大致思路如下：</p><ol><li>将外部依赖的访问请求封装在独立的线程中，进行资源隔离。</li><li>对于超出设定阈值的服务调用，直接进行超时处理，不允许其消耗过长时间而导致线程阻塞。</li><li>每个依赖服务维护一个独立的线程池，一旦线程池满了，直接拒绝服务调用。</li><li>统计依赖服务调用的成功次数、失败次数、拒绝次数、超时次数等结果。</li><li>在一段时间内，如果服务调用的异常次数超过一定的阈值，就会触发熔断器，停止对特定服务的所有请求。在一定时间内对服务降级，一段时间之后自动尝试恢复。</li><li>如果某个服务出现调用失败、被拒绝、超时等异常情况，就会自动调用 fallback 降级机制。</li></ol><blockquote><p>Hystrix 是使用在服务调用者，即，服务消费者一方的。也就是使用 RestTemplate / OpenFeign 的那方。</p></blockquote><h2 id="_3-集成并使用-hystrix" tabindex="-1"><a class="header-anchor" href="#_3-集成并使用-hystrix" aria-hidden="true">#</a> 3. 集成并使用 Hystrix</h2><blockquote><p>再次强调 Hystrix 是用于服务的使用者一方的，即通过 RestTemplate / OpenFeign 发出 HTTP 请求的那一方。它是用于保护服务的使用者，避免它因为其所以依赖的服务提供者的崩溃而崩溃。</p></blockquote><ul><li><p>服务『<strong>提供者</strong>』的对外提供的接口<small>（简化到了最精简的情况）</small>：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">welcome</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token string">&quot;welcome to microservice-producer: &quot;</span> <span class="token operator">+</span> port<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><p>服务『<strong>调用者</strong>』使用 RestTemplate 进行『调用』：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">demo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">&quot;http://MICROSERVICE-PRODUCER/&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 这么使用时，别忘了用 @LoadBalanced 注解来激活 Ribbon 来替换 IP 和端口。</span>\n    <span class="token keyword">return</span> template<span class="token punctuation">.</span><span class="token function">postForObject</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li></ul><h3 id="_3-1-集成" tabindex="-1"><a class="header-anchor" href="#_3-1-集成" aria-hidden="true">#</a> 3.1 集成</h3><p>引入依赖：</p><ul><li><p>在 Spring Initializer 中输入、搜索 <strong>Hystrix</strong> 。或</p></li><li><p>在 <em>Spring Cloud Circuit Breaker</em> 下选中 <strong>Hystrix</strong> 。</p></li></ul><p>注意事项：</p><ul><li><p>pom 中实际引入的核心依赖是</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-netflix-hystrix<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li></ul><p>在服务<small>（使用者的）</small>入口启动类上面加上 <strong>@EnableHystrix</strong> 或 <strong>@EnableCircuitBreaker</strong> 注解，表示激活熔断器的默认配置。</p><blockquote><p><strong>@EnableHystrix</strong> 注解是 <strong>@EnableCircuitBreaker</strong> 的语义化，它们的关系类似于 <strong>@Service</strong> 和 <strong>@Component</strong> 。</p></blockquote><h3 id="_3-2-配置" tabindex="-1"><a class="header-anchor" href="#_3-2-配置" aria-hidden="true">#</a> 3.2 配置</h3><p>Hystrix 的全局配置也称为默认配置，它们在配置文件中通过 <strong>hystrix.command.default.*</strong> 来进行配置<small>（再次强调，Hystrix 是用于服务的调用方，所以这里的配置自然也是配置在服务的调用方这边）</small>。例如:</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">hystrix</span><span class="token punctuation">:</span>\n  <span class="token key atrule">command</span><span class="token punctuation">:</span>\n    <span class="token key atrule">default</span><span class="token punctuation">:</span>\n      <span class="token key atrule">execution</span><span class="token punctuation">:</span>\n<span class="token comment">#       timeout:</span>\n<span class="token comment">#         enabled: false # 直接关停 hystrix 的超时判断功能，或</span>\n        <span class="token key atrule">isolation</span><span class="token punctuation">:</span>\n          <span class="token key atrule">thread</span><span class="token punctuation">:</span>\n            <span class="token key atrule">timeoutInMilliseconds</span><span class="token punctuation">:</span> <span class="token number">3000</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><blockquote><p>无论我们的使用的是 RestTemplate 还是 OpenFeign，它们都会是使用到 Ribbon 的负载均衡<small>（和超时重试）</small>能力。而 Ribbon 也会监管请求超时问题。</p><p>所以，理论上，Hystrix 的超时时长的判断标准应该大于 Ribbon 的超时重试的总耗时，否则，会出现 Ribbon 还在『努力』，但是 Hystrix 决定『放弃』的情况。<small>当然，这样也不是不行，只是有些不科学。</small></p><p>除了合理的参数值设置之外，你还可以直接关闭掉 Hystrix 的超时判断，完全由 Ribbon 来评判、上报<small>（给 Hystrix）</small>超时与否。</p></blockquote>',25),p=(0,e.Uk)("具体的配置项详情见 "),l={href:"https://github.com/Netflix/Hystrix/wiki/Configuration",target:"_blank",rel:"noopener noreferrer"},o=(0,e.Uk)("这里"),c=(0,e.Uk)(" 。"),r=(0,e.uE)('<p>默认情况下，Hystrix 的『超时』的判断标准为 1 秒。<small>这个设置明显偏小了点，将它调大，或关闭它。</small></p><p>另外，常见的配置项还有：</p><ul><li><p><strong>metrics.rollingStats.timeInMilliseconds</strong> ：统计窗口时间，单位毫秒。默认 <code>10000</code>，即 10 秒。</p></li><li><p><strong>circuitBreaker.enabled</strong>： 是否启用熔断器。默认值为 <code>true</code> 。</p></li><li><p><strong>circuitBreaker.requestVolumeThreshold</strong> ：窗口期内发生 N 个失败就触发熔断。断路器由『<strong>关闭</strong>』状态进入『<strong>开启</strong>』状态，默认值为 <code>20</code> 。</p></li><li><p><strong>circuitBreaker.errorThresholdPercentage</strong> ： 窗口期内发生 N% 的错误就触发熔断。断路器由『<strong>关闭</strong>』状态进入『<strong>开启</strong>』状态。默认值为 <code>50</code> ，即 50% 失败。</p></li><li><p><strong>circuitBreaker.sleepWindowInMilliseconds</strong> ：熔断后 N 毫秒才开始尝试恢复。断路器由『<strong>开启</strong>』状态转变为『<strong>半开</strong>』状态。<small>默认值 5000 ，即 5 秒钟。</small></p></li></ul><p>例如：</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">hystrix</span><span class="token punctuation">:</span>\n  <span class="token key atrule">command</span><span class="token punctuation">:</span>\n    <span class="token key atrule">default</span><span class="token punctuation">:</span>\n      <span class="token key atrule">execution</span><span class="token punctuation">:</span>\n        <span class="token key atrule">isolation</span><span class="token punctuation">:</span>\n          <span class="token key atrule">thread</span><span class="token punctuation">:</span>\n            <span class="token key atrule">timeoutInMilliseconds</span><span class="token punctuation">:</span> <span class="token number">3000</span> <span class="token comment"># 超时阈值</span>\n      <span class="token key atrule">metrics</span><span class="token punctuation">:</span>\n        <span class="token key atrule">rollingStats</span><span class="token punctuation">:</span>\n          <span class="token key atrule">timeInMilliseconds</span><span class="token punctuation">:</span> <span class="token number">10000</span>\n      <span class="token key atrule">circuitBreaker</span><span class="token punctuation">:</span>\n<span class="token comment">#       enabled: true     # 默认值即为 true</span>\n        <span class="token key atrule">requestVolumeThreshold</span><span class="token punctuation">:</span> <span class="token number">20</span>\n        <span class="token key atrule">errorThresholdPercentage</span><span class="token punctuation">:</span> <span class="token number">60</span>\n        <span class="token key atrule">sleepWindowInMilliseconds</span><span class="token punctuation">:</span> <span class="token number">300000</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>全局配置完成之后，想让哪一个方法实现断路器功能，就在哪一个方法上加上注解 <strong>@HystrixCommand</strong> 。注意，这里的『<strong>方法</strong>』指的是调用了 Feign 或 RestTeamplte 的方法，通常就是 @Service 中的方法。</p><blockquote><p><strong>@HystrixCommand</strong> 注解的背后也是 Spring AOP 动态代理思想。</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@HystrixCommand</span><span class="token punctuation">(</span>fallbackMethod <span class="token operator">=</span> <span class="token string">&quot;demo1FallBack&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">demo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">&quot;http://MICROSERVICE-PRODUCER/&quot;</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> template<span class="token punctuation">.</span><span class="token function">postForObject</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>另外，<strong>OpenFeign 已经整合了 Hystrix，但是默认情况下并未将其激活使用</strong>。记得我们要将它打开：</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">feign</span><span class="token punctuation">:</span>\n  <span class="token key atrule">hystrix</span><span class="token punctuation">:</span>\n    <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_3-3-验证" tabindex="-1"><a class="header-anchor" href="#_3-3-验证" aria-hidden="true">#</a> 3.3 验证</h3><p>先后依次启动『注册中心』、『服务提供者』和『服务消费者』。</p><p>初始情况下，由于『服务提供者』是可用的，因此，『服务消费者』对外提供的服务也是可用的。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;do something ...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    producerServiceClient<span class="token punctuation">.</span><span class="token function">demo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;do other thing...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 这里偷懒使用的 Map，没有定义 ResponseResult&lt;T&gt; 类。</span>\n    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    result<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;code&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;10086&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    result<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;do something 成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> result<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>可通过 postman 验证。结果如下：</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n    <span class="token property">&quot;code&quot;</span><span class="token operator">:</span> <span class="token string">&quot;10086&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;message&quot;</span><span class="token operator">:</span> <span class="token string">&quot;do something 成功&quot;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>现将『服务提供者』关闭，造成『<strong>服务不可用</strong>』情况。毫无疑问，此时『服务使用者』理应受到影响，其对外提供的服务也会出问题。</p><p>可通过 postman 验证。</p><p>返回结果如下：</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n    <span class="token property">&quot;timestamp&quot;</span><span class="token operator">:</span> <span class="token string">&quot;日期时间&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;status&quot;</span><span class="token operator">:</span> <span class="token number">500</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;error&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Internal Server Error&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;message&quot;</span><span class="token operator">:</span> <span class="token string">&quot;... timed-out and fallback failed.&quot;</span><span class="token punctuation">,</span>    看这里，看这里，看这里\n    <span class="token property">&quot;path&quot;</span><span class="token operator">:</span> <span class="token string">&quot;...&quot;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>新版本返回的结果中的 <strong>message</strong> 的内容有所变化，<strong>timed-out</strong> 变为了 <strong>failed</strong> ，显示为：</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token property">&quot;message&quot;</span><span class="token operator">:</span> <span class="token string">&quot;... failed and no fallback available.&quot;</span><span class="token punctuation">,</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>注意，此时熔断器还未被激活，它还没有开始阻止你去访问目标服务，因此，你每次都去调用目标服务，辛辛苦苦等半天，最后得到一个 time-out，而不是预期中的结果 。</p><hr><p>通过 jmeter 模拟短时大量请求，达到服务使用者<small>（eureka-client-consumer-feign）</small>的熔断标准。</p><p>通过 jmeter 5 秒内对服务使用者<small>（eureka-client-consumer-feign）</small>发出 60 次请求。</p><ol><li><p>下载后解压到你系统下的任意目录，然后运行其 <strong>bin/jmeter.bat</strong> 文件</p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/spring-cloud/img/jmeter-01.png" alt="jmeter-01"></p></li><li><p>右键 <strong>Test Plan</strong> &gt; <strong>Add</strong> ，新建线程组。一个线程模拟一个用户，新建线程组就是新建一组用户。</p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/spring-cloud/img/jmeter-02.png" alt="jmeter-02"></p></li><li><p>模拟时间窗口（Ramp-up period）10 秒钟内，执行 30 次（users）请求，执行 1 轮（Loop Count）。你可以调整这些参数以满足我们定义的服务熔断标准。</p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/spring-cloud/img/jmeter-03.png" alt="jmeter-03"></p></li><li><p>添加测试样本（访问接口）</p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/spring-cloud/img/jmeter-04.png" alt="jmeter-04"></p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/spring-cloud/img/jmeter-05.png" alt="jmeter-05"></p></li><li><p>添加 Results Tree（结果查看树）</p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/spring-cloud/img/jmeter-06.png" alt="jmeter-06"></p></li><li><p>启动测试的方法</p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/spring-cloud/img/jmeter-07.png" alt="jmeter-07"></p></li></ol><p>再次通过 postman 向服务使用者<small>（eureka-client-consumer-feign）</small>发出请求时，你会发现它的响应信息发生了变化，返回的响应的 message 中会出现 <strong>short-circuited</strong> 字样：</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n    <span class="token property">&quot;timestamp&quot;</span><span class="token operator">:</span> <span class="token string">&quot;日期时间&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;status&quot;</span><span class="token operator">:</span> <span class="token number">500</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;error&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Internal Server Error&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;message&quot;</span><span class="token operator">:</span> <span class="token string">&quot;... short-circuited and fallback failed.&quot;</span><span class="token punctuation">,</span> 看这里，看这里，看这里\n    <span class="token property">&quot;path&quot;</span><span class="token operator">:</span> <span class="token string">&quot;...&quot;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>此时，熔断器已经被激活生效。它的效果就是：它会拦截、阻止 RestTemplate 发起请求。Hystrix 基于之前的失败的经历，认为你本次调用大概率还是会失败，因此它直接告诉你调用调用失败。这就是所谓的快速失败<small>（fast fail）</small>。</p><p>并且，在未来的 5 分钟内，哪怕是『服务提供者』已经恢复正常了，『服务使用者』也不会真调用它，依然认为调用失败。</p><h2 id="_4-服务降级-failback" tabindex="-1"><a class="header-anchor" href="#_4-服务降级-failback" aria-hidden="true">#</a> 4. 服务降级（failback）</h2><p>当『服务消费者』的熔断器『<strong>起来干活</strong>』后，我们调用它的服务时，得到的错误信息如下：</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n    <span class="token property">&quot;timestamp&quot;</span><span class="token operator">:</span> <span class="token string">&quot;日期时间&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;status&quot;</span><span class="token operator">:</span> <span class="token number">500</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;error&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Internal Server Error&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;message&quot;</span><span class="token operator">:</span> <span class="token string">&quot;... short-circuited and fallback failed.&quot;</span><span class="token punctuation">,</span> 看这里，看这里，看这里\n    <span class="token property">&quot;path&quot;</span><span class="token operator">:</span> <span class="token string">&quot;...&quot;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>这样的响应结果，提供给用户显然是不够友好的。上面的提示信息有两层含义：</p><ul><li><p>服务熔断被触发，也就是断路器处于开启状态；</p></li><li><p>断路器被触发之后，访问 fallback 方法，但是这个 fallback 方法我们之前没有定义。</p></li></ul><p>当服务提供者故障触发熔断机制，此时我们可以预先提供一个处理方法，作为降级后的执行方法一般叫 <strong>fallback</strong> ，fallback 方法返回值一般是设置的默认值或者来自缓存，或者是一些友好提示信息。</p><p>以下写法仅作了解，后续我们主要是结合 OpenFeign 使用：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@HystrixCommand</span><span class="token punctuation">(</span>fallbackMethod <span class="token operator">=</span> <span class="token string">&quot;demo2&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">demo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">&quot;http://SELF-DEPARTMENT/&quot;</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> template<span class="token punctuation">.</span><span class="token function">postForObject</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">demo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token string">&quot;error&quot;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>这个时候，当 demo1<small>（中的 RestTemplate）</small>执行失败时，demo2 方法会执行，demo2 的返回值将作为 demo1 的返回值的替代返回。</p><h2 id="_5-配置单个-hystrixcommand-了解" tabindex="-1"><a class="header-anchor" href="#_5-配置单个-hystrixcommand-了解" aria-hidden="true">#</a> 5. 配置单个 HystrixCommand（了解）</h2><p>很显然，我们之前在 .yml 中的有关 Hystrix 的配置时全局配置，因为它的名字叫 <strong>default</strong> ：</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">hystrix</span><span class="token punctuation">:</span>\n  <span class="token key atrule">command</span><span class="token punctuation">:</span>\n    <span class="token key atrule">default</span><span class="token punctuation">:</span>  <span class="token comment"># 这里，default 代表默认配置、全局配置。</span>\n      <span class="token key atrule">execution</span><span class="token punctuation">:</span>\n        <span class="token key atrule">isolation</span><span class="token punctuation">:</span>\n          <span class="token key atrule">thread</span><span class="token punctuation">:</span>\n            <span class="token key atrule">timeoutInMilliseconds</span><span class="token punctuation">:</span> <span class="token number">3000</span>\n      <span class="token key atrule">metrics</span><span class="token punctuation">:</span>\n        <span class="token key atrule">rollingStats</span><span class="token punctuation">:</span>\n          <span class="token key atrule">timeInMilliseconds</span><span class="token punctuation">:</span> <span class="token number">10000</span>\n      <span class="token key atrule">circuitBreaker</span><span class="token punctuation">:</span>\n<span class="token comment">#       enabled: true   # 默认值为 true</span>\n        <span class="token key atrule">requestVolumeThreshold</span><span class="token punctuation">:</span> <span class="token number">20</span>\n        <span class="token key atrule">errorThresholdPercentage</span><span class="token punctuation">:</span> <span class="token number">60</span>\n        <span class="token key atrule">sleepWindowInMilliseconds</span><span class="token punctuation">:</span> <span class="token number">300000</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p><strong>default</strong> 配置对所有的 <strong>@HystrixCommand</strong> 生效，除非这个 <strong>@HystrixCommand</strong> 用自己的配置去屏蔽 default 配置。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@HystrixCommand</span><span class="token punctuation">(</span>\n    fallbackMethod <span class="token operator">=</span> <span class="token string">&quot;demo2&quot;</span><span class="token punctuation">,</span>\n    commandProperties <span class="token operator">=</span> <span class="token punctuation">{</span>\n        <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;execution.isolation.thread.timeoutInMilliseconds&quot;</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">&quot;1000&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;...&quot;</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">&quot;...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token annotation punctuation">@HystrixProperty</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;...&quot;</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">&quot;...&quot;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">demo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">&quot;http://SELF-DEPARTMENT/&quot;</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> template<span class="token punctuation">.</span><span class="token function">postForObject</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="_6-feign-指定-fallback" tabindex="-1"><a class="header-anchor" href="#_6-feign-指定-fallback" aria-hidden="true">#</a> 6. Feign 指定 fallback</h2><p>在接口注解 <strong>@FeignClient</strong> 中指定 fallback 。</p><blockquote><p>首先你要启用 Feign 的 hystrix 配置的开关：</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">feign</span><span class="token punctuation">:</span>\n  <span class="token key atrule">hystrix</span><span class="token punctuation">:</span>\n    <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>feign 整合了 Hystrix 但是默认未激活使用。</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;producer-mail&quot;</span><span class="token punctuation">,</span> fallback <span class="token operator">=</span> 看这里<span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MailService</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>这种方式的 fallback 配置中，需要你『<strong>额外地</strong>』为接口去编写一个实现类。显而易见，这个实现类中的各个方法，就是接口中各个远程调用方法的对应的 fallback 。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>  <span class="token comment">// 别忘了这里</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MailServiceFallback</span> <span class="token keyword">implements</span> <span class="token class-name">MailService</span> <span class="token punctuation">{</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token keyword">to</span><span class="token punctuation">,</span> <span class="token class-name">String</span> content<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        result<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;code&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;10086&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        result<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;内部错误，请稍后再试&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> result<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>这样，但凡是调用 MailService 的服务的方法，出现调用失败时，都会使用这个类下的各个方法作为 fallback 。</p><h2 id="_7-hystrix-的超时和重试" tabindex="-1"><a class="header-anchor" href="#_7-hystrix-的超时和重试" aria-hidden="true">#</a> 7. Hystrix 的超时和重试</h2><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">hystrix</span><span class="token punctuation">:</span>\n  <span class="token key atrule">command</span><span class="token punctuation">:</span>\n    <span class="token key atrule">default</span><span class="token punctuation">:</span>\n      <span class="token key atrule">execution</span><span class="token punctuation">:</span>\n        <span class="token key atrule">timeout</span><span class="token punctuation">:</span>\n          <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>\n        <span class="token key atrule">isolation</span><span class="token punctuation">:</span>\n          <span class="token key atrule">thread</span><span class="token punctuation">:</span>\n            <span class="token key atrule">timeoutInMilliseconds</span><span class="token punctuation">:</span> <span class="token number">3000</span>   <span class="token comment"># 默认 1000，短得有点过分了。</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>由于，Hystrix、OpenFeign、Ribbon 它们三者的调用层次顺序是：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>hystrix\n└── openfeign\n    └── ribbon\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>最底层的是 ribbon ，因此是 ribbon 先进行重试，如果重试不成功<small>（抛异常）</small>，hystrix 会再次调用 openfeign 发请求，重试。</p><p>而由于 Ribbon 的超时重试次数是</p><pre><code>(1 + MaxAutoRetries ) x (1 + MaxAutoRetriesNextServer)\n</code></pre><p>因此，理论上 Hystrix 的超时阈值应该：</p><pre><code>超时阈值 &gt; (ribbon 的最大重试次数 x readTimeout)\n</code></pre><p>这样，才能保证 Ribbon 重试的时候不被 Hystrix 熔断。否则 Hystrix 命令超时后，该命令直接熔断，Ribbon 的重试工作就会被强行终止，导致出现『Ribbon 还想抢救一下，但是 Hystrix 决定放弃的情况』。当然，这样不是不可以，只是显得不科学。</p><h2 id="_8-hystrix-的线程池隔离策略" tabindex="-1"><a class="header-anchor" href="#_8-hystrix-的线程池隔离策略" aria-hidden="true">#</a> 8. Hystrix 的线程池隔离策略</h2><p>默认情况下 Hystrix 是使用线程池作为隔离策略。在这种策略下，每一个 OpenFeign Client 准备了独立的线程池，但凡是对这个 OpenFeign 的调用，Hystrix 都会将方法的调用代码放进从线程池中取出的一个线程里执行。</p><p>当线程池中的线程耗完<small>（所有请求均未返回）</small>时，Hystrix 就会触发 Openfeign 的 fallback 逻辑。</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">hystrix</span><span class="token punctuation">:</span>\n  <span class="token key atrule">threadpool</span><span class="token punctuation">:</span>\n    <span class="token key atrule">default</span><span class="token punctuation">:</span>\n      <span class="token key atrule">coreSize</span><span class="token punctuation">:</span> <span class="token number">200</span>\n      <span class="token key atrule">maxQueueSize</span><span class="token punctuation">:</span> <span class="token number">1000</span>\n      <span class="token key atrule">queueSizeRejectionThreshold</span><span class="token punctuation">:</span> <span class="token number">800</span> \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><table><thead><tr><th style="text-align:left;">参数</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">coreSize</td><td style="text-align:left;">并发执行的最大线程数，默认 10</td></tr><tr><td style="text-align:left;">maxQueueSize</td><td style="text-align:left;">BlockingQueue 的最大队列数，默认值 -1</td></tr><tr><td style="text-align:left;">queueSizeRejectionThreshold</td><td style="text-align:left;">即使 maxQueueSize 没有达到，达到 queueSizeRejectionThreshold 该值后，请求也会被拒绝，默认值 5</td></tr></tbody></table><h2 id="_9-其它" tabindex="-1"><a class="header-anchor" href="#_9-其它" aria-hidden="true">#</a> 9. 其它</h2><p>除了线程池之外，Hystrix 还可以使用信号量来作资源隔离。</p><p>使用信号量隔离需要显示地将属性 execution.isolation.strategy 设置为 <code>semaphore</code><small>（它和 thread 一样，都是定义在 ExecutionIsolationStrategy 枚举中的）</small>，同时配置信号量个数，默认为 10 。</p><p>客户端需向依赖服务发起请求时，首先要获取一个信号量才能真正发起调用，由于信号量的数量有限，当并发请求量超过信号量个数时，后续的请求都会直接拒绝，进入 fallback 流程。</p><p>即，发起请求是信号量减一，接收到响应后信号量加一。</p><p>信号量隔离主要是通过控制并发请求量，防止请求线程大面积阻塞，从而达到限流和防止雪崩的目的。</p>',73),u={render:function(n,s){const a=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.iD)(e.HY,null,[t,(0,e._)("p",null,[p,(0,e._)("a",l,[o,(0,e.Wm)(a)]),c]),r],64)}}}}]);