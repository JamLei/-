"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[4993],{26438:(n,a,s)=>{s.r(a),s.d(a,{data:()=>e});const e={key:"v-47cd62e8",path:"/windows/21-yarn.html",title:"Yarn 的安装和使用",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"yarn 的下载和安装",slug:"yarn-的下载和安装",children:[]},{level:2,title:"yarn 的配置",slug:"yarn-的配置",children:[]},{level:2,title:"命令总结",slug:"命令总结",children:[]},{level:2,title:"安装、卸载、配环境",slug:"安装、卸载、配环境",children:[]},{level:2,title:"vue-cli 创建的项目使用 Yarn",slug:"vue-cli-创建的项目使用-yarn",children:[]},{level:2,title:"IDEA 中配置使用 yarn",slug:"idea-中配置使用-yarn",children:[]}],filePathRelative:"windows/21-yarn.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},52972:(n,a,s)=>{s.r(a),s.d(a,{default:()=>r});const e=(0,s(66252).uE)('<h1 id="yarn-的安装和使用" tabindex="-1"><a class="header-anchor" href="#yarn-的安装和使用" aria-hidden="true">#</a> <strong>Yarn 的安装和使用</strong></h1><h2 id="yarn-的下载和安装" tabindex="-1"><a class="header-anchor" href="#yarn-的下载和安装" aria-hidden="true">#</a> yarn 的下载和安装</h2><p>yarn 是 npm 的竞品，它们俩之间的关系就如同 maven 和 gradle 一样。</p><p>抛开具体细节和更多特性不谈，yarn 至少在下载包的速度上面，要比 npm 强很多。</p><p>不过，有意思的是，yarn 要通过 npm 来安装<small>（也不知道 yarn 和 npm 谁更尴尬）</small>，就如同我们要通过 IE 浏览器来下载 google chrome 浏览器来代替 IE 浏览器一样。</p><p>通过 npm 安装 yarn：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> -g <span class="token function">yarn</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>安装完毕后，可直接执行 <strong>yarn -v</strong> 命令查看 yarn 的版本，以验证是否安装成功。</p><p>需要注意的是，在通过 npm 安装了 yarn 之后：</p><ol><li><p>你的 yarn 是安装在了 npm 的全局仓库中。</p><p>你的 <strong>C:\\Users&lt;用户名&gt;\\AppData\\Roaming\\npm\\node_modules</strong> 下面就『多』出来一个 yarn 文件夹。</p></li><li><p>站在“上帝视角”，你的电脑上现在有两个包管理工具，它俩都能为你所用。</p><p>你要注意你当前用的是谁，你想用谁。</p></li><li><p>npm 和 yarn 两个包管理工具，它俩有各自自己的本地全局仓库。</p><p>npm 的本地全局仓库在 <strong>%homepath%\\AppData\\Roaming\\npm\\node_modules</strong></p><p>yarn 的本地仓库在 <strong>%homepath%\\AppData\\Local\\Yarn\\Data\\global\\node_modules</strong></p></li></ol><h2 id="yarn-的配置" tabindex="-1"><a class="header-anchor" href="#yarn-的配置" aria-hidden="true">#</a> yarn 的配置</h2><p>和 npm 一样，yarn 在下载包时也是要连接到网络上的中央仓库，而官方的中央仓库国内的下载速度感人，我需要将配置改为连接淘宝的仓库。</p><ul><li><p>查看 yarn 的中央仓库网址：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">yarn</span> config get registry\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li><p>修改 yarn 的中央仓库网址：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">yarn</span> config <span class="token builtin class-name">set</span> registry http://registry.npm.taobao.org/\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li><p>查看 yarn 全局安装的命令的源码路径和二进制执行文件路径：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">yarn</span> global <span class="token function">dir</span>\n<span class="token function">yarn</span> global bin\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>注意，和 npm 一样，这两个路径和局部安装无关。</p></li></ul><p>这里，对于你电脑上同时存在的 yarn 和 npm，它们在现在包的时候，它们是从同一个中央仓库下载，下载下来的包自然就是一摸一样的，无任何差别。</p><h2 id="命令总结" tabindex="-1"><a class="header-anchor" href="#命令总结" aria-hidden="true">#</a> 命令总结</h2><dl><dt>npm install -g yarn</dt><dd>通过 npm 安装它的竞争对手 yarn 。这个包（yarn）被安装在了 npm 的本地全局仓库。</dd><dt>yarn -v</dt><dd>查看包管理器 yarn 的版本信息</dd><dt>yarn config get registry</dt><dd>查看包管理器 yarn 的网络仓库网址。</dd><dt>yarn config set registry http://registry.npm.taobao.org/</dt><dd>将包管理器 yarn 的网络仓库网址指定为淘宝镜像。</dd><dt>yarn global add xxx</dt><dd>通过 yarn 全局安装 xxx 包。这个包被安装在了 yarn 的本地全局仓库。</dd><dt>yarn global remove xxx/</dt><dd>通过 yarn 卸载全局安装的 xxx 包。在 yarn 的本地全局仓库的 xxx 包会被移除。</dd><dt>yarn add xxx</dt><dd>通过 yarn 局部安装 xxx 包。</dd><dt>yarn remove xxx</dt><dd>通过 yarn 局部卸载 xxx 包。</dd></dl><h2 id="安装、卸载、配环境" tabindex="-1"><a class="header-anchor" href="#安装、卸载、配环境" aria-hidden="true">#</a> 安装、卸载、配环境</h2><ol><li><p>yarn 安装 @vue/cli</p><p>我们使用过 npm 安装 @vue/cli（安装路径在 %homepath%\\AppData\\Roaming\\npm\\node_modules），自然，我们也可以使用 yarn 全局安装 @vue/cli ：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">yarn</span> global <span class="token function">add</span> @vue/cli\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>@vue/cli 被安装在了 yarn 的本地全局仓库中：</p><p><strong>%homepath%\\AppData\\Local\\Yarn\\Data\\global\\node_modules</strong> 。</p></li><li><p>卸载 npm 的 @vue/cli</p></li></ol><p>注意，此时你的电脑上实际上是有 2 个 @vue/cli ：</p><ul><li>npm 的本地全局仓库中有一个（以前装的）；</li><li>yarn 的本地全局仓库中也有一个（刚刚装的）。</li></ul><p>虽然可以，但是为了避免不必要的混淆和麻烦，我们可以『<strong>将 npm 安装的 @vue/cli 卸载掉</strong>』：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> uninstall -g @vue/cli\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ol start="3"><li><p>配置 yarn 环境变量</p><p>不过，有可能你的电脑发现不了 yarn 安装的 @vue/cli，你可以通过以下命令验证：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>vue --version\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>如果没有出现版本信息（命令行输出 vue 命令未找到），那么就说明你的电脑没发现 yarn 安装的 @vue/cli 。</p><p>这是因为 PATH 环境变量没有配置，导致系统/命令行找不到 @vue/cli 的 <code>vue</code> 命令在哪里。</p><p>你可以通过上面的 <code>yarn global bin</code> 到一个路径，它是 yarn 全局安装的软件的可以执行程序位置，形如:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>C:\\Users\\&lt;用户名&gt;\\AppData\\Local\\Yarn\\bin\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>将它追加到你的环境变量 PATH 中去。<small>配置完后，稳妥起见，重启电脑。</small></p></li></ol><h2 id="vue-cli-创建的项目使用-yarn" tabindex="-1"><a class="header-anchor" href="#vue-cli-创建的项目使用-yarn" aria-hidden="true">#</a> vue-cli 创建的项目使用 Yarn</h2><p>虽然现在你的 @vue/cli 是通过 yarn 安装的<small>（npm 安装的那个已经被你卸载了）</small>，但是 @vue/cli 『<strong>默认使用 NPM 作为包管理器</strong>』。</p><blockquote><p>如何知道我的 vue-cli 是使用 NPM 作为包管理器的？</p><p>当你使用 <strong>vue create xxx</strong> 创建 vue 项目结束后看到如下信息，那么毫无疑问 vue-cli 使用的就是 NPM：</p><p>successfully created project xxx.<br> Get started with the following commands:<br> $ cd temp-vue-cli<br> $ npm run serve 看这里，看这里，看这里</p></blockquote><p>如果有需要，你可以通过设置，去提前『<strong>告知</strong>』@vue/cli 创建的 vue 项目使用 Yarn 作为包管理器。</p><p>无论是通过 npm 还是通过 Yarn 全局安装 @vue/cli，@vue/cli 会在你的用户的『<strong>家目录</strong>』下创建一个名为 <code>.vuerc</code> 的文件<small>（一开始可能没有，在你第一次执行 vue create 命令后就会被 @vue/cli 创建）</small>。在 Windows 环境中，这个文件在 <strong>C:\\Users\\&lt;用户名&gt;</strong> 目录下，即，<code>%homepath%</code> 目录。</p><p>用编辑器打开这个文件，你会发现其内容是一个 JSON 格式数据：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">{</span>\n  <span class="token string">&quot;useTaobaoRegistry&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  <span class="token string">&quot;packageManager&quot;</span><span class="token operator">:</span> <span class="token string">&quot;npm&quot;</span>   <span class="token comment">// 看这里，看这里，看这里。</span>\n  <span class="token string">&quot;latestVersion&quot;</span><span class="token operator">:</span> <span class="token string">&quot;4.4.6&quot;</span><span class="token punctuation">,</span>\n  <span class="token string">&quot;lastChecked&quot;</span><span class="token operator">:</span> <span class="token number">1596095820450</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>很显然 <strong>packageManager</strong> 项就是用来设置 @vue/cli 的包管理器的，将它从 npm 改为 <strong>yarn</strong> 。</p><blockquote><p>另外，这个配置文件中还有一项 useTaobaoRegistry ，表示的是『<strong>是否使用淘宝镜像源</strong>』，你也可以将这一项改为 <strong>true</strong> 启用淘宝镜像源，以加快包的下载速度。</p></blockquote><p>修改完成后，使用 <strong>vue create xxx</strong> 创建 vue 项目，创建过程结束后，你看到的将是：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>successfully created project xxx.\nGet started with the following commands:\n\n$ <span class="token builtin class-name">cd</span> temp-vue-cli\n$ <span class="token function">yarn</span> serve\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><strong>注意</strong>，这里的设置对命令行有效，而对 IDEA『<strong>无影响</strong>』 ，因为在 IDEA 里通过 @vue/cli 创建 vue 项目，它们读取的配置文件是 IDEA 自己的配置文件，并不是这里的这个配置文件，是另外单独的配置。</p><h2 id="idea-中配置使用-yarn" tabindex="-1"><a class="header-anchor" href="#idea-中配置使用-yarn" aria-hidden="true">#</a> IDEA 中配置使用 yarn</h2><p>要在 IDEA 使用 yarn 作为包管理器，有 1 处配置需要改动：全局 settings 。</p><p>全局 settings 中去修改 IDEA 默认使用的包管理器，从 npm 改为 yarn 。</p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/windows/img/yarn-idea-1.png" alt="yarn-idea-1"></p><p>这里要指向 yarn 的路径。注意，yarn 是通过 npm 安装的，所以这里的 yarn 的路径是 npm 的本地全局仓库下的 yarn 文件夹。即</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>%homepath%\\AppData\\Roaming\\npm\\node_modules\\yarn\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',41),r={render:function(n,a){return e}}}}]);