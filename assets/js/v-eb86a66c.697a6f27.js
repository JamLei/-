"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[7269],{48441:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-eb86a66c",path:"/utility/3rd/05-javatuples.html",title:"元组：javatuples",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"问题",slug:"问题",children:[]},{level:2,title:"tuples",slug:"tuples",children:[{level:3,title:"The tuple classes",slug:"the-tuple-classes",children:[]},{level:3,title:"Creating tuples",slug:"creating-tuples",children:[]},{level:3,title:"Getting/Setting values",slug:"getting-setting-values",children:[]},{level:3,title:"Adding or removing elements",slug:"adding-or-removing-elements",children:[]},{level:3,title:"Converting to/from collections or arrays",slug:"converting-to-from-collections-or-arrays",children:[]},{level:3,title:"Iterating",slug:"iterating",children:[]},{level:3,title:"Checking contents",slug:"checking-contents",children:[]}]}],filePathRelative:"utility/3rd/05-javatuples.md",git:{updatedTime:1629826614e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},61483:(n,s,a)=>{a.r(s),a.d(s,{default:()=>r});var t=a(66252);const p=(0,t.uE)('<h1 id="元组-javatuples" tabindex="-1"><a class="header-anchor" href="#元组-javatuples" aria-hidden="true">#</a> 元组：javatuples</h1><h2 id="问题" tabindex="-1"><a class="header-anchor" href="#问题" aria-hidden="true">#</a> 问题</h2><p>有时你会有类似如下的需求：</p><ol><li><p>逻辑上，方法需要返回两个甚至更多的值<small>（通常它们的类型并不一致，因此无法使用数组）</small>。形如：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">return</span> <span class="token string">&quot;tom&quot;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">;</span> <span class="token comment">// 有些语言支持这种语法，但是 Java 并没有这个语法特性。</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li><p>有时，你需要向方法传入类似于多个学生的姓名和年龄：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token function">demo</span><span class="token punctuation">(</span><span class="token string">&quot;tom&quot;</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token string">&quot;jerry&quot;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token comment">// 当然这里可以使用不定参/可变参语法，但是可读性并不是很好，不直观。</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li></ol><p>对于上述的情况，你可以采用这样的解决办法：</p><ol><li><p>将多个数据封装到一个 Map 中，或者定义一个类（例如 Student），将数据封装到对象中：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;tom&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nmap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">return</span> map<span class="token punctuation">;</span>\n\n<span class="token comment">// 或</span>\n\n<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></li><li><p>对于第二个问题，可以使用数组</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>names<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;tom&quot;</span><span class="token punctuation">;</span>\nages<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">19</span><span class="token punctuation">;</span>\n\nnames<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;jerry&quot;</span><span class="token punctuation">;</span>\nages<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>\n\n<span class="token function">demo</span><span class="token punctuation">(</span>names<span class="token punctuation">,</span> ages<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></li></ol><p>不过，在使用上述方案实现相关需求后，你可能会有如下想法：</p><ol><li>使用 Map 或自定义类有点『杀鸡用牛刀』的感觉；</li><li>使用两个数组的时候，将一个人的两个信息分开存放，感觉又有点怪怪的。</li></ol><h2 id="tuples" tabindex="-1"><a class="header-anchor" href="#tuples" aria-hidden="true">#</a> tuples</h2><p>数据结构领域中有一个较少提及的数据结构：『元组』<small>（tuple）</small> 。有些语言中，天生就有 tuple 类型的变量，但是 Java 中没有<small>（其实，常见的编程语言中，大多数都没有）</small>。</p><p>tuple 结构和数组很类似，<strong>它作为一个容器其中可以存放多个值，而不要求这些值的类型必须一致</strong>。于此同时，它和数组一样有下标索引的概念，<strong>可以通过下标索引从中取值</strong>。</p>',11),e=(0,t.Uk)("当然，我们可以自己实现 tuple 数据结果"),c=(0,t._)("small",null,"（相较于 List、Set 它其实简单很多）",-1),l=(0,t.Uk)("。不过，很显然有现成的："),o={href:"https://github.com/javatuples/javatuples",target:"_blank",rel:"noopener noreferrer"},u=(0,t.Uk)("javatuples"),i=(0,t.uE)('<div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.javatuples<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>javatuples<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>由于 tuple 数据结构的功能/作用实在是比较简单<small>（有时可能项目中就有程序员自己随手就实现了它）</small>，所以这个库，在 2011 年就『彻底』完成了所有功能，最后一个版本就是 <code>1.2</code> 。</p><h3 id="the-tuple-classes" tabindex="-1"><a class="header-anchor" href="#the-tuple-classes" aria-hidden="true">#</a> The tuple classes</h3><p>该工具库提供了以下不同容量的 tuple 类：</p><table><thead><tr><th style="text-align:left;">类</th><th style="text-align:left;">容量</th></tr></thead><tbody><tr><td style="text-align:left;"><code>Unit&lt;A&gt;</code></td><td style="text-align:left;">1 element</td></tr><tr><td style="text-align:left;"><code>Pair&lt;A,B&gt;</code></td><td style="text-align:left;">2 elements</td></tr><tr><td style="text-align:left;"><code>Triplet&lt;A,B,C&gt;</code></td><td style="text-align:left;">3 elements</td></tr><tr><td style="text-align:left;"><code>Quartet&lt;A,B,C,D&gt;</code></td><td style="text-align:left;">4 elements</td></tr><tr><td style="text-align:left;"><code>Quintet&lt;A,B,C,D,E&gt;</code></td><td style="text-align:left;">5 elements</td></tr><tr><td style="text-align:left;"><code>Sextet&lt;A,B,C,D,E,F&gt;</code></td><td style="text-align:left;">6 elements</td></tr><tr><td style="text-align:left;"><code>Septet&lt;A,B,C,D,E,F,G&gt;</code></td><td style="text-align:left;">7 elements</td></tr><tr><td style="text-align:left;"><code>Octet&lt;A,B,C,D,E,F,G,H&gt;</code></td><td style="text-align:left;">8 elements</td></tr><tr><td style="text-align:left;"><code>Ennead&lt;A,B,C,D,E,F,G,H,I&gt;</code></td><td style="text-align:left;">9 elements</td></tr><tr><td style="text-align:left;"><code>Decade&lt;A,B,C,D,E,F,G,H,I,J&gt;</code></td><td style="text-align:left;">10 elements</td></tr></tbody></table><p><small>我也是很服气作者能为每一种容量的 tuple 类都单独起了个名字！</small></p><p>由于上述 tuple 类并没有什么语义，所以，作者额外地为两个常见的情况提供了单独的 tuple 类。<small>实际上，它们俩就是 <code>Pair</code> 的别名。</small></p><ul><li><code>KeyValue&lt;A,B&gt;</code></li><li><code>LabelValue&lt;A,B&gt;</code></li></ul><h3 id="creating-tuples" tabindex="-1"><a class="header-anchor" href="#creating-tuples" aria-hidden="true">#</a> Creating tuples</h3><p>所有类型的 tuple 都可以通过 <code>new</code> 来创建：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> pair <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name">Triplet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Date</span><span class="token punctuation">&gt;</span></span> triplet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Triplet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>于此同时，tuple 还提供了静态方法 <code>.with()</code> 来创建各种 ruple 类的实例：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> pair <span class="token operator">=</span> <span class="token class-name">Pair</span><span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name">Triplet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Date</span><span class="token punctuation">&gt;</span></span> triplet <span class="token operator">=</span> <span class="token class-name">Triplet</span><span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="getting-setting-values" tabindex="-1"><a class="header-anchor" href="#getting-setting-values" aria-hidden="true">#</a> Getting/Setting values</h3><p>tuple 数据结构在概念上是下标索引的，但是你不能想当然地对其使用下标运算符 <code>[]</code> 。</p><p>从一个 tuple 容器中取值，有两种方式：</p><ol><li><p>通过 <code>.getValueN()</code> 方法：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> pair<span class="token punctuation">.</span><span class="token function">getValue0</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> pair<span class="token punctuation">.</span><span class="token function">getValue1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> triplet<span class="token punctuation">.</span><span class="token function">getValue0</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> triplet<span class="token punctuation">.</span><span class="token function">getValue1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> triplet<span class="token punctuation">.</span><span class="token function">getValue2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></li><li><p>通过 <code>.getValue(index)</code> 方法：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> pair<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> pair<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> triplet<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> triplet<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> triplet<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>不过 <code>.getValue(index)</code> 方法取出来的值统一都是 <code>Object</code> 类型，后续使用时需要做类型转换。</p></li></ol><p><strong>优先考虑使用 <code>.getValueN()</code> 方法</strong> 。</p><p>另外，大家都能猜到，既然有 get 方法，这里也自然有 set 方法：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>pair<span class="token punctuation">.</span><span class="token function">setAt0</span><span class="token punctuation">(</span>xxx<span class="token punctuation">)</span><span class="token punctuation">;</span>\npair<span class="token punctuation">.</span><span class="token function">setAt1</span><span class="token punctuation">(</span>xxx<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\ntriplet<span class="token punctuation">.</span><span class="token function">setAt0</span><span class="token punctuation">(</span>xxx<span class="token punctuation">)</span><span class="token punctuation">;</span>\ntriplet<span class="token punctuation">.</span><span class="token function">setAt1</span><span class="token punctuation">(</span>xxx<span class="token punctuation">)</span><span class="token punctuation">;</span>\ntriplet<span class="token punctuation">.</span><span class="token function">setAt2</span><span class="token punctuation">(</span>xxx<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><code>KeyValue</code> and <code>LabelValue</code> 这两种『额外』的 tuple 类型中，它们的 getting/setting 方法是叫：<code>getKey()</code> / <code>getValue()</code> 和 <code>getLabel()</code> / <code>getValue()</code> 。</p><h3 id="adding-or-removing-elements" tabindex="-1"><a class="header-anchor" href="#adding-or-removing-elements" aria-hidden="true">#</a> Adding or removing elements</h3><p>当你向一个 Pair 对象中添加元素时，你将获得一个 Triplet 对象；当你从一个 Triplet 对象中移除一个元素时，你将获得一个 Pair 对象。</p><p>也就是说，任何一种 tuple 类的容量是不可改变的。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Pair</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> pair <span class="token operator">=</span> <span class="token class-name">Pair</span><span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name">Triplet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> triplet <span class="token operator">=</span> pair<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> triplet <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 10, 20, 30</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>调用 <code>.add()</code> 方法时，添加的元素将被添加到末尾。</p><p>另外，tuple 还提供 <code>.addAtN()</code> 方法。将要添加的元素添加到指定位置，而原位置（及后续内容）依次后移。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>triplet <span class="token operator">=</span> pair<span class="token punctuation">.</span><span class="token function">addAt1</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> triplet <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 10, 30, 20</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>从 tuple 中移除元素使用 <code>.removeFromN()</code> 方法。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>pair <span class="token operator">=</span> triplet<span class="token punctuation">.</span><span class="token function">removeFrom0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="converting-to-from-collections-or-arrays" tabindex="-1"><a class="header-anchor" href="#converting-to-from-collections-or-arrays" aria-hidden="true">#</a> Converting to/from collections or arrays</h3><p>任何一种 tuple 都可以转换成 List 或数组：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> triplet<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> triplet<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>反向的操作有：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token class-name">Quartet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> quartet <span class="token operator">=</span> <span class="token class-name">Quartet</span><span class="token punctuation">.</span><span class="token function">fromArray</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span> \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>这里需要注意的是，由于 Array 和 List 是要求其中元素类型是一致的。所以，从 tuple 转成数组和 List 时，会失去元素的具体类型，从而得到一个 Object 的数组和 List 。如果这样处理，那么就失去了 tuple 的使用价值。</p><p>同样，对于一个一致的某种类型的数组和 List，转换成 tuple 时，其元素类型必然也都是一样的，这样也就没有必要去使用 tuple 了，为什么不直接使用这个数组和 List 呢。</p><h3 id="iterating" tabindex="-1"><a class="header-anchor" href="#iterating" aria-hidden="true">#</a> Iterating</h3><p>由于所有类型的 tuple 都是『可循环』对象，所以可以直接用便捷 for 循环对其进行遍历：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Object</span> value <span class="token operator">:</span> triplet<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>不过，这里失去了每个元素的具体类型，只能将它们统一当作 Object 来看待。</p><h3 id="checking-contents" tabindex="-1"><a class="header-anchor" href="#checking-contents" aria-hidden="true">#</a> Checking contents</h3><p>tuple 提供了方法用来判断 tuple 中是否包含某个/某些对象：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>quartet<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">if</span> <span class="token punctuation">(</span>quartet<span class="token punctuation">.</span><span class="token function">containsAll</span><span class="token punctuation">(</span>valueCollection<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div>',44),r={render:function(n,s){const a=(0,t.up)("OutboundLink");return(0,t.wg)(),(0,t.iD)(t.HY,null,[p,(0,t._)("p",null,[e,c,l,(0,t._)("a",o,[u,(0,t.Wm)(a)])]),i],64)}}}}]);