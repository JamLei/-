"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[7029],{87466:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-eddf53e4",path:"/rabbitmq/03-%E6%AD%BB%E4%BF%A1%E9%98%9F%E5%88%97.html",title:"延迟队列",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"1. 专有词汇",slug:"_1-专有词汇",children:[]},{level:2,title:"2. 延迟队列流程模型",slug:"_2-延迟队列流程模型",children:[]},{level:2,title:"3. 代码配置",slug:"_3-代码配置",children:[]}],filePathRelative:"rabbitmq/03-死信队列.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},59194:(n,s,a)=>{a.r(s),a.d(s,{default:()=>e});const p=(0,a(66252).uE)('<h1 id="延迟队列" tabindex="-1"><a class="header-anchor" href="#延迟队列" aria-hidden="true">#</a> 延迟队列</h1><p><strong>延迟队列</strong> 又被称为 <strong>延时队列</strong>、<strong>死信队列</strong> ，它也是 RabbitMQ 队列中的一种，指进入该队列中的消息会被延迟消费的队列。</p><p>顾名思义，延迟队列和普通队列的区别在于：</p><ul><li>进入普通队列的消息将会立即『走向』下一个环节，而下一个环节就是消费者；而</li><li>进入延迟队列的消息将会被延迟队列『持有』若干时间，而后才『走向』下一个环节，而且下一个环节是另一个交换机。<small>这个『另一个交换机』也被称为死信交换机。</small></li></ul><p>RabbitMQ 引入延迟队列主要是用于『延迟』一定时间再处理特定的业务逻辑，而这种『延迟』在 RabbitMQ 看来是『自动化』的，无须人为进行干预。</p><p>延迟队列的使用价值在于：</p><ol><li><p>某些业务需要这种机制。例如，订单 30 分钟内未支付则需要取消订单。</p></li><li><p>在某种程度上，它可以替代定时任务。</p></li></ol><h2 id="_1-专有词汇" tabindex="-1"><a class="header-anchor" href="#_1-专有词汇" aria-hidden="true">#</a> 1. 专有词汇</h2><p>与普通的队列一样，延迟队列也具有消息、交换机、路由和队列等名词。不过，它还增加了 3 个专有名词：</p><dl><dt><strong>DLX</strong></dt><dd>Dead Letter Exchange，死信队列交换机，是一种特殊类型的交换机。</dd><dt><strong>DLK</strong></dt><dd>Dead Letter Routing-Key，死信路由，同样也是一种特殊类型的路由。主要是和 DLX 组合在一起构成死信队列。</dd><dt><strong>TTL</strong></dt><dd>Time To Live，指进入延迟队列中的消息可以存活的时间。当 TTL 一到，将意味着该消息『死了』，从而进入下一个『中转站』，等待被真正的消息队列监听消费。</dd></dl><hr><p>普通队列 + 三个特殊设置 = 延迟队列</p><p>在 <em><code>http://localhost:15672/#/queues</code></em> 中创建延迟队列时，在普通队列的基础上需要设定三个『额外』的属性。</p><ul><li><p>Dead letter exchange：x-dead-letter-exchange 。指定延迟队列的『下家』交换机。</p></li><li><p>Dead letter routing key：x-dead-letter-routing-key 。延迟队列自动向『下家』交换机投递消息时所使用的消息的 routing-key。</p></li><li><p>Message TTL：x-message-ttl 。延迟队列要持有消息的时长。例如：10000 ，即 10s 。</p></li></ul><h2 id="_2-延迟队列流程模型" tabindex="-1"><a class="header-anchor" href="#_2-延迟队列流程模型" aria-hidden="true">#</a> 2. 延迟队列流程模型</h2><p><img src="https://hemiao3000.gitee.io/java-note-img/images/rabbitmq/img/rabbitmq-dead-queue-01.png" alt="dead-queue-01"></p><p>以延迟消息为例来描述延迟队列的流程模型：</p><p>表面上看，消息生产者发出消息若干秒<small>（以 5 秒为例）</small>消息的消费者才消费该消息，才触发相应方法的执行。其中，核心问题的关键点在于：<strong>延迟队列<small>（在中间环节）</small>持有了该消息 5 秒，从而达到了延迟 5 秒的效果。</strong></p><p>因此，简单而言，整体流程分为 3 步：</p><ol><li><p>消息生产者将消息发送到延迟队列；</p></li><li><p>延迟队列<small>（持有消息 5秒后）将消息转发给消费者队列</small>；</p></li><li><p>由于消费者正『监听着』消费者队列，一旦消费者队列收到消息，消费者就从中读取消息，消费。</p></li></ol><p>所以，整个环节中有 2 套 <code>交换机 - 路由</code>：</p><ul><li><p>第一套 <code>交换机 - 路由</code> 负责将消息从生产者路由到延迟队列；</p></li><li><p>第二套 <code>交换即 - 路由</code> 负责将消息从延迟队列路由到消费者队列；</p></li></ul><h2 id="_3-代码配置" tabindex="-1"><a class="header-anchor" href="#_3-代码配置" aria-hidden="true">#</a> 3. 代码配置</h2><p>充分理解上图后，下面的代码配置的含义和目的就一目了然了。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>\n<span class="token annotation punctuation">@EnableRabbit</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitMQConfig</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> first_exchange_name <span class="token operator">=</span> <span class="token string">&quot;first-exchange&quot;</span><span class="token punctuation">;</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> second_exchange_name <span class="token operator">=</span> <span class="token string">&quot;second-exchange&quot;</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> first_routing_key <span class="token operator">=</span> <span class="token string">&quot;first-routing-key&quot;</span><span class="token punctuation">;</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> second_routing_key <span class="token operator">=</span> <span class="token string">&quot;second-routing-key&quot;</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> first_binding <span class="token operator">=</span> <span class="token string">&quot;first-binding&quot;</span><span class="token punctuation">;</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> second_binding <span class="token operator">=</span> <span class="token string">&quot;second-binding&quot;</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> dead_queue_name <span class="token operator">=</span> <span class="token string">&quot;dead-queue&quot;</span><span class="token punctuation">;</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> real_queue_name <span class="token operator">=</span> <span class="token string">&quot;real-queue&quot;</span><span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">&quot;dead-queue&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">deadQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> args <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        args<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;x-dead-letter-exchange&quot;</span><span class="token punctuation">,</span> second_exchange_name<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 指定时期后消息投递给哪个交换器。</span>\n        args<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;x-dead-letter-routing-key&quot;</span><span class="token punctuation">,</span> second_routing_key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 指定到期后投递消息时以哪个路由键进行投递。</span>\n        args<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;x-message-ttl&quot;</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token comment">// 指定到期时间。5 秒</span>\n        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span>dead_queue_name<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">&quot;real-queue&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">realQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span>real_queue_name<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">/* 问题一：发出的消息凭什么会到死信队列。*/</span>\n    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>first_exchange_name<span class="token punctuation">)</span>\n    <span class="token keyword">public</span> <span class="token class-name">DirectExchange</span> <span class="token function">firstExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DirectExchange</span><span class="token punctuation">(</span>first_exchange_name<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>first_binding<span class="token punctuation">)</span>\n    <span class="token keyword">public</span> <span class="token class-name">Binding</span> <span class="token function">firstBinding</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span>dead_queue_name<span class="token punctuation">)</span> <span class="token class-name">Queue</span> queue<span class="token punctuation">,</span>\n                                <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span>first_exchange_name<span class="token punctuation">)</span> <span class="token class-name">Exchange</span> exchange<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token class-name">BindingBuilder</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span>first_routing_key<span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">noargs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">/* 问题二：延迟队列凭什么会把消息再转给 real-queue 。*/</span>\n    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>second_exchange_name<span class="token punctuation">)</span>\n    <span class="token keyword">public</span> <span class="token class-name">DirectExchange</span> <span class="token function">secondExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DirectExchange</span><span class="token punctuation">(</span>second_exchange_name<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>second_binding<span class="token punctuation">)</span>\n    <span class="token keyword">public</span> <span class="token class-name">Binding</span> <span class="token function">secondBiding</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span>real_queue_name<span class="token punctuation">)</span> <span class="token class-name">Queue</span> queue<span class="token punctuation">,</span>\n                                <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span>second_exchange_name<span class="token punctuation">)</span> <span class="token class-name">Exchange</span> exchange<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token class-name">BindingBuilder</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span>second_routing_key<span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">noargs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br></div></div>',25),e={render:function(n,s){return p}}}}]);