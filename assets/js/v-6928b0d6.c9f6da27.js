"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[3689],{5013:(o,e,t)=>{t.r(e),t.d(e,{data:()=>s});const s={key:"v-6928b0d6",path:"/css/09-%E5%AE%9A%E4%BD%8D%E4%B8%8E%E6%B5%AE%E5%8A%A8.html",title:"定位与浮动",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[],filePathRelative:"css/09-定位与浮动.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},37362:(o,e,t)=>{t.r(e),t.d(e,{default:()=>r});const s=(0,t(66252).uE)('<h1 id="定位与浮动" tabindex="-1"><a class="header-anchor" href="#定位与浮动" aria-hidden="true">#</a> 定位与浮动</h1><p>浏览器在“摆放”元素时，默认的规则是：按照HTML文档中元素出现的顺序 <strong>依次</strong> “摆放”。换行与否，则取决于元素的盒子类型</p><p>这种“依次”的先后关系，让元素排了一个队列，这种逻辑上队列也被称为 <strong>文档流</strong> 。</p><p>在 CSS 中通过 <strong>position</strong> 属性表明定位机制。定位机制决定了浏览器“摆放”元素的规则，也就决定了元素在页面上的位置。</p><p><strong>position</strong> 属性有四种取值：<code>static</code> | <code>relative</code> | <code>absolute</code> | <code>fixed</code> 。</p><hr><p><strong>position</strong> 属性的默认值是 <code>static</code>。这意味着本元素是在<strong>文档流</strong>中的，所以本元素在页面上的摆放位置完全按照上述的默认规则摆放。</p><p>但凡 <strong>position</strong> 属性值不为 <code>static</code> 的，则称该元素<em><strong>脱离</strong></em> 了文档流。如果 B 元素“脱离”了文档流，则意味着在逻辑顺序上，A 元素的后一个不再是 B 元素，而是 C 元素。同样，C 元素的前一个不再是 B 元素，而是 A 元素。</p><hr><p><strong>position</strong> 属性值为 <code>relative</code> 不仅意味着本元素脱离文档流，还表明本元素的定位为 <strong>相对定位</strong>。本元素脱离文档流后，它原来所占据的空间依然保留，所以表面上看起来和 <code>static</code> 的情况一样。</p><p>这种定位之所以叫相对定位，是因为这个元素可<em>相对于它原来位置</em> 作位移。</p><p>配合 <code>position: relative;</code>，有 <strong>top</strong>、<strong>bottom</strong>、<strong>left</strong>、<strong>right</strong> 四个属性可用。要使盒子位置相对于其初始位置垂直上下移动，可使用 <code>top</code> 或 <code>bottom</code> 属性；要使盒子相对于其初始位置水平左右移动，可使用 <code>left</code> 或 <code>right</code> 属性。这些属性的值通常是像素值。</p><hr><p><strong>position</strong> 属性值为 <code>absolute</code> 与 <code>relative</code> 的情况类似，只不过本元素并不是相对于其初始位置作定位，而是<em><strong>相对于离它最近的非static祖先作定位</strong></em> 。通常这个祖先是 <code>relative</code> 的。</p><p>如果本元素的所有祖先中没有任何一个是非static的，那么它就是相对于 <code>&lt;body&gt;</code> 元素。</p><p>配合 <code>position: absolute;</code>，也是有 <code>top</code>、<code>bottom</code>、<code>left</code>、<code>right</code> 四个属性可用。</p><hr><p><code>position: fixed</code> 被称为固定定位，它是的元素总是相对于<em><strong>窗口</strong></em> 做定位。</p><hr><p>当你使用相对定位（relative）、绝对定位（absolute）和固定定位（fixed）时，多个元素的盒子是有可能有重叠部分的。</p><p>如果要控制元素的层次，可使用 <code>z-index</code> 属性。该属性值是一个数字，这个数字越大，这个元素的层次就越靠前（越靠近你眼睛）。这个值可以为正，也可以为负，大小多少并不重要，重要的是在多个元素间表达出层次关系即可。</p><hr><p><strong>float</strong> 属性最开始的功能是实现<em><strong>图文混排</strong></em> 效果，只不过，它是实际功能远远超出了最初的设想。</p><p><strong>float</strong> 是在 <code>position: static;</code> 情况下使用，但是使用它的元素，也会脱离文档流。这个脱离了文档流的元素，在页面上会尽可能地向左，或向右排列，直到遇到了其父元素的边界，或遇到了另一个浮动元素。</p><p><strong>clear</strong> 属性用于表明一个元素“要求”其左侧或右侧不允许有浮动元素，浏览器对于这种要求，会考虑让其在浮动元素的下方显示。clear 属性通常用于解决<em>浮动元素父元素高度坍塌</em> 问题。</p>',25),r={render:function(o,e){return s}}}}]);