"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[7008],{8194:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-6e5a308e",path:"/utility/3rd/custom-01-MTRandom.html",title:"MTRandom",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[],filePathRelative:"utility/3rd/custom-01-MTRandom.md",git:{updatedTime:1629826614e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},99578:(n,s,a)=>{a.r(s),a.d(s,{default:()=>t});const p=(0,a(66252).uE)('<h1 id="mtrandom" tabindex="-1"><a class="header-anchor" href="#mtrandom" aria-hidden="true">#</a> MTRandom</h1><p>Mersenne Twister 算法译为马特赛特旋转演算法，是伪随机数发生器之一，其主要作用是生成伪随机数。此算法是Makoto Matsumoto （松本）和Takuji Nishimura （西村）于 1997 年开发的，基于有限二进制字段上的矩阵线性再生。可以快速产生高质量的伪随机数，修正了古老随机数产生算法的很多缺陷。Mersenne Twister 这个名字来自周期长度通常取 Mersenne 质数这样一个事实。常见的有两个变种 Mersenne Twister MT19937 和 Mersenne Twister MT19937-64。</p><p>Mersenne Twister 算法的原理：Mersenne Twister 算法是利用线性反馈移位寄存器（LFSR）产生随机数的，LFSR 的反馈函数是寄存器中某些位的简单异或，这些位也称之为抽头序列。一个 n 位的 LFSR 能够在重复之前产生 2^n-1 位长的伪随机序列。只有具有一定抽头序列的LFSR才能通过所有 2^n-1 个内部状态，产生 2^n - 1 位长的伪随机序列，这个输出的序列就称之为 m 序列。为了使 LFSR 成为最大周期的 LFSR，由抽头序列加上常数1形成的多项式必须是本原多项式。一个n阶本原多项式是不可约多项式，它能整除x^(2*n-1)+1而不能整除x^d+1，其中d能整除2^n-1。例如(32,7,5,3,2,1,0)是指本原多项式x^32+x^7+x^5+x^3+x^2+x+1，把它转化为最大周期LFSR就是在LFSR的第32，7，5，2，1位抽头。利用上述两种方法产生周期为m的伪随机序列后，只需要将产生的伪随机序列除以序列的周期，就可以得到(0，1)上均匀分布的伪随机序列了。</p><p>Mersenne Twister 有以下优点：随机性好，在计算机上容易实现，占用内存较少(mt19937的C程式码执行仅需624个字的工作区域)，与其它已使用的伪随机数发生器相比，产生随机数的速度快、周期长，可达到2^19937-1，且具有623维均匀分布的性质，对于一般的应用来说，足够大了，序列关联比较小，能通过很多随机性测试。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Random</span><span class="token punctuation">;</span>\n\n<span class="token doc-comment comment">/**\n * MT19937 的 Java 实现。用于高效生成伪随机数。\n */</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MTRandom</span> <span class="token keyword">extends</span> <span class="token class-name">Random</span> <span class="token punctuation">{</span>\n\n    <span class="token comment">// Constants used in the original C implementation</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">int</span> UPPER_MASK <span class="token operator">=</span> <span class="token number">0x80000000</span><span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">int</span> LOWER_MASK <span class="token operator">=</span> <span class="token number">0x7fffffff</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token class-name">N</span> <span class="token operator">=</span> <span class="token number">624</span><span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token class-name">M</span> <span class="token operator">=</span> <span class="token number">397</span><span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">int</span> MAGIC<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0x0</span><span class="token punctuation">,</span> <span class="token number">0x9908b0df</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">int</span> MAGIC_FACTOR1 <span class="token operator">=</span> <span class="token number">1812433253</span><span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">int</span> MAGIC_FACTOR2 <span class="token operator">=</span> <span class="token number">1664525</span><span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">int</span> MAGIC_FACTOR3 <span class="token operator">=</span> <span class="token number">1566083941</span><span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">int</span> MAGIC_MASK1 <span class="token operator">=</span> <span class="token number">0x9d2c5680</span><span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">int</span> MAGIC_MASK2 <span class="token operator">=</span> <span class="token number">0xefc60000</span><span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">int</span> MAGIC_SEED <span class="token operator">=</span> <span class="token number">19650218</span><span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">long</span> DEFAULT_SEED <span class="token operator">=</span> <span class="token number">5489L</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// Internal state</span>\n    <span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> mt<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token keyword">int</span> mti<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token keyword">boolean</span> compat <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// Temporary buffer used during setSeed(long)</span>\n    <span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ibuf<span class="token punctuation">;</span>\n\n    <span class="token doc-comment comment">/**\n     * The default constructor for an instance of MTRandom.  This invokes\n     * the no-argument constructor for java.util.Random which will result\n     * in the class being initialised with a seed value obtained by calling\n     * System.currentTimeMillis().\n     */</span>\n    <span class="token keyword">public</span> <span class="token class-name">MTRandom</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token doc-comment comment">/**\n     * This version of the constructor can be used to implement identical\n     * behaviour to the original C code version of this algorithm including\n     * exactly replicating the case where the seed value had not been set\n     * prior to calling genrand_int32.\n     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>\n     * If the compatibility flag is set to true, then the algorithm will be\n     * seeded with the same default value as was used in the original C\n     * code.  Furthermore the setSeed() method, which must take a 64 bit\n     * long value, will be limited to using only the lower 32 bits of the\n     * seed to facilitate seamless migration of existing C code into Java\n     * where identical behaviour is required.\n     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>\n     * Whilst useful for ensuring backwards compatibility, it is advised\n     * that this feature not be used unless specifically required, due to\n     * the reduction in strength of the seed value.\n     *\n     * <span class="token keyword">@param</span> <span class="token parameter">compatible</span> Compatibility flag for replicating original\n     *                   behaviour.\n     */</span>\n    <span class="token keyword">public</span> <span class="token class-name">MTRandom</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> compatible<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token number">0L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        compat <span class="token operator">=</span> compatible<span class="token punctuation">;</span>\n        <span class="token function">setSeed</span><span class="token punctuation">(</span>compat <span class="token operator">?</span> DEFAULT_SEED <span class="token operator">:</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token doc-comment comment">/**\n     * This version of the constructor simply initialises the class with\n     * the given 64 bit seed value.  For a better random number sequence\n     * this seed value should contain as much entropy as possible.\n     *\n     * <span class="token keyword">@param</span> <span class="token parameter">seed</span> The seed value with which to initialise this class.\n     */</span>\n    <span class="token keyword">public</span> <span class="token class-name">MTRandom</span><span class="token punctuation">(</span><span class="token keyword">long</span> seed<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">super</span><span class="token punctuation">(</span>seed<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token doc-comment comment">/**\n     * This version of the constructor initialises the class with the\n     * given byte array.  All the data will be used to initialise this\n     * instance.\n     *\n     * <span class="token keyword">@param</span> <span class="token parameter">buf</span> The non-empty byte array of seed information.\n     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">NullPointerException</span></span>     if the buffer is null.\n     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">IllegalArgumentException</span></span> if the buffer has zero length.\n     */</span>\n    <span class="token keyword">public</span> <span class="token class-name">MTRandom</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buf<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token number">0L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">setSeed</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token doc-comment comment">/**\n     * This version of the constructor initialises the class with the\n     * given integer array.  All the data will be used to initialise\n     * this instance.\n     *\n     * <span class="token keyword">@param</span> <span class="token parameter">buf</span> The non-empty integer array of seed information.\n     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">NullPointerException</span></span>     if the buffer is null.\n     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">IllegalArgumentException</span></span> if the buffer has zero length.\n     */</span>\n    <span class="token keyword">public</span> <span class="token class-name">MTRandom</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buf<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token number">0L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">setSeed</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// Initializes mt[N] with a simple integer seed. This method is</span>\n    <span class="token comment">// required as part of the Mersenne Twister algorithm but need</span>\n    <span class="token comment">// not be made public.</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">setSeed</span><span class="token punctuation">(</span><span class="token keyword">int</span> seed<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n        <span class="token comment">// Annoying runtime check for initialisation of internal data</span>\n        <span class="token comment">// caused by java.util.Random invoking setSeed() during init.</span>\n        <span class="token comment">// This is unavoidable because no fields in our instance will</span>\n        <span class="token comment">// have been initialised at this point, not even if the code</span>\n        <span class="token comment">// were placed at the declaration of the member variable.</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>mt <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> mt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token class-name">N</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// ---- Begin Mersenne Twister Algorithm ----</span>\n        mt<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> seed<span class="token punctuation">;</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span>mti <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> mti <span class="token operator">&lt;</span> <span class="token class-name">N</span><span class="token punctuation">;</span> mti<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            mt<span class="token punctuation">[</span>mti<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>MAGIC_FACTOR1 <span class="token operator">*</span> <span class="token punctuation">(</span>mt<span class="token punctuation">[</span>mti <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token punctuation">(</span>mt<span class="token punctuation">[</span>mti <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> mti<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token comment">// ---- End Mersenne Twister Algorithm ----</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token doc-comment comment">/**\n     * This method resets the state of this instance using the 64\n     * bits of seed data provided.  Note that if the same seed data\n     * is passed to two different instances of MTRandom (both of\n     * which share the same compatibility state) then the sequence\n     * of numbers generated by both instances will be identical.\n     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>\n     * If this instance was initialised in &#39;compatibility&#39; mode then\n     * this method will only use the lower 32 bits of any seed value\n     * passed in and will match the behaviour of the original C code\n     * exactly with respect to state initialisation.\n     *\n     * <span class="token keyword">@param</span> <span class="token parameter">seed</span> The 64 bit value used to initialise the random\n     *             number generator state.\n     */</span>\n    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">setSeed</span><span class="token punctuation">(</span><span class="token keyword">long</span> seed<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>compat<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token function">setSeed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> seed<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n\n            <span class="token comment">// Annoying runtime check for initialisation of internal data</span>\n            <span class="token comment">// caused by java.util.Random invoking setSeed() during init.</span>\n            <span class="token comment">// This is unavoidable because no fields in our instance will</span>\n            <span class="token comment">// have been initialised at this point, not even if the code</span>\n            <span class="token comment">// were placed at the declaration of the member variable.</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>ibuf <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> ibuf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n            ibuf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> seed<span class="token punctuation">;</span>\n            ibuf<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>seed <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token function">setSeed</span><span class="token punctuation">(</span>ibuf<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token doc-comment comment">/**\n     * This method resets the state of this instance using the byte\n     * array of seed data provided.  Note that calling this method\n     * is equivalent to calling &quot;setSeed(pack(buf))&quot; and in particular\n     * will result in a new integer array being generated during the\n     * call.  If you wish to retain this seed data to allow the pseudo\n     * random sequence to be restarted then it would be more efficient\n     * to use the &quot;pack()&quot; method to convert it into an integer array\n     * first and then use that to re-seed the instance.  The behaviour\n     * of the class will be the same in both cases but it will be more\n     * efficient.\n     *\n     * <span class="token keyword">@param</span> <span class="token parameter">buf</span> The non-empty byte array of seed information.\n     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">NullPointerException</span></span>     if the buffer is null.\n     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">IllegalArgumentException</span></span> if the buffer has zero length.\n     */</span>\n    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">setSeed</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buf<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">setSeed</span><span class="token punctuation">(</span><span class="token function">pack</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token doc-comment comment">/**\n     * This method resets the state of this instance using the integer\n     * array of seed data provided.  This is the canonical way of\n     * resetting the pseudo random number sequence.\n     *\n     * <span class="token keyword">@param</span> <span class="token parameter">buf</span> The non-empty integer array of seed information.\n     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">NullPointerException</span></span>     if the buffer is null.\n     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">IllegalArgumentException</span></span> if the buffer has zero length.\n     */</span>\n    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">setSeed</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buf<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">int</span> length <span class="token operator">=</span> buf<span class="token punctuation">.</span>length<span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;Seed buffer may not be empty&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// ---- Begin Mersenne Twister Algorithm ----</span>\n        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">N</span> <span class="token operator">&gt;</span> length <span class="token operator">?</span> <span class="token class-name">N</span> <span class="token operator">:</span> length<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">setSeed</span><span class="token punctuation">(</span>MAGIC_SEED<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> k <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> k<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            mt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>mt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>mt<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token punctuation">(</span>mt<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> MAGIC_FACTOR2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> buf<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> j<span class="token punctuation">;</span>\n            i<span class="token operator">++</span><span class="token punctuation">;</span>\n            j<span class="token operator">++</span><span class="token punctuation">;</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> <span class="token class-name">N</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                mt<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> mt<span class="token punctuation">[</span><span class="token class-name">N</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n                i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&gt;=</span> length<span class="token punctuation">)</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span>k <span class="token operator">=</span> <span class="token class-name">N</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> k<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            mt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>mt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>mt<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token punctuation">(</span>mt<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> MAGIC_FACTOR3<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> i<span class="token punctuation">;</span>\n            i<span class="token operator">++</span><span class="token punctuation">;</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> <span class="token class-name">N</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                mt<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> mt<span class="token punctuation">[</span><span class="token class-name">N</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n                i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        mt<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> UPPER_MASK<span class="token punctuation">;</span> <span class="token comment">// MSB is 1; assuring non-zero initial array</span>\n        <span class="token comment">// ---- End Mersenne Twister Algorithm ----</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token doc-comment comment">/**\n     * This method forms the basis for generating a pseudo random number\n     * sequence from this class.  If given a value of 32, this method\n     * behaves identically to the genrand_int32 function in the original\n     * C code and ensures that using the standard nextInt() function\n     * (inherited from Random) we are able to replicate behaviour exactly.\n     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>\n     * Note that where the number of bits requested is not equal to 32\n     * then bits will simply be masked out from the top of the returned\n     * integer value.  That is to say that:\n     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pre</span><span class="token punctuation">&gt;</span></span>\n     <span class="token code-section">* <span class="token line"><span class="token code language-java">mt<span class="token punctuation">.</span><span class="token function">setSeed</span><span class="token punctuation">(</span><span class="token number">12345</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span>\n     * <span class="token line"><span class="token code language-java"><span class="token keyword">int</span> foo <span class="token operator">=</span> mt<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>mt<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pre</span><span class="token punctuation">&gt;</span></span>\n     * will not give the same result as\n     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pre</span><span class="token punctuation">&gt;</span></span>\n     <span class="token code-section">* <span class="token line"><span class="token code language-java">mt<span class="token punctuation">.</span><span class="token function">setSeed</span><span class="token punctuation">(</span><span class="token number">12345</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span>\n     * <span class="token line"><span class="token code language-java"><span class="token keyword">int</span> foo <span class="token operator">=</span> mt<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pre</span><span class="token punctuation">&gt;</span></span>\n     *\n     * <span class="token keyword">@param</span> <span class="token parameter">bits</span> The number of significant bits desired in the output.\n     * <span class="token keyword">@return</span> The next value in the pseudo random sequence with the\n     * specified number of bits in the lower part of the integer.\n     */</span>\n    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">synchronized</span> <span class="token keyword">int</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token keyword">int</span> bits<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// ---- Begin Mersenne Twister Algorithm ----</span>\n        <span class="token keyword">int</span> y<span class="token punctuation">,</span> kk<span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>mti <span class="token operator">&gt;=</span> <span class="token class-name">N</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token comment">// generate N words at one time</span>\n\n            <span class="token comment">// In the original C implementation, mti is checked here</span>\n            <span class="token comment">// to determine if initialisation has occurred; if not</span>\n            <span class="token comment">// it initialises this instance with DEFAULT_SEED (5489).</span>\n            <span class="token comment">// This is no longer necessary as initialisation of the</span>\n            <span class="token comment">// Java instance must result in initialisation occurring</span>\n            <span class="token comment">// Use the constructor MTRandom(true) to enable backwards</span>\n            <span class="token comment">// compatible behaviour.</span>\n\n            <span class="token keyword">for</span> <span class="token punctuation">(</span>kk <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> kk <span class="token operator">&lt;</span> <span class="token class-name">N</span> <span class="token operator">-</span> <span class="token class-name">M</span><span class="token punctuation">;</span> kk<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                y <span class="token operator">=</span> <span class="token punctuation">(</span>mt<span class="token punctuation">[</span>kk<span class="token punctuation">]</span> <span class="token operator">&amp;</span> UPPER_MASK<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>mt<span class="token punctuation">[</span>kk <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> LOWER_MASK<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                mt<span class="token punctuation">[</span>kk<span class="token punctuation">]</span> <span class="token operator">=</span> mt<span class="token punctuation">[</span>kk <span class="token operator">+</span> <span class="token class-name">M</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token punctuation">(</span>y <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">^</span> MAGIC<span class="token punctuation">[</span>y <span class="token operator">&amp;</span> <span class="token number">0x1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> kk <span class="token operator">&lt;</span> <span class="token class-name">N</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> kk<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                y <span class="token operator">=</span> <span class="token punctuation">(</span>mt<span class="token punctuation">[</span>kk<span class="token punctuation">]</span> <span class="token operator">&amp;</span> UPPER_MASK<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>mt<span class="token punctuation">[</span>kk <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> LOWER_MASK<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                mt<span class="token punctuation">[</span>kk<span class="token punctuation">]</span> <span class="token operator">=</span> mt<span class="token punctuation">[</span>kk <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token class-name">M</span> <span class="token operator">-</span> <span class="token class-name">N</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token punctuation">(</span>y <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">^</span> MAGIC<span class="token punctuation">[</span>y <span class="token operator">&amp;</span> <span class="token number">0x1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            y <span class="token operator">=</span> <span class="token punctuation">(</span>mt<span class="token punctuation">[</span><span class="token class-name">N</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> UPPER_MASK<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>mt<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> LOWER_MASK<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            mt<span class="token punctuation">[</span><span class="token class-name">N</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> mt<span class="token punctuation">[</span><span class="token class-name">M</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token punctuation">(</span>y <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">^</span> MAGIC<span class="token punctuation">[</span>y <span class="token operator">&amp;</span> <span class="token number">0x1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n            mti <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        y <span class="token operator">=</span> mt<span class="token punctuation">[</span>mti<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// Tempering</span>\n        y <span class="token operator">^=</span> <span class="token punctuation">(</span>y <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        y <span class="token operator">^=</span> <span class="token punctuation">(</span>y <span class="token operator">&lt;&lt;</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> MAGIC_MASK1<span class="token punctuation">;</span>\n        y <span class="token operator">^=</span> <span class="token punctuation">(</span>y <span class="token operator">&lt;&lt;</span> <span class="token number">15</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> MAGIC_MASK2<span class="token punctuation">;</span>\n        y <span class="token operator">^=</span> <span class="token punctuation">(</span>y <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// ---- End Mersenne Twister Algorithm ----</span>\n        <span class="token keyword">return</span> <span class="token punctuation">(</span>y <span class="token operator">&gt;&gt;&gt;</span> <span class="token punctuation">(</span><span class="token number">32</span> <span class="token operator">-</span> bits<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// This is a fairly obscure little code section to pack a</span>\n    <span class="token comment">// byte[] into an int[] in little endian ordering.</span>\n\n    <span class="token doc-comment comment">/**\n     * This simply utility method can be used in cases where a byte\n     * array of seed data is to be used to repeatedly re-seed the\n     * random number sequence.  By packing the byte array into an\n     * integer array first, using this method, and then invoking\n     * setSeed() with that; it removes the need to re-pack the byte\n     * array each time setSeed() is called.\n     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>\n     * If the length of the byte array is not a multiple of 4 then\n     * it is implicitly padded with zeros as necessary.  For example:\n     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pre</span><span class="token punctuation">&gt;</span></span>    <span class="token code-section"><span class="token line"><span class="token code language-java"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0x02</span><span class="token punctuation">,</span> <span class="token number">0x03</span><span class="token punctuation">,</span> <span class="token number">0x04</span><span class="token punctuation">,</span> <span class="token number">0x05</span><span class="token punctuation">,</span> <span class="token number">0x06</span> <span class="token punctuation">}</span></span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pre</span><span class="token punctuation">&gt;</span></span>\n     * becomes\n     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pre</span><span class="token punctuation">&gt;</span></span>    <span class="token code-section"><span class="token line"><span class="token code language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token punctuation">{</span> <span class="token number">0x04030201</span><span class="token punctuation">,</span> <span class="token number">0x00000605</span> <span class="token punctuation">}</span></span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pre</span><span class="token punctuation">&gt;</span></span>\n     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>\n     * Note that this method will not complain if the given byte array\n     * is empty and will produce an empty integer array, but the\n     * setSeed() method will throw an exception if the empty integer\n     * array is passed to it.\n     *\n     * <span class="token keyword">@param</span> <span class="token parameter">buf</span> The non-null byte array to be packed.\n     * <span class="token keyword">@return</span> A non-null integer array of the packed bytes.\n     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">NullPointerException</span></span> if the given byte array is null.\n     */</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">pack</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buf<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">int</span> k<span class="token punctuation">,</span> blen <span class="token operator">=</span> buf<span class="token punctuation">.</span>length<span class="token punctuation">,</span> ilen <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>buf<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ibuf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>ilen<span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> n <span class="token operator">&lt;</span> ilen<span class="token punctuation">;</span> n<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>m <span class="token operator">&gt;</span> blen<span class="token punctuation">)</span> m <span class="token operator">=</span> blen<span class="token punctuation">;</span>\n            <span class="token keyword">for</span> <span class="token punctuation">(</span>k <span class="token operator">=</span> buf<span class="token punctuation">[</span><span class="token operator">--</span>m<span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">;</span> <span class="token punctuation">(</span>m <span class="token operator">&amp;</span> <span class="token number">0x3</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">=</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">|</span> buf<span class="token punctuation">[</span><span class="token operator">--</span>m<span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span>\n                <span class="token punctuation">;</span>\n            ibuf<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> k<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">return</span> ibuf<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token doc-comment comment">/**\n     * 使用/验证代码\n     */</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// MT19937 随机算法的 Java 实现</span>\n        <span class="token class-name">MTRandom</span> mtRandom <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MTRandom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 循环次数</span>\n        <span class="token keyword">int</span> times <span class="token operator">=</span> <span class="token number">1000000</span><span class="token punctuation">;</span>\n        <span class="token keyword">long</span> startTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> times<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// 使用 Map 去重</span>\n            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>mtRandom<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token comment">// 打印循环次数</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;times:&quot;</span> <span class="token operator">+</span> times<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 打印 Map 的个数</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;num:&quot;</span> <span class="token operator">+</span> map<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 打印非重复比率</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;proportion:&quot;</span> <span class="token operator">+</span> map<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span> times<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// 花费的时间(单位为毫秒)</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;time:&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> startTime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br><span class="line-number">116</span><br><span class="line-number">117</span><br><span class="line-number">118</span><br><span class="line-number">119</span><br><span class="line-number">120</span><br><span class="line-number">121</span><br><span class="line-number">122</span><br><span class="line-number">123</span><br><span class="line-number">124</span><br><span class="line-number">125</span><br><span class="line-number">126</span><br><span class="line-number">127</span><br><span class="line-number">128</span><br><span class="line-number">129</span><br><span class="line-number">130</span><br><span class="line-number">131</span><br><span class="line-number">132</span><br><span class="line-number">133</span><br><span class="line-number">134</span><br><span class="line-number">135</span><br><span class="line-number">136</span><br><span class="line-number">137</span><br><span class="line-number">138</span><br><span class="line-number">139</span><br><span class="line-number">140</span><br><span class="line-number">141</span><br><span class="line-number">142</span><br><span class="line-number">143</span><br><span class="line-number">144</span><br><span class="line-number">145</span><br><span class="line-number">146</span><br><span class="line-number">147</span><br><span class="line-number">148</span><br><span class="line-number">149</span><br><span class="line-number">150</span><br><span class="line-number">151</span><br><span class="line-number">152</span><br><span class="line-number">153</span><br><span class="line-number">154</span><br><span class="line-number">155</span><br><span class="line-number">156</span><br><span class="line-number">157</span><br><span class="line-number">158</span><br><span class="line-number">159</span><br><span class="line-number">160</span><br><span class="line-number">161</span><br><span class="line-number">162</span><br><span class="line-number">163</span><br><span class="line-number">164</span><br><span class="line-number">165</span><br><span class="line-number">166</span><br><span class="line-number">167</span><br><span class="line-number">168</span><br><span class="line-number">169</span><br><span class="line-number">170</span><br><span class="line-number">171</span><br><span class="line-number">172</span><br><span class="line-number">173</span><br><span class="line-number">174</span><br><span class="line-number">175</span><br><span class="line-number">176</span><br><span class="line-number">177</span><br><span class="line-number">178</span><br><span class="line-number">179</span><br><span class="line-number">180</span><br><span class="line-number">181</span><br><span class="line-number">182</span><br><span class="line-number">183</span><br><span class="line-number">184</span><br><span class="line-number">185</span><br><span class="line-number">186</span><br><span class="line-number">187</span><br><span class="line-number">188</span><br><span class="line-number">189</span><br><span class="line-number">190</span><br><span class="line-number">191</span><br><span class="line-number">192</span><br><span class="line-number">193</span><br><span class="line-number">194</span><br><span class="line-number">195</span><br><span class="line-number">196</span><br><span class="line-number">197</span><br><span class="line-number">198</span><br><span class="line-number">199</span><br><span class="line-number">200</span><br><span class="line-number">201</span><br><span class="line-number">202</span><br><span class="line-number">203</span><br><span class="line-number">204</span><br><span class="line-number">205</span><br><span class="line-number">206</span><br><span class="line-number">207</span><br><span class="line-number">208</span><br><span class="line-number">209</span><br><span class="line-number">210</span><br><span class="line-number">211</span><br><span class="line-number">212</span><br><span class="line-number">213</span><br><span class="line-number">214</span><br><span class="line-number">215</span><br><span class="line-number">216</span><br><span class="line-number">217</span><br><span class="line-number">218</span><br><span class="line-number">219</span><br><span class="line-number">220</span><br><span class="line-number">221</span><br><span class="line-number">222</span><br><span class="line-number">223</span><br><span class="line-number">224</span><br><span class="line-number">225</span><br><span class="line-number">226</span><br><span class="line-number">227</span><br><span class="line-number">228</span><br><span class="line-number">229</span><br><span class="line-number">230</span><br><span class="line-number">231</span><br><span class="line-number">232</span><br><span class="line-number">233</span><br><span class="line-number">234</span><br><span class="line-number">235</span><br><span class="line-number">236</span><br><span class="line-number">237</span><br><span class="line-number">238</span><br><span class="line-number">239</span><br><span class="line-number">240</span><br><span class="line-number">241</span><br><span class="line-number">242</span><br><span class="line-number">243</span><br><span class="line-number">244</span><br><span class="line-number">245</span><br><span class="line-number">246</span><br><span class="line-number">247</span><br><span class="line-number">248</span><br><span class="line-number">249</span><br><span class="line-number">250</span><br><span class="line-number">251</span><br><span class="line-number">252</span><br><span class="line-number">253</span><br><span class="line-number">254</span><br><span class="line-number">255</span><br><span class="line-number">256</span><br><span class="line-number">257</span><br><span class="line-number">258</span><br><span class="line-number">259</span><br><span class="line-number">260</span><br><span class="line-number">261</span><br><span class="line-number">262</span><br><span class="line-number">263</span><br><span class="line-number">264</span><br><span class="line-number">265</span><br><span class="line-number">266</span><br><span class="line-number">267</span><br><span class="line-number">268</span><br><span class="line-number">269</span><br><span class="line-number">270</span><br><span class="line-number">271</span><br><span class="line-number">272</span><br><span class="line-number">273</span><br><span class="line-number">274</span><br><span class="line-number">275</span><br><span class="line-number">276</span><br><span class="line-number">277</span><br><span class="line-number">278</span><br><span class="line-number">279</span><br><span class="line-number">280</span><br><span class="line-number">281</span><br><span class="line-number">282</span><br><span class="line-number">283</span><br><span class="line-number">284</span><br><span class="line-number">285</span><br><span class="line-number">286</span><br><span class="line-number">287</span><br><span class="line-number">288</span><br><span class="line-number">289</span><br><span class="line-number">290</span><br><span class="line-number">291</span><br><span class="line-number">292</span><br><span class="line-number">293</span><br><span class="line-number">294</span><br><span class="line-number">295</span><br><span class="line-number">296</span><br><span class="line-number">297</span><br><span class="line-number">298</span><br><span class="line-number">299</span><br><span class="line-number">300</span><br><span class="line-number">301</span><br><span class="line-number">302</span><br><span class="line-number">303</span><br><span class="line-number">304</span><br><span class="line-number">305</span><br><span class="line-number">306</span><br><span class="line-number">307</span><br><span class="line-number">308</span><br><span class="line-number">309</span><br><span class="line-number">310</span><br><span class="line-number">311</span><br><span class="line-number">312</span><br><span class="line-number">313</span><br><span class="line-number">314</span><br><span class="line-number">315</span><br><span class="line-number">316</span><br><span class="line-number">317</span><br><span class="line-number">318</span><br><span class="line-number">319</span><br><span class="line-number">320</span><br><span class="line-number">321</span><br><span class="line-number">322</span><br><span class="line-number">323</span><br><span class="line-number">324</span><br><span class="line-number">325</span><br><span class="line-number">326</span><br><span class="line-number">327</span><br><span class="line-number">328</span><br><span class="line-number">329</span><br><span class="line-number">330</span><br><span class="line-number">331</span><br><span class="line-number">332</span><br><span class="line-number">333</span><br><span class="line-number">334</span><br><span class="line-number">335</span><br><span class="line-number">336</span><br><span class="line-number">337</span><br><span class="line-number">338</span><br><span class="line-number">339</span><br></div></div>',5),t={render:function(n,s){return p}}}}]);