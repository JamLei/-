"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[6809],{9245:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-45b07b3a",path:"/servlet/Servlet-03-%E9%AB%98%E7%BA%A7.html",title:"Java Web 高级",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"JavaWeb 中的静态资源访问",slug:"javaweb-中的静态资源访问",children:[{level:3,title:"Tomcat 中的两个默认 Servlet",slug:"tomcat-中的两个默认-servlet",children:[]},{level:3,title:"总结",slug:"总结",children:[]},{level:3,title:"如何允许静态资源访问",slug:"如何允许静态资源访问",children:[]}]},{level:2,title:"过滤器（Filter）",slug:"过滤器-filter",children:[{level:3,title:"基本概念",slug:"基本概念",children:[]},{level:3,title:"Filter 的配置",slug:"filter-的配置",children:[]}]},{level:2,title:"文件上传与下载",slug:"文件上传与下载",children:[{level:3,title:"文件上传",slug:"文件上传",children:[]},{level:3,title:"文件下载",slug:"文件下载",children:[]}]},{level:2,title:"Cookies",slug:"cookies",children:[]},{level:2,title:"监听器（Listener）",slug:"监听器-listener",children:[{level:3,title:"监听器接口和注册",slug:"监听器接口和注册",children:[]},{level:3,title:"Servelt Context 监听器",slug:"servelt-context-监听器",children:[]},{level:3,title:"Session 监听器",slug:"session-监听器",children:[]},{level:3,title:"ServletRequest 监听器",slug:"servletrequest-监听器",children:[]}]}],filePathRelative:"servlet/Servlet-03-高级.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},19705:(n,s,a)=>{a.r(s),a.d(s,{default:()=>i});var t=a(66252);const e=(0,t.uE)('<h1 id="java-web-高级" tabindex="-1"><a class="header-anchor" href="#java-web-高级" aria-hidden="true">#</a> Java Web 高级</h1><h2 id="javaweb-中的静态资源访问" tabindex="-1"><a class="header-anchor" href="#javaweb-中的静态资源访问" aria-hidden="true">#</a> JavaWeb 中的静态资源访问</h2><h3 id="tomcat-中的两个默认-servlet" tabindex="-1"><a class="header-anchor" href="#tomcat-中的两个默认-servlet" aria-hidden="true">#</a> Tomcat 中的两个默认 Servlet</h3><p>Tomcat 有两个默认的 Servlet，你的 Web 项目会【无意中】用到它们。JSPServlet 和 DefaultServlet 。</p><p>JSPServlet 用于响应 <code>.jsp</code> 请求；DefaultServlet 则是默认的【兜底】的 Servlet 。</p><h4 id="jspservlet" tabindex="-1"><a class="header-anchor" href="#jspservlet" aria-hidden="true">#</a> JSPServlet</h4><p>其实 JSPServlet 并非一个，应该是整个项目有多少个 JSP 页面，就会有对应的多少个 JSPServlet 。</p><p>JSPServlet 的工作大家都很清楚了，它涉及到 <code>.jsp</code> 文件的工作原理。</p><p>当你第一次访问一个 <code>.jsp</code> 页面时，Tomcat 会根据你的 jsp 页面【帮】你写一个 Servlet，即此处的 JSPServlet 。</p><p>访问 jsp 页面最终触发的是这个 Servlet 的执行。在这个 Servlet 中会生成一个页面的内容（html格式字符串），并发回给客户端浏览器。</p><h4 id="defaultservlet" tabindex="-1"><a class="header-anchor" href="#defaultservlet" aria-hidden="true">#</a> DefaultServlet</h4><p>DefaultServlet 是 Tomcat 提供的默认的【兜底】的 Servlet，相当于它的 <code>&lt;urlpattern&gt;</code> 配置的是 <code>/</code> 。</p><p>DefaultServlet 中的 doPost 方法交由 doGet 方法进行处理。而 doGet 方法兜兜转转最后执行了一个 copy 方法，在 copy 方法中把找到静态资源文件，将其内容读出并写入 Response 对象的输出流，这样你的浏览器就看到静态数据了。</p><h4 id="配置引起的-bug" tabindex="-1"><a class="header-anchor" href="#配置引起的-bug" aria-hidden="true">#</a> 配置引起的 bug</h4><p>结合我们自定义的 Servlet，和 JSPServlet、DefaultServlet，会让初学者造成一些不知所以的 bug ：</p><h5 id="情况一" tabindex="-1"><a class="header-anchor" href="#情况一" aria-hidden="true">#</a> 情况一</h5><p>将 HelloServlet 的 urlpattern 配置为 <code>*.do</code>，此时项目中的各个 Servlet 的分工如下：</p><ol><li><p>Tomcat 默认的 JSPServlet 负责响应 <code>.jsp</code> 请求。</p></li><li><p>我们自己的 HelloServlet 负责响应 <code>.do</code> 请求。</p></li><li><p>凡是没有 Servlet 响应的请求，都被【漏给】DefaultServlet 处理。</p></li></ol><h5 id="情况二" tabindex="-1"><a class="header-anchor" href="#情况二" aria-hidden="true">#</a> 情况二</h5><p>将 HelloServlet 的 urlpattern 配置为 <code>/</code>，此时项目中的各个 Servlet 的分工如下：</p><ol><li><p>Tomcat 默认 JSPServlet 负责响应 <code>.jsp</code> 请求。</p></li><li><p>HelloServlet 负责响应所有的其它请求。</p></li></ol><p>注意，你的 HelloServlet 就替代了 Tomcat 默认的 DefaultServlet 在做【兜底】的工作。</p><p><strong>此时，你就无法访问静态资源！</strong>除非你的 HelloServlet 实现了 Tomcat 的 DefaultServlet 同样的功能。</p><h5 id="情况三" tabindex="-1"><a class="header-anchor" href="#情况三" aria-hidden="true">#</a> 情况三</h5><p>将 HelloServlet 的 urlpattern 配置为 <code>/*</code>，此时项目中的各个 Servlet 的分工如下：</p><p><strong>所有的请求都由你的 HelloServlet 处理</strong>。</p><p><code>/*</code> 是路径匹配，它的优先级高于 <code>.jsp</code>。所以当用户输入 <code>xxx.jsp</code> 时，是 HelloServlet【先】响应了这个请求，轮不到 Tomcat 的 JSPServlet 来响应这个 <code>.jsp</code> 请求。</p><p>此时，在静态资源无法访问的基础上，jsp 也无法访问了。</p><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h3><p>逻辑上，用户所访问的资源分为 3 种：</p><ul><li><p>Servlet</p></li><li><p>JSP</p></li><li><p>静态资源（例如：html、css、js、png 等）</p></li></ul><p>Tomcat 判断请求的资源的类型，也是按照上述顺序在判断：先判断是否是请求 Servlet（<code>.do</code> 请求），再判断是否是 JSP（<code>.jsp</code> 请求）。要是都不是，那么就是静态资源（<code>.png</code> 等请求）。</p><p>通过配置，进行合理安排，我们应该/预期达到如下效果：</p><ul><li><p>对于 Servlet 的请求的处理，由我们自定义的 <em><strong><code>Servlet</code></strong></em> 进行处理。</p></li><li><p>对于 JSP 的请求的处理，由 Tomcat 中的 <em><strong><code>JspServlet</code></strong></em> 自动处理。</p></li><li><p>对于 <strong>静态资源</strong> 的处理，由 Tomcat 中的 <em><strong><code>DefaultServlet</code></strong></em> 自动处理。</p></li></ul><blockquote><p>注意，从本质上来讲，DefaultServlet <strong>并不是</strong>『专门』处理静态资源的工具。而是说，既不是由我们自定义的 Servlet 处理的资源，又不是由 JspServlet 处理的资源，最后统统都交由 DefaultServlet 处理。</p></blockquote><p>DefaultServlet 作为『兜底』的 Servlet ，它的 url-pattern 是 <code>/</code> ，注意，并非 <code>/*</code> 。</p><p>毫无疑问，<em><code>web.xml</code></em> 中 <strong>不需要</strong> 显示地配置 DefaultServlet（否则，它也就不会叫 Default Servlet 了）。</p><p>同样的道理，其实我们也从未在（也不需要在） <em><code>web.xml</code></em> 中显示地配置过 JspServlet 。</p><h3 id="如何允许静态资源访问" tabindex="-1"><a class="header-anchor" href="#如何允许静态资源访问" aria-hidden="true">#</a> 如何允许静态资源访问</h3><p>当要访问静态资源时，可以在 <em><code>web.xml</code></em> 中明确指定什么样的请求（即对静态资源的请求）交由 <strong>DefaultServlet</strong> 进行处理（逻辑上，以下配置也可以省略不写，默认既是如此）：</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>default<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- 在默认的配置中，DefaultSevlet 的 servelt-name 就是叫 default --&gt;</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>*.html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>*.css<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>*.js<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>*.jpg<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>*.png<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><div class="custom-container warning"><p class="custom-container-title">WARNING</p><ul><li><code>WEB-INF</code> 目录下内容不允许直接公共访问，所以静态资源通常是放到与 <code>WEB-INF</code> 同级的目录下面。</li><li>如果是 SpringMVC 项目，对于静态资源的访问有其他的操作。</li></ul></div><h2 id="过滤器-filter" tabindex="-1"><a class="header-anchor" href="#过滤器-filter" aria-hidden="true">#</a> 过滤器（Filter）</h2><h3 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念" aria-hidden="true">#</a> 基本概念</h3><p>过滤器（Filter）是拦截 Request 请求的对象：在用户的请求访问资源前处理 ServletRequest 和 ServletResponse 。</p><p>Filter 相关的接口有：Filter、FilterConfig、FilterChain 。</p><p>Filter 的实现必须实现 Filter 接口。这个接口包含了 Filter 的3个生命周期方法：<code>init()</code>、<code>doFilter()</code>、<code>destroy()</code> 。</p><p>Servlet 容器（Tomcat）初始化Filter时，会触发 Filter 的 <code>init()</code> 方法，一般来说是在应用开始时（注意，不是第一次使用时）。这个方法只会被调用一次。</p><p>FilterConfig 对象由 Servlet 容器传入 <code>init()</code> 方法中。</p><p>当 Servlet 容器每次处理 Filter 相关的资源时，都会调用该 Filter 实例的 <code>doFilter()</code> 方法。就像容器调用 Serviet 的 <code>service()</code> 方法。</p><p>在 Filter 的 <code>doFilter()</code> 方法中，最后一行需要调用 FilterChain 中的 <code>doChain()</code> 方法。注意，FilterChain 是 <code>doFilter()</code> 方法的第三个参数。</p><p>一个 URL 资源可能被多个 Filter 关联（即一条 Filter 链），这时 <code>Filter.doFilter()</code> 的方法将触发 Filter 链中下一个 Filter。只有在 Filter 链中最后一个 Filter 里调用 <code>doFilter()</code> 方法，才会触发 Controller 中处理 URL 资源的方法。</p><p>如果在 Filter 的 <code>doFilter()</code> 方法中，因为故意（或无意）没有调用 FilterChain 的 <code>doFilter()</code> 方法，那么这个 Request 请求将终止，后面的处理就会中断。</p><p><code>注意</code>，FilterChain 接口中，唯一的方法就是 <code>doFilter()</code> 方法，它和 Filter 接口中的 <code>doFilter()</code> 方法定义是不一样的。</p><p>Filter 接口中，最后一个方法是 <code>destroy()</code>，该方法在 Servlet 容器要销毁 Filter 时触发。</p><p>类似于 Servlet，Filter 也是单例。</p><h3 id="filter-的配置" tabindex="-1"><a class="header-anchor" href="#filter-的配置" aria-hidden="true">#</a> Filter 的配置</h3><p>和 Servlet 的配置非常相似，Filter 的配置主要有三方面：</p><blockquote><ul><li>确认哪些资源需要本 Filter 进行拦截处理。</li><li>配置 Filter 的初始化参数和值，这些参数在 Filter 的 <code>init()</code> 方法中可以读取到。</li><li>给 Filter 取一个名称（一般来说这个配置是不需要的）。在一些特殊的情况下，系统通过这个名字来识别Filter。</li></ul></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@WebFilter</span><span class="token punctuation">(</span>filterName <span class="token operator">=</span> <span class="token string">&quot;firstFilter&quot;</span><span class="token punctuation">,</span>\n            urlPatterns <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;/*&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n            initParams <span class="token operator">=</span> <span class="token punctuation">{</span>\n                <span class="token annotation punctuation">@WebInitParam</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> value<span class="token operator">=</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n                <span class="token annotation punctuation">@WebInitParam</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> value<span class="token operator">=</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span>\n            <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FirstFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>firstFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">&gt;</span></span>com.hemiao.filter.FirstFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>author<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>ben<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>email<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>hemiao3000@126.com<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>firstFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h2 id="文件上传与下载" tabindex="-1"><a class="header-anchor" href="#文件上传与下载" aria-hidden="true">#</a> 文件上传与下载</h2><h3 id="文件上传" tabindex="-1"><a class="header-anchor" href="#文件上传" aria-hidden="true">#</a> 文件上传</h3><p>为了能上传文件，必须将表单的 <code>method</code> 设置为 <code>POST</code>，并将 <code>enctype</code> 设置为 <code>multipart/form-data</code> 。</p><p>有两种实现文件上传的方式：</p><ul><li><p>底层使用 Apache Commons FileUpload 包</p></li><li><p>底层使用 Servlet 3.1 内置的文件上传功能</p></li></ul><p>无论是哪种方式，其使用方式都是一样的，将 file 类型的请求参数绑定到请求处理方法的特定类型的参数上：</p><ul><li><p>CommonsMultipartFile（commons-fileupload）</p></li><li><p>MultipartFile（Servlet 3.1）</p></li></ul><h4 id="web-3-0-的文件上传" tabindex="-1"><a class="header-anchor" href="#web-3-0-的文件上传" aria-hidden="true">#</a> Web 3.0 的文件上传</h4><p>普通的表单（form）元素无法直接上传文件，必须通过“特殊处理”。</p><p>对上传文件功能而言，有些特殊的地方：</p><ul><li>form 表单内，要添加控件 <code>&lt;input type=&quot;file&quot; name=&quot;myfile&quot;&gt;</code></li><li>form 表单的提交方式必须是 post 方式</li><li>form 表单的内容格式要定义成 <strong>multipart/form-data</strong> 格式</li></ul><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>...<span class="token punctuation">&quot;</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>post<span class="token punctuation">&quot;</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>multipart/form-data<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n  ...\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><code>enctype=&quot;multipart/form-data&quot;</code> 表示表单元素中的 input 数据以二进制的方式发送到服务端。此时如果是普通的 input 数据，无法像之前一样从 request 中直接获得。</p><p>对于上传文件的的大小问题，惯例是：</p><ul><li>足够小的文件，先接收到内存中，最后写入磁盘。</li><li>稍大的文件，写入磁盘临时文件，最后写入最终目的地。</li><li>大型文件，禁止上传。</li></ul><p>在 Web 3.0 之前 使用 <strong>commons-fileupload</strong> 库是最常见的上传办法。当 Servlet 的设计者意识到文件上传的重要性后，在 Web 3.0 中它就成了一项内置的特性。</p><p>Web 3.0 中的文件上传主要围绕着 <strong>MultipartConfig</strong> 注解和 <strong>Part</strong> 接口。</p><h5 id="multipartconfig-注解" tabindex="-1"><a class="header-anchor" href="#multipartconfig-注解" aria-hidden="true">#</a> @MultipartConfig 注解</h5><dl><dt>fileSizeThreshold <small>可选属性</small></dt><dd>超过该值大小的文件，在上传过程中，将被写入磁盘临时文件，而不是保存在内存中。</dd></dl><dl><dt>maxFileSize <small>可选属性</small></dt><dd>每个上传文件的大小上限。</dd></dl><dl><dt>maxRequestSize <small>可选属性</small></dt><dd>一次请求（可能包含多个上传）的大小上限。</dd></dl><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>urlPatterns<span class="token operator">=</span><span class="token string">&quot;/hello.do&quot;</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@MultipartConfig</span><span class="token punctuation">(</span>maxFileSize <span class="token operator">=</span> <span class="token number">5</span><span class="token operator">*</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span>  <span class="token punctuation">{</span>\n  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h5 id="part-接口" tabindex="-1"><a class="header-anchor" href="#part-接口" aria-hidden="true">#</a> Part 接口</h5><p>在一个表单（Form）中，无论是否有文件上传控件，Servlet 3.0 都会将这些表单控件对应成代码中的一个 Part 对象。</p><p>通过 request 对象的 <em><code>.getParts()</code></em> 方法可以获得所有的这些 Part 对象。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Part</span><span class="token punctuation">&gt;</span></span> parts <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>在一个或多个部分组成的请求中，每一个表单域（包括非文本域），都将被转换成一个 Part 。</p><p>普通文本域和文件上传域的区别在于，其 Part 对象的 <em><code>.getContentType()</code></em> 方法返回值的不同。对于普通文本域的 Part 对象而言，该方法返回 null 。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Part</span> part <span class="token operator">:</span> parts<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>part<span class="token punctuation">.</span><span class="token function">getContentType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;普通文本域&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;文件上传域&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>补充，如果是要获取普通文本域的值，其实直接使用正常 request.getParameter() 就行。</p><p>每一个 Part 分为“头”和“体”两部分。普通文本域只有头部，而文件上传域则有头有体。</p><p>普通文本域的头部形式为：</p><pre><code>content-disposition:form-data; name=&quot;域名&quot;\n</code></pre><p>上传文本域的头部形式为：</p><pre><code>content-type:内容类型\ncontent-disposition:form-data; name=&quot;域名&quot;; filename=&quot;文件名&quot;\n</code></pre><p>对我们而言，需要的是文本上传域中的 content-disposition 中的 filename 部分。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">String</span> header <span class="token operator">=</span> part<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">&quot;content-disposition&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token comment">// 内容为 form-data; name=&quot;域名&quot;; filename=&quot;文件名&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>通常会使用工具类，将 content-disposition 中的 filename 中的值截取出来。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">getFileName</span><span class="token punctuation">(</span><span class="token class-name">String</span> header<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> header<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">String</span> item <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> cur <span class="token operator">:</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// System.out.println(&quot;debug: &quot; + cur);</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&quot;filename=&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            item <span class="token operator">=</span> cur<span class="token punctuation">;</span>\n            <span class="token keyword">break</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">int</span> start <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;&quot;&#39;</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token keyword">int</span> end <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">&#39;&quot;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">String</span> filename <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// System.out.println(filename);</span>\n\n    <span class="token keyword">return</span> filename<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p>Part 对象直接提供了方法将上传文件的内容写入盘：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">String</span> savePath <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">&quot;/WEB-INF/uploadFile/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">String</span> filePathName <span class="token operator">=</span> savePath <span class="token operator">+</span> <span class="token class-name">File</span><span class="token punctuation">.</span>separator <span class="token operator">+</span> fileName<span class="token punctuation">;</span> <span class="token comment">// 目标文件路径名</span>\npart<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>filePathName<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 把文件写到指定路径</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Part的其它常用方法</p><dl><dt><code>getContentType()</code> 方法</dt><dd>获得Part的内容类型。如果Part是普通文本，那么返回null。</dd><dd>该方法可以用于区别是普通文本域，还是文件上传域。</dd></dl><dl><dt><code>getHeader()</code> 方法</dt><dd>该方法用于获取指定的标头的值。</dd><dd>对于上传文本域的 Part，该参数有 <code>content-type</code> 和<code>content-disposition</code></dd><dd>对于普通文本域，则只有 <code>content-disposition</code> 一种。</dd></dl><dl><dt><code>getName()</code> 方法</dt><dd>无论是普通文本域Part，还是文件上传域Part，都是获得域名值。</dd></dl><dl><dt><code>write()</code> 方法</dt><dd>将上传文件写入磁盘中。</dd></dl><dl><dt><code>delete()</code> 方法</dt><dd>手动删除临时文件</dd></dl><dl><dt><code>getInputStream()</code> 方法</dt><dd>以InputStream形式返回上传文件的内容。</dd></dl><h4 id="利用-commons-fileupload-文件上传" tabindex="-1"><a class="header-anchor" href="#利用-commons-fileupload-文件上传" aria-hidden="true">#</a> 利用 commons-fileupload 文件上传</h4><p>利用 commons-fileupload 文件上传需要利用引入 commons-fileupload 包（它依赖于 commons-io 包）</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>commons-fileupload<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>commons-fileupload<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>作为 Servlet 内置上传功能之前的【准标准】，Servlet 在引入内置上传功能时借鉴了 commons-fileupload 的实现方式。因此，在了解 Servlet 内置上传功能之后，再回头看 commons-fileupload 文件上传时，你会发现它们的基本逻辑/大道理时一样的，只不过 commons-fileupload 的实现会罗嗦一些</p><p>在 Servlet 内置的上传功能中，从 request 中获得的是一个 <code>Part[]</code>，其中的每一个 Part 对象对应着表单中的一个表单域（Form Field）。而 commons-fileupload 中我们从 request 中获得的是一个 <code>List&lt;FileItem&gt;</code>，commons-fileupload 中使用 FileItem 来对应每一个表单域，起到和 Part 一样的作用。</p><p>commons-fileupload 的罗嗦体现在以下几个方面：</p><ul><li>commons-fileupload 不能对 Servlet 使用注解，因此相关的上传配置需要通过编码实现。</li><li>commons-fileupload 不能使用 <em><code>request.getParameter()</code></em></li></ul><p>为了能够从 request 中获得 <em><code>List&lt;FileItem&gt;</code></em>，你需要两个对象：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// 创建上传所需要的两个对象</span>\n<span class="token class-name">DiskFileItemFactory</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DiskFileItemFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 磁盘文件对象</span>\n<span class="token class-name">ServletFileUpload</span> sfu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServletFileUpload</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 文件上传对象</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>如果不做出设置，那么相关设置则采用默认值。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// 设置上传过程中所收到的数据是【存内存】还是【存磁盘】的阈值</span>\nfactory<span class="token punctuation">.</span><span class="token function">setSizeThreshold</span><span class="token punctuation">(</span><span class="token number">100</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token comment">// 设置磁盘临时文件的保存目录</span>\nfactory<span class="token punctuation">.</span><span class="token function">setRepository</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;D:/upload&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 设置解析文件上传中的文件名的编码格式，解决上传文件名中文乱码问题</span>\nsfu<span class="token punctuation">.</span><span class="token function">setHeaderEncoding</span><span class="token punctuation">(</span><span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 限制单个文件的大小</span>\nsfu<span class="token punctuation">.</span><span class="token function">setFileSizeMax</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 限制上传的总文件大小</span>\nsfu<span class="token punctuation">.</span><span class="token function">setSizeMax</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>在创建文件上传对象（并作出相应设置）之后，我们可以通过它从 request 中获取我们所需要的 <code>List&lt;FileItem&gt;</code> 。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">FileItem</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> sfu<span class="token punctuation">.</span><span class="token function">parseRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>FileItem 自带了方法，可以判断当前的 FileItem 对应的是页面上的普通文本域，还是文件上传域：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">FileItem</span> item <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">isFormField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;普通文本域&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">else</span> <span class="token punctuation">{</span>    \n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;文件上传域&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>由于 commons-fileupload 中无法使用 <em><code>request.getParameter()</code></em>，因此，为了获得普通文本域中的数据，需要使用 FileItem 自己的方法：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">FileItem</span> item <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">isFormField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">String</span> fieldName <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">getFieldName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 例如：username / password</span>\n        <span class="token class-name">String</span> fieldValue <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 例如，tom / 123456</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>fieldName <span class="token operator">+</span> <span class="token string">&quot;: &quot;</span> <span class="token operator">+</span> fieldValue<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">else</span> <span class="token punctuation">{</span>    \n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;文件上传域&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>由于 commons-fileupload 引用了 commons-io，所以，将上传的文件内容写入磁盘倒是十分简单：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">FileItem</span> item <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">isFormField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">else</span> <span class="token punctuation">{</span>    \n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;文件上传域&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 创建输出文件</span>\n        <span class="token class-name">String</span> name <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取上传文件的名字</span>\n        <span class="token class-name">String</span> outPath <span class="token operator">=</span> <span class="token string">&quot;D:/upload/&quot;</span> <span class="token operator">+</span> name<span class="token punctuation">;</span>\n        <span class="token class-name">FileOutputStream</span> output <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>outPath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// 获得上传文件字节流</span>\n        <span class="token class-name">InputStream</span> input <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n\n        <span class="token comment">// 使用 IOUtils 工具将输入流中的数据写入到输出流。</span>\n        <span class="token class-name">IOUtils</span><span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> output<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;上传成功！保存的路径为：&quot;</span> <span class="token operator">+</span> outPath<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        input<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 关闭输入流</span>\n        output<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 关闭输出流</span>\n        item<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 删除处理文件上传时生成的临时文件</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><h3 id="文件下载" tabindex="-1"><a class="header-anchor" href="#文件下载" aria-hidden="true">#</a> 文件下载</h3><table><thead><tr><th style="text-align:left;">内容类型</th><th style="text-align:left;">文件扩展名</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">text/plain</td><td style="text-align:left;">txt</td><td style="text-align:left;">文本文件（包括但不仅包括txt）</td></tr><tr><td style="text-align:left;">application/msword</td><td style="text-align:left;">doc</td><td style="text-align:left;">Microsoft Word</td></tr><tr><td style="text-align:left;">application/pdf</td><td style="text-align:left;">pdf</td><td style="text-align:left;">Adobe Acrobat</td></tr><tr><td style="text-align:left;">application/zip</td><td style="text-align:left;">zip</td><td style="text-align:left;">winzip</td></tr><tr><td style="text-align:left;">audio/mpeg</td><td style="text-align:left;">mp3</td><td style="text-align:left;">mp3 音频文件</td></tr><tr><td style="text-align:left;">image/gif</td><td style="text-align:left;">gif</td><td style="text-align:left;">COMPUSERVE GIF 图像</td></tr><tr><td style="text-align:left;">image/jpeg</td><td style="text-align:left;">jpeg jpg</td><td style="text-align:left;">JPEG 图像</td></tr><tr><td style="text-align:left;">image/png</td><td style="text-align:left;">png</td><td style="text-align:left;">PNG 图像</td></tr></tbody></table>',130),p=(0,t.Uk)("详细 MIME 参见 "),l={href:"http://www.w3school.com.cn/media/media_mimeref.asp",target:"_blank",rel:"noopener noreferrer"},o=(0,t.Uk)("网址"),c=(0,t.Uk)(" 。"),u=(0,t.uE)('<p>相对于上传而言，下载文件较为简单，只需要完成两步：</p><ol><li>设置响应的内容类型。</li><li>添加一个 <code>content-disposition</code> 到响应标头（<code>addHeader()</code>方法)，其值为：<code>attachment; filename=文件名</code></li><li>通过 resp 对象获得输出流，将文件内容发送至客户端。</li></ol><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>resp<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">&quot;text/plain&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// step 1</span>\nresp<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&quot;content-disposition&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;attachment;filename=&quot;</span> <span class="token operator">+</span> <span class="token class-name">URLEncoder</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">&quot;D:/note.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// step 2</span>\n\n<span class="token class-name">InputStream</span> is <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">&quot;D:/note.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">OutputStream</span> out <span class="token operator">=</span> resp<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">=</span> is<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// step 3</span>\n<span class="token punctuation">}</span>\n\nis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nout<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;下载成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h2 id="cookies" tabindex="-1"><a class="header-anchor" href="#cookies" aria-hidden="true">#</a> Cookies</h2><p>Cookie 本质上是一个小文件，由浏览器创建/管理，保存在浏览器本地，即用户自己的电脑上。</p><p>当你访问一个网站/网址时，浏览器会“帮”你将这个文件的内容发送至服务端<small>（Tomcat）</small>。这个小文件的内容都是“名值（name-value）对”。只有浏览器本地有这个网站/网址的相关 Cookie（小文件），浏览器『<strong>一定</strong>』会把它的内容“帮”你发送到服务端。这个过程无需程序员参与，不受程序员的控制。</p><p>浏览器“帮”你发送的 Cookie，可能不止一个。服务端获得浏览器发送来的所有 Cookie 的方法是通过 request 对象的 <code>getCookies()</code>。</p><p>Cookie<small>（小文件）</small>是由浏览器在本地创建，但是，它是由服务端“通知/要求”浏览器去创建时，才会创建的。</p><p>浏览器通常支持每个网站 20 个 cookies 。</p><p><code>注意</code>，cookie 中不能直接存放中文，所以需要做相应的处理。常见处理办法是使用 URLEncoder 和 URLDecoder 将中文字符串编码/解码成URL格式编码字符串。</p><p>可以通过传递 name 和 value 两个参数给Cookie类的构造函数来创建一个 cookie。在创建完 cookie 之后，可以设置它的 <code>maxAge</code> 属性，这个属性决定了cookie 何时过期（单位为秒）。</p><p>要将 cookie 发送到浏览器，需要调用 HttpServletResponse 的 <code>add()</code> 方法。</p><p>服务器若要读取浏览器提交的 cookie，可以通过 HttpServletRequest 接口的 <code>getCookie()</code> 方法，该方法返回一个 Cookie 数组，若没有 cookies 则返回 null 。你需要遍历整个数组来查询某个特定名称的 cookie 。</p><p>注意，并没有一个直接的方法来删除一个 cookie，你只能创建一个同名的 cookie，并将 <code>maxAge</code> 设置为 0，并添加到 HttpServletResponse 中来“覆盖”原来的那个 cookie 。</p><p>Cookie 最大的问题在于用户可以通过设置禁用浏览器的 cookie 功能。</p><h2 id="监听器-listener" tabindex="-1"><a class="header-anchor" href="#监听器-listener" aria-hidden="true">#</a> 监听器（Listener）</h2><p>为了能够在 Servlet/JSP 应用程序中进行事件驱动编程<small>（Event-Driven Programming）</small>，Servlet API 提供了一整套事件类和监听器接口。所以事件类均源自 java.util.Event，并且监听器在以下三个不同级别中均可使用：ServeletContext、HttpSession 及 ServletRequest 。</p><h3 id="监听器接口和注册" tabindex="-1"><a class="header-anchor" href="#监听器接口和注册" aria-hidden="true">#</a> 监听器接口和注册</h3><p>创建监听器时，只要创建一个实现相关接口的 Java 类即可。在 Servlet 3.0 中，监听器有 2 种方法，以便 Servlet 容器能够认出来。</p><ol><li><p>使用 @WebListener 注解</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@WebListener</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> 自定义监听器 <span class="token keyword">implements</span> 监听器接口 <span class="token punctuation">{</span>\n\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><p>在部署描述符<small>（web.xml）</small>使用一个 &lt;listener&gt; 元素：</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener-class</span><span class="token punctuation">&gt;</span></span>自定义监听器<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener-class</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li></ol><p>在应用程序中可以想要多少个监听器就可以有多少个监听器。注意，<strong>对监听器方法的调用时同步进行的。</strong></p><h3 id="servelt-context-监听器" tabindex="-1"><a class="header-anchor" href="#servelt-context-监听器" aria-hidden="true">#</a> Servelt Context 监听器</h3><p>在 ServletContext 级别上有 2 个监听器接口：</p><ul><li>ServletContextListener</li><li>ServletContextAttributeListener</li></ul><h4 id="servletcontextlistener" tabindex="-1"><a class="header-anchor" href="#servletcontextlistener" aria-hidden="true">#</a> ServletContextListener</h4><p>ServletContextListener 会对 ServletCotnext 的初始化<small>（init）</small>和解构<small>（destroy）</small>做出响应。ServletContext 被初始化时，Servlet 容器会在所有已注册的 ServletContextListner 中调用 <strong>contextInitialized</strong> 方法。</p><pre><code>void contextDestroyed(ServletContextEvent event);\n</code></pre><p>当 ServletContext 要被解构和销毁时，Servlet 容器会在所有已注册的 ServletContextListener 中调用 <strong>contextDestroyed</strong> 方法。</p><pre><code>void contextDestroyed(ServletContextEvent event);\n</code></pre><p>contextInitialized 和 contextDestroyed 都会收到一个来自 Servlet 容器的 <strong>ServletContextEvent</strong> 。ServletContextEvent 是 java.util.EventObject 的子类，它定义了一个 <strong>getServletContext</strong> 方法，用以返回 ServletContext :</p><pre><code>ServletContext getServletContext();\n</code></pre><h4 id="servletcontextattributelistener" tabindex="-1"><a class="header-anchor" href="#servletcontextattributelistener" aria-hidden="true">#</a> ServletContextAttributeListener</h4><p>每当 ServletContext 中添加、删除或替换了某个属性时，ServletContextAttributeListener 的事件都会收到通知。以下就是在这个监听器接口中定义的三个方法：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">attributeAdded</span><span class="token punctuation">(</span><span class="token class-name">ServletContextAttributeEvent</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">void</span> <span class="token function">attributeRemoved</span><span class="token punctuation">(</span><span class="token class-name">ServletContextAttributeEvent</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">void</span> <span class="token function">attributeReplaced</span><span class="token punctuation">(</span><span class="token class-name">ServletContextAttributeEvent</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li>每当 ServletContext 中添加了某个属性时，Servlet 容器就会调用 attributeAdded 方法；</li><li>每当 ServletContext 中移除了某个属性时，Servlet 容器就会调用 attributeRemoved 方法；</li><li>每当 ServletContext 被新的代替时，Servlet 容器就会调用 attributeReplaced 方法。</li></ul><p>所有的监听器方法都会收到一个 ServletContextAttributeEvent 实例，从这个参数中你可以获取属性名称<small>（getName）</small>和属性值<small>（getValue）</small>。</p><h3 id="session-监听器" tabindex="-1"><a class="header-anchor" href="#session-监听器" aria-hidden="true">#</a> Session 监听器</h3><p>与 HttpSession 有关的监听器有 4 个，我们常见的 2 个是：<strong>HttpSessionListener</strong> 和 <strong>HttpSessionAttributeListener</strong> 。</p><h4 id="httpsessionlistener" tabindex="-1"><a class="header-anchor" href="#httpsessionlistener" aria-hidden="true">#</a> HttpSessionListener</h4><p>当有 HttpSession 被创建或销毁时，Servlet 容器就会调用所有已注册的 HttpSessionListener。HttpSessionListener 中定义的 2 个方法是：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">sessionCreated</span><span class="token punctuation">(</span><span class="token class-name">HttpSessionEvent</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">void</span> <span class="token function">sessionDestroyed</span><span class="token punctuation">(</span><span class="token class-name">HttpSessionEvent</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>这 2 个方法都会收到一个 HttpSessionEvent 实例，我们可以调用这个参数的 <strong>getSession</strong> 方法来获得所创建或销毁的 HttpSession 对象。</p><h4 id="httpsessionattributelistener" tabindex="-1"><a class="header-anchor" href="#httpsessionattributelistener" aria-hidden="true">#</a> HttpSessionAttributeListener</h4><p>HttpSessionAttributeListener 就像 ServletContextAttributeListener 一样，只不过当 HttpSession 中有添加、删除或替换属性的时候它才会调用。它定义的方法有：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">attributeAdded</span><span class="token punctuation">(</span><span class="token class-name">HttpSessionBindingEvent</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">void</span> <span class="token function">attributeRemoved</span><span class="token punctuation">(</span><span class="token class-name">HttpSessionBindingEvent</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">void</span> <span class="token function">attributeReplaced</span><span class="token punctuation">(</span><span class="token class-name">HttpSessionBindingEvent</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li>当 HttpSession 中添加某个属性时，由 Servlet 容器调用 attributeAdded 方法；</li><li>当 HttpSession 中删除某个属性时，由 Servlet 容器调用 attributeRemoved 方法；</li><li>当 HttpSession 属性被新属性代替时，由 Servlet 容器调用 attributeReplaced 方法。</li></ul><p>所有的监听器方法都会收到一个 HttpSessionBindingEvent 实例，从这个参数中，你可以获得响应的 HttpSession 对象和属性名以及属性值。</p><h3 id="servletrequest-监听器" tabindex="-1"><a class="header-anchor" href="#servletrequest-监听器" aria-hidden="true">#</a> ServletRequest 监听器</h3><p>在 ServletRequest 级别上有 3 个监听器接口，我们常见的有 2 个：<strong>ServletRequestListener</strong> 和 <strong>ServletRequestAttributeListener</strong> 。</p><h4 id="servletrequestlistener" tabindex="-1"><a class="header-anchor" href="#servletrequestlistener" aria-hidden="true">#</a> ServletRequestListener</h4><p>ServletRequestListener 对 ServletRequest 的创建和销毁做出响应。在 Servlet 容器中时通过池<small>（pool）</small>来重用 ServletRequest 的，“创建” ServletRequest 花费的事件相当于从池中获取一个 ServletRequest 对象的事件，销毁它的时间则相当于将 ServletRequest 重新放回 pool 的时间开销。</p><p>ServletRequestListener 接口定义了 2 个方法：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">requestInitialized</span><span class="token punctuation">(</span><span class="token class-name">ServletRequestEvent</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">void</span> <span class="token function">requestDestroyed</span><span class="token punctuation">(</span><span class="token class-name">ServletRequestEvent</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>创建<small>（本质上是从池中取出）</small>ServletRequest 时会调用 requestInitialized 方法，ServletRequest 被销毁<small>（本质上是放回池中）</small>时会调用 requestDestroyed 方法。这 2 个方法都会收到一个 ServletRequestEvent，通过调用 event 的 <strong>getServletRequest</strong> 方法，可以从中获取到相应的 ServletRequest 实例</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">ServletRequest</span> <span class="token function">getServletRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>另外，ServletRequestEvent 接口还定义了返回 ServletContext 的 getServletContext 方法，方法签名如下：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">ServletContext</span> <span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h4 id="servletrequestattributelistener" tabindex="-1"><a class="header-anchor" href="#servletrequestattributelistener" aria-hidden="true">#</a> ServletRequestAttributeListener</h4><p>当在 ServletRequest 中添加、删除或者替换某个属性时，会调用 ServletRequestAttributeListener 。ServletRequestAttributeListener 接口中定义了 3 个方法：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">attributeAdded</span><span class="token punctuation">(</span><span class="token class-name">ServletRequestAttributeEvent</span> event<span class="token punctuation">)</span>\n<span class="token keyword">void</span> <span class="token function">attributeRemoved</span><span class="token punctuation">(</span><span class="token class-name">ServletRequestAttributeEvent</span> event<span class="token punctuation">)</span>\n<span class="token keyword">void</span> <span class="token function">attributeReplaced</span><span class="token punctuation">(</span><span class="token class-name">ServletRequestAttributeEvent</span> event<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>所有方法都会收到一个 ServletRequestAttributeEvent 实例。通过参数 event 的 getName 和 getValue 方法你可以获得属性名和属性值。</p>',61),i={render:function(n,s){const a=(0,t.up)("OutboundLink");return(0,t.wg)(),(0,t.iD)(t.HY,null,[e,(0,t._)("p",null,[p,(0,t._)("a",l,[o,(0,t.Wm)(a)]),c]),u],64)}}}}]);