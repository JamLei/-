"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[8562],{17562:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-cef62b8e",path:"/spring-cloud/01-spring-cloud.html",title:"初识 Spring Cloud",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"0. 微服务",slug:"_0-微服务",children:[]},{level:2,title:"1. 什么是 Spring Cloud",slug:"_1-什么是-spring-cloud",children:[]},{level:2,title:"2. 最简单的 Spring Cloud 项目",slug:"_2-最简单的-spring-cloud-项目",children:[]}],filePathRelative:"spring-cloud/01-spring-cloud.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},43645:(n,s,a)=>{a.r(s),a.d(s,{default:()=>W});var p=a(66252);const e=(0,p.uE)('<h1 id="初识-spring-cloud" tabindex="-1"><a class="header-anchor" href="#初识-spring-cloud" aria-hidden="true">#</a> 初识 Spring Cloud</h1><h2 id="_0-微服务" tabindex="-1"><a class="header-anchor" href="#_0-微服务" aria-hidden="true">#</a> 0. 微服务</h2><p>微服务架构通常会与单体架构<small>（Monolithic Style）</small>进行比较。Web 应用程序发展的早期，大部分 Web 工程是将所有的功能模块打包到一起部署和运行，例如 Java 应用程序打包为一个 war 包。在单体应用中，所有这些模块都被集成在一起，这样运行的系统就叫做单体应用。</p><p>单体应用的优点是开发简单直接，集中式管理基本不会重复开发；功能都在本地，没有分布式的管理开销和调用开销。缺点也很明显，如开发效率低、代码维护难，稳定性和扩展性都存在不足。</p><blockquote><p>微服务最早是由 Martin Fowler 与 James Lewis 于 2014 年共同提出。</p></blockquote><p>微服务架构，是一种软件架构方式。微服务的主要特点体现在组件化、松耦合、自治和去中心化等方面。它将应用构建成一系列按业务领域划分模块的、小的自治服务，通过分解巨大单体式应用为多个服务方法解决了复杂性问题。每个服务还提供了一个严格的模块边界，甚至允许用不同的编程语言编写不同的服务。不过，微服务应用是分布式系统，由此会带来分布式系统固有的复杂性，包括测试、运维的复杂度。</p><h2 id="_1-什么是-spring-cloud" tabindex="-1"><a class="header-anchor" href="#_1-什么是-spring-cloud" aria-hidden="true">#</a> 1. 什么是 Spring Cloud</h2><p>Spring Cloud 是微服务架构思想的一个具体实现，它为开发人员提供了快速构建分布式系统中一些常见模式的工具<small>（如，配置管理、服务发、断路器、智能路由、微代理、控制总线等）。</small></p><p>Spring Cloud 基于 Spring Boot 框架，它不重复造轮子，而是将第三方实现的微服务应用的一些模块集成进去。准确的说，Spring Cloud 是一个容器。</p><h2 id="_2-最简单的-spring-cloud-项目" tabindex="-1"><a class="header-anchor" href="#_2-最简单的-spring-cloud-项目" aria-hidden="true">#</a> 2. 最简单的 Spring Cloud 项目</h2><p>最简单的 Spring Cloud 微服务架构包括『<strong>服务发现</strong>』和『<strong>服务提供者</strong>』<small>（即，一个大型系统拆分出来的子模块）</small>，最极端的微服务可以做到一个方法就是一个服务，一个方法就是一个项目。</p><blockquote><p>在一个系统中，服务怎么拆分，要具体问题具体分析，也取决于系统的并发性、高可用性等因素。</p></blockquote><p>首先是服务发现，这里我们采用 <strong>Eureka Server</strong> 。</p>',13),t=(0,p.Uk)("通过 "),l={href:"https://start.spring.io",target:"_blank",rel:"noopener noreferrer"},o=(0,p._)("em",null,"https://start.spring.io",-1),c=(0,p.Uk)(" 或 "),r={href:"https://start.aliyun.com",target:"_blank",rel:"noopener noreferrer"},u=(0,p._)("em",null,"https://start.aliyun.com",-1),i=(0,p.Uk)(" 所提供的 Spring Initializer 功能，引入依赖："),k=(0,p.uE)('<ul><li><p>在搜索框中输入 <strong>Eureka Server</strong> 后再选中，或</p></li><li><p>在 <strong>Spring Cloud Discovery</strong> 下选中 <strong>Eureka Server</strong> 。</p></li><li><p>另外，这里『<strong>不需要引入 Spring Web</strong>』。</p></li></ul><p>注意：除非完全没有网络，导致无法利用 Spring Initializer 功能，否则对于初学者而言，不要自己去创建普通的 Maven 项目后再添加相关包的依赖。这样做很容易遗漏和出错。</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-netflix-eureka-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>',3),m=(0,p.Uk)("在线转换 "),b=(0,p._)("strong",null,".properties",-1),g=(0,p.Uk)(" 和 "),d=(0,p._)("strong",null,".yml",-1),y=(0,p.Uk)(" 配置文件。例如："),v={href:"https://www.toyml.com/index.html",target:"_blank",rel:"noopener noreferrer"},h=(0,p.Uk)("https://www.toyml.com/index.html"),f=(0,p.uE)('<ul><li><p><strong>application.yml</strong> 文件</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">server</span><span class="token punctuation">:</span>\n  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8761</span>\n<span class="token key atrule">spring</span><span class="token punctuation">:</span>\n  <span class="token key atrule">application</span><span class="token punctuation">:</span>\n    <span class="token key atrule">name</span><span class="token punctuation">:</span> eureka<span class="token punctuation">-</span>server<span class="token punctuation">-</span>registry\n<span class="token key atrule">eureka</span><span class="token punctuation">:</span>\n  <span class="token key atrule">instance</span><span class="token punctuation">:</span>\n    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> 127.0.0.1   <span class="token comment"># ${spring.cloud.client.ip-address}</span>\n    <span class="token key atrule">instance-id</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>eureka.instance.hostname<span class="token punctuation">}</span><span class="token punctuation">:</span>$<span class="token punctuation">{</span>server.port<span class="token punctuation">}</span>\n    <span class="token key atrule">prefer-ip-address</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>\n  <span class="token key atrule">client</span><span class="token punctuation">:</span>\n    <span class="token key atrule">fetchRegistry</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>\n    <span class="token key atrule">registerWithEureka</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>\n    <span class="token key atrule">serviceUrl</span><span class="token punctuation">:</span>\n      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span>$<span class="token punctuation">{</span>server.port<span class="token punctuation">}</span>/eureka\n  <span class="token key atrule">server</span><span class="token punctuation">:</span>\n    <span class="token key atrule">enable-self-preservation</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token comment"># 关闭自保护模式会告警信息提示，但不影响运行。</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p><small>以上配置暂不深究（后续详细讲解），先看整体运行效果。</small></p></li><li><p>bootstrap.yml ：</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">logging</span><span class="token punctuation">:</span>\n  <span class="token key atrule">level</span><span class="token punctuation">:</span>\n    <span class="token key atrule">root</span><span class="token punctuation">:</span> WARN\n    <span class="token key atrule">com.woniu</span><span class="token punctuation">:</span> DEBUG\n    <span class="token key atrule">com.example</span><span class="token punctuation">:</span> DEBUG\n  <span class="token key atrule">pattern</span><span class="token punctuation">:</span>\n    <span class="token key atrule">console</span><span class="token punctuation">:</span> &quot;$<span class="token punctuation">{</span>CONSOLE_LOG_PATTERN<span class="token punctuation">:</span>\\\n      <span class="token directive important">%clr(${LOG_LEVEL_PATTERN:%5p}) \\</span>\n      <span class="token directive important">%clr(|){faint} \\</span>\n      <span class="token directive important">%clr(%-40.40logger{39}){cyan} \\</span>\n      <span class="token directive important">%clr(:){faint} \\</span>\n      <span class="token directive important">%m%n${LOG_EXCEPTION_CONVERSION_WORD:%wEx}}&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div></li></ul><p>添加一个启动类 <strong>RegistryApplication.java</strong></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>\n<span class="token annotation punctuation">@EnableEurekaServer</span> <span class="token comment">// 看这里，看这里，看这里</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RegistryApplication</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">RegistryApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><br><hr><br><p>然后再创建一个项目，实现『<strong>服务提供者</strong>』，在 <em>pom.xml</em> 添加如下内容:</p><p>通过 <code>https://start.spring.io</code> 或 <code>https://start.aliyun.com</code> 所提供的 Spring Initializer 功能，引入依赖：</p><ul><li><p>在搜索框中输入 <strong>Eureka Discovery Client</strong> 后再选中。或</p></li><li><p>在 <strong>Spring Cloud Discovery</strong> 下选中 <strong>Eureka Discovery Client</strong> 。</p></li><li><p>另外，这里『<strong>需要引入 Spring Web</strong>』 。</p></li><li><p>实际添加的核心依赖关系如下：</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></li></ul><p>为项目添加配置文件：</p><ul><li><p>application.yml 配置文件</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>\n  <span class="token key atrule">application</span><span class="token punctuation">:</span>\n    <span class="token key atrule">name</span><span class="token punctuation">:</span> hello\n<span class="token key atrule">server</span><span class="token punctuation">:</span>\n  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8762</span>\n<span class="token key atrule">eureka</span><span class="token punctuation">:</span>\n  <span class="token key atrule">client</span><span class="token punctuation">:</span>\n    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>\n      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span>8761/eureka\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div></li><li><p>bootstrap.yml 配置文件</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code># 日志相关配置，略。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li></ul><p>增加一个启动类:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>\n<span class="token annotation punctuation">@EnableEurekaClient</span> <span class="token comment">// 看这里，看这里，看这里</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EurekaProducer1Application</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">EurekaProducer1Application</span><span class="token punctuation">.</span><span class="token keyword">class</span>，args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n<span class="token punctuation">}</span>\n\n<span class="token annotation punctuation">@RestController</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TempController</span> <span class="token punctuation">{</span>\n\n    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;${server.port}&quot;</span><span class="token punctuation">)</span>\n    <span class="token class-name">String</span> port<span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/hello&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">home</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token string">&quot;hi &quot;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">&quot;, i am from port:&quot;</span> <span class="token operator">+</span> port<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div>',13),_=(0,p.Uk)("这时，分别启动服务发现和服务提供者，浏览器输入: "),S={href:"http://localhost:8761",target:"_blank",rel:"noopener noreferrer"},w=(0,p.Uk)("http://localhost:8761"),x=(0,p.Uk)(" ，即服务发现的地址:"),E=(0,p._)("p",null,[(0,p._)("img",{src:"https://hemiao3000.gitee.io/java-note-img/images/spring-cloud/img/eureka-producer-1.png",alt:"eureka-producer-1"})],-1),C=(0,p.Uk)("可以发现，服务提供者 hello 已经注册到服务中心了，然后我们请求 hello 接口地址: "),I={href:"http://localhost:8762/hello?name=tom",target:"_blank",rel:"noopener noreferrer"},q=(0,p.Uk)("http://localhost:8762/hello?name=tom"),U=(0,p.Uk)(" ，即可以看到下面返回数据:"),A=(0,p._)("div",{class:"language-text ext-text line-numbers-mode"},[(0,p._)("pre",{class:"language-text"},[(0,p._)("code",null,"hi tom, i am from port: 8762 \n")]),(0,p._)("div",{class:"line-numbers"},[(0,p._)("span",{class:"line-number"},"1"),(0,p._)("br")])],-1),R=(0,p._)("p",null,"以上只是 Spring Cloud 的入门实例，是为了给大家展示什么是 Spring Cloud 。",-1),W={render:function(n,s){const a=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.iD)(p.HY,null,[e,(0,p._)("p",null,[t,(0,p._)("a",l,[o,(0,p.Wm)(a)]),c,(0,p._)("a",r,[u,(0,p.Wm)(a)]),i]),k,(0,p._)("blockquote",null,[(0,p._)("p",null,[m,b,g,d,y,(0,p._)("a",v,[h,(0,p.Wm)(a)])])]),f,(0,p._)("p",null,[_,(0,p._)("a",S,[w,(0,p.Wm)(a)]),x]),E,(0,p._)("p",null,[C,(0,p._)("a",I,[q,(0,p.Wm)(a)]),U]),A,R],64)}}}}]);