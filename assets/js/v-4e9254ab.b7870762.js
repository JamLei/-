"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[4325],{217:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-4e9254ab",path:"/utility/guava/83-%E9%9B%86%E5%90%88%E5%B7%A5%E5%85%B7%E7%B1%BB%20-%20%E5%90%ABapache.html",title:"集合工具类",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"判空",slug:"判空",children:[{level:3,title:"guava 的 Iterables 工具类",slug:"guava-的-iterables-工具类",children:[]},{level:3,title:"commons-collections4 的 CollectionUtils 工具类",slug:"commons-collections4-的-collectionutils-工具类",children:[]}]},{level:2,title:"批量添加元素",slug:"批量添加元素",children:[{level:3,title:"guava 的 Iterables 工具类",slug:"guava-的-iterables-工具类-1",children:[]},{level:3,title:"commons-collections4 的 CollectionUtils 工具类",slug:"commons-collections4-的-collectionutils-工具类-1",children:[]}]},{level:2,title:"选中/选出某些元素",slug:"选中-选出某些元素",children:[{level:3,title:"guava 的 Iterables 和 Collections2 工具类",slug:"guava-的-iterables-和-collections2-工具类",children:[]},{level:3,title:"commons-collection4 的 CollectionUtils 工具类和 IterableUtils 工具类",slug:"commons-collection4-的-collectionutils-工具类和-iterableutils-工具类",children:[]}]},{level:2,title:"剃除某些元素",slug:"剃除某些元素",children:[{level:3,title:"guava 的 Collections2 工具类",slug:"guava-的-collections2-工具类",children:[]},{level:3,title:"commons-collection4 的 CollectionUtils 工具类",slug:"commons-collection4-的-collectionutils-工具类",children:[]}]},{level:2,title:"形变",slug:"形变",children:[{level:3,title:"guava 的 Iterables 、Collecions2 和 Lists 工具类",slug:"guava-的-iterables-、collecions2-和-lists-工具类",children:[]},{level:3,title:"commons-collection4 的 CollectionUtils 工具类",slug:"commons-collection4-的-collectionutils-工具类-1",children:[]}]},{level:2,title:"比较",slug:"比较",children:[{level:3,title:"guava 的 Iterables 类",slug:"guava-的-iterables-类",children:[]},{level:3,title:"commons-collection4 的 CollectionUtils 工具类",slug:"commons-collection4-的-collectionutils-工具类-2",children:[]}]}],filePathRelative:"utility/guava/83-集合工具类 - 含apache.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},10937:(n,s,a)=>{a.r(s),a.d(s,{default:()=>e});const t=(0,a(66252).uE)('<h1 id="集合工具类" tabindex="-1"><a class="header-anchor" href="#集合工具类" aria-hidden="true">#</a> 集合工具类</h1><p>guava 的『想法』：</p><ul><li><p>对于选择存放对象<small>（的引用）</small>的容器而言，guava 更偏爱、推荐使用集合，而非数组；</p></li><li><p>对集合的各种操作，guava 又推荐通过『<strong>迭代器</strong>』来完成，而非循环遍历。</p></li></ul><p>对于集合的常见操作有：</p><table><thead><tr><th style="text-align:center;">#</th><th style="text-align:left;">操作</th></tr></thead><tbody><tr><td style="text-align:center;">1</td><td style="text-align:left;">判空</td></tr><tr><td style="text-align:center;">2</td><td style="text-align:left;">批量添加元素</td></tr><tr><td style="text-align:center;">3</td><td style="text-align:left;">选中/选出某些元素</td></tr><tr><td style="text-align:center;">4</td><td style="text-align:left;">剃除某些元素</td></tr><tr><td style="text-align:center;">5</td><td style="text-align:left;">形变</td></tr><tr><td style="text-align:center;">6</td><td style="text-align:left;">比较</td></tr></tbody></table><blockquote><p>Guava 中的集合的工具方法大多存在于 <strong>Iterables</strong> 工具类中，显而易见它是 for <strong>Iterable</strong> 的。注意，是 Iterable，而非 Iterator 。Iterable 是 Collection 接口的父接口。</p></blockquote><h2 id="判空" tabindex="-1"><a class="header-anchor" href="#判空" aria-hidden="true">#</a> 判空</h2><h3 id="guava-的-iterables-工具类" tabindex="-1"><a class="header-anchor" href="#guava-的-iterables-工具类" aria-hidden="true">#</a> guava 的 <strong>Iterables</strong> 工具类</h3><p>guava 在 <em>com.google.common.collect</em> 包下提供了 <strong>Iterables</strong> 工具类。其中有一个 <strong>.isEmpty</strong> 方法，可用于对集合的判空：</p><p>伪代码如下：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Iterables</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>     <span class="token operator">=</span> 抛出异常\n<span class="token class-name">Iterables</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>       <span class="token operator">=</span> <span class="token boolean">true</span>\n<span class="token class-name">Iterables</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span>   <span class="token operator">=</span> <span class="token boolean">false</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="commons-collections4-的-collectionutils-工具类" tabindex="-1"><a class="header-anchor" href="#commons-collections4-的-collectionutils-工具类" aria-hidden="true">#</a> commons-collections4 的 <strong>CollectionUtils</strong> 工具类</h3><p><strong>.isEmpty</strong> 方法用于判断集合是否为空。<code>null</code> 和 <code>size == 0</code> 都是空。</p><p><strong>.isNotEmpty</strong> 方法的判断逻辑与 <em>.isEmpty</em> 方法相反。</p><h2 id="批量添加元素" tabindex="-1"><a class="header-anchor" href="#批量添加元素" aria-hidden="true">#</a> 批量添加元素</h2><h3 id="guava-的-iterables-工具类-1" tabindex="-1"><a class="header-anchor" href="#guava-的-iterables-工具类-1" aria-hidden="true">#</a> guava 的 <strong>Iterables</strong> 工具类</h3><p>guava 在 <em>com.google.common.collect</em> 包下提供了 <strong>Iterables</strong> 工具类。其中有一个 <strong>.addAll</strong> 方法，可用于对参数集合进行批量添加操作：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Iterables</span><span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><em>.addAll</em> 之后，原集合<small>（第一个参数）</small>会发生变化。</p><h3 id="commons-collections4-的-collectionutils-工具类-1" tabindex="-1"><a class="header-anchor" href="#commons-collections4-的-collectionutils-工具类-1" aria-hidden="true">#</a> commons-collections4 的 <strong>CollectionUtils</strong> 工具类</h3><p><strong>.addAll</strong> 方法将 <code>参数2</code> 中的元素，添加至 <code>参数1</code> 中。如果 <code>参数1</code> 并未发生变化，则返回 false 。</p><h2 id="选中-选出某些元素" tabindex="-1"><a class="header-anchor" href="#选中-选出某些元素" aria-hidden="true">#</a> 选中/选出某些元素</h2><h3 id="guava-的-iterables-和-collections2-工具类" tabindex="-1"><a class="header-anchor" href="#guava-的-iterables-和-collections2-工具类" aria-hidden="true">#</a> guava 的 <strong>Iterables</strong> 和 <strong>Collections2</strong> 工具类</h3><p>guava 在 <em>com.google.common.collect</em> 包下提供了 <strong>Iterables</strong> 和 <strong>Collections2</strong> 工具类。</p><p>它们中都存在一个 <strong>.filter</strong> 方法用于从集合中『<strong>选出</strong>』符合条件的元素。</p><p>伪代码如下：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// 结果：{ 2, 4, 6, 8 }</span>\n<span class="token class-name">Iterables</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">,</span> item<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> item <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 结果：{ 1, 3, 4, 7 }</span>\n<span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">,</span> item<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> item <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>注意，这两个方法返回的是源集合的一个『<strong>视图</strong>』<small>（View）</small>，符合第二个参数所表示的匹配规则的元素，会被添加进这个『<strong>视图</strong>』中。</p><p>由于返回的是源集合的『<strong>视图</strong>』，而非一个『<strong>真实集合</strong>』，所以该方法的返回值有一些特殊/有趣的地方：</p><ul><li><p>由于返回的结果是源集合的一个视图而已，所以对其中一个的操作，会影响到另一个。</p></li><li><p>对返回的结果的操作，逻辑上仍然要满足之前的『<strong>匹配规则</strong>』。</p></li></ul><h3 id="commons-collection4-的-collectionutils-工具类和-iterableutils-工具类" tabindex="-1"><a class="header-anchor" href="#commons-collection4-的-collectionutils-工具类和-iterableutils-工具类" aria-hidden="true">#</a> commons-collection4 的 <strong>CollectionUtils</strong> 工具类和 <strong>IterableUtils</strong> 工具类</h3><p><em>CollectionUtils</em> 工具类的 <strong>.select</strong> 方法用于循环遍历，查找，选出元素，所有符合条件的元素都将返回。<small>&gt;原集合内容不变。</small></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// 结果：{2, 4, 6}。源集合不变。</span>\n<span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> item <span class="token operator">-&gt;</span> item <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><em>IterableUtils</em> 工具类的 <strong>find</strong> 可以可以实现 循环，查找、选中的功能，不过它只会返回第一个满足条件的元素。</p><h2 id="剃除某些元素" tabindex="-1"><a class="header-anchor" href="#剃除某些元素" aria-hidden="true">#</a> 剃除某些元素</h2><h3 id="guava-的-collections2-工具类" tabindex="-1"><a class="header-anchor" href="#guava-的-collections2-工具类" aria-hidden="true">#</a> guava 的 <strong>Collections2</strong> 工具类</h3><p>实际上并没有专门的、直接的剔除方法。剔除集合中的某些元素是借助 <strong>Collections2</strong> 的 <strong>.filter</strong> 方法间接实现的。</p><p>由于返回的是源集合的一个视图，所以当我们操作返回结果时会影响到源集合，所以我们只需要对返回结果调用 <strong>clear</strong> 方法清除视图中的元素，即等同于从源集合中删除这些元素：</p><p>伪代码如下：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> oth <span class="token operator">=</span> <span class="token class-name">Collections2</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">,</span> input <span class="token operator">-&gt;</span> input <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\noth<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nlist <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><blockquote><p>注意，Iterables 中的 <em>.filter</em> 无法实现该功能，因为它的返回结果是 Iterable，而 Iterable 中没有后续要使用到的 <em>.clear</em> 方法。</p></blockquote><h3 id="commons-collection4-的-collectionutils-工具类" tabindex="-1"><a class="header-anchor" href="#commons-collection4-的-collectionutils-工具类" aria-hidden="true">#</a> commons-collection4 的 <strong>CollectionUtils</strong> 工具类</h3><p><strong>.filter</strong> 方法的功能是循环遍历集合，查找符合条件的元素，将不符合条件的元素移除。</p><blockquote><p>这个命名和功能与 guava 的 filter 方法区别很大。guava 中的 <em>.filter</em> 是纯查询功能，而 commons-collection4 兼具查询和移除功能，移除的还是不满足条件元素。</p></blockquote><p>如果原集合中至少有 1 个元素被移除，则 filter 方法返回 true 。</p><p>伪代码如下：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// 结果：源集合将变为 {2, 4, 6}</span>\n<span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">}</span><span class="token punctuation">,</span> item <span class="token operator">-&gt;</span> item <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="形变" tabindex="-1"><a class="header-anchor" href="#形变" aria-hidden="true">#</a> 形变</h2><p>形变<small>（transform）</small>是指以一个集合作为『素材』生成另一个集合。</p><p>例如，『手头』有一个 Student 的集合，现在需要获得一个包含所有这些 Student 的 Name 的集合。</p><p>当然，所生成/返回的集合中的元素，一定是与源集合有逻辑上的关系的。</p><h3 id="guava-的-iterables-、collecions2-和-lists-工具类" tabindex="-1"><a class="header-anchor" href="#guava-的-iterables-、collecions2-和-lists-工具类" aria-hidden="true">#</a> guava 的 <strong>Iterables</strong> 、<strong>Collecions2</strong> 和 <strong>Lists</strong> 工具类</h3><p>guava 在 <em>Iterables</em> 中提供了 <strong>.transform</strong> 方法实现形变。伪代码如下：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token class-name">Iterables</span><span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>input<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> input <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nlist<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nlist <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span> <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><em>.transform</em> 方法的第二个参数指明了形变规则，即，所生成集合中的元素的由来，也就是如何通过源集合中的元素生成结果集合中的元素。</p><p>由于 guava 的 <em>.transform</em> <small>（包括上述的 <em>.filter</em> 方法）</small>中采用了懒求值<small>（lazy-evaluated）</small>策略，所以为了防止『莫名其妙的错误』，通常可以再 <em>.transform</em> 方法返回后，立即生成一个新的集合。</p><blockquote><p>懒求值<small>（lazy-evaluated）</small>和立即求值<small>（eager-evaluated）</small>是两种不同的策略，本身没有好坏之分。</p></blockquote><p>Guava 的采用了 lazy-evaluated 策略；而 JDK 8 的 stream 则采用了 eager-evaluated 策略。</p><p><strong>Collecions2</strong> 类和 <strong>Lists</strong> 类中也提供了 <strong>transform</strong> 方法，同能一样，也是参数类型和返回值类型不同。</p><h3 id="commons-collection4-的-collectionutils-工具类-1" tabindex="-1"><a class="header-anchor" href="#commons-collection4-的-collectionutils-工具类-1" aria-hidden="true">#</a> commons-collection4 的 <strong>CollectionUtils</strong> 工具类</h3><p>CollectionUtils 中有 2 个静态方法可以进行循环形变，它们的区别在于是源集合发生变化，还是生成一个新集合：</p><ul><li><p><strong>transform</strong>：发生形变的是源集合。</p></li><li><p><strong>collect</strong>：源集合内容不变，生成一个新集合 |</p></li></ul><p>伪代码如下：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// 结果：{ 1, 2, 3, 4 }     不变，生成新集合</span>\n<span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">,</span> item <span class="token operator">-&gt;</span> <span class="token operator">++</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 结果：{ 2, 3, 4, 5 }     源集合会发生变化</span>\n<span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">,</span> item <span class="token operator">-&gt;</span> <span class="token operator">++</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="比较" tabindex="-1"><a class="header-anchor" href="#比较" aria-hidden="true">#</a> 比较</h2><h3 id="guava-的-iterables-类" tabindex="-1"><a class="header-anchor" href="#guava-的-iterables-类" aria-hidden="true">#</a> guava 的 <strong>Iterables</strong> 类</h3><p>Guava 通过 <strong>Iterables</strong> 类提供了 <strong>elementsEqual</strong> 方法用于比较两个容器。</p><p>实际上，在迭代器工具类 <strong>Iterators</strong> 中也有一个 <strong>elementsEqual</strong> 方法用于比较两个容器，只不过它所需的参数是两个迭代器类型。</p><h3 id="commons-collection4-的-collectionutils-工具类-2" tabindex="-1"><a class="header-anchor" href="#commons-collection4-的-collectionutils-工具类-2" aria-hidden="true">#</a> commons-collection4 的 <strong>CollectionUtils</strong> 工具类</h3><p><strong>isEqualCollection</strong>：判断两个集合是否相等。</p>',70),e={render:function(n,s){return t}}}}]);