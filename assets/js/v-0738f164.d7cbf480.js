"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[3870],{26192:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-0738f164",path:"/spring-mvc/202-%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD.html",title:"Spring MVC 中文件下载",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[],filePathRelative:"spring-mvc/202-文件下载.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},87708:(n,s,a)=>{a.r(s),a.d(s,{default:()=>t});const p=(0,a(66252).uE)('<h1 id="spring-mvc-中文件下载" tabindex="-1"><a class="header-anchor" href="#spring-mvc-中文件下载" aria-hidden="true">#</a> Spring MVC 中文件下载</h1><p>Spring MVC 提供了一个 <strong>ResponseEntity</strong> 类型，使用它可以很方便地定义返回 <strong>HttpHeaders</strong> 和 <strong>HttpStatus</strong> ，以实现下载功能。</p><div class="custom-container tip"><p class="custom-container-title">代码</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/download&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span><span class="token operator">&lt;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token function">download</span><span class="token punctuation">(</span>\n        <span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span>\n        <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">&quot;filename&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> filename<span class="token punctuation">,</span> \n        <span class="token class-name">Model</span> model<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n\n    <span class="token comment">// 1. 准备一个字节数组（字节数组的内容来源于一个文件）。</span>\n    <span class="token comment">//    这个字节数组，就是在本次 HTTP 请求中 Tomcat 要回给客户端浏览器的内容、数据。</span>\n    <span class="token class-name">String</span> path <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">&quot;upload&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>path <span class="token operator">+</span> <span class="token class-name">File</span><span class="token punctuation">.</span>separator <span class="token operator">+</span> filename<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token class-name">FileUtils</span><span class="token punctuation">.</span><span class="token function">readFileToByteArray</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 2. 创建一个 ResponseEntity 对象。它代表着一个 HTTP 响应。</span>\n    <span class="token comment">//    而一个 HTTP 响应又有行-头-体。其中【体】里存放的就是上述的代表文件内容的字节数组</span>\n    <span class="token class-name">HttpHeaders</span> headers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// 解决文件名乱码问题</span>\n    <span class="token comment">// String downloadFileName = new String(filename.getBytes(&quot;UTF-8&quot;), &quot;iso-8859-1&quot;);</span>\n    <span class="token comment">// 第一个放在 header 中的键值对 attachment=xxx</span>\n    headers<span class="token punctuation">.</span><span class="token function">setContentDispositionFormData</span><span class="token punctuation">(</span><span class="token string">&quot;attachment&quot;</span><span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// 第二个放在 header 中的键值对 media-type=xxxx</span>\n    headers<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span>APPLICATION_OCTET_STREAM<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">ResponseEntity</span><span class="token operator">&lt;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> responseEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>\n            bytes<span class="token punctuation">,</span>          <span class="token comment">// 响应体中携带的数据</span>\n            headers<span class="token punctuation">,</span>        <span class="token comment">// 响应头</span>\n            <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span>OK<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 响应行中的状态码</span>\n\n    <span class="token keyword">return</span> responseEntity<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div></div>',3),t={render:function(n,s){return p}}}}]);