"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[844],{6210:(n,a,s)=>{s.r(a),s.d(a,{data:()=>t});const t={key:"v-be078384",path:"/interview-questions/05-spring-mvc.html",title:"Spring MVC",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"1. 简述一下 Spring MVC 的执行流程？",slug:"_1-简述一下-spring-mvc-的执行流程",children:[]},{level:2,title:"2. POJO 和 JavaBean 有什么区别？",slug:"_2-pojo-和-javabean-有什么区别",children:[]},{level:2,title:"3. 如何实现跨域访问？",slug:"_3-如何实现跨域访问",children:[]},{level:2,title:"4. 以下代码描述正确的是？",slug:"_4-以下代码描述正确的是",children:[]},{level:2,title:"5. @RequestMapping 注解的常用属性有哪些？",slug:"_5-requestmapping-注解的常用属性有哪些",children:[]},{level:2,title:"6. 访问以下接口不传递任何参数的情况下，执行的结果是？",slug:"_6-访问以下接口不传递任何参数的情况下-执行的结果是",children:[]},{level:2,title:"7. 访问页面时显示 403 代表的含义是？",slug:"_7-访问页面时显示-403-代表的含义是",children:[]},{level:2,title:"8. forward 和 redirect 有什么区别？",slug:"_8-forward-和-redirect-有什么区别",children:[]},{level:2,title:"9. 访问以下接口不传递任何参数的情况下，执行的结果是？",slug:"_9-访问以下接口不传递任何参数的情况下-执行的结果是",children:[]},{level:2,title:"10. Spring MVC 中如何在后端代码中实现页面跳转？",slug:"_10-spring-mvc-中如何在后端代码中实现页面跳转",children:[]},{level:2,title:"11. Spring MVC 的常用注解有哪些？",slug:"_11-spring-mvc-的常用注解有哪些",children:[]},{level:2,title:"12. 拦截器的使用场景有哪些？",slug:"_12-拦截器的使用场景有哪些",children:[]},{level:2,title:"13. Spring MVC 如何排除拦截目录？",slug:"_13-spring-mvc-如何排除拦截目录",children:[]},{level:2,title:"14. @Validated 和 @Valid 有什么区别 ？",slug:"_14-validated-和-valid-有什么区别",children:[]},{level:2,title:"15. Spring MVC 有几种获取 request 的方式？",slug:"_15-spring-mvc-有几种获取-request-的方式",children:[]}],filePathRelative:"interview-questions/05-spring-mvc.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},19511:(n,a,s)=>{s.r(a),s.d(a,{default:()=>e});const t=(0,s(66252).uE)('<h1 id="spring-mvc" tabindex="-1"><a class="header-anchor" href="#spring-mvc" aria-hidden="true">#</a> Spring MVC</h1><h2 id="_1-简述一下-spring-mvc-的执行流程" tabindex="-1"><a class="header-anchor" href="#_1-简述一下-spring-mvc-的执行流程" aria-hidden="true">#</a> 1. 简述一下 Spring MVC 的执行流程？</h2><p>答：前端控制器（DispatcherServlet） 接收请求，通过映射从 IoC 容器中获取对应的 Controller 对象和 Method 方法，在方法中进行业务逻辑处理组装数据，组装完数据把数据发给视图解析器，视图解析器根据数据和页面信息生成最终的页面，然后再返回给客户端。</p><h2 id="_2-pojo-和-javabean-有什么区别" tabindex="-1"><a class="header-anchor" href="#_2-pojo-和-javabean-有什么区别" aria-hidden="true">#</a> 2. POJO 和 JavaBean 有什么区别？</h2><p>答：POJO 和 JavaBean 的区别如下：</p><ul><li>POJO（Plain Ordinary Java Object）普通 Java 类，具有 getter/setter 方法的普通类都就可以称作 POJO，它是 DO/DTO/BO/VO 的统称，禁止命名成 xxxPOJO。</li><li>JavaBean 是 Java 语言中的一种可重用组件，JavaBean 的构造函数和行为必须符合特定的约定：这个类必须有一个公共的缺省构造函数；这个类的属性使用 getter/setter 来访问，其他方法遵从标准命名规范；这个类应是可序列化的。</li></ul><p>简而言之，当一个 POJO 可序列化，有一个无参的构造函数，它就是一个 JavaBean。</p><h2 id="_3-如何实现跨域访问" tabindex="-1"><a class="header-anchor" href="#_3-如何实现跨域访问" aria-hidden="true">#</a> 3. 如何实现跨域访问？</h2><p>答：常见的跨域的实现方式有两种：使用 Nginx 代理或者在服务器端设置运行跨域。服务器运行跨域的代码如下：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">CorsRegistry</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">WebMvcConfigurer</span><span class="token punctuation">;</span>\n\n<span class="token annotation punctuation">@Configuration</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyConfiguration</span> <span class="token punctuation">{</span>\n\n    <span class="token annotation punctuation">@Bean</span>\n    <span class="token keyword">public</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token function">corsConfigurer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">WebMvcConfigurer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token annotation punctuation">@Override</span>\n            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addCorsMappings</span><span class="token punctuation">(</span><span class="token class-name">CorsRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token comment">// 设置允许跨域的请求规则</span>\n                registry<span class="token punctuation">.</span><span class="token function">addMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/api/**&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h2 id="_4-以下代码描述正确的是" tabindex="-1"><a class="header-anchor" href="#_4-以下代码描述正确的是" aria-hidden="true">#</a> 4. 以下代码描述正确的是？</h2><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">&quot;/list&quot;</span><span class="token punctuation">,</span>params<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&quot;age=10&quot;</span><span class="token punctuation">}</span>\n<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n   <span class="token comment">// do something</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>A：age 参数不传递的时候，默认值是 10<br> B：age 参数可以为空<br> C：age 参数不能为空<br> D：以上都不对</p><p>答：C</p><p><code>params={&quot;age=10&quot;}</code> 表示必须包含 age 参数，且值必须等于 10。</p><h2 id="_5-requestmapping-注解的常用属性有哪些" tabindex="-1"><a class="header-anchor" href="#_5-requestmapping-注解的常用属性有哪些" aria-hidden="true">#</a> 5. @RequestMapping 注解的常用属性有哪些？</h2><p>答：@RequestMapping 常用属性如下：</p><ul><li>value：指定 URL 请求的实际地址，用法：@RequestMapping(value=&quot;/index&quot;)；</li><li>method：指定请求的 method 类型，如 GET/POST/PUT/DELETE 等，用法：@RequestMapping(value=&quot;/list&quot;,method=RequestMethod.POST)；</li><li>params：指定请求参数中必须包含的参数名称，如果不存在该名称，则无法调用此方法，用法：@RequestMapping(value=&quot;/list&quot;,params={&quot;name&quot;,&quot;age&quot;})。</li></ul><h2 id="_6-访问以下接口不传递任何参数的情况下-执行的结果是" tabindex="-1"><a class="header-anchor" href="#_6-访问以下接口不传递任何参数的情况下-执行的结果是" aria-hidden="true">#</a> 6. 访问以下接口不传递任何参数的情况下，执行的结果是？</h2><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">&quot;/list&quot;</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@ResponseBody</span>\n<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token string">&quot;id=&quot;</span><span class="token operator">+</span>id<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>A：id=0<br> B：id=<br> C：页面报错 500<br> D：id=null</p><p>答：C</p><p>页面报错会提示：可选的参数 <code>id</code> 不能转为 null，因为基本类型不能赋值 null，所以会报错。</p><h2 id="_7-访问页面时显示-403-代表的含义是" tabindex="-1"><a class="header-anchor" href="#_7-访问页面时显示-403-代表的含义是" aria-hidden="true">#</a> 7. 访问页面时显示 403 代表的含义是？</h2><p>A：服务器繁忙<br> B：找不到该页面<br> C：禁止访问<br> D：服务器跳转中</p><p>答：C</p><p>常用 HTTP 状态码及对应的含义：</p><table><thead><tr><th style="text-align:left;">HTTP 状态码</th><th style="text-align:left;">含义</th></tr></thead><tbody><tr><td style="text-align:left;">400</td><td style="text-align:left;">错误请求，服务器不理解请求的语法</td></tr><tr><td style="text-align:left;">401</td><td style="text-align:left;">未授权，请求要求身份验证</td></tr><tr><td style="text-align:left;">403</td><td style="text-align:left;">禁止访问，服务器拒绝请求</td></tr><tr><td style="text-align:left;">500</td><td style="text-align:left;">服务器内部错误，服务器遇到错误，无法完成请求</td></tr><tr><td style="text-align:left;">502</td><td style="text-align:left;">错误网关，服务器作为网关或代理，从上游服务器收到无效响应</td></tr><tr><td style="text-align:left;">504</td><td style="text-align:left;">网关超时，服务器作为网关或代理，但是没有及时从上游服务器收到请求</td></tr></tbody></table><h2 id="_8-forward-和-redirect-有什么区别" tabindex="-1"><a class="header-anchor" href="#_8-forward-和-redirect-有什么区别" aria-hidden="true">#</a> 8. forward 和 redirect 有什么区别？</h2><p>答：forward 和 redirect 区别如下：</p><ul><li><p>forward 表示请求转发，请求转发是服务器的行为；redirect 表示重定向，重定向是客户端行为；</p></li><li><p>forward 是服务器请求资源，服务器直接访问把请求的资源转发给浏览器，浏览器根本不知道服务器的内容是从哪来的，因此它的地址栏还是原来的地址；redirect 是服务端发送一个状态码告诉浏览器重新请求新的地址，因此地址栏显示的是新的 URL；</p></li><li><p>forward 转发页面和转发到的页面可以共享 request 里面的数据；redirect 不能共享数据；</p></li><li><p>从效率来说，forward 比 redirect 效率更高。</p></li></ul><h2 id="_9-访问以下接口不传递任何参数的情况下-执行的结果是" tabindex="-1"><a class="header-anchor" href="#_9-访问以下接口不传递任何参数的情况下-执行的结果是" aria-hidden="true">#</a> 9. 访问以下接口不传递任何参数的情况下，执行的结果是？</h2><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">&quot;/list&quot;</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@ResponseBody</span>\n<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token string">&quot;id=&quot;</span><span class="token operator">+</span>id<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>A：id=0<br> B：id=<br> C：页面报错 500<br> D：id=null</p><p>答：D</p><p>包装类可以赋值 null，不会报错。</p><h2 id="_10-spring-mvc-中如何在后端代码中实现页面跳转" tabindex="-1"><a class="header-anchor" href="#_10-spring-mvc-中如何在后端代码中实现页面跳转" aria-hidden="true">#</a> 10. Spring MVC 中如何在后端代码中实现页面跳转？</h2><p>答：在后端代码中可以使用 forward:/index.jsp 或 redirect:/index.jsp 完成页面跳转，前者 URL 地址不会发生改变，或者 URL 地址会发生改变，完整跳转代码如下：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/redirect&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">redirectTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token string">&quot;redirect:/index.jsp&quot;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="_11-spring-mvc-的常用注解有哪些" tabindex="-1"><a class="header-anchor" href="#_11-spring-mvc-的常用注解有哪些" aria-hidden="true">#</a> 11. Spring MVC 的常用注解有哪些？</h2><p>答：Spring MVC 的常用注解如下：</p><table><thead><tr><th style="text-align:left;">常用注解</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">@Controller</td><td style="text-align:left;">用于标记某个类为控制器</td></tr><tr><td style="text-align:left;">@ResponseBody</td><td style="text-align:left;">标识返回的数据不是 html 标签的页面，而是某种格式的数据，如 JSON、XML 等</td></tr><tr><td style="text-align:left;">@RestController</td><td style="text-align:left;">相当于 @Controller 加 @ResponseBody 的组合效果</td></tr><tr><td style="text-align:left;">@Component</td><td style="text-align:left;">标识为 Spring 的组件</td></tr><tr><td style="text-align:left;">@Configuration</td><td style="text-align:left;">用于定义配置类</td></tr><tr><td style="text-align:left;">@RequestMapping</td><td style="text-align:left;">用于映射请求地址的注解</td></tr><tr><td style="text-align:left;">@Autowired</td><td style="text-align:left;">自动装配对象</td></tr><tr><td style="text-align:left;">@RequestHeader</td><td style="text-align:left;">可以把 Request 请求的 header 值绑定到方法的参数上</td></tr></tbody></table><h2 id="_12-拦截器的使用场景有哪些" tabindex="-1"><a class="header-anchor" href="#_12-拦截器的使用场景有哪些" aria-hidden="true">#</a> 12. 拦截器的使用场景有哪些？</h2><p>答：拦截器的典型使用场景如下：</p><ul><li>日志记录：可用于记录请求日志，便于信息监控和信息统计；</li><li>权限检查：可用于用户登录状态的检查；</li><li>统一安全处理：可用于统一的安全效验或参数的加密 / 解密等。</li></ul><h2 id="_13-spring-mvc-如何排除拦截目录" tabindex="-1"><a class="header-anchor" href="#_13-spring-mvc-如何排除拦截目录" aria-hidden="true">#</a> 13. Spring MVC 如何排除拦截目录？</h2><p>答：在 Spring MVC 的配置文件中，添加 ，用于排除拦截目录，完整配置的示例代码如下：</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptors</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/**<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n        <span class="token comment">&lt;!-- 排除拦截地址 --&gt;</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>exclude-mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/api/**<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.learning.core.MyInteceptor<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptors</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="_14-validated-和-valid-有什么区别" tabindex="-1"><a class="header-anchor" href="#_14-validated-和-valid-有什么区别" aria-hidden="true">#</a> 14. @Validated 和 @Valid 有什么区别 ？</h2><p>答：@Validated 和 @Valid 都用于参数的效验，不同的是：</p><ul><li><p>@Valid 是 Hibernate 提供的效验机制，Java 的 JSR 303 声明了 @Valid 这个类接口，而 Hibernate-validator 对其进行了实现；@Validated 是 Spring 提供的效验机制，@Validation 是对 @Valid 进行了二次封装，提供了分组功能，可以在参数验证时，根据不同的分组采用不同的验证机制；</p></li><li><p>@Valid 可用在成员对象的属性字段验证上，而 @Validated 不能用在成员对象的属性字段验证上，也就是说 @Validated 无法提供嵌套验证。</p></li></ul><h2 id="_15-spring-mvc-有几种获取-request-的方式" tabindex="-1"><a class="header-anchor" href="#_15-spring-mvc-有几种获取-request-的方式" aria-hidden="true">#</a> 15. Spring MVC 有几种获取 request 的方式？</h2><p>答：Spring MVC 获取 request 有以下三种方式：</p><ol><li><p>从请求参数中获取</p><p>示例代码：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/index&quot;</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@ResponseBody</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// do something</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>该方法实现的原理是 Controller 开始处理请求时，Spring 会将 request 对象赋值到方法参数中。</p></li><li><p>通过 RequestContextHolder上下文获取 request 对象</p><p>示例代码：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/index&quot;</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@ResponseBody</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token class-name">ServletRequestAttributes</span> servletRequestAttributes <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ServletRequestAttributes</span><span class="token punctuation">)</span><span class="token class-name">RequestContextHolder</span><span class="token punctuation">.</span><span class="token function">getRequestAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">HttpServletRequest</span> request <span class="token operator">=</span> servletRequestAttributes<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n   <span class="token comment">// do something</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></li><li><p>通过自动注入的方式</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Controller</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HomeController</span><span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@Autowired</span>\n    <span class="token keyword">private</span> <span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">;</span> <span class="token comment">// 自动注入 request 对象</span>\n    <span class="token comment">// do something</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></li></ol>',54),e={render:function(n,a){return t}}}}]);