"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[1934],{43569:(n,a,s)=>{s.r(a),s.d(a,{data:()=>t});const t={key:"v-41ad35aa",path:"/maven/101-%E7%88%B6%E5%AD%90%E6%A8%A1%E5%9D%97.html",title:"Mavan 父子模块（继承）",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"父项目",slug:"父项目",children:[]},{level:2,title:"子项目",slug:"子项目",children:[]},{level:2,title:"父子项目的使用",slug:"父子项目的使用",children:[]}],filePathRelative:"maven/101-父子模块.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},44500:(n,a,s)=>{s.r(a),s.d(a,{default:()=>e});const t=(0,s(66252).uE)('<h1 id="mavan-父子模块-继承" tabindex="-1"><a class="header-anchor" href="#mavan-父子模块-继承" aria-hidden="true">#</a> Mavan 父子模块（继承）</h1><p>『<strong>继承</strong>』是 Maven 中很强大的一种功能，继承可以使得子 pom 可以获得 parent 中的各项配置，可以对子 pom 进行统一的配置和依赖管理。</p><p>简而言之，继承是为了抽取多个模块的公共配置，以实现统一/简化配置的目的。</p><p>父 pom 中的大多数元素都能被子 POM 继承。『<strong>除了以下元素外</strong>』，其它元素均可被子模块继承：</p><ul><li><p>artifactId</p></li><li><p>name</p></li><li><p>prerequisites</p></li></ul><h2 id="父项目" tabindex="-1"><a class="header-anchor" href="#父项目" aria-hidden="true">#</a> 父项目</h2><p>通常 Maven 的父项目是一个特殊项目，本质上『<strong>它是因为了复用配置而存在的项目</strong>』而并非一个实际意义上的真实的项目。</p><p><strong>注意</strong>：父项目的 <em>&lt;packaging&gt;</em> 类型是 <em>pom</em> 类型，既非 <em>jar</em> 类型，也非 <em>war</em> 类型。</p><p>父项目并不是一个真正的项目，因此父项目下完全不需要存在 <em>java</em> 包和 <em>resources</em> 包，父项目下只需要存在一个 <em>pom.xml</em> 文件，其它皆非必须。</p><h2 id="子项目" tabindex="-1"><a class="header-anchor" href="#子项目" aria-hidden="true">#</a> 子项目</h2><p>为一个子项目指定父项目只需要在其 <em>pom.xml</em> 中添加 <em>&lt;parent&gt;</em> 元素即可。</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">&quot;</span></span>\n    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">&quot;</span></span>\n    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://maven.apache.org/POM/4.0.0\n        https://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.codehaus.mojo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>my-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">&gt;</span></span>这里有所不同<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>relativePath</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>my-project<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p><em>&lt;relativePath&gt;</em> 元素用于指明本项目<small>（子项目）</small>的父项目的 pom 文件的路径名。例如：</p><ul><li><p><em>&lt;relativePath&gt;../pom.xml&lt;/relativePath&gt;</em></p><p>在硬盘上的目录层次结构中，子模块在父模块的『里面』。</p></li><li><p><em>&lt;relativePath&gt;../parent-module/pom.xml&lt;/relativePath&gt;</em></p><p>在硬盘上的目录层次结构中，子模块和父模块『平级』。</p></li><li><p><em>&lt;relativePath /&gt;</em></p><p>Maven 就不关心子模块和父模块在硬盘上的目录层次结构。它要求父模块在本地仓库中存在。</p></li></ul><p>如果完全没有 <em>&lt;relativePath&gt;</em> 元素，等同于：<code>&lt;relativePath&gt;../pom.xml&lt;relativePath&gt;</code> ，即，子模块要在父模块『里面』。</p><p><strong>注意</strong>：子项目不一定非得新建在父项目内。所以，默认的 <strong>../pom.xml</strong> 并一定总是对的。</p><h2 id="父子项目的使用" tabindex="-1"><a class="header-anchor" href="#父子项目的使用" aria-hidden="true">#</a> 父子项目的使用</h2><p>通常，让子项目重用父项目的配置，有 2 种表现形式：</p><ol><li><p>父项目中定义 <strong>&lt;dependencies&gt;</strong>，子项目『<strong>天然继承</strong>』了父项目的 <strong>&lt;dependences&gt;</strong>，从而不再需要引入这些依赖。</p></li><li><p>父项目通过配置 <strong>&lt;dependencyManagement&gt;</strong> 定义依赖包的版本，子项目不用则已，一旦使用这些包中的某个<small>（或某些）</small>，则不再需要指定它们的版本信息。</p><p>另外，有 <strong>&lt;dependencyManagement&gt;</strong> 自然就有 <strong>&lt;pluginManagement&gt;</strong> 。</p><p>整体结构<small>（其它无关元素略）</small>：</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code>project \n├── dependencyManagement\n│   └── dependencies\n│       ├── dependency\n│       └── ...\n└── build\n    └── pluginManagement\n        └── plugins\n            ├── plugin\n            └── ...\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div></li></ol>',19),e={render:function(n,a){return t}}}}]);