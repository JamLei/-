"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[6028],{44636:(n,a,s)=>{s.r(a),s.d(a,{data:()=>e});const e={key:"v-edf0ee1c",path:"/jvm/02-Java%E5%BC%95%E7%94%A8%E7%9A%84%E5%BC%BA%E8%BD%AF%E5%BC%B1%E8%99%9A.html",title:"Java 引用的强软弱虚",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"1. Objective-C 中的引用计数",slug:"_1-objective-c-中的引用计数",children:[]},{level:2,title:"2. Java 中的强引用",slug:"_2-java-中的强引用",children:[]},{level:2,title:"3. Java 中的软引用和弱引用",slug:"_3-java-中的软引用和弱引用",children:[{level:3,title:"Java 中的软引用",slug:"java-中的软引用",children:[]},{level:3,title:"Java 中的弱引用",slug:"java-中的弱引用",children:[]},{level:3,title:"Java 中的虚引用",slug:"java-中的虚引用",children:[]},{level:3,title:"扩展：为什么 OC 会提出弱引用的概念？",slug:"扩展-为什么-oc-会提出弱引用的概念",children:[]}]}],filePathRelative:"jvm/02-Java引用的强软弱虚.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},880:(n,a,s)=>{s.r(a),s.d(a,{default:()=>p});const e=(0,s(66252).uE)('<h1 id="java-引用的强软弱虚" tabindex="-1"><a class="header-anchor" href="#java-引用的强软弱虚" aria-hidden="true">#</a> Java 引用的强软弱虚</h1><p>Java 的引用的类型有四种：强引用、软引用、弱引用和虚引用。它们背后关系到 JVM 的垃圾回收机制回收内存的时机。</p><blockquote><p>提前声明以下，这是纯理论概念，我们日常写代码的时候并不会涉及到软弱虚引用，通常只会涉及到强引用。</p></blockquote><p>强软弱虚四种类型的引用的概念其实并非 Java 语言所特有，例如，苹果公司的 Objective-C 语言中同样也有一样的概念。</p><h2 id="_1-objective-c-中的引用计数" tabindex="-1"><a class="header-anchor" href="#_1-objective-c-中的引用计数" aria-hidden="true">#</a> 1. Objective-C 中的引用计数</h2><p>苹果公司的 Objective-C 语言是没有垃圾回收机制的，那么为了解决回收内存行为不当所造成的内存泄露和 double free 问题，苹果公司为 Objective-C 语言引入了【<strong>引用计数</strong>】的概念，并将指针类型细化为强弱指针两种。</p><blockquote><p>为了便于大家类比，我们后文就将 OC 中的指针“不严谨地”称为引用，将分配在堆空间的内存“不严谨地”称为对象。</p></blockquote><p>Objective-C 的编译器在编译 OC 源码的时候会去记录、统计一个对象的引用的数量，这个值也就是这个对象的【引用计数】。</p><p>当没有任何一个引用指向这个对象时，即这个对象的引用计数变为 0 时，编译器会在导致引用计数从 1 变为 0 的那条语句的后面，【帮】你加上一条释放内存空间的语句。</p><p>通过这样一种 <code>记录、统计对象的引用计数</code> + <code>【帮】你加释放内存的代码</code> 从而实现帮助 OC 程序员释放内存，管理内存空间，达到避免内存泄漏和 double free 的目的。</p><p>那这和【强弱引用】有什么关系？</p><p><strong>并不是所有的引用都会导致对象的引用计数 +1</strong> 。</p><p>如果是一个强引用指向了对象，那么对象的引用计数 +1，如果是一个弱引用指向了对象，那么对象的引用计数不受影响。</p><p>伪代码如下：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>__strong <span class="token class-name">Student</span> tom <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>\n__strong <span class="token class-name">Student</span> jerry <span class="token operator">=</span> tom<span class="token punctuation">;</span> <span class="token comment">// 2</span>\n__weak <span class="token class-name">Student</span> lucy <span class="token operator">=</span> tom<span class="token punctuation">;</span> <span class="token comment">// 3</span>\n__weak <span class="token class-name">Student</span> lily <span class="token operator">=</span> jerry<span class="token punctuation">;</span> <span class="token comment">// 4</span>\ntom <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// 5</span>\njerry <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// 6</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>以上的代码中，有且仅有一个对象，而 <code>tom</code>、<code>jerry</code>、<code>lucy</code> 和 <code>lily</code> 是四个引用类型变量，它们都指向的是同一个对象。</p><p><code>代码1</code> 执行完后，Student 对象的引用计数为 1；<code>代码2</code>执行完后，Student 对象的引用计数 +1 变为 2，因为此时有两个强引用指向了这个对象；</p><p><code>代码3</code> 和 <code>代码4</code> 执行完后，Student 对象的引用计数仍然为 2，因为，即便 lucy 和 lily 这两个引用确实指向的是这个对象，但是谁叫它们“低人一等”是 <strong>弱引用</strong> 呢。</p><p><code>代码5</code> 执行完后，Student 对象的引用计数从 2 降为 1，因为此时，只有 jerry 这一个强引用指向了 Student 对象；而 <code>代码6</code> 执行完后，Student 对象的引用计数就将为了 0 。</p><p>在 OC 的编译器编译源码时，它会在 <code>代码6</code> 之后【帮】我们加上一句释放 Student 对象所占内存空间的语句，即释放内存空间。</p><blockquote><p>在内存和释放后，<code>lucy</code> 和 <code>lily</code> 这两个引用类型的变量实际上就指向了一块已回收的存空间，这个时候，你再通过 <code>lucy.xxx</code> 和 <code>lily.xxx</code> 来操作、访问这块内存空间的话，就会报运行时错误（大名鼎鼎的 Segment Fault）。</p></blockquote><h2 id="_2-java-中的强引用" tabindex="-1"><a class="header-anchor" href="#_2-java-中的强引用" aria-hidden="true">#</a> 2. Java 中的强引用</h2><p>Java 语言没有引用计数的概念，但是 Java 中的强弱引用的概念和 OC 中的强弱引用的概念是一模一样的。</p><p>强引用会影响对象被垃圾回收机制回收；而弱引用则对内存的回收无影响。</p><p><strong>我们日常编码所涉及到的引用全部都是强引用</strong>，例如：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Student</span> tom <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token class-name">Student</span> jerry <span class="token operator">=</span> tom<span class="token punctuation">;</span>\n<span class="token class-name">Student</span> lucy <span class="token operator">=</span> tom<span class="token punctuation">;</span>\n<span class="token class-name">Student</span> lily <span class="token operator">=</span> jerry<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>上述代码中，有 4 个引用指向了同一个对象。只要至少还存在一个引用指向这个对象，那么，这个 Student 对象的内存空间就不会被 JVM 回收。</p><p>最极端的情况下，如果所有的对象都至少存在一个强引用指向它，而随着系统中的对象越来越多，到最后内存不够用了，JVM 会抛出 OutOfMemoryError 异常。</p><p>JVM 哪怕最后“忍无可忍”抛出异常，它也<strong>一定不会回收</strong>仍然被使用的对象所占据的内容空间。逻辑上，也理应如此。</p><h2 id="_3-java-中的软引用和弱引用" tabindex="-1"><a class="header-anchor" href="#_3-java-中的软引用和弱引用" aria-hidden="true">#</a> 3. Java 中的软引用和弱引用</h2><p>和 OC 中的弱引用一样，Java 中的软弱引用也“低人一等”。软弱引用不会影响到 Java 的垃圾回收机制回收内存。</p><p>但是，软引用又比弱引用要“高”半个身位。</p><h3 id="java-中的软引用" tabindex="-1"><a class="header-anchor" href="#java-中的软引用" aria-hidden="true">#</a> Java 中的软引用</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Student</span> tom <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">SoftReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> jerry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SoftReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>tom<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\ntom <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>上述代码中的 jerry 就是一个弱引用。理论上，当 <code>tom = null</code> 之后，Student 对象就应该被垃圾回收机制回收。</p><p>不过“理论是理论，现实是现实”，在 <code>tom = null</code> 之后还有一些“小故事”。</p><p>“故事一”，JVM 的垃圾回收机制并不是时时刻刻保持运行的。由于垃圾回收器是一个优先级很低的线程，所以 JVM 的垃圾回收器是“间歇性、间歇性地起来干活”的。</p><blockquote><p>另外，现在的 JVM 机制中，你手动调用 <code>System.gc();</code> JVM 也不保证垃圾回收器立刻起来干活。</p></blockquote><p>因此，在你的 <code>tom = null</code> 之后，即便是 Student 对象没有强引用指向了，即逻辑上没人用了，但是实际上它还是要在内存中存在一段时间的。</p><p>“故事二”，即便是“软引用低人一等”，但是，JVM 的垃圾回收器仍让会对有软引用指向的对象网开一面。如果内存还有“富余”，垃圾回收器就不会回收软引用所指向的内存的对象。</p><p>也就是说，垃圾回收器的逻辑的伪代码类似如下：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>对象<span class="token punctuation">.</span>强引用数 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 准备释放内存</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>对象<span class="token punctuation">.</span>软引用数 <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> 内存够用<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment">// 网开一面</span>\n        暂不释放对象内存<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        释放对象内存<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="java-中的弱引用" tabindex="-1"><a class="header-anchor" href="#java-中的弱引用" aria-hidden="true">#</a> Java 中的弱引用</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Student</span> tom <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">WeakReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> jerry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>tom<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>弱引用就没有软引用那么好命，JVM 的垃圾回收器不会对它网开一面，只要对象的没有强引用了，无论有多少弱引用指向这个对象，也无论此时内存够不够用，JVM 的垃圾回收器都会回收内存。</p><blockquote><p>从这个角度看，其实你可以将 <strong>软引用</strong> 看做是 <strong>弱引用</strong> 的一种特殊情况。软引用是会被垃圾回收器网开一面的弱引用。</p></blockquote><p>不过，考虑上面所提到的垃圾回收器是一个优先级很低的线程，因此一个只有弱引用指向的对象，它还是有一段时间苟延残喘的：垃圾回收器还没起来干活，还没发现它。</p><h3 id="java-中的虚引用" tabindex="-1"><a class="header-anchor" href="#java-中的虚引用" aria-hidden="true">#</a> Java 中的虚引用</h3><p>虚引用和弱引用一样，它不影响垃圾回收器回收内存。一个仅有虚引用的对象，一旦被垃圾回收器发现，就会被回收内存。</p><p>虚引用主要用来跟踪对象被垃圾回收器回收的活动。虚引用的级别比弱引用更低：弱引用 <strong>可以</strong> 和引用队列（ReferenceQueue）联合使用；而虚引用 <strong>只能</strong> 和引用队列联合使用。</p><h3 id="扩展-为什么-oc-会提出弱引用的概念" tabindex="-1"><a class="header-anchor" href="#扩展-为什么-oc-会提出弱引用的概念" aria-hidden="true">#</a> 扩展：为什么 OC 会提出弱引用的概念？</h3><p>Objective-C 的引用计数的概念可以帮助大家理解垃圾回收的概念，但是大家有没有发现，如果只有强引用的概念，仅凭对象的强引用的计数来决定这个对象是否应该被销毁，回收内存，会有一个问题：<strong>循环引用</strong> 。</p><p>例如，有如下两个类定义：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>\n<span class="token keyword">class</span> <span class="token class-name">Husband</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n\n   <span class="token keyword">private</span> <span class="token class-name">Wife</span> wife<span class="token punctuation">;</span>\n   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Wife</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n    <span class="token keyword">private</span> <span class="token class-name">Husband</span> husband<span class="token punctuation">;</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>如果有丈夫、妻子两个对象互相引用，会出现什么问题？</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Husband</span> tom <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Husband</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">Wife</span> jerry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Wife</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\ntom<span class="token punctuation">.</span><span class="token function">setWife</span><span class="token punctuation">(</span>jerry<span class="token punctuation">)</span><span class="token punctuation">;</span>\njerry<span class="token punctuation">.</span><span class="token function">setHusband</span><span class="token punctuation">(</span>tom<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>因为 tom 和 jerry 互相持有对方的一个强引用，因此，在 OC 中 <strong>丈夫和妻子对象的引用计数永不为 0</strong> ，这就是【循环引用】。这种情况下，靠 OC 的编译器去【帮】我们加释放内存的代码，编译器是不会【帮】这个忙的，在它看来，这两个对象【还在被使用】啊？！</p><blockquote><p>对于这种情况，就只能靠程序员自己调用 <code>free()</code> 手动释放。</p></blockquote><p>当然，这只是最简单的循环引用情况，更复杂一点的可能是 A-&gt;B-&gt;C-&gt;D-&gt;E-&gt;A 这么一大圈的循环引用。</p><p>所有，这种情况下，OC 引入弱引用的概念，将两者中的某一方所持有的对方的引用从强引用改为弱引用，让整个【圈】中的某一个对象的引用计数能够变为 0，从而从它开始逐个释放掉整个【圈】中的各个对象的内存，进而解决这个循环依赖引用问题。</p><hr><p>当然，在 Java 中我们不用考虑这个问题，因为判断多个对象之间是否存在循环引用问题，这个事情 JVM 的垃圾回收器它自己就干了，不需要我们像 OC 一样【亲自】通过弱引用来解决这个问题。</p><p>这也是我们日常编码中用不上软弱虚引用的原因。</p>',63),p={render:function(n,a){return e}}}}]);