"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[5862],{18633:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-7e40d674",path:"/utility/apache-commons/02-commons-collections4.html",title:"Commons Collections 常用方法",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"写在前面的话",slug:"写在前面的话",children:[]},{level:2,title:"IterableUtils 工具类",slug:"iterableutils-工具类",children:[]},{level:2,title:"CollectionUtils 工具类",slug:"collectionutils-工具类",children:[]},{level:2,title:"扩展的数据结构",slug:"扩展的数据结构",children:[{level:3,title:"Bag 接口",slug:"bag-接口",children:[]},{level:3,title:"MultiSet 接口",slug:"multiset-接口",children:[]},{level:3,title:"BidiMap 接口",slug:"bidimap-接口",children:[]},{level:3,title:"MultiKeyMap 类",slug:"multikeymap-类",children:[]}]}],filePathRelative:"utility/apache-commons/02-commons-collections4.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},26643:(n,s,a)=>{a.r(s),a.d(s,{default:()=>p});const t=(0,a(66252).uE)('<h1 id="commons-collections-常用方法" tabindex="-1"><a class="header-anchor" href="#commons-collections-常用方法" aria-hidden="true">#</a> Commons Collections 常用方法</h1><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>commons-collections4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="写在前面的话" tabindex="-1"><a class="header-anchor" href="#写在前面的话" aria-hidden="true">#</a> 写在前面的话</h2><p>commons-collections 包诞生的原因<small>（和 guava 库一样）</small>是对 JDK 中的集合框架的扩展。但是其功能和代码质量要稍逊于 Guava 库。</p><p>推荐使用 Guava 库。</p><h2 id="iterableutils-工具类" tabindex="-1"><a class="header-anchor" href="#iterableutils-工具类" aria-hidden="true">#</a> IterableUtils 工具类</h2><p><em><code>Iterable</code></em> 的概念涵盖了 <strong>数组</strong> 和 <strong>集合</strong> 。所以，下述的方法可以作用于数组，而后续的 CollectionUtils 中的方法就只能作用于集合。</p><table><thead><tr><th style="text-align:left;">方法</th><th style="text-align:left;">说明</th><th style="text-align:left;">备注</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>find</strong></td><td style="text-align:left;">循环，查找/选中</td><td style="text-align:left;">只会返回第一个满足条件的元素</td></tr><tr><td style="text-align:left;"><strong>forEach</strong></td><td style="text-align:left;">循环，执行</td><td style="text-align:left;"></td></tr></tbody></table><h2 id="collectionutils-工具类" tabindex="-1"><a class="header-anchor" href="#collectionutils-工具类" aria-hidden="true">#</a> CollectionUtils 工具类</h2><table><thead><tr><th style="text-align:left;">方法</th><th style="text-align:left;">说明</th><th style="text-align:left;">备注</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>isEmpty</strong></td><td style="text-align:left;">判断，要求集合为空</td><td style="text-align:left;"><code>null</code> 也算作空</td></tr><tr><td style="text-align:left;"><strong>isNotEmpty</strong></td><td style="text-align:left;">判断，要求集合为非空</td><td style="text-align:left;"><code>null</code> 也算作空</td></tr><tr><td style="text-align:left;"><strong>addAll</strong></td><td style="text-align:left;">将<code>参数2</code>中的元素，添加至<code>参数1</code>中。</td><td style="text-align:left;">如果<code>参数1</code>并未发生变化，则返回 false 。</td></tr><tr><td style="text-align:left;"><strong>isEqualCollection</strong></td><td style="text-align:left;">判断两个集合是否相等</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;"><strong>select</strong></td><td style="text-align:left;">循环遍历，查找，选出元素</td><td style="text-align:left;">所有符合条件的元素都将返回<br>原集合内容不变</td></tr><tr><td style="text-align:left;"><strong>filter</strong></td><td style="text-align:left;">循环遍历，查找，删除元素</td><td style="text-align:left;">所有符合条件的元素将被留下，<br><strong>不符合的</strong>元素都将从容器中删除。<br>原集合内容会变。 <br> 如果原集合中至少有 1 个元素被移除，则 filter 方法返回 true 。</td></tr><tr><td style="text-align:left;"><strong>transform</strong></td><td style="text-align:left;">循环遍历，形变</td><td style="text-align:left;">原集合内容会发生变化。</td></tr><tr><td style="text-align:left;"><strong>collect</strong></td><td style="text-align:left;">循环遍历，形变</td><td style="text-align:left;">原集合内容不变，生成一个新集合</td></tr></tbody></table><h2 id="扩展的数据结构" tabindex="-1"><a class="header-anchor" href="#扩展的数据结构" aria-hidden="true">#</a> 扩展的数据结构</h2><h3 id="bag-接口" tabindex="-1"><a class="header-anchor" href="#bag-接口" aria-hidden="true">#</a> Bag 接口</h3><p>Bag 的行为似乎是介于 Set 和 Map 之间，向 Bag 中添加重复数据时，Bag 不会记录数据本身，而是去记录数据出现/添加的次数。</p><p>Bag 接口继承自 Collection 接口，它有两个常见实现类：</p><ul><li><p><strong>HashBag</strong></p></li><li><p><strong>TreeBag</strong></p></li></ul><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Bag</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> b1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashBag</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nb1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nb1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nb1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nb1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nb1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nb1<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">4</span>\nb1<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span>\n\nb1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">5</span>\nb1<span class="token punctuation">.</span><span class="token function">uniqueSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p><strong>注意</strong>，从 bag 中移除元素时，<strong>并非</strong>将其数显次数减一，而是类似移除 Map 中的键值对一样，将该元素及其所有出现次数都移除。</p><h3 id="multiset-接口" tabindex="-1"><a class="header-anchor" href="#multiset-接口" aria-hidden="true">#</a> MultiSet 接口</h3><p>MultiSet 接口与 Bag 接口的功能有些类似：当你向 Set 中存入重复的数据时，它会记录下该数据出现次数，而非重复存储数据本身。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// 伪代码</span>\n<span class="token class-name">MultiSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMultiSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nset<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;one&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nset<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;two&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nset<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;two&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nset<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;three&quot;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nset <span class="token operator">==</span> <span class="token punctuation">[</span>one<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span> two<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span> three<span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">]</span>\nset<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span>  <span class="token number">6</span>\nset<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token string">&quot;one&quot;</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span>\nset<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token string">&quot;two&quot;</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span>\nset<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token string">&quot;three&quot;</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">3</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>HashMultiSet 比 Bag 『高级』的地方在于，它可以对对象出现的次数作『加减法』：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// 伪代码</span>\nset<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">&quot;three&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nset<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token string">&quot;three&quot;</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span>\n\nset<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">&quot;three&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nset<span class="token punctuation">.</span><span class="token function">getCount</span><span class="token punctuation">(</span><span class="token string">&quot;three&quot;</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="bidimap-接口" tabindex="-1"><a class="header-anchor" href="#bidimap-接口" aria-hidden="true">#</a> BidiMap 接口</h3><p>BidiMap 接口继承自 Map 接口，它除了支持 Map 接口的『<strong>根据键找值</strong>』，还支持反向的『<strong>根据值找键</strong>』。因为这种行为它被称为 <strong>双向 Map</strong> 。</p><p>BidiMap 接口的实现类有：</p><ul><li><p>TreeBidiMap（底层是红黑树）</p></li><li><p>DualHashBidiMap（底层是两个 HashMap）</p></li><li><p>DualLinkedHashBidiMap（底层是两个 LinkedHashMap）</p></li><li><p>DualTreeBidiMap（底层是两个 TreeMap）</p></li></ul><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 根据 key 找 value</span>\nmap<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 根据 value 找 key</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>删除时也是一样：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>map<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 以 key 为依据删除键值对</span>\nmap<span class="token punctuation">.</span><span class="token function">removeValue</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 以 value 为依据删除键值对</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="multikeymap-类" tabindex="-1"><a class="header-anchor" href="#multikeymap-类" aria-hidden="true">#</a> MultiKeyMap 类</h3><p>MultiKeyMap 实现了由两个 key（甚至更多），来对应一个 value 的数据结构。现实中类似的使用场景有：地理位置和矩阵 。</p><p>MultiKeyMap 底层采用 MultiKey 作为普通 Map 的key，采用 HashedMap 存储。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// 伪代码</span>\n<span class="token class-name">MultiKeyMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MultiKeyMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 映射键值对关系，方式一</span>\n<span class="token class-name">MultiKey</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> key <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MultiKey</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nmap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 映射键值对关系，方式二</span>\nmap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">&quot;goodbye&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>      <span class="token comment">// hello world</span>\nmap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>   <span class="token comment">// hello world</span>\nmap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>   <span class="token comment">// goodbye</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h4 id="multivaluedmap-接口" tabindex="-1"><a class="header-anchor" href="#multivaluedmap-接口" aria-hidden="true">#</a> MultiValuedMap 接口</h4><p>MultiValuedMap 和 MultiKeyMap 相反，它是支持一个 key 对应多个 值。</p><p>它有两个实现类；</p><ul><li><p><strong>ArrayListValuedHashMap</strong> ，等价于 <code>Map&lt;K, List&lt;V&gt;&gt;</code></p></li><li><p><strong>HashSetValuedHashMap</strong>，等价于 <code>Map&lt;K, Set&lt;V&gt;&gt;</code></p></li></ul>',37),p={render:function(n,s){return t}}}}]);