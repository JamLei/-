"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[7651],{80431:(s,n,a)=>{a.r(n),a.d(n,{data:()=>t});const t={key:"v-7fcc71d8",path:"/vue/vue-06-%E8%B7%AF%E7%94%B1.html",title:"使用 vue-router 实现客户端路由",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"场景模拟",slug:"场景模拟",children:[{level:3,title:"编写父组件",slug:"编写父组件",children:[]},{level:3,title:"编写登录及注册组件",slug:"编写登录及注册组件",children:[]},{level:3,title:"在父组件中引用",slug:"在父组件中引用",children:[]},{level:3,title:"问题",slug:"问题",children:[]}]},{level:2,title:"vue-router 的简单使用",slug:"vue-router-的简单使用",children:[{level:3,title:"step 1: 引入相关的库文件",slug:"step-1-引入相关的库文件",children:[]},{level:3,title:"step 2: 添加路由链接",slug:"step-2-添加路由链接",children:[]},{level:3,title:"step 3: 添加路由填充位",slug:"step-3-添加路由填充位",children:[]},{level:3,title:"step 4: 定义路由组件",slug:"step-4-定义路由组件",children:[]},{level:3,title:"step 5: 配置路由规则",slug:"step-5-配置路由规则",children:[]},{level:3,title:"step 6: 把路由挂载到 Vue 根实例中",slug:"step-6-把路由挂载到-vue-根实例中",children:[]}]}],filePathRelative:"vue/vue-06-路由.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},83687:(s,n,a)=>{a.r(n),a.d(n,{default:()=>r});var t=a(66252);const p=(0,t.uE)('<h1 id="使用-vue-router-实现客户端路由" tabindex="-1"><a class="header-anchor" href="#使用-vue-router-实现客户端路由" aria-hidden="true">#</a> 使用 vue-router 实现客户端路由</h1><p>路由就是根据一个路径<small>（如，<code>/student/9527</code>）</small>来确定应该在页面上显示什么内容的行为。</p><p><strong>vue-router</strong> 作为 Vue 的一个库，旨在让我们能够在客户端，而非服务端来处理一个应用的路由。</p><h2 id="场景模拟" tabindex="-1"><a class="header-anchor" href="#场景模拟" aria-hidden="true">#</a> 场景模拟</h2><p>现在我们来实现这样一个功能：</p><p>一个页面，包含登录和注册，点击不同按钮，实现登录和注册页切换：</p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/vue/img/router-6.gif" alt=""></p><h3 id="编写父组件" tabindex="-1"><a class="header-anchor" href="#编写父组件" aria-hidden="true">#</a> 编写父组件</h3><blockquote><p>如果一切从简，接下来你可以不创建 <code>src</code> 文件夹，将 <code>.js</code> 文件和 <code>index.html</code> 文件放在同一级目录也可以。</p></blockquote><p>为了让接下来的功能比较清晰，我们先新建一个文件夹：<code>src</code>，然后新建一个 HTML 文件，作为入口：<code>index.html</code> 。</p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/vue/img/router-1.png" alt="1530148321175"></p><p>然后编写页面的基本结构：</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>注册<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">/&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>\n        登录页/注册页\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">&quot;https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>\n<span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">&quot;text/javascript&quot;</span><span class="token operator">&gt;</span>\n  <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    el<span class="token operator">:</span><span class="token string">&quot;#app&quot;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>样式：</p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/vue/img/router-2.png" alt="1530149363817"></p><h3 id="编写登录及注册组件" tabindex="-1"><a class="header-anchor" href="#编写登录及注册组件" aria-hidden="true">#</a> 编写登录及注册组件</h3><p>接下来我们来实现登录组件，以前我们都是写在一个文件中，但是为了复用性，开发中都会把组件放入独立的 JS 文件中，我们新建一个 user 目录以及 login.js 及 register.js：</p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/vue/img/router-3.png" alt="1530156389366"></p><p>编写组件，这里我们只写模板，不写功能。</p><p>login.js 内容如下：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> loginForm <span class="token operator">=</span> <span class="token punctuation">{</span>\n    template<span class="token operator">:</span> <span class="token string">&#39;\\\n    &lt;div&gt;\\\n        &lt;h2&gt;登录页&lt;/h2&gt; \\\n        用户名：&lt;input type=&quot;text&quot;&gt;&lt;br/&gt;\\\n        密码：&lt;input type=&quot;password&quot;&gt;&lt;br/&gt;\\\n    &lt;/div&gt;\\\n    &#39;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>register.js 内容：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> registerForm <span class="token operator">=</span> <span class="token punctuation">{</span>\n  template<span class="token operator">:</span><span class="token string">&#39;\\\n    &lt;div&gt;\\\n      &lt;h2&gt;注册页&lt;/h2&gt; \\\n      用&amp;ensp;户&amp;ensp;名：&lt;input type=&quot;text&quot;&gt;&lt;br/&gt;\\\n      密&amp;emsp;&amp;emsp;码：&lt;input type=&quot;password&quot;&gt;&lt;br/&gt;\\\n      确认密码：&lt;input type=&quot;password&quot;&gt;&lt;br/&gt;\\\n    &lt;/div&gt;\\\n    &#39;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="在父组件中引用" tabindex="-1"><a class="header-anchor" href="#在父组件中引用" aria-hidden="true">#</a> 在父组件中引用</h3><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>注册<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">/&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>\n        <span class="token comment">&lt;!--&lt;loginForm&gt;&lt;/loginForm&gt;--&gt;</span>\n        <span class="token comment">&lt;!--\n            疑问：为什么不采用上面的写法？\n            由于 html 是大小写不敏感的，如果采用上面的写法，则被认为是&lt;loginform&gt;&lt;/loginform&gt;\n            所以，如果是驼峰形式的组件，需要把驼峰转化为“-”的形式\n         --&gt;</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>login-form</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>login-form</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>register-form</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>register-form</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>user/login.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>user/register.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/javascript<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        el<span class="token operator">:</span> <span class="token string">&quot;#app&quot;</span><span class="token punctuation">,</span>\n        components<span class="token operator">:</span> <span class="token punctuation">{</span>\n            loginForm<span class="token punctuation">,</span>\n            registerForm\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><p>效果：</p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/vue/img/router-4.png" alt="1530157389501"></p><h3 id="问题" tabindex="-1"><a class="header-anchor" href="#问题" aria-hidden="true">#</a> 问题</h3><p>我们期待的是，当点击登录或注册按钮，分别显示登录页或注册页，而不是一起显示。</p><p>但是，如何才能动态加载组件，实现组件切换呢？</p><p>虽然使用原生的 html5 和 js 也能实现，但是官方推荐我们使用 vue-router 模块。</p><h2 id="vue-router-的简单使用" tabindex="-1"><a class="header-anchor" href="#vue-router-的简单使用" aria-hidden="true">#</a> vue-router 的简单使用</h2><p>使用 vue-router 和 vue 可以非常方便的实现复杂单页应用的动态路由功能。</p>',34),e=(0,t.Uk)("官网："),l={href:"https://router.vuejs.org/zh-cn/",target:"_blank",rel:"noopener noreferrer"},o=(0,t.Uk)("https://router.vuejs.org/zh-cn/"),c=(0,t.uE)('<p>cdn 网址：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">&quot;https://cdn.jsdelivr.net/npm/vue-router@3.5.2/dist/vue-router.js&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>vue-router 基本使用步骤如下：</p><ol><li><p>引入相关的库文件</p></li><li><p>添加路由链接</p></li><li><p>添加路由填充位</p></li><li><p>定义路由组件</p></li><li><p>配置路由规则并创建路由实例</p></li><li><p>把路由挂载到 Vue 根实例中</p></li></ol><p>其中，在之前的内容中，我们已经完成了第 <code>4</code> 步。</p><h3 id="step-1-引入相关的库文件" tabindex="-1"><a class="header-anchor" href="#step-1-引入相关的库文件" aria-hidden="true">#</a> step 1: 引入相关的库文件</h3><p>在 index.html 中以直接引入的方式使用</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">&quot;https://cdn.jsdelivr.net/npm/vue-router@3.5.2/dist/vue-router.js&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>:: tip <small>（未来）</small>在 vue-cli 中安装使用：</p><ul><li><p>使用 @vue/cli 安装（建议）</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>vue <span class="token function">add</span> router\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li><p>使用 npm/yarn 安装（不建议）：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code> <span class="token function">npm</span> <span class="token function">install</span> vue-router --save\n <span class="token function">yarn</span> <span class="token function">add</span> vue-router --save\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li></ul><p>:::</p><h3 id="step-2-添加路由链接" tabindex="-1"><a class="header-anchor" href="#step-2-添加路由链接" aria-hidden="true">#</a> step 2: 添加路由链接</h3><p>在页面上使用 <strong>&lt;router-link&gt;</strong> 元素。</p><p>router-link 是 vue 中提供的用于改变 URI 的标签，它默认会被渲染为 &lt;a&gt; 标签。</p><p>页面跳转控制：</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token comment">&lt;!-- router-link 来指定跳转的路径--&gt;</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/login<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/register<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>注册<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">&gt;</span></span>\n    ...\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>&lt;router-link&gt; 默认会被渲染为 &lt;a&gt; 标签，而它的 <strong>to</strong> 属性显然就是被渲染为 &lt;a&gt; 标签的 <strong>href</strong> 属性。</p><p><strong>to</strong> 属性的属性值<small>（例如，这里的 <code>/login</code> 和 <code>/register</code>）</small>会被渲染为以 # 开头的 hash 地址。也就是说</p><ul><li><p>当点击 <strong>登录</strong> 时，浏览器的 URI 会变为 <code>/#/login</code></p></li><li><p>当点击 <strong>注册</strong> 时，浏览器的 URI 会变为 <code>/#/register</code></p></li></ul><blockquote><p>注意，当浏览器的 URI 发生变化，变为 <code>/#/login</code> 或 <code>/#/register</code> 之后，会发生什么事情，会跳转显示什么样的页面，那就是『另一件事情』了，与 router-link 无关了。</p></blockquote><ul><li>通过 <code>&lt;router-view&gt;</code> 来指定一个锚点，当路由的路径匹配时，vue-router 会自动把对应组件放到锚点位置进行渲染</li></ul><h3 id="step-3-添加路由填充位" tabindex="-1"><a class="header-anchor" href="#step-3-添加路由填充位" aria-hidden="true">#</a> step 3: 添加路由填充位</h3><p>在页面上添加 <strong>&lt;router-view&gt;&lt;/router-view&gt;</strong></p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    ...\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>\n        <span class="token comment">&lt;!--vue-router 的锚点--&gt;</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>在 vue 所实现的单页应用（SPA）中，<strong>页面是一个公共资源</strong>，在单页应用中并没有太多的<small>（甚至完全没有）</small>页面跳转。</p><p>你所看到的“所谓的”页面的跳转实际上是大家轮流在使用同一个页面。“你方唱罢，我登场。”</p><p><strong>&lt;router-view&gt;</strong> 元素就是负责在页面上标注出一个公共区域，未来，大家轮流使用这个位置，展示各自的内容。</p><h3 id="step-4-定义路由组件" tabindex="-1"><a class="header-anchor" href="#step-4-定义路由组件" aria-hidden="true">#</a> step 4: 定义路由组件</h3><p>之前的准备工作中，已经完成了这一项工作。</p><p>定义了 LoginForm 和 RegisterForm 两个组件，并在 vue 中进行了注册：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    el<span class="token operator">:</span><span class="token string">&quot;#app&quot;</span><span class="token punctuation">,</span>\n    components<span class="token operator">:</span><span class="token punctuation">{</span> <span class="token comment">// 引用 loginForm 和 registerForm 组件</span>\n        loginForm<span class="token punctuation">,</span>\n        registerForm\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token operator">...</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="step-5-配置路由规则" tabindex="-1"><a class="header-anchor" href="#step-5-配置路由规则" aria-hidden="true">#</a> step 5: 配置路由规则</h3><p>我们之前做了 3 件事情：</p><ul><li>通过使用 <strong>&lt;router-link&gt;</strong> 来引起 URI 的变化</li><li>通过使用 <strong>&lt;router-view&gt;</strong> 在页面上划出一个“公共区域”</li><li>定义了多个组件</li></ul><p>现在，我们需要将这三件事情关联起来：</p><pre><code>当 URI 是 xxx 时，在“公共区域”显示组件 A；当 URI 是 yyy 是，在“公共区域”显示组件 B；...\n</code></pre><p>为了实现这个目标，我们需要『<strong>配置路由规则</strong>』。</p><p>新建 <strong>vue-router</strong> 对象，通过它的 routes 属性来指定路由规则：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 创建 VueRouter 对象</span>\n<span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token comment">// 编写路由规则</span>\n  routes<span class="token operator">:</span> <span class="token punctuation">[</span> \n    <span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">&quot;/login&quot;</span><span class="token punctuation">,</span> component<span class="token operator">:</span> loginForm <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span> path<span class="token operator">:</span> <span class="token string">&quot;/register&quot;</span><span class="token punctuation">,</span> component<span class="token operator">:</span> registerForm <span class="token punctuation">}</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>上述配置十分容易理解：</p><ul><li><p>当 URI 是 <code>/login</code> 事，在公共区域 &lt;router-view&gt; 处，展现 loginForm 组件；</p></li><li><p>当 URI 是 <code>/register</code> 时，在公共区域 &lt;router-view&gt; 处，展现 registerForm 组件。</p></li></ul><p>在 vue-router 的 <strong>routers</strong> 属性的配置中， <strong>path</strong> 配置的是路由的路径；<strong>component</strong> 配置的是组件名称。</p><h3 id="step-6-把路由挂载到-vue-根实例中" tabindex="-1"><a class="header-anchor" href="#step-6-把路由挂载到-vue-根实例中" aria-hidden="true">#</a> step 6: 把路由挂载到 Vue 根实例中</h3><p>通过 vue-router 对象定义出路由规则<small>（将上述的三件事关联在一起）</small>之后，我们需要将 vueRouter 对象<small>（即路由规则）</small> 告知 Vue 。</p><p>现在在创建 vue 对象时，我们要『多』传入一个 vue-router 对象了：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    el<span class="token operator">:</span> <span class="token string">&quot;#app&quot;</span><span class="token punctuation">,</span>\n    components<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    router <span class="token comment">// 引用上面定义的 router 对象</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>效果：</p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/vue/img/router-6.gif" alt=""></p><p>更多的关于 vue-router 的进阶功能，我们在 vue-cli 中再一一展示。</p>',49),r={render:function(s,n){const a=(0,t.up)("OutboundLink");return(0,t.wg)(),(0,t.iD)(t.HY,null,[p,(0,t._)("p",null,[e,(0,t._)("a",l,[o,(0,t.Wm)(a)])]),c],64)}}}}]);