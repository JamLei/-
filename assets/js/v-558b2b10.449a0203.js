"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[4802],{60601:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-558b2b10",path:"/spring/03-AOP.html",title:"Spring AOP",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"AOP 基本概念",slug:"aop-基本概念",children:[]},{level:2,title:"核心概念",slug:"核心概念",children:[{level:3,title:"切入点表达式",slug:"切入点表达式",children:[]},{level:3,title:"通知类型",slug:"通知类型",children:[]}]},{level:2,title:"使用 @AspectJ 注解配置 Spring AOP",slug:"使用-aspectj-注解配置-spring-aop",children:[]},{level:2,title:"使用 XML 配置 Spring AOP（了解、自学）",slug:"使用-xml-配置-spring-aop-了解、自学",children:[]}],filePathRelative:"spring/03-AOP.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},90686:(n,s,a)=>{a.r(s),a.d(s,{default:()=>p});const t=(0,a(66252).uE)('<h1 id="spring-aop" tabindex="-1"><a class="header-anchor" href="#spring-aop" aria-hidden="true">#</a> Spring AOP</h1><h2 id="aop-基本概念" tabindex="-1"><a class="header-anchor" href="#aop-基本概念" aria-hidden="true">#</a> AOP 基本概念</h2><p>现实中有一些内容并不是面向对象技术<small>（OOP）</small>可以解决的，比如事务处理。在 JDBC 代码中，最繁琐的问题就是无穷无尽的 <code>try ... catch ... finally ...</code> 语句和『<strong>数据库资源关闭</strong>』的问题，而且代码会存在大量的重复，而你又不能不写。</p><p>一个正常执行的 SQL 的逻辑步骤如下：</p><table><thead><tr><th style="text-align:center;">#</th><th style="text-align:left;">操作</th></tr></thead><tbody><tr><td style="text-align:center;">1</td><td style="text-align:left;">打开通过数据库连接池获得数据库链接资源，并做一定的设置工作。</td></tr><tr><td style="text-align:center;">2</td><td style="text-align:left;">执行对应的 SQL 语句<small>（通常是增删改）</small>，对数据进行操作。</td></tr><tr><td style="text-align:center;">3</td><td style="text-align:left;">如果 SQL 执行过程中发生异常，回滚事务。</td></tr><tr><td style="text-align:center;">4</td><td style="text-align:left;">如果 SQL 执行过程中没有发生异常，最后提交事物。</td></tr><tr><td style="text-align:center;">5</td><td style="text-align:left;">到最后的阶段，需要关闭一些连接资源。</td></tr></tbody></table><p>参看上述流程，你会发现无论是执行什么具体的 SQL，流程都是一样的！即，<strong>到了特定时刻一定会执行某个特定操作</strong>，并不因所执行的 SQL 的不同而不同 !</p><p>在 OOP 中，模块化单元是『<strong>类</strong>』<small>（Class）</small>，而在 AOP 中，模块化的单元是『<strong>切面</strong>』<small>（Aspect）</small>。</p><blockquote><p>AOP 的概念并非 Spring 首先提出。AOP 的诞生远比 Spring 要早。AOP 最早由名为『<strong>AOP 联盟</strong>』的组织提出的，并制定了一套规范。Spring AOP 遵守 AOP 联盟所制定的规范。</p></blockquote><p>Spring 的 AOP 的底层用到两种代理机制：</p><ol><li><p>JDK 动态代理</p><p>如果目标类遵循某个接口，Spring AOP 底层采用 JDK 方案生成代理对象</p></li><li><p>CGLib 动态代理</p><p>如果目标类不遵循任何接口，Spring AOP 底层采用 CGLib 方案生成代理对象。</p></li></ol><blockquote><p>关于 Spring AOP 的底层实现原理后续有专门章节讲解。</p></blockquote><h2 id="核心概念" tabindex="-1"><a class="header-anchor" href="#核心概念" aria-hidden="true">#</a> 核心概念</h2><p>AOP 涉及到如下问题：在 <strong>什么类</strong> 的 <strong>什么方法</strong> 的 <strong>什么地方</strong>，做出 <strong>什么样</strong> 的增强。</p><p>AOP 的功能简而言之就是：<strong>在不修改方法源文件的情况下，为源文件的特定部位增加新的代码</strong> 。</p><h3 id="切入点表达式" tabindex="-1"><a class="header-anchor" href="#切入点表达式" aria-hidden="true">#</a> 切入点表达式</h3><p>切入点表达式决定了哪些类的哪些方法会被『插入』新代码。它『回答』了：要对『<strong>什么类</strong>』的『<strong>什么方法</strong>』做出增强。</p><p>最常用的切入点表达式是 <strong>execution</strong> 表达式，其语法格式如下：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token punctuation">[</span>方法访问修饰符<span class="token punctuation">]</span> 方法返回值 包名<span class="token punctuation">.</span>类名<span class="token punctuation">.</span>方法名<span class="token punctuation">(</span>方法的参数<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li><p><code>方法访问修饰符</code> 部分是<strong>可选</strong>部分；</p></li><li><p>其它部分是『<strong>必要</strong>』部分。</p></li></ul><p>例如：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token function">execution</span><span class="token punctuation">(</span> <span class="token operator">*</span> <span class="token class-name"><span class="token namespace">xxx<span class="token punctuation">.</span>yyy<span class="token punctuation">.</span>zzz<span class="token punctuation">.</span>dao<span class="token punctuation">.</span></span>EmployeeDao</span><span class="token punctuation">.</span>*<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>\n\n<span class="token function">execution</span><span class="token punctuation">(</span> <span class="token keyword">public</span> <span class="token operator">*</span> <span class="token class-name"><span class="token namespace">xxx<span class="token punctuation">.</span>yyy<span class="token punctuation">.</span>zzz<span class="token punctuation">.</span>dao<span class="token punctuation">.</span></span>EmployeeDao</span><span class="token punctuation">.</span>*<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>\n\n<span class="token function">execution</span><span class="token punctuation">(</span> <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token class-name"><span class="token namespace">xxx<span class="token punctuation">.</span>yyy<span class="token punctuation">.</span>zzz<span class="token punctuation">.</span>dao<span class="token punctuation">.</span></span>EmployeeDao</span><span class="token punctuation">.</span>*<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>\n\n<span class="token function">execution</span><span class="token punctuation">(</span> <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token class-name"><span class="token namespace">xxx<span class="token punctuation">.</span>yyy<span class="token punctuation">.</span>zzz<span class="token punctuation">.</span>dao<span class="token punctuation">.</span></span>EmployeeDao</span><span class="token punctuation">.</span>*<span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>\n\n<span class="token function">execution</span><span class="token punctuation">(</span> <span class="token operator">*</span> xxx<span class="token punctuation">.</span>yyy<span class="token punctuation">.</span>zzz<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>*<span class="token punctuation">.</span>*<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><ul><li><h3>返回值匹配：</h3><p>可以为 <code>*</code>，表示任何返回值，全路径的类名等。</p></li><li><h3>方法名匹配: </h3><p>指定方法名。</p><p>例如：<code>*</code> 代表所有方法；<code>set*</code>，代表以 <code>set</code> 开头的所有方法.</p></li><li><h3>参数匹配：</h3><p>指定方法参数，包括数量、类型及顺序。</p><p>例如：<code>(..)</code> 代表所有参数；<code>(*)</code> 代表一个参数； <code>(*, String)</code> 代表第一个参数为任何值，第二个为 <strong>String</strong> 类型。</p></li></ul><h3 id="通知类型" tabindex="-1"><a class="header-anchor" href="#通知类型" aria-hidden="true">#</a> 通知类型</h3><p>通知类型回答了：『<strong>什么位置</strong>』增强『<strong>什么样</strong>』的代码。</p><table><thead><tr><th style="text-align:left;">注解</th><th style="text-align:left;">通知</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>@Before</strong></td><td style="text-align:left;">在被代理对象的方法前调用</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;"><strong>@Around</strong></td><td style="text-align:left;">将被代理方法封装起来</td><td style="text-align:left;">环绕通知，它将覆盖原有方法，但是允许通过反射调用原有方法</td></tr><tr><td style="text-align:left;"><strong>@After</strong></td><td style="text-align:left;">在被代理对象方法后调用</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;"><strong>@AfterReturning</strong></td><td style="text-align:left;">在被代理对象正常返回后调用</td><td style="text-align:left;">要求被代理对象的方法执行过程中没有发生异常</td></tr><tr><td style="text-align:left;"><strong>@AfterThrowing</strong></td><td style="text-align:left;">在被代理对象的方法抛出异常后调用</td><td style="text-align:left;">要求被代理对象的方法执行过程中发生异常</td></tr></tbody></table><h2 id="使用-aspectj-注解配置-spring-aop" tabindex="-1"><a class="header-anchor" href="#使用-aspectj-注解配置-spring-aop" aria-hidden="true">#</a> 使用 <strong>@AspectJ</strong> 注解配置 Spring AOP</h2><p>Spring 实现 AOP 功能的方式有两种：</p><ul><li><p>@AspectJ 注解方式，<small>要求会写。</small></p></li><li><p>XML 配置方式，<small>要求会看。</small></p></li></ul><blockquote><p>题外话，AOP 概念并非 Spring 所特有，Spring 也并非支持 AOP 编程的唯一框架。在 Spring 之前提供 AOP 功能的，具有里程碑式的框架叫『<strong>AspectJ 框架</strong>』。</p><p>AspectJ 框架的使用方式比较独特，使用起来不太简便，很麻烦。在 Spring AOP 出现后就慢慢被 Spring AOP 所取代。但是，AspectJ 框架设计了一套注解，非常简便和合理，并且被广大 AspectJ 的使用者所熟知，所以 Spring AOP 直接借用这套注解，也就是我们这里所说的 <strong>@AspectJ</strong> 注解。</p></blockquote><p>由于 <strong>@AspectJ</strong> 注解是 Spring『借用』的别人的注解，所以使用时需要引入它。</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.aspectj<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>aspectjrt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${aspectj.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.aspectj<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>aspectjweaver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${aspectj.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>在 Spring 的配置文件中，也需要引入/声明 AOP 的 namspace :</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span>\n    <span class="token attr-name">...</span>\n    <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/aop<span class="token punctuation">&quot;</span></span>\n    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>\n        ...\n        http://www.springframework.org/schema/aop\n        http://www.springframework.org/schema/aop/spring-aop.xsd<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>并且，由于 <strong>@AspectJ</strong> 注解并非 Spring 框架的一部分，所以需要在配置文件中声明『启用 @AspectJ 注解』功能，否则，Spring 并『不认识』 <strong>@AspectJ</strong> 的一系列注解。</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspectj-autoproxy</span> <span class="token punctuation">/&gt;</span></span>\n\n<span class="token comment">&lt;!-- 或者使用『@Component 注解 &amp; 包扫描』创建单例对象 --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dept<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>bean.Dept<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>aspect1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>bean.DeptAspect1<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>再重复一遍，使用 Spring AOP 的核心问题：在『<strong>什么类</strong>』的『<strong>什么方法</strong>』的『<strong>什么地方</strong>』，做出『<strong>什么样</strong>』的增强。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Aspect</span> <span class="token comment">// 注意，不要忘记在切面类的头上加 @Aspect 注解。</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeptAspect1</span> <span class="token punctuation">{</span>\n\n    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">&quot;execution(* bean.Dept.sayHi(..))&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;before ...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@After</span><span class="token punctuation">(</span><span class="token string">&quot;execution(* bean.Dept.sayHi(..))&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;after ...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">&quot;execution(* bean.Dept.sayHi(..))&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">around</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> jp<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">try</span> <span class="token punctuation">{</span>\n            jp<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@AfterReturning</span><span class="token punctuation">(</span><span class="token string">&quot;execution(* bean.Dept.sayHi(..))&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterReturuing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;afterReturning ...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@AfterThrowing</span><span class="token punctuation">(</span><span class="token string">&quot;execution(* bean.Dept.sayHi(..))&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterThrowing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;afterThrowing ...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div><p>可以发现，上述代码中 <strong>execution(...)</strong> 部分有大量重复现象。为此，可以提供一个 <strong>@Pointcut</strong> 来进行“缩写”。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Aspect</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeptAspect1</span> <span class="token punctuation">{</span>\n\n    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">&quot;execution(* bean.Dept.sayHi(..))&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">xxx</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 这个方法是空的。需要的不是它的内容，需要的是它的名字。</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">&quot;xxx()&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@After</span><span class="token punctuation">(</span><span class="token string">&quot;xxx()&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">&quot;xxx()&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">around</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@AfterReturning</span><span class="token punctuation">(</span><span class="token string">&quot;xxx())&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterReturning</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@AfterThrowing</span><span class="token punctuation">(</span><span class="token string">&quot;xxx())&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterThrowing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p>另外，有时你要拦截/增强的方法是有参数的，例如：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>为此，你也可以在增强方法中获得这些参数，</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">&quot;execution(* bean.Dept.sayHi(..))&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">xxx</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n<span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">&quot;execution(* bean.Dept.sayHi(..)) &amp;&amp; args(name, age)&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token punctuation">}</span>\n\n<span class="token annotation punctuation">@After</span><span class="token punctuation">(</span><span class="token string">&quot;xxx() &amp;&amp; args(name, age)&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="使用-xml-配置-spring-aop-了解、自学" tabindex="-1"><a class="header-anchor" href="#使用-xml-配置-spring-aop-了解、自学" aria-hidden="true">#</a> 使用 XML 配置 Spring AOP（了解、自学）</h2><p>通过 XML 配置 Spring AOP 功能，在 XML 文件中出现的各种『要素』本质上和 @AspectJ 注解中出现过的内容本质上并没有两样。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeptAspect2</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">around</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> jp<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterReturuing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterThrowing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dept<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>bean.Dept<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>aspect2<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>bean.DeptAspect2<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspect</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>aspect2<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>before</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>before<span class="token punctuation">&quot;</span></span> <span class="token attr-name">pointcut</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>execution(* bean.Dept.sayHi(..)) and args(name, int)<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>after</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>after<span class="token punctuation">&quot;</span></span> <span class="token attr-name">pointcut</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>execution(* bean.Dept.sayHi(..)) and args(name, int)<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>aspect</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div>',47),p={render:function(n,s){return t}}}}]);