"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[5964],{56620:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-444199c2",path:"/utility/3rd/04-lombok.html",title:"Lombok 常用注解",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"@Constructor 注解",slug:"constructor-注解",children:[]},{level:2,title:"@Builder 注解",slug:"builder-注解",children:[]},{level:2,title:"@Getter / @Setter 注解",slug:"getter-setter-注解",children:[]},{level:2,title:"@ToString 注解",slug:"tostring-注解",children:[]},{level:2,title:"@EqualsAndHashCode 注解",slug:"equalsandhashcode-注解",children:[]},{level:2,title:"@Data 注解",slug:"data-注解",children:[]},{level:2,title:"@Slf4j",slug:"slf4j",children:[]},{level:2,title:"@SneakyThrows 注解（了解）",slug:"sneakythrows-注解-了解",children:[]},{level:2,title:"@Synchronized（了解）",slug:"synchronized-了解",children:[]}],filePathRelative:"utility/3rd/04-lombok.md",git:{updatedTime:1629826614e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},60873:(n,s,a)=>{a.r(s),a.d(s,{default:()=>e});const t=(0,a(66252).uE)('<h1 id="lombok-常用注解" tabindex="-1"><a class="header-anchor" href="#lombok-常用注解" aria-hidden="true">#</a> Lombok 常用注解</h1><h2 id="constructor-注解" tabindex="-1"><a class="header-anchor" href="#constructor-注解" aria-hidden="true">#</a> @Constructor 注解</h2><p><strong>@Constructor</strong> 注解标注于类上，用于生成类的构造函数。它一共有三种：</p><table><thead><tr><th style="text-align:left;">注解</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>@NoArgsConstructor</strong></td><td style="text-align:left;">用于生成无参构造函数</td></tr><tr><td style="text-align:left;"><strong>@AllArgsContructor</strong></td><td style="text-align:left;">用于生成全参构造函数</td></tr><tr><td style="text-align:left;"><strong>@RequiredArgsConstructor</strong></td><td style="text-align:left;">用于生成必要参数的构造函数。所谓的必要的参数，指的是被标注了 <strong>@NonNull</strong> 的属性的构造函数。</td></tr></tbody></table><blockquote><p>注意，还有其它的包、库自定义了 <strong>@NonNull</strong> 注解，注意你 <strong>import</strong> 的是哪一个。</p></blockquote><p>另外，<strong>@AllArgsContructor</strong> 和 <strong>@RequiredArgsConstructor</strong> 可以使用一个叫 <strong>staticName</strong> 的属性用于生成对象的静态构造方法。<small>这个方法通常叫 <strong>of</strong> 或 <strong>getInstance</strong> 。</small></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token punctuation">(</span>staticName <span class="token operator">=</span> <span class="token string">&quot;of&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Human</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>\n\n<span class="token class-name">Human</span> human <span class="token operator">=</span> <span class="token class-name">Human</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="builder-注解" tabindex="-1"><a class="header-anchor" href="#builder-注解" aria-hidden="true">#</a> @Builder 注解</h2><p><strong>@Builder</strong> 同样是用于构造对象。它标注于类上，用于在类中生成该类的一个 Builder，以便使用 Builder 方式以链式的方式实例化对象。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Builder</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Human</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>\n\n<span class="token class-name">Human</span> h <span class="token operator">=</span> <span class="token class-name">Human</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">age</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>通常的编码习惯是在使用 Builder 时多折行显示，形如:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Human</span> h <span class="token operator">=</span> <span class="token class-name">Human</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token function">age</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span>\n            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="getter-setter-注解" tabindex="-1"><a class="header-anchor" href="#getter-setter-注解" aria-hidden="true">#</a> @Getter / @Setter 注解</h2><p>在属性上标注，即生成该属性的 getter/setter 方法。</p><p>在类上标注，则是为该类的『<strong>所有属性</strong>』生成 getter/setter 方法。</p><p><strong>@Getter</strong> / <strong>@Setter</strong> 注解有一个 <strong>value</strong> 属性<small>（默认属性）</small>可以设置所生成的 getter/setter 方法的访问权限。默认为 <strong><code>lombok.AccessLevel.PUBLIC</code></strong> 。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Getter</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">lombok<span class="token punctuation">.</span></span>AccessLevel</span><span class="token punctuation">.</span>PROTECTED<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>这里需要注意的是，对于基本类型 <strong>boolean</strong> 和引用类型 Boolean，@Getter 方法生成的 getter 方法『<strong>名字不一样</strong>』。<small>setter 方法不变</small></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">boolean</span> male<span class="token punctuation">;</span> <span class="token comment">// 生成 isMale() 方法</span>\n<span class="token keyword">private</span> <span class="token class-name">Boolean</span> male<span class="token punctuation">;</span> <span class="token comment">// 生成 getMale() 方法</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><blockquote><p>注意，上述代码是 lombok 的『著名的坑』。boolean 和它的包装类 Boolean 所生成的 getter 的名字是不一样的！</p></blockquote><h2 id="tostring-注解" tabindex="-1"><a class="header-anchor" href="#tostring-注解" aria-hidden="true">#</a> @ToString 注解</h2><p><strong>@ToString</strong> 注解标注于类上，用于生成 <strong>toString</strong> 方法。</p><p>默认的 toString 格式为：<strong>ClassName(fieldName=fieleValue, fieldName1=fieleValue, ...)</strong></p><p>如果想排除某些属性<small>（特别是因为循环引用问题）</small>时，可以使用 <strong>exclude</strong> 属性。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@ToString</span><span class="token punctuation">(</span>exclude <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Human</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>如果因为继承，你想要在 <strong>toSting</strong> 方法中包括继承自父类的属性，那么可以使用 <strong>callSuper</strong> 属性。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@ToString</span><span class="token punctuation">(</span>callSuper <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">// 默认值是 false</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Human</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>如果为了简化内容，你可以使用 <strong>includeFieldNames</strong> 属性在 <em>toString</em> 方法中去掉属性的名字。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@ToString</span><span class="token punctuation">(</span>includeFieldNames <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token comment">// 默认值是 true</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Human</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span> \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="equalsandhashcode-注解" tabindex="-1"><a class="header-anchor" href="#equalsandhashcode-注解" aria-hidden="true">#</a> @EqualsAndHashCode 注解</h2><p><strong>@EqualsAndHashCode</strong> 注解标注于类上，用于生成 <strong>equals</strong> 方法和 <strong>hashCode</strong> 方法。</p><p>和之前的 <strong>@ToString</strong> 一样，可是使用 <strong>exclude</strong> 选项除掉不想要的属性。也可以通过 <strong>callSuper</strong> 包含父类的 equals 和 hashCode 。</p><blockquote><p>需要注意的是，如果类的属性中有 Array（数组）类型的变量，最好是『<strong>手写</strong>』<strong>equals</strong> 和 <strong>hashCode</strong> 方法。因为最好是调用工具类 Arrays 中的 <strong>deepHashCode</strong> 方法， <strong>deepEquals</strong> 方法进行比较。</p></blockquote><h2 id="data-注解" tabindex="-1"><a class="header-anchor" href="#data-注解" aria-hidden="true">#</a> @Data 注解</h2><p><strong>@Data</strong> 注解标注于类上，相当于同时使用了 <strong>@ToString</strong>、<strong>@EqualsAndHashCode</strong>、<strong>@Getter</strong>、<strong>@Setter</strong> 和 <strong>@RequiredArgsConstrutor</strong> 这些注解<small>（一个打五个）</small>，对于 JavaBean 类十分有用。</p><p>另外，<strong>@Value</strong> 注解是 <strong>@Data</strong> 的不可变形式，相当于为属性添加 final 声明，只提供 getter 方法，而不提供 setter 方法。即，使用它的 JavaBean 都是<strong>只读</strong>的 JavaBean 。</p><h2 id="slf4j" tabindex="-1"><a class="header-anchor" href="#slf4j" aria-hidden="true">#</a> @Slf4j</h2><p>自动实例化日志对象 <code>log</code> 。</p><p>pom 依赖：</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token comment">&lt;!-- 自动依赖 slf4j-api --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>ch.qos.logback<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>logback-classic<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n\t<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.2.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>需要将日志的配置文件<small>（<strong>logback.xml</strong>）</small>放置到 <strong>classpath</strong> 下。</p><p>在类上标注 <strong>@Slf4j</strong></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Slf4j</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>使用 log 对象输出打印日志</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;info&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nlog<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;warn&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nlog<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;debug&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="sneakythrows-注解-了解" tabindex="-1"><a class="header-anchor" href="#sneakythrows-注解-了解" aria-hidden="true">#</a> @SneakyThrows 注解<small>（了解）</small></h2><p>@SneakyThrows 的用法比较简单，其实就是对于异常的一个整理，将 checked exception 看做 unchecked exception，不处理，直接扔掉<small>（上抛）</small>，减少了到处写 catch 的不便利性。</p><p>比如在线程中，catch 所有异常，再比如在一些不太可能发生异常的地方，但是你又必须 catch checked exception 的地方使用这个 annotation 会显得代码比较规整，易读。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SneakyThrowsExample</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@SneakyThrows</span><span class="token punctuation">(</span><span class="token class-name">UnsupportedEncodingException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">utf8ToString</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> <span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n   \n    <span class="token annotation punctuation">@SneakyThrows</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Throwable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="synchronized-了解" tabindex="-1"><a class="header-anchor" href="#synchronized-了解" aria-hidden="true">#</a> @Synchronized<small>（了解）</small></h2><p>类似于 Synchronized 关键字 但是可以隐藏同步锁</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Synchronized</span><span class="token punctuation">;</span>\n \n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SynchronizedExample</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Object</span> readLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  \n    <span class="token annotation punctuation">@Synchronized</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  \n    <span class="token annotation punctuation">@Synchronized</span>\n    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">answerToLife</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token number">42</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  \n    <span class="token annotation punctuation">@Synchronized</span><span class="token punctuation">(</span><span class="token string">&quot;readLock&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;bar&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div>',52),e={render:function(n,s){return t}}}}]);