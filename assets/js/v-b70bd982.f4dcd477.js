"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[4216],{88045:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-b70bd982",path:"/junit/JUnit-99-Junit4.html",title:"基本概念",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[],filePathRelative:"junit/JUnit-99-Junit4.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},69315:(n,s,a)=>{a.r(s),a.d(s,{default:()=>e});const p=(0,a(66252).uE)('<h1 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念" aria-hidden="true">#</a> 基本概念</h1><p>Junit 是 java 领域占有率非常高的一个单元测试框架，已经成为了单元测试的标准。</p><p>单元测试的编写原则:</p><ol><li><p>在 eclipse 中创建 1 个 source folder 命名为 test<small>（使用 Maven 后已要求必须创建）</small></p></li><li><p>测试类所在的包要求和被测试类的包一致</p></li><li><p>测试类要使 Tes 作为开头或结，如 UserServiceTest</p></li><li><p>测试类的每个方法，都必须是可以独立执行的，不存在顺序或依赖</p></li></ol><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">After</span><span class="token punctuation">;</span> \n<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">AfterClass</span><span class="token punctuation">;</span> \n<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Before</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">BeforeClass</span><span class="token punctuation">;</span>  \n<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span><span class="token punctuation">;</span>  \n\n<span class="token comment">/* \n * 测试类最基本的格式  \n */</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestUser</span> <span class="token punctuation">{</span>  \n\n    <span class="token annotation punctuation">@BeforeClass</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  \n        <span class="token comment">/*  \n         * 此方法只会在运行所有单元测试前执行一次,   \n         * 通常用来获取数据库连接, Spring 管理的 Bean 等等  \n         */</span>\n    <span class="token punctuation">}</span>  \n\n    <span class="token annotation punctuation">@Before</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  \n        <span class="token comment">/*  \n         * 此方法运行每个单元测试前都会执行,   \n         * 通常用来准备数据或获取单元测试依赖的数据或对象  \n         */</span>\n    <span class="token punctuation">}</span>  \n\n    <span class="token annotation punctuation">@Test</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAddUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  \n        <span class="token comment">/*  \n         * 测试类的主要方法,在这里写所有的测试业务逻辑  \n         */</span>\n    <span class="token punctuation">}</span>  \n\n    <span class="token annotation punctuation">@Test</span><span class="token punctuation">(</span>expected <span class="token operator">=</span> <span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>  \n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDleteUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  \n        <span class="token comment">/*  \n         * 请注意注解上的experced,使用该参数代表可以认为   \n         * 这个单元测试方法会抛出Exception的异常,若然没有视为不通过  \n         */</span>\n    <span class="token punctuation">}</span>  \n\n    <span class="token annotation punctuation">@Test</span><span class="token punctuation">(</span>timeout <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">)</span>  \n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testUpdateUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  \n        <span class="token comment">/*  \n         * 请注意注解上的timeout，使用该参数代表\n         * 该单元测试需要在1000毫秒内完成，否则视为不通过\n         * 可以用做简单的性能测试  \n         */</span>\n    <span class="token punctuation">}</span>  \n\n    <span class="token annotation punctuation">@After</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">tearDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  \n        <span class="token comment">/*  \n         * 此方法运行每个单元测试后都会执行,   \n         * 主要用来和setUp对应,清理获取的资源  \n         */</span>\n    <span class="token punctuation">}</span>  \n\n    <span class="token annotation punctuation">@AfterClass</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  \n        <span class="token comment">/*  \n         * 此方法会在运行所有单元测试后执行一次,   \n         * 通常用来释放资源,例如数据库连接,IO流等等  \n         */</span>\n    <span class="token punctuation">}</span>  \n<span class="token punctuation">}</span>  \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br></div></div><p>当你需要测试一个『应该』抛出异常的逻辑时，可以使用 <code>@Test</code> 注解的 <code>expected</code> 属性。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span><span class="token punctuation">(</span>expected <span class="token operator">=</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testIndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">String</span> str <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><hr><p>当我们定义了多个测试方法,但还没提供实现时,可以选择用以下方式来提醒或保证还存在没实现的方法。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestUser</span> <span class="token punctuation">{</span>  \n\n    <span class="token annotation punctuation">@Test</span>\n    <span class="token annotation punctuation">@Ignore</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAddUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  \n        <span class="token comment">//添加@Ignore后該方法將被忽略而不去执行  </span>\n    <span class="token punctuation">}</span>  \n\n    <span class="token annotation punctuation">@Test</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testGetUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  \n        <span class="token comment">//当运行测试时会提示该方法还没实现  </span>\n        <span class="token function">fail</span><span class="token punctuation">(</span><span class="token string">&quot;该方法暂时没提供实现&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  \n    <span class="token punctuation">}</span>  \n<span class="token punctuation">}</span>  \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><hr><p>在运行单元测试的时候都是一个单元测试类这样来运行的,但项目当中可能存在上百个测试类的时候,每次要手动一个一个单元测试的运行简直就是噩梦。通过创建 <code>Junit Test Suite</code> 可实现批量执行测试用例。</p><p>该类会生成以下的代码</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">Suite</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>  \n<span class="token annotation punctuation">@SuiteClasses</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token class-name">TestUser</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>  \n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AllTests</span> <span class="token punctuation">{</span>  \n    <span class="token comment">/*  \n     * @RunWith 代表是运行 Suite 的类,固定写法  \n     * @SuiteClasses 中接受一个数组，里面为你需要  \n     * 集中运行的测试类的class以上代码为自动生成  \n     * 当然除了这个办法外，你也可以通过 Maven 来运行单元测试,这里不过多叙述  \n     */</span>\n<span class="token punctuation">}</span>  \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div>',14),e={render:function(n,s){return p}}}}]);