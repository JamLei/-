"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[1989],{63556:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-49edbfba",path:"/mybatis/01-mybatis-basics.html",title:"MyBatis 基础",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"MyBatis",slug:"mybatis",children:[]},{level:2,title:"基本概念",slug:"基本概念",children:[{level:3,title:"MyBatis 的体系结构",slug:"mybatis-的体系结构",children:[]},{level:3,title:"使用 XML 构建 SqlSessionFactory",slug:"使用-xml-构建-sqlsessionfactory",children:[]},{level:3,title:"SqlSession",slug:"sqlsession",children:[]},{level:3,title:"默认的别名",slug:"默认的别名",children:[]},{level:3,title:"补充",slug:"补充",children:[]}]},{level:2,title:"执行 SQL 语句",slug:"执行-sql-语句",children:[{level:3,title:"增删改操作",slug:"增删改操作",children:[]},{level:3,title:"getMapper 方法",slug:"getmapper-方法",children:[]},{level:3,title:"查操作",slug:"查操作",children:[]},{level:3,title:"传递多个参数",slug:"传递多个参数",children:[]}]}],filePathRelative:"mybatis/01-mybatis-basics.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},84673:(n,s,a)=>{a.r(s),a.d(s,{default:()=>e});const t=(0,a(66252).uE)('<h1 id="mybatis-基础" tabindex="-1"><a class="header-anchor" href="#mybatis-基础" aria-hidden="true">#</a> MyBatis 基础</h1><h2 id="mybatis" tabindex="-1"><a class="header-anchor" href="#mybatis" aria-hidden="true">#</a> MyBatis</h2><p>『<strong>持久层</strong>』可以将业务数据存储到磁盘，具备长期存储能力，只要磁盘不损坏，即便实在断电情况下，重新开启系统仍然可以读取到这些数据。</p><p>『<strong>数据库系统</strong>』是最常见的执行持久化工作的工具。</p><p>MyBatis 是一款优秀的持久层框架，它支持定制化 SQL、存储过程以及高级映射。MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。MyBatis 可以使用简单的 XML 或注解来配置和映射原生类型、接口和 Java 的 POJO<small>（Plain Old Java Objects，普通老式 Java 对象）</small>为数据库中的记录。</p><p>MyBatis 的成功主要有 3 点：</p><ul><li><p>不屏蔽 SQL，意味着可以更为精准地定位 SQL 语句，可以对其进行优化和改造。</p></li><li><p>提供强大、灵活的映射机制，方便 Java 开发者使用。提供了动态动态 SQL 的功能，允许使用者根据不同条件组装 SQL 语句。</p></li><li><p>在 MyBatis 中，提供了使用 Mapper 的接口编程，进一步简化了使用者的工作，使开发者能集中于业务逻辑，而非 Dao 层的编写。</p></li></ul><p>MyBatis 的持久化解决方案将用户从原始的 JDBC 访问中解放出来，用户只需要定义需要操作的 SQL 语句，无须关注底层的 JDBC 操作，就能以面向对象的方式进行持久化层操作。底层数据库连接的获取、数据访问的实现、事务控制等都无须用户关心。</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token comment">&lt;!-- mysql 数据库驱动包 --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${mysql.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- 8.0.21 --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token comment">&lt;!-- mybatis --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${mybatis.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- 3.5.1 --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念" aria-hidden="true">#</a> 基本概念</h2><h3 id="mybatis-的体系结构" tabindex="-1"><a class="header-anchor" href="#mybatis-的体系结构" aria-hidden="true">#</a> MyBatis 的体系结构</h3><p>MyBatis 中的常用对象有 <strong>SqlSessionFactory</strong> 和 <strong>SqlSession</strong> 。</p><p>SqlSessionFactory 对象是 MyBatis 的关键对象，它对应着单个数据库。</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>XML 配置文件\n└── SqlSessionFactoryBuilder\n    └── SqlSessionFactory\n        └── SqlSession\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>整个关系可以如下述这样『反推』：</p><ul><li><p>最终是需要获得一个 <strong>SqlSession</strong> 对象来操作数据库。<small>SqlSession 对象代表着与数据库之间的连接。</small></p></li><li><p>要『弄』到 <strong>SqlSession</strong> 对象，首先要先『弄』到一个 <strong>SqlSessionFactory</strong> 对象。</p></li><li><p>要『弄』到 <strong>SqlSessionFactory</strong> 对象，首先要先『弄』到一个 <strong>SqlSessionFactoryBuilder</strong> 对象。</p></li><li><p>而在这个整个过程中，需要用到 <strong><code>1 + N</code></strong> 个配置文件。</p></li></ul><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// 这是一个相对于 classpath 的文件路径名。而且，不需要使用 / 。</span>\n<span class="token class-name">InputStream</span> is <span class="token operator">=</span> <span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">&quot;mybatis-config.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name">SqlSessionFactoryBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">SqlSessionFactory</span> factory <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">SqlSession</span> session <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p><strong>注意</strong>：使用完 SqlSession 之后『<strong>关闭 Session 很重要</strong>』，应该确保使用 <strong>finally</strong> 块来关闭它。</p><ul><li>一个 MyBatis 应用程序只需要一个 <strong>SqlSessionFactory</strong> 的对象。因此，SqlSessionFactory 对象应该是『<strong>单例对象</strong>』。<small>在将 Mybatis 和 Spring 整合后，毫无疑问，<strong>SqlSessionFactory</strong> 单例对象的创建工作就交到了 Spring 手里。</small> `</li><li><strong>SqlSession</strong> 是线程不安全的，所以 <strong>SqlSession</strong> 对象是非单例的。</li></ul><h3 id="使用-xml-构建-sqlsessionfactory" tabindex="-1"><a class="header-anchor" href="#使用-xml-构建-sqlsessionfactory" aria-hidden="true">#</a> 使用 XML 构建 SqlSessionFactory</h3><p>MyBatis 中的 XML 文件分为两类，一类是『<strong>基础配置文件</strong>』<small>（也叫『<strong>核心配置文件</strong>』）</small>，它只有一个。另一类是『<strong>映射文件</strong>』，它至少有一个。<small>合计是 <code>1 + N</code> 个配置文件</small>。</p><p>『<strong>基础配置文件</strong>』通常叫做 <strong>mybatis-config.xml</strong> 文件。</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>\n<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">configuration</span>\n  <span class="token name">PUBLIC</span> <span class="token string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span>\n  <span class="token string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token comment">&lt;!-- 别名。非必须。\n  &lt;typeAliases&gt;\n    &lt;typeAlias alias=&quot;dept&quot; type=&quot;com.xja.scott.bean.Department&quot;/&gt;\n  &lt;/typeAliases&gt;\n--&gt;</span>\n  <span class="token comment">&lt;!-- 数据库环境。必须。--&gt;</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>development<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>development<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>JDBC<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>POOLED<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>driver<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.mysql.cj.jdbc.Driver<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>url<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>jdbc:mysql://localhost:3306/scott?useUnicode=true<span class="token entity named-entity" title="&amp;">&amp;amp;</span>characterEncoding=utf-8<span class="token entity named-entity" title="&amp;">&amp;amp;</span>useSSL=false<span class="token entity named-entity" title="&amp;">&amp;amp;</span>serverTimezone=UTC<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>username<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>root<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>password<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>123456<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">&gt;</span></span>\n\n  <span class="token comment">&lt;!-- 映射文件。必须。--&gt;</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">&gt;</span></span>\n    <span class="token comment">&lt;!--这是一个相对于 classpath 的路径名。另外，不需要使用 / 。 --&gt;</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>mapper/DeptMapper.xml<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><ul><li><p><strong>&lt;typeAlias&gt;</strong> 元素为一个类定义了一个别名，这样在后续使用该类时，可以直接使用别名，而不是它的完全限定名。</p></li><li><p><strong>&lt;environment&gt;</strong> 元素描述了一个数据库相关信息。</p><ul><li><p>它里面的 <strong>&lt;transactionManager&gt;</strong> 元素配置了『<strong>事务管理器</strong>』 ，这里采用的是 MyBatis 的 JDBC 管理器方式。</p></li><li><p>它里面的 <strong>&lt;dataSource&gt;</strong> 元素配置了数据库连接的相关信息，其中属性 <strong>type=&quot;POOLED&quot;</strong> 表示采用 MyBatis 内部提供的连接池方式。</p></li></ul></li><li><p><strong>&lt;mapper&gt;</strong> 元素代表引入指定的 Mapper 配置文件。</p></li></ul><p>为了加载 XML 配置文件来构建 <strong>SqlSessionFactory</strong> 对象。MyBaits 专门提供了 <strong>Resources</strong> 类来加载配置文件。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">String</span> resource <span class="token operator">=</span> <span class="token string">&quot;mybatis-config.xml&quot;</span><span class="token punctuation">;</span>\n<span class="token class-name">SqlSessionFactory</span> factory <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n<span class="token class-name">InputStream</span> is <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n\n<span class="token keyword">try</span> <span class="token punctuation">{</span>\n    is <span class="token operator">=</span> <span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p><strong>注意</strong>，Mybatis 对核心配置文件中的内容<small>（子元素）</small> 出现的『<strong>先后顺序有要求</strong>』，你可以没有使用到某个子元素，但是如果你用到了，那么必须符合固定的先后顺序：</p><ul><li>properties（属性）</li><li>settings（设置）</li><li>typeAliases（类型别名）</li><li>typeHandlers（类型处理器）</li><li>objectFactory（对象工厂）</li><li>plugins（插件）</li><li>environments（环境配置） <ul><li>environment（环境变量） <ul><li>transactionManager（事务管理器）</li><li>dataSource（数据源）</li></ul></li></ul></li><li>databaseIdProvider（数据库厂商标识）</li><li>mappers（映射器）</li></ul><h3 id="sqlsession" tabindex="-1"><a class="header-anchor" href="#sqlsession" aria-hidden="true">#</a> SqlSession</h3><p><strong>SqlSession</strong> 是 MyBatis 的核心接口。<strong>SqlSession</strong> 的作用类似于 JDBC 中的 <strong>Connection</strong> 对象，代表着一个数据库的连接。</p><p>它的作用有 3 个：</p><ul><li><p>获取 Mapper 接口。</p></li><li><p>发送 SQL 给数据库。</p></li><li><p>控制数据库事务。</p></li></ul><p>有了 <strong>SqlSessionFactory</strong> 创建 <strong>SqlSession</strong> 就十分简单了：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 相当于</span>\n<span class="token class-name">SqlSession</span> sqlSession <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>由此可见，SqlSession 默认『<strong>未开启</strong>』事务的自动提交<small>（autoCommit）</small>功能。因此需要程序员手动操作事务。</p><blockquote><p>另外，如果在建表时，有意或无意使用的是 <strong>MyIsam</strong> 引擎，那么此处无论是 <strong>true</strong> ，或者 <strong>false</strong> ，都无法回滚，因为 <strong>MyIsam</strong> 数据库引擎本身就不支持事务功能<small>（这是它与 <strong>InnoDB</strong> 引擎的重要区别之一）</small>。</p><p>对初学者而言，建表是错误地使用了数据库引擎，而导致『<strong>事务不回滚</strong>』的常见原因。</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">SqlSession</span> session <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n\n<span class="token keyword">try</span> <span class="token punctuation">{</span>\n    session <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">// some code ...</span>\n    session<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\t\t<span class="token comment">// 提交事务</span>\n<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    session<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\t\t<span class="token comment">// 回滚事务</span>\n<span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>session <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>\n        session<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\t<span class="token comment">// 务必确保关闭 session</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="默认的别名" tabindex="-1"><a class="header-anchor" href="#默认的别名" aria-hidden="true">#</a> 默认的别名</h3><table><thead><tr><th style="text-align:right;">别名</th><th style="text-align:left;">Java 类型</th><th style="text-align:center;">是否支持数组</th><th style="text-align:right;">别名</th><th style="text-align:left;">Java 类型</th><th style="text-align:center;">是否支持数组</th></tr></thead><tbody><tr><td style="text-align:right;">_byte</td><td style="text-align:left;">byte</td><td style="text-align:center;">Y</td><td style="text-align:right;">byte</td><td style="text-align:left;">Byte</td><td style="text-align:center;">Y</td></tr><tr><td style="text-align:right;">_short</td><td style="text-align:left;">short</td><td style="text-align:center;">Y</td><td style="text-align:right;">short</td><td style="text-align:left;">Short</td><td style="text-align:center;">Y</td></tr><tr><td style="text-align:right;">_int</td><td style="text-align:left;">int</td><td style="text-align:center;">Y</td><td style="text-align:right;">int</td><td style="text-align:left;">Integer</td><td style="text-align:center;">Y</td></tr><tr><td style="text-align:right;">_integer</td><td style="text-align:left;">int</td><td style="text-align:center;">Y</td><td style="text-align:right;">integer</td><td style="text-align:left;">Integer</td><td style="text-align:center;">Y</td></tr><tr><td style="text-align:right;">_long</td><td style="text-align:left;">long</td><td style="text-align:center;">Y</td><td style="text-align:right;">long</td><td style="text-align:left;">Long</td><td style="text-align:center;">Y</td></tr><tr><td style="text-align:right;">_float</td><td style="text-align:left;">float</td><td style="text-align:center;">Y</td><td style="text-align:right;">float</td><td style="text-align:left;">Float</td><td style="text-align:center;">Y</td></tr><tr><td style="text-align:right;">_double</td><td style="text-align:left;">double</td><td style="text-align:center;">Y</td><td style="text-align:right;">double</td><td style="text-align:left;">Double</td><td style="text-align:center;">Y</td></tr><tr><td style="text-align:right;">_boolean</td><td style="text-align:left;">boolean</td><td style="text-align:center;">Y</td><td style="text-align:right;">boolean</td><td style="text-align:left;">Boolean</td><td style="text-align:center;">Y</td></tr><tr><td style="text-align:right;">decimal</td><td style="text-align:left;">BigDecimal</td><td style="text-align:center;">Y</td><td style="text-align:right;">bigdecimal</td><td style="text-align:left;">BigDecimal</td><td style="text-align:center;">Y</td></tr><tr><td style="text-align:right;">string</td><td style="text-align:left;">String</td><td style="text-align:center;">Y</td><td style="text-align:right;">date</td><td style="text-align:left;">Date</td><td style="text-align:center;">Y</td></tr><tr><td style="text-align:right;">object</td><td style="text-align:left;">Object</td><td style="text-align:center;">Y</td><td style="text-align:right;">collection</td><td style="text-align:left;">Collection</td><td style="text-align:center;">—</td></tr><tr><td style="text-align:right;">map</td><td style="text-align:left;">Map</td><td style="text-align:center;">——</td><td style="text-align:right;">hashmap</td><td style="text-align:left;">HashMap</td><td style="text-align:center;">——</td></tr></tbody></table><h3 id="补充" tabindex="-1"><a class="header-anchor" href="#补充" aria-hidden="true">#</a> 补充</h3><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>...<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>...<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>...<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>...<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>driver<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>...<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>url<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>...<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>username<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>...<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>password<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>...<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p><strong>&lt;transactionManager type=&quot;...&quot;/&gt;</strong> 表示事务管理器配置，可选值有：<strong>JDBC</strong> 和 <strong>MANAGED</strong> 。</p><table><thead><tr><th style="text-align:left;">属性值</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">JDBC</td><td style="text-align:left;">这个配置表示 MyBatis 底层使用 JDBC 中的 Connection 对象进行事务的提交和回滚。</td></tr><tr><td style="text-align:left;">MANAGED</td><td style="text-align:left;">这个配置表示 MyBatis 底层不进行任何事物的提交和回滚操作，而是由『别人』<small>（容器）</small>来进行事务的操作。<br> 不过，默认情况下它会关闭连接，而有些容器并不希望如此，<br>所以通常使用子元素 <code>&lt;property name=closeConnection&quot; value=&quot;false&quot;/&gt;</code> 来取消这种行为。</td></tr></tbody></table><p>在整合 Spring 和 MyBaits 时，不需要在此配置事务管理器，因为 Spring 会使用其自身的事务管理器来覆盖此处的配置。</p><p><strong>&lt;dataSource type=&quot;...&quot;&gt;</strong> 表示数据源配置，其可选值有：<strong>UNPOOLED</strong> 、<strong>POOLED</strong> 和 <strong>JNDI</strong> 。</p><table><thead><tr><th style="text-align:left;">属性值</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">UNPOOLED</td><td style="text-align:left;">表示不使用连接池，因此每次请求都会打开/关闭连接。</td></tr><tr><td style="text-align:left;">POOLED</td><td style="text-align:left;">表示使用 MyBatis 内部的数连接池功能，此时在底层 Connection 对象会被复用。</td></tr><tr><td style="text-align:left;">JNDI</td><td style="text-align:left;">这表示这数据库连接由容器维护。使用较少。</td></tr></tbody></table><h2 id="执行-sql-语句" tabindex="-1"><a class="header-anchor" href="#执行-sql-语句" aria-hidden="true">#</a> 执行 SQL 语句</h2><p>Mapper 是 MyBatis 最强大的工具与功能，它用于执行 SQL 语句。</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>\n<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span>\n\t<span class="token name">PUBLIC</span> <span class="token string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span>\n\t\t<span class="token string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>...<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>...<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span> ... <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>...<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span> ... <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>...<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span> ... <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>...<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span> ... <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><table><thead><tr><th style="text-align:left;">元素</th><th style="text-align:left;">描述</th><th style="text-align:left;">备注</th></tr></thead><tbody><tr><td style="text-align:left;">select</td><td style="text-align:left;">查询语句，常用又复杂</td><td style="text-align:left;">可以自定义参数，返回结果集等</td></tr><tr><td style="text-align:left;">insert</td><td style="text-align:left;">插入语句</td><td style="text-align:left;">执行后返回一个整数，代表插入的条数</td></tr><tr><td style="text-align:left;">update</td><td style="text-align:left;">更新语句</td><td style="text-align:left;">执行后返回一个整数，代表更新的条数</td></tr><tr><td style="text-align:left;">delete</td><td style="text-align:left;">删除语句</td><td style="text-align:left;">执行后返回一个整数，代表删除的条数</td></tr><tr><td style="text-align:left;">resultMap</td><td style="text-align:left;">定义查询结果映射关系，常用又复杂</td><td style="text-align:left;">它将提供映射规则</td></tr></tbody></table><h3 id="增删改操作" tabindex="-1"><a class="header-anchor" href="#增删改操作" aria-hidden="true">#</a> 增删改操作</h3><h4 id="insert-元素" tabindex="-1"><a class="header-anchor" href="#insert-元素" aria-hidden="true">#</a> insert 元素</h4><p>insert 元素的必要属性有 ：</p><table><thead><tr><th style="text-align:left;">元素名</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">id</td><td style="text-align:left;">和 Mapper 的 namespace 组合起来是唯一的，提供给 MyBatis 调用。</td></tr><tr><td style="text-align:left;">parameterType</td><td style="text-align:left;">类的完全限定名，或内置/自定义的类的别名（Alias）。 <br> 可以向 SQL 传递 JavaBean 和 Map 等复杂参数类型，<small>但 Map 参数不建议使用</small>。</td></tr></tbody></table><p>MyBatis 在执行插入之后会返回一个 <strong>整数</strong>，以表示插入的记录数。</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>insertDepartment<span class="token punctuation">&quot;</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.xja.hemiao.bean.Department<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n  INSERT INTO dept(dname, loc) VALUES(#{dname}, #{loc});\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><blockquote><p>在传递参数时，MyBatis 中可用的占位符有两种：<strong><code>#{}</code></strong> 和 <strong><code>${}</code></strong> 。</p><ul><li><strong><code>#{}</code></strong>：MyBatis 使用的是 JDBC 中的 <strong>PreparedStatement</strong> 。</li><li><strong><code>${}</code></strong>：MyBatis 使用的是 JDBC 中的 <strong>Statement</strong> 。</li></ul></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// 这是一个相较于 classpath 的文件路径名。而且，不需要使用 / 。</span>\n<span class="token class-name">InputStream</span> is <span class="token operator">=</span> <span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">&quot;mybatis-config.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">SqlSessionFactory</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">SqlSession</span> session <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name">Department</span> dept <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Department</span><span class="token punctuation">(</span><span class="token string">&quot;Test&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;BeiJing&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">int</span> n <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">&quot;xxx.yyy.zzz.insertDepartment&quot;</span><span class="token punctuation">,</span> dept<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 输出打印 1</span>\n\nsession<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nsession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h4 id="insert-过程中的主键回填" tabindex="-1"><a class="header-anchor" href="#insert-过程中的主键回填" aria-hidden="true">#</a> insert 过程中的主键回填</h4><p>大多数情况下，插入信息的主键是由数据库底层生成的，在插入数据后，我们往往需要这个主键，以便于未来的操作。为此，MyBatis 提供了主键回填功能。<small>这个功能需要数据库和数据库驱动支持，MyBatis 才能正常使用它。</small></p><p>开启主键回填功能的 insert 必要属性：</p><table><thead><tr><th style="text-align:left;">属性</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">useGeneratedKeys</td><td style="text-align:left;">启用主键回填功能的开关属性。<code>&quot;true&quot;</code></td></tr><tr><td style="text-align:left;">keyProperty</td><td style="text-align:left;">指定需要回填的 Bean 属性<small>（对应数据库主键列的那个属性）</small></td></tr></tbody></table><p>如果你有大量的 insert 都要用到主键回填功能，而你又觉得要在所有的这些 <code>&lt;insert ...&gt;</code> 中每一个都去写 <code>userGeneratedKeys=&quot;true&quot;</code> 很麻烦，MyBatis 的核心配置文件中的 <strong><code>&lt;settings&gt;</code></strong> 中有一个全局设置，可以帮你批量开启所有的 <code>&lt;insert ...&gt;</code> 的主键回填功能：</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">&gt;</span></span>\n  ...\n  <span class="token comment">&lt;!-- 默认值是 false 。因此你要一个个地写。 --&gt;</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>useGeneratedKeys<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n  ...\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><blockquote><p>注意 <strong>&lt;settings&gt;</strong> 的位置。MyBatis 对配置文件的内容的先后顺序有要求。</p></blockquote><h4 id="delete-元素-和-update-元素" tabindex="-1"><a class="header-anchor" href="#delete-元素-和-update-元素" aria-hidden="true">#</a> delete 元素 和 update 元素</h4><p>和 insert 元素一样，MyBatis 执行完 update 元素 和 delete 元素后会返回一个整数，标示执行后影响的记录条数。</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>updateDepartment<span class="token punctuation">&quot;</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dept<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n  UPDATE dept SET dname = #{dname}, loc = #{loc} WHERE deptno = #{deptno}\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>deleteDepartment<span class="token punctuation">&quot;</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>int<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n  DELETE FROM dept WHERE deptno = #{deptno}\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\nsession<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">&quot;xxx.yyy.zzz.insertDepartment&quot;</span><span class="token punctuation">,</span> dept<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\nsession<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token string">&quot;xxx.yyy.zzz.updateDepartment&quot;</span><span class="token punctuation">,</span> dept<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\nsession<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">&quot;xxx.yyy.zzz.deleteDepartment&quot;</span><span class="token punctuation">,</span> <span class="token number">41</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="getmapper-方法" tabindex="-1"><a class="header-anchor" href="#getmapper-方法" aria-hidden="true">#</a> getMapper 方法</h3><p>通过 SqlSession 的 insert、upate、delete 和 selectOne、selectList 方法可以去调用 Mapper.xml 中定义的配置文件，进而操作数据库。不过，MyBatis 提供了更『高端』的操作，『帮』程序员去实现 DAO 层代码。</p><p>如果将 Mapper.xml 配置文件的 namespace『故意』写的和一个 DAO 接口的完全路径名一样，并且该接口中的方法名有『碰巧』和 Mapp.xml 配置文件中的各个 SQL 语句的 id 值一样，那么 MyBatis 就会去为该接口动态生成一个实现类。</p><p>通过 SqlSession 的 <strong>getMapper</strong> 方法传入接口的类对象，就可以获得这个由 MyBatis 动态生成的 DAO 接口的实现类。</p><p>3 个『保持一致』：</p><ul><li><p><em>Mapper.xml</em> 的 <strong>namespace</strong> 与接口的完全限定名保持一致。</p></li><li><p>SQL 语句的 <strong>id</strong> 属性值与接口中的方法名保持一致。</p></li><li><p>SQL 语句的 <strong>parameterType</strong> 属性值与接口的方法的参数类型保持一致。</p></li></ul><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">xxx<span class="token punctuation">.</span>yyy<span class="token punctuation">.</span>zzz<span class="token punctuation">.</span>dao</span><span class="token punctuation">;</span>\n\n<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">DepartmentDao</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Department</span><span class="token punctuation">&gt;</span></span> <span class="token function">listDepartments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>xxx.yyy.zzz.dao.DepartmentDao<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- 注意，此处是接口的完全限定名字。--&gt;</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>listDepartments<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dept<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    SELECT * FROM dept\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>\n  ...\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">DepartmentDao</span> dao <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">DepartmentDao</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Department</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">listDepartments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="查操作" tabindex="-1"><a class="header-anchor" href="#查操作" aria-hidden="true">#</a> 查操作</h3><h4 id="select-元素" tabindex="-1"><a class="header-anchor" href="#select-元素" aria-hidden="true">#</a> select 元素</h4><p>通过 MyBatis 执行 SQL 后，MyBatis 通过其强大的映射规则，可以自动地将返回的结果集绑定到 JavaBean 中。</p><p>select 元素的必要属性有：</p><table><thead><tr><th style="text-align:left;">属性</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">id</td><td style="text-align:left;">和 Mapper 的 namespace 组合起来必须唯一</td></tr><tr><td style="text-align:left;">parameterType</td><td style="text-align:left;">类的完全限定名，或内置/自定义的类的别名（Alias）<br>。可以向 SQL 传递 JavaBean 和 Map 等复杂参数类型。</td></tr><tr><td style="text-align:left;">resultType</td><td style="text-align:left;">类的完全限定名，查询结果将通过固定规范进行映射；<br>或者定义为 int、double、float 等参数。</td></tr><tr><td style="text-align:left;">resultMap</td><td style="text-align:left;">resultType 的“高级版”，允许我们自定义映射规则。<br><small><strong>不能与 resultType 同时使用</strong>。</small></td></tr></tbody></table><h4 id="select-与-聚合函数" tabindex="-1"><a class="header-anchor" href="#select-与-聚合函数" aria-hidden="true">#</a> select 与 聚合函数</h4><p>并不是所有的 select 语句都会返回一行，或多行记录。例如，在 select 中使用聚合函数。这种情况对于 MyBatis 而言最为简单，因为不需要将结果集映射成 JavaBean ，它只需要返回一行一列的单个数据。</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>getMaxSal<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>int<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n  SELECT * FROM dept WHERE deptno = #{deptno}\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token comment">&lt;!-- 此处特意是 string 类型，以验证效果 --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>getEmployeeCount<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>string<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n  SELECT count(empno) FROM emp;\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">int</span> n <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">selectOne</span><span class="token punctuation">(</span><span class="token string">&quot;xxx.yyy.zzz.getMaxSal&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name">String</span> str <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">selectOne</span><span class="token punctuation">(</span><span class="token string">&quot;xxx.yyy.zzz.getemployeeCount&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>MyBatis 可以很智能地将返回结果转换为你所指定的类型，如：int、String 等。</p><h3 id="传递多个参数" tabindex="-1"><a class="header-anchor" href="#传递多个参数" aria-hidden="true">#</a> 传递多个参数</h3><p>多参数的传递有三种方法：</p><table><thead><tr><th style="text-align:left;">传递方式</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">使用 Map 传参</td><td style="text-align:left;">不建议使用（已被 JavaBean 传参替代）</td></tr><tr><td style="text-align:left;">使用 JavaBean 传参</td><td style="text-align:left;"><strong>大量多参</strong> 传递时使用</td></tr><tr><td style="text-align:left;">使用 注解 传参</td><td style="text-align:left;"><strong>少量多参</strong> 传递时使用</td></tr></tbody></table><h4 id="使用-map-传递多参数" tabindex="-1"><a class="header-anchor" href="#使用-map-传递多参数" aria-hidden="true">#</a> 使用 Map 传递多参数</h4><p>MyBatis 支持 Map 对象作为参数，此时，要求 select 元素的 <code>parameterType</code> 值为 <code>map</code> 。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectBySal1</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> salMap<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selectBySal1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>map<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Employee<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n  select * from emp where sal &gt;= #{minSal} and sal <span class="token entity named-entity" title="&lt;">&amp;lt;</span> #{maxSal}\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nmap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;minSal&quot;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nmap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;maxSal&quot;</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">selectBySal1</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Employee</span> emp <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> emp<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h4 id="使用-javabean-传递多参" tabindex="-1"><a class="header-anchor" href="#使用-javabean-传递多参" aria-hidden="true">#</a> 使用 JavaBean 传递多参</h4><p>由于 Map 的无语义性，因此官方 不建议使用 Map 传参！</p><p>此时，要求 <code>select</code> 元素的 <code>parameterType</code> 属性值为 JavaBean 的完全限定名（或别名）。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SallaryRegion</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token class-name">Integer</span> minSallary<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">Integer</span> maxSallary<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>List&lt;Employee&gt; selectBySal2(SallaryRegion region);\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selectBySal2<span class="token punctuation">&quot;</span></span>\n        <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.microboom.bean.po.SallaryRegion<span class="token punctuation">&quot;</span></span>\n        <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Employee<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    select * \n    from emp \n    where sal &gt;= #{minSallary} \n      and sal <span class="token entity named-entity" title="&lt;">&amp;lt;</span> #{maxSallary}\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h4 id="使用注解方式传递多参数" tabindex="-1"><a class="header-anchor" href="#使用注解方式传递多参数" aria-hidden="true">#</a> 使用注解方式传递多参数</h4><p>如果所有的多参数传递都通过定义并使用 JavaBean 来进行，那么项目中会出现大量的参数 JavaBean 的定义，显然这也并不太合理。</p><p>为此，Mybatis 提供了参数注解，以减少参数 JavaBean 的定义。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectBySal3</span><span class="token punctuation">(</span>\n    <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">&quot;xxx&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> minSallary<span class="token punctuation">,</span>\n    <span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">&quot;yyy&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Integer</span> <span class="token class-name">MaxSallary</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selectBySal3<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Employee<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n  select * \n  from emp \n  where sal &gt;= #{xxx} \n    and sal <span class="token entity named-entity" title="&lt;">&amp;lt;</span> #{yyy}\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><code>补充</code>，<small>MyBatis 框架的注解功能相对而言比较薄弱，官方推荐使用 XML 配置，而非注解，但是少量的多参数传递，是 必须使用注解 的场景。</small></p>',108),e={render:function(n,s){return t}}}}]);