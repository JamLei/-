"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[5406],{49439:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-341a0200",path:"/docker-install/04-nginx.html",title:"Docker Nginx",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"安装及测试",slug:"安装及测试",children:[]},{level:2,title:"容器中的配置文件和数据的存储",slug:"容器中的配置文件和数据的存储",children:[]},{level:2,title:"配置与挂载",slug:"配置与挂载",children:[]}],filePathRelative:"docker-install/04-nginx.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},9611:(n,s,a)=>{a.r(s),a.d(s,{default:()=>o});var e=a(66252);const l=(0,e._)("h1",{id:"docker-nginx",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#docker-nginx","aria-hidden":"true"},"#"),(0,e.Uk)(" Docker Nginx")],-1),r=(0,e.Uk)("docker hub 网址："),p={href:"https://hub.docker.com/_/nginx",target:"_blank",rel:"noopener noreferrer"},i=(0,e._)("em",null,"https://hub.docker.com/_/nginx",-1),c=(0,e.Uk)(" 。"),t=(0,e.uE)('<p>当前<small>（2021-04-02）</small> <strong>latest</strong> 版本和 <strong>1.19.9</strong> 版本是同一个版本；<strong>stable</strong> 版本和 <strong>1.18.0</strong> 版本是同一个版本。</p><h2 id="安装及测试" tabindex="-1"><a class="header-anchor" href="#安装及测试" aria-hidden="true">#</a> 安装及测试</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># 查询中央仓库</span>\ndocker search -f is-official<span class="token operator">=</span>true mysql\n\n<span class="token comment"># 从中央仓库下载</span>\ndocker pull nginx:1.18.0\n\n<span class="token comment"># 或，直接导入已有的镜像文件</span>\n<span class="token comment"># docker load -i nginx-1.1.18.0.tar</span>\n\n<span class="token comment"># 查看本地镜像</span>\ndocker images\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>会出现类似如下内容：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>REPOSITORY    TAG       IMAGE ID       CREATED        SIZE\nnginx         1.18.0    b9e1dc12387a   2 months ago   133MB\nnginx         1.19.9    7ce4f91ef623   2 days ago     133MB\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>运行容器：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># 删除曾经已有的同名容器</span>\ndocker stop nginx-test\ndocker <span class="token function">rm</span> nginx-test\n\n<span class="token comment"># 创建并运行 nginx 容器的语法</span>\ndocker run <span class="token punctuation">\\</span>\n    -d <span class="token punctuation">\\</span>\n    --name <span class="token operator">&lt;</span>指定容器名<span class="token operator">&gt;</span> <span class="token punctuation">\\</span>\n    -p <span class="token operator">&lt;</span>指定宿主机端口<span class="token operator">&gt;</span>:80 <span class="token punctuation">\\</span> \n    nginx:1.18.0\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>例如：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>docker run <span class="token punctuation">\\</span>\n    -d <span class="token punctuation">\\</span>\n    --name nginx-test <span class="token punctuation">\\</span>\n    -p <span class="token number">80</span>:80 <span class="token punctuation">\\</span> \n    nginx:1.16.1\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>验证安装成功</p><ul><li><p>通过 <strong>docker ps</strong> 命令查看容器的运行信息：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>docker <span class="token function">ps</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>会看到类似如下信息:</p><p>略</p></li><li><p>访问 nginx 主页</p><p>启动容器后，访问 <strong>http://宿主机IP:80</strong> 能看到 Nginx 的欢迎界面： <strong>Welcome to nginx!</strong></p></li></ul><h2 id="容器中的配置文件和数据的存储" tabindex="-1"><a class="header-anchor" href="#容器中的配置文件和数据的存储" aria-hidden="true">#</a> 容器中的配置文件和数据的存储</h2><p>Docker Nginx 的配置文件是容器中的</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>/etc/nginx/nginx.conf\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Docker Nginx 的日志目录是容器中的</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>/var/log/nginx/\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Docker Nginx 的静态资源文件目录是容器中的</p><p>【暂缺】</p><h2 id="配置与挂载" tabindex="-1"><a class="header-anchor" href="#配置与挂载" aria-hidden="true">#</a> 配置与挂载</h2><ul><li><p>删除已存在的同名容器</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>docker stop nginx-80\ndocker <span class="token function">rm</span> nginx-80\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>后续可通过 <em>docker run</em> 的 <strong>--rm</strong> 选项免去『删除』这步操作。</p></li><li><p>在宿主机上创建目录及配置文件。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">mkdir</span> -p ~/docker/nginx/80/log\n<span class="token function">touch</span> ~/docker/nginx/80/nginx.conf\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><p>创建并运行容器</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>docker run  <span class="token punctuation">\\</span>\n    -d  <span class="token punctuation">\\</span>\n    --rm <span class="token punctuation">\\</span>\n    --name nginx-80 <span class="token punctuation">\\</span>\n    -p <span class="token number">80</span>:80 <span class="token punctuation">\\</span>\n    -v ~/docker/nginx/80/nginx.conf:/etc/nginx/nginx.conf:ro <span class="token punctuation">\\</span>\n    -v ~/docker/nginx/80/log:/var/log/nginx <span class="token punctuation">\\</span>\n    nginx:1.18.0\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></li></ul><hr><p>以下内容是 nginx 配置文件的默认内容：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>user  nginx;\nworker_processes  1;\n\nerror_log  /var/log/nginx/error.log warn;\npid        /var/run/nginx.pid;\n\nevents {\n    worker_connections  1024;\n}\n\nhttp {\n    include       /etc/nginx/mime.types;\n    default_type  application/octet-stream;\n\n    log_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;\n                      &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;\n                      &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;\n\n    access_log  /var/log/nginx/access.log  main;\n\n    sendfile        on;\n    #tcp_nopush     on;\n\n    keepalive_timeout  65;\n\n    #gzip  on;\n\n    include /etc/nginx/conf.d/*.conf;\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div>',23),o={render:function(n,s){const a=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.iD)(e.HY,null,[l,(0,e._)("p",null,[r,(0,e._)("a",p,[i,(0,e.Wm)(a)]),c]),t],64)}}}}]);