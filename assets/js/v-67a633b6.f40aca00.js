"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[7793],{72686:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-67a633b6",path:"/spring/99-Spring-EL.html",title:"Spring 表达式语言",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"创建和使用解析器",slug:"创建和使用解析器",children:[]},{level:2,title:"字面量",slug:"字面量",children:[]},{level:2,title:"集合",slug:"集合",children:[]},{level:2,title:"访问对象属性和集合单元",slug:"访问对象属性和集合单元",children:[]},{level:2,title:"方法",slug:"方法",children:[]},{level:2,title:"运算符",slug:"运算符",children:[]},{level:2,title:"类型",slug:"类型",children:[]},{level:2,title:"构造器",slug:"构造器",children:[]},{level:2,title:"变量",slug:"变量",children:[]},{level:2,title:"10. #this 和 #root",slug:"_10-this-和-root",children:[]},{level:2,title:"11. Bean 引用",slug:"_11-bean-引用",children:[]},{level:2,title:"12. 三元运算符",slug:"_12-三元运算符",children:[]},{level:2,title:"13. Elvis 运算符",slug:"_13-elvis-运算符",children:[]},{level:2,title:"14. 安全导航运算符",slug:"_14-安全导航运算符",children:[]},{level:2,title:"15. 集合选择",slug:"_15-集合选择",children:[]},{level:2,title:"16. 集合投影",slug:"_16-集合投影",children:[]},{level:2,title:"17. 表达式模板",slug:"_17-表达式模板",children:[]}],filePathRelative:"spring/99-Spring-EL.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},48429:(n,s,a)=>{a.r(s),a.d(s,{default:()=>e});const p=(0,a(66252).uE)('<h1 id="spring-表达式语言" tabindex="-1"><a class="header-anchor" href="#spring-表达式语言" aria-hidden="true">#</a> Spring 表达式语言</h1><h2 id="创建和使用解析器" tabindex="-1"><a class="header-anchor" href="#创建和使用解析器" aria-hidden="true">#</a> 创建和使用解析器</h2><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">String</span> elStr <span class="token operator">=</span> <span class="token string">&quot;xxx&quot;</span><span class="token punctuation">;</span>\n\n<span class="token class-name">ExpressionParser</span> parser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpelExpressionParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">Expression</span> expression <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span>elStr<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">String</span> result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> expression<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="字面量" tabindex="-1"><a class="header-anchor" href="#字面量" aria-hidden="true">#</a> 字面量</h2><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">String</span> elStr <span class="token operator">=</span> <span class="token string">&quot;&#39;Hello World&#39;&quot;</span><span class="token punctuation">;</span>     <span class="token comment">// 字符串字面量</span>\n\n<span class="token class-name">String</span> elStr <span class="token operator">=</span> <span class="token string">&quot;6.0221415E+23&quot;</span><span class="token punctuation">;</span>     <span class="token comment">// 数字字面量</span>\n<span class="token class-name">String</span> elStr <span class="token operator">=</span> <span class="token string">&quot;0x7FFFFFFF&quot;</span><span class="token punctuation">;</span>\n<span class="token class-name">String</span> elStr <span class="token operator">=</span> <span class="token string">&quot;9527&quot;</span><span class="token punctuation">;</span>\n\n<span class="token class-name">String</span> elStr <span class="token operator">=</span> <span class="token string">&quot;true&quot;</span><span class="token punctuation">;</span>              <span class="token comment">// 布尔值字面量</span>\n\n<span class="token class-name">String</span> elStr <span class="token operator">=</span> <span class="token string">&quot;null&quot;</span><span class="token punctuation">;</span>              <span class="token comment">// null 对象字面量</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><hr><h2 id="集合" tabindex="-1"><a class="header-anchor" href="#集合" aria-hidden="true">#</a> 集合</h2><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">String</span> elStr <span class="token operator">=</span> <span class="token string">&quot;{1, 2, 3, 4}&quot;</span><span class="token punctuation">;</span>      <span class="token comment">// 表示 List 和 Set 对象</span>\n\n<span class="token class-name">String</span> elStr <span class="token operator">=</span> <span class="token string">&quot;{name:&#39;Nikola&#39;, dob:&#39;10-July-1856&#39;}&quot;</span><span class="token punctuation">)</span>\n                                    <span class="token comment">// 表示 Map 对象</span>\n\n<span class="token class-name">String</span> elStr <span class="token operator">=</span> <span class="token string">&quot;new int[4]&quot;</span>         <span class="token comment">// 表示数组对象</span>\n<span class="token class-name">String</span> elStr <span class="token operator">=</span> <span class="token string">&quot;new int[]{1,2,3}&quot;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="访问对象属性和集合单元" tabindex="-1"><a class="header-anchor" href="#访问对象属性和集合单元" aria-hidden="true">#</a> 访问对象属性和集合单元</h2><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">String</span> elStr <span class="token operator">=</span> <span class="token string">&quot;dept1.deptno&quot;</span><span class="token punctuation">;</span>      <span class="token comment">// 访问对象属性</span>\n\n<span class="token class-name">String</span> elStr <span class="token operator">=</span> <span class="token string">&quot;arr[3]&quot;</span><span class="token punctuation">;</span>            <span class="token comment">// 访问 数组 和 list 单元</span>\n<span class="token class-name">String</span> elStr <span class="token operator">=</span> <span class="token string">&quot;list[3]&quot;</span><span class="token punctuation">;</span>\n\n<span class="token class-name">String</span> elStr <span class="token operator">=</span> <span class="token string">&quot;Officers[&#39;president&#39;]&quot;</span><span class="token punctuation">;</span>\n                                    <span class="token comment">// 访问 Map 键值对</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><hr><h2 id="方法" tabindex="-1"><a class="header-anchor" href="#方法" aria-hidden="true">#</a> 方法</h2><p>方法和Java语法一样。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// string literal, evaluates to &quot;bc&quot;</span>\n<span class="token class-name">String</span> c <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">&quot;&#39;abc&#39;.substring(2, 3)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><hr><h2 id="运算符" tabindex="-1"><a class="header-anchor" href="#运算符" aria-hidden="true">#</a> 运算符</h2><p>表达式中支持各种运算符，运算规则和Java规则类似。唯一需要注意的是空值的处理，假设有非空值val，那么下面的表达式恒为真：val &gt; null。这一点需要注意。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// evaluates to true</span>\n<span class="token keyword">boolean</span> trueValue <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">&quot;2 == 2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// evaluates to false</span>\n<span class="token keyword">boolean</span> falseValue <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">&quot;2 &lt; -5.0&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// evaluates to true</span>\n<span class="token keyword">boolean</span> trueValue <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">&quot;&#39;black&#39; &lt; &#39;block&#39;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>逻辑运算符可以使用 and、or 和 ! 。</p><hr><h2 id="类型" tabindex="-1"><a class="header-anchor" href="#类型" aria-hidden="true">#</a> 类型</h2><p>特殊的T运算符可以获取表达式对象的类型。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Class</span> dateClass <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">&quot;T(java.util.Date)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name">Class</span> stringClass <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">&quot;T(String)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">boolean</span> trueValue <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span>\n        <span class="token string">&quot;T(java.math.RoundingMode).CEILING &lt; T(java.math.RoundingMode).FLOOR&quot;</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><hr><h2 id="构造器" tabindex="-1"><a class="header-anchor" href="#构造器" aria-hidden="true">#</a> 构造器</h2><p>在表达式中，使用new关键字来调用构造器。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Inventor</span> einstein <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span>\n        <span class="token string">&quot;new org.spring.samples.spel.inventor.Inventor(&#39;Albert Einstein&#39;, &#39;German&#39;)&quot;</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">Inventor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><hr><h2 id="变量" tabindex="-1"><a class="header-anchor" href="#变量" aria-hidden="true">#</a> 变量</h2><p>在表达式上下文中，我们可以设置新变量。然后在表达式中使用#变量名访问变量。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Inventor</span> tesla <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Inventor</span><span class="token punctuation">(</span><span class="token string">&quot;Nikola Tesla&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Serbian&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">StandardEvaluationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StandardEvaluationContext</span><span class="token punctuation">(</span>tesla<span class="token punctuation">)</span><span class="token punctuation">;</span>\ncontext<span class="token punctuation">.</span><span class="token function">setVariable</span><span class="token punctuation">(</span><span class="token string">&quot;newName&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Mike Tesla&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nparser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">&quot;Name = #newName&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>tesla<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// &quot;Mike Tesla&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><hr><h2 id="_10-this-和-root" tabindex="-1"><a class="header-anchor" href="#_10-this-和-root" aria-hidden="true">#</a> 10. #this 和 #root</h2><p><code>#this</code> 和 <code>#root</code> 代表了表达式上下文的对象，#root就是当前的表达式上下文对象，#this则根据当前求值环境的不同而变化。下面的例子中，#this即每次循环的值。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// create an array of integers</span>\n<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> primes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nprimes<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// create parser and set variable &#39;primes&#39; as the array of integers</span>\n<span class="token class-name">ExpressionParser</span> parser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpelExpressionParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">StandardEvaluationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StandardEvaluationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ncontext<span class="token punctuation">.</span><span class="token function">setVariable</span><span class="token punctuation">(</span><span class="token string">&quot;primes&quot;</span><span class="token punctuation">,</span>primes<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// all prime numbers &gt; 10 from the list (using selection ?{...})</span>\n<span class="token comment">// evaluates to [11, 13, 17]</span>\n<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> primesGreaterThanTen <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span>\n        <span class="token string">&quot;#primes.?[#this&gt;10]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><hr><h2 id="_11-bean-引用" tabindex="-1"><a class="header-anchor" href="#_11-bean-引用" aria-hidden="true">#</a> 11. Bean 引用</h2><p>这是Spring表达式独有的功能，我们可以在表达式中引用配置文件定义的其他Bean，这需要语法@Bean名称。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">ExpressionParser</span> parser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpelExpressionParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">StandardEvaluationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StandardEvaluationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ncontext<span class="token punctuation">.</span><span class="token function">setBeanResolver</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyBeanResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// This will end up calling resolve(context,&quot;foo&quot;) on MyBeanResolver during evaluation</span>\n<span class="token class-name">Object</span> bean <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">&quot;@foo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>\n如果需要获取<span class="token class-name">Bean</span>工厂本身而不是它构造的<span class="token class-name">Bean</span>，可以使用<span class="token operator">&amp;</span><span class="token class-name">Bean</span>名称。\n\n<span class="token class-name">Object</span> bean <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">&quot;&amp;foo&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><hr><h2 id="_12-三元运算符" tabindex="-1"><a class="header-anchor" href="#_12-三元运算符" aria-hidden="true">#</a> 12. 三元运算符</h2><p>和Java的三元运算符类似。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">String</span> falseString <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span>\n        <span class="token string">&quot;false ? &#39;trueExp&#39; : &#39;falseExp&#39;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><hr><h2 id="_13-elvis-运算符" tabindex="-1"><a class="header-anchor" href="#_13-elvis-运算符" aria-hidden="true">#</a> 13. Elvis 运算符</h2><p>在一些编程语言中（比如C#、Kotlin等）提供该功能，语法是?:。意义是当某变量不为空的时候使用该变量，当该变量为空的时候使用指定的默认值。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">ExpressionParser</span> parser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpelExpressionParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name">String</span> name <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">&quot;name?:&#39;Unknown&#39;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;Unknown&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><hr><h2 id="_14-安全导航运算符" tabindex="-1"><a class="header-anchor" href="#_14-安全导航运算符" aria-hidden="true">#</a> 14. 安全导航运算符</h2><p>这是来自Groovy的一个功能，语法是?.，当然有些语言也提供了这个功能。当我们对对象的某个属性求值时，如果该对象本身为空，就会抛出空指针异常，如果使用安全导航运算符，空对象的属性就会简单的返回空。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>city <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">&quot;PlaceOfBirth?.City&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>city<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// null - does not throw NullPointerException!!!</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><hr><h2 id="_15-集合选择" tabindex="-1"><a class="header-anchor" href="#_15-集合选择" aria-hidden="true">#</a> 15. 集合选择</h2><p>这有点类似Java 8的Filter流方法，作用是选择或者说是过滤，语法是集合对象.?[选择表达式]，Spring会迭代集合对象的每一个元素，并使用选择表达式判断该元素是否满足条件，最后返回由满足条件的元素组成的新集合。下面的例子就返回了值大于27的新Map。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Map</span> newMap <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">&quot;map.?[value&lt;27]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><hr><h2 id="_16-集合投影" tabindex="-1"><a class="header-anchor" href="#_16-集合投影" aria-hidden="true">#</a> 16. 集合投影</h2><p>这类似Java 8的Map流方法或者SQL语言的选择语句，作用是将一个集合中所有元素的某属性抽取出来，组成一个新集合。语法是![投影表达式]。下面的例子选出了由Member的placeOfBirth的city属性组成的新集合。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">List</span> placesOfBirth <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token punctuation">)</span>parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span><span class="token string">&quot;Members.![placeOfBirth.city]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><hr><h2 id="_17-表达式模板" tabindex="-1"><a class="header-anchor" href="#_17-表达式模板" aria-hidden="true">#</a> 17. 表达式模板</h2><p>表达式模板使用#{}定义，它允许我们混合多种结果。下面就是一个例子，首先Spring会先对模板中的表达式求值，在这里是返回一个随机值，然后将结果和外部的表达式组合起来。最终的结果就向下面这样了。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">String</span> randomPhrase <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span>\n        <span class="token string">&quot;random number is #{T(java.lang.Math).random()}&quot;</span><span class="token punctuation">,</span>\n        <span class="token keyword">new</span> <span class="token class-name">TemplateParserContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 结果是 &quot;random number is 0.7038186818312008&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>如果表达式只是一个简单的表达式，就不需要使用模板。只有表达式有很多表达式组成时才需要。</p>',64),e={render:function(n,s){return p}}}}]);