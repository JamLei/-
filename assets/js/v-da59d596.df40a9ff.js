"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[2707],{44419:(s,n,a)=>{a.r(n),a.d(n,{data:()=>e});const e={key:"v-da59d596",path:"/vue-cli/vue-cli-01.html",title:"vue-cli",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"webpack",slug:"webpack",children:[]},{level:2,title:"介绍和安装",slug:"介绍和安装",children:[]},{level:2,title:"快速上手",slug:"快速上手",children:[]},{level:2,title:"IDEA 中创建 Vue 项目",slug:"idea-中创建-vue-项目",children:[]},{level:2,title:"单文件组件",slug:"单文件组件",children:[]},{level:2,title:"package.json 文件",slug:"package-json-文件",children:[]},{level:2,title:"vue.config.js 文件",slug:"vue-config-js-文件",children:[]},{level:2,title:"跨域问题解决",slug:"跨域问题解决",children:[]}],filePathRelative:"vue-cli/vue-cli-01.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},84470:(s,n,a)=>{a.r(n),a.d(n,{default:()=>c});var e=a(66252);const t=(0,e.uE)('<h1 id="vue-cli" tabindex="-1"><a class="header-anchor" href="#vue-cli" aria-hidden="true">#</a> vue-cli</h1><h2 id="webpack" tabindex="-1"><a class="header-anchor" href="#webpack" aria-hidden="true">#</a> webpack</h2><p>前端项目工程化的标志之一就是引入了『<strong>编译</strong>』环节，而 <strong>webpack</strong> 就是最常见、最常用的前端项目编译工具。</p><blockquote><p>如果作类比的话，那么 npm + webpack ≈ maven 。</p></blockquote><p>本来，我们应该是直接使用、配置 webpack ，由 webpack 来管理、配置、编译我们的 web 前端项目源码。只不过，<strong>直接去使用 webpack 会十分繁琐</strong><small>（专业人士除外）</small>，不简便。因此，前端各大框架<small>（不仅仅是 vue）</small>都提供了所谓的『<strong>脚手架</strong>』。通过『脚手架』对 webpack 进行二次『包装』。</p><p>这样，我们是『<strong>直接使用脚手架，间接使用 webpack</strong>』去管理、编译我们的 web 前端项目源码。</p><h2 id="介绍和安装" tabindex="-1"><a class="header-anchor" href="#介绍和安装" aria-hidden="true">#</a> 介绍和安装</h2><p>vue 官方提供的用于快速搭建 vue 项目的脚手架名为 <strong>vue-cli</strong> 。实际上，从 3.x 开始，它的正式名称就更名为 <strong>@vue/cli</strong>，但在日常交流中，大家还是习惯性称呼为 vue-cli 。</p><p>通过 <strong>@vue/cli</strong> ，你能快速的构建一个基于 Vue 框架的 web 工程模板，最新的 @vue/cli 的版本是 <strong>4.x</strong> 。</p>',9),p=(0,e.Uk)("官网："),l={href:"https://github.com/vuejs/vue-cli",target:"_blank",rel:"noopener noreferrer"},o=(0,e.Uk)("https://github.com/vuejs/vue-cli"),r=(0,e.uE)('<p>这里有 2 点需要注意的：</p><ol><li><p>vue-cli 正式的名字现在叫 <strong>@vue/cli</strong>，这是从 <strong>3.x</strong> 开始改的名字。在 1.x 和 2.x 时代，它叫 vue-cli 。首先先确保你没有安装老版本：</p></li><li><p>vue-cli 从 <code>2.x</code> 升级到 <code>3.x</code> 之后，它的使用发生了一定的变化。例如，</p></li></ol><p>因为 @vue/cli 更名问题，确定已删除 1.x 和 2.x 时代的 vue-cli</p><pre><code>npm uninstall -g vue-cli\n</code></pre><p>从 vue-cli 变更为 @vue/cli 时，对于它的使用<small>（命令）</small>也发生了变化。例如，创建项目的所使用的命令，vue-cli 里是 <code>vue init</code>，到了 @vue/cli 就变为了 <code>vue create</code> 。所以，在查阅资料时，注意下它所使用的是哪个版本的 vue-cli。也许，因为版本问题，你复制粘贴过来的命令根本就执行不了。</p><p>然后，安装 3.x 和 4.x 时代的 <strong>@vue/cli</strong> ：</p><pre><code>npm install -g @vue/cli\n</code></pre><p>安装结束后，你可以通过 <strong>vue --version</strong> 或 <strong>vue -V</strong> 查看 vue-cli 的版本信息。</p><h2 id="快速上手" tabindex="-1"><a class="header-anchor" href="#快速上手" aria-hidden="true">#</a> 快速上手</h2><blockquote><p>@vue/cli 提供了一个 web 页面可用于创建项目<small>（vue-cli 没有）</small>，不过本质上和下面的命令行创建是一模一样的。通过 <strong>vue ui</strong> 命令你可以启动这个内置的 web 服务在页面上创建 vue 项目。</p></blockquote><p>使用如下命令开始创建 vue 项目<small>（这里示例项目名为 <em>hello-world</em> ）</small>：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>vue create hello-world\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>你会看到如下内容：</p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/vue-cli/img/vue-cli-1.png" alt="vue-cli-1"></p><ul><li><p>第一项（ <code>default ...</code>）表示的是使用默认配置创建 vue 项目。</p></li><li><p>第二项（ <code>Manually ...</code>）表示手动对 vue 项目的各方面进行设置。<strong>我们选择第二项</strong> 。</p></li></ul><p>可以使用『<strong>上下方向键</strong>』来切换选项。</p><blockquote><p>如果只需要 babel 和 eslint 支持，不需要其它任何功能，那么选择第一项，就完事了。不过，我们在学习过程中一般不会使用 eslint 。</p></blockquote><hr><p>选中第二项后，你会看到如下界面：</p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/vue-cli/img/vue-cli-2.png" alt="vue-cli-2"></p><p>在这个界面中，去需要去选择你的 vue 项目所要用到的特性。在特性列表中，<code>Babel</code> 和 <code>Linter / Formatter</code> 两项默认是选中的。</p><p>vue-cli 内置支持了 8 个功能特性，可以多选。使用『<strong>方向键</strong>』在特性选项之间切换，使用『<strong>空格键</strong>』选中当前特性，使用 <strong>a 键</strong> 切换选择所有，使用 <strong>i 键</strong> 翻转选项。</p><p>对于每一项的功能，此处做个简单描述：</p><ul><li><p><strong>Babel</strong>：支持使用 babel 做转义。</p></li><li><p><strong>TypeScript</strong>：支持使用 TypeScript 书写源码。</p></li><li><p><strong>Progressive Web App (PWA) Support PWA</strong>：支持。</p></li><li><p><strong>Router</strong>：支持 vue-router。</p></li><li><p><strong>Vuex</strong>：支持 vuex。</p></li><li><p><strong>CSS Pre-processors</strong>：支持 CSS 预处理器。</p></li><li><p><strong>Linter / Formatter</strong>：支持代码风格检查和格式化。</p></li><li><p><strong>Unit Testing</strong>：支持单元测试。</p></li><li><p><strong>E2E Testing</strong>： 支持 E2E 测试。</p></li></ul><p>对于我们<small>（非前端开发工程师、Java 全栈开发工程师、Java 后端开发工程师）</small>而言，<strong>Babel</strong>、<strong>Router</strong> 和 <strong>Vuex</strong> 是必选的。<small><strong>CSS Pre-processors</strong> 可能会用到。</small></p><hr><p>如果在功能选择界面中选中了 <strong>Router</strong>，那么我们接下来会看到如下界面<small>（如果功能界面没有选择 Router，就会跳过这个界面）</small>：</p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/vue-cli/img/vue-cli-3.png" alt="vue-cli-3"></p><p>在这个界面中，vue-cli 在询问你，对于 <strong>Router</strong> 你是否以它的 <strong>history</strong> 模式使用它？默认值是 <code>Yes</code> 。</p><p>如果不使用 Router 的 <strong>history</strong> 模式，那自然就是 <strong>hash</strong> 模式。</p><p>这里我们输入 <code>n</code>，表示使用 Router 的 <strong>hash</strong> 模式。</p><hr><p>在设置完你所要使用的各个功能的设置之后<small>（例如，上面的 Router 的 history / hash 模式的设置）</small>， 我们会看到下面界面：</p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/vue-cli/img/vue-cli-4.png" alt="vue-cli-4"></p><p>在这个界面中，vue-cli 是在询问你：是将所有的配置都放在 <strong>pacakge.json</strong> 一个文件中，还是将各个功能的配置分开存放在独立的文件中？</p><p><strong>选择第一项：分开存放</strong> 。</p><hr><p>这是 vue-cli 创建 vue 项目的最后一个界面：</p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/vue-cli/img/vue-cli-5.png" alt="vue-cli-5"></p><p>在这里，vue-cli 是在询问你：是否将你的这些设置保留下来作为默认的项目设置的模板。默认值是 <strong><code>N</code></strong> 。</p><p>我们输入 N，或者直接按回车确认进入安装界面：</p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/vue-cli/img/vue-cli-6.png" alt="vue-cli-6"></p><h2 id="idea-中创建-vue-项目" tabindex="-1"><a class="header-anchor" href="#idea-中创建-vue-项目" aria-hidden="true">#</a> IDEA 中创建 Vue 项目</h2><p>在 IDEA 中创建 Vue 项目本质上和我们之前使用命令创建 Vue 项目是一样的。无非就是 IDEA 在『帮』我们执行 <strong>vue create</strong> 命令。</p><p>创建一个 Project/Module，选择 <strong>Static web</strong>，再选中 <strong>Vue.js</strong> ：</p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/vue-cli/img/vue-cli-7.png" alt="vue-cli-7"></p><p>再下一个页面中，选择填写项目名称，项目的存储位置。另外，和之前的命令行中一样，记得『<strong>取消默认的设置</strong>』：</p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/vue-cli/img/vue-cli-8.png" alt="vue-cli-8"></p><p>接下来，在 IDEA 的控制台中，进行相应的设置，这和我们之前的设置过程是一样的。</p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/vue-cli/img/vue-cli-9.png" alt="vue-cli-9"></p><p>无论是我们自己在命令行中直接使用 vue create 命令创建项目，还是我们在 IDEA 间接使用 vue create 命令创建项目，建好的项目的目录结构都是一样的。如下：</p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/vue-cli/img/vue-cli-10.png" alt="vue-cli-10"></p><p>其中：</p><table><thead><tr><th style="text-align:left;">#</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">node_modules 目录</td><td style="text-align:left;">项目所依赖的包的存放目录</td></tr><tr><td style="text-align:left;">public 目录</td><td style="text-align:left;">存放项目所需的静态资源文件目录</td></tr><tr><td style="text-align:left;">src 目录</td><td style="text-align:left;">存放项目的源码文件的目录</td></tr><tr><td style="text-align:left;">babel.config.js 文件</td><td style="text-align:left;">babel 配置文件</td></tr><tr><td style="text-align:left;">package.json 文件</td><td style="text-align:left;">整个项目的配置文件</td></tr><tr><td style="text-align:left;">src/main.js 文件</td><td style="text-align:left;">整个项目的入口文件，并且在这里引入全局使用的 .vue、.css 文件</td></tr></tbody></table><h2 id="单文件组件" tabindex="-1"><a class="header-anchor" href="#单文件组件" aria-hidden="true">#</a> 单文件组件</h2><p>在 <strong>vue-cli</strong> 创建的 vue 项目中，我们看到有一类后缀名为 <strong>.vue</strong> 的文件，我们称为『<strong>单文件组件</strong>』。</p><p><strong>.vue</strong> 文件的概念的出现，是为了让我们以更友好更简便的方式编写 vue 代码。</p><blockquote><p>至于如何将 <strong>.vue</strong> 文件『<strong>编译</strong>』成传统的、正常的、浏览器认识的 html 中嵌 js 和 css 的形式，这就是 <strong>vue-cli</strong> 背后的 <strong>webpack</strong> 所要负责处理的事情了。</p></blockquote><p>单文件组件的组成结构分三部分：</p><ul><li><p><strong>template</strong> 组件的模板区域</p></li><li><p><strong>script</strong> 业务逻辑区域</p></li><li><p><strong>style</strong> 样式区域</p></li></ul><p>例如：</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>\n  <span class="token comment">&lt;!-- 这里用于定义 Vue 组件的模板内容 --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n  <span class="token comment">// 这里用于定义 Vue 组件的业务逻辑</span>\n  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n    data<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 私有数据</span>\n    methods<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// 处理函数</span>\n    <span class="token comment">// ... 其它业务逻辑</span>\n<span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">\n  <span class="token comment">/* 这里用于定义组件的样式 */</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>每个组件都有自己独立的 html、js、css，互不干扰，真正做到可独立复用。</p><h2 id="package-json-文件" tabindex="-1"><a class="header-anchor" href="#package-json-文件" aria-hidden="true">#</a> package.json 文件</h2><p>vue 项目的核心配置文件 <strong>package.json</strong> 中已经配置了两个命令：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>  <span class="token operator">...</span>\n\n  <span class="token string">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token string">&quot;serve&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vue-cli-service serve&quot;</span><span class="token punctuation">,</span>\n    <span class="token string">&quot;build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vue-cli-service build&quot;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n  <span class="token operator">...</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>如果你是在 IDEA 中查看 <strong>package.json</strong> 文件的内容，你会发现这两行命令前各有一个代表运行的可点击的绿色三角形。</p><ul><li><p><strong>serve 是运行命令</strong> 。在开发过程中是我们最经常用到的命令。通过它能将 vue 项目运行起来，是我们能通过浏览器访问。</p></li><li><p><strong>build 是编译命令</strong> 。是在开发结束后将项目源码编译、整合成最终的 html、js、css 等文件，这些文件会出现在项目的 <strong>dist</strong> 目录下。</p></li></ul><h2 id="vue-config-js-文件" tabindex="-1"><a class="header-anchor" href="#vue-config-js-文件" aria-hidden="true">#</a> vue.config.js 文件</h2><p>默认情况下通过 <strong>serve</strong> 命令运行项目会占用 <code>8080</code> 端口，如果想作出改变的话，可以在 <strong>package.json</strong> 文件中添加配置项。</p><p>不过一般情况下，我们都是将这个配置写在另一个单独的配置文件中。在项目的根目录下（即，和 package.json 文件同级）创建一个名为 <strong>vue.config.js</strong> 的文件，并在其中加入如下配置：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  devServer<span class="token operator">:</span> <span class="token punctuation">{</span>\n    port<span class="token operator">:</span> <span class="token number">8888</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><blockquote><p><strong>vue.config.js</strong> 这个文件是 @vue/cli 项目的配置文件，以前<small>（vue-cli）</small>它叫 <strong>config/index.js</strong> 。</p></blockquote><p>再一次通过 <strong>serve</strong> 命令启动项目，你会发现这次 vue 项目占用的就是你所配置的 8888 端口。</p><h2 id="跨域问题解决" tabindex="-1"><a class="header-anchor" href="#跨域问题解决" aria-hidden="true">#</a> 跨域问题解决</h2><p>vue-cli 解决开发过程中的跨域问题是利用到了 webpack 在开发环境中所提供的代理服务器<small>（http-proxy-middleware）</small>。</p><p>前端的 ajax 请求并不是直接发给后台服务器，而是发给了代理服务器，再由代理服务器转发给后台服务器；返回数据的时候，同样也是由代理服务器接收到后台服务器的返回，然后代理服务器再将返回结果转发给前端。</p><blockquote><p>之所以能通过代理服务器解决跨域问题是因为代理服务器<small>（http-proxy-middleware）</small>它不是浏览器，它没有同源安全检测。</p></blockquote><p>配置代理服务器的相关配置是写在 <strong>vue.config.js</strong> 配置文件中的 <strong>devServer</strong> 配置项下。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  devServer<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token operator">...</span>\n    proxy<span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token string">&quot;/api&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// 1</span>\n        target<span class="token operator">:</span> <span class="token string">&#39;http://localhost:8080&#39;</span><span class="token punctuation">,</span>   <span class="token comment">// 2 </span>\n        changeOrigin<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 3</span>\n        pathRewrite<span class="token operator">:</span> <span class="token punctuation">{</span>\n          <span class="token string">&#39;^/api&#39;</span><span class="token operator">:</span> <span class="token string">&#39;/&#39;</span> <span class="token comment">// 4</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token operator">...</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>其实，这里的配置就是在『<strong>告知</strong>』代理服务器<small>（<strong>http-proxy-middleware</strong>）</small>：我<small>（vue）</small>发给你<small>（<strong>http-proxy-middleware</strong>）</small>的 HTTP 请求，你要转交给谁，并且在转交的过程中是否需要做某些变动。</p></div><ol><li><p>所有以 <code>/api</code> 开头的请求都要求代理服务器进行转发。</p></li><li><p>要求代理服务器<small>（vue 的 http-proxy-middleware）</small>将我们发给它的请求转发到 xxx 地址，即，真实的后台服务器的根路径。这里需要注意的一点是，这里必须加上 <code>http://</code> 前缀。</p></li><li><p>是否是跨域请求？这基本上肯定是废话，不跨域就没有必要配置这个 <strong>proxy</strong> 了。</p></li><li><p>代理服务器转发时是否需要改写 URI，以及如何改写。</p></li></ol><p>『The End』</p>',83),c={render:function(s,n){const a=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.iD)(e.HY,null,[t,(0,e._)("p",null,[p,(0,e._)("a",l,[o,(0,e.Wm)(a)])]),r],64)}}}}]);