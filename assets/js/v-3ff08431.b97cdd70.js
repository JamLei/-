"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[3832],{32774:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-3ff08431",path:"/utility/guava/08-%E6%96%87%E4%BB%B6.html",title:"文件操作工具：Files",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"Guava 的文件写入",slug:"guava-的文件写入",children:[]},{level:2,title:"获得文件内容",slug:"获得文件内容",children:[]},{level:2,title:"复制移动（剪切）文件",slug:"复制移动-剪切-文件",children:[]},{level:2,title:"比较文件内容",slug:"比较文件内容",children:[]},{level:2,title:"其他有用的方法",slug:"其他有用的方法",children:[]}],filePathRelative:"utility/guava/08-文件.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},10547:(n,s,a)=>{a.r(s),a.d(s,{default:()=>e});const p=(0,a(66252).uE)('<h1 id="文件操作工具-files" tabindex="-1"><a class="header-anchor" href="#文件操作工具-files" aria-hidden="true">#</a> 文件操作工具：Files</h1><p>Java 的基本 API 对文件的操作很繁琐，为了向文件中写入一行文本，都需要写十几行的代码。guava 对此作了很多改进，提供了很多方便的操作。</p><blockquote><p>但是总体上来说，Guava 中的文件操作工具主要是面对简单的小功能，对于复杂的情况还是建议使用 commons-io 更为专业。</p></blockquote><h2 id="guava-的文件写入" tabindex="-1"><a class="header-anchor" href="#guava-的文件写入" aria-hidden="true">#</a> Guava 的文件写入</h2><p>Guava 的 <strong>Files</strong> 类中提供了几个 write 方法来简化向文件中写入内容的操作，下面的例子演示 <code>Files.write(byte[], File)</code> 的用法。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token doc-comment comment">/**\n * 演示向文件中写入字节流\n *\n * <span class="token keyword">@param</span> <span class="token parameter">fileName</span> 要写入文件的文件名\n * <span class="token keyword">@param</span> <span class="token parameter">contents</span> 要写入的文件内容\n */</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demoFileWrite</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> fileName<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">String</span> contents<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token function">checkNotNull</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> <span class="token string">&quot;Provided file name for writing must NOT be null.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">checkNotNull</span><span class="token punctuation">(</span>contents<span class="token punctuation">,</span> <span class="token string">&quot;Unable to write null contents.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">final</span> <span class="token class-name">File</span> newFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">try</span> <span class="token punctuation">{</span>\n       <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>contents<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> newFile<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> \n    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> fileIoEx<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n       err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>  <span class="token string">&quot;ERROR trying to write to file &#39;&quot;</span> <span class="token operator">+</span> fileName <span class="token operator">+</span> <span class="token string">&quot;&#39; - &quot;</span>\n                   <span class="token operator">+</span> fileIoEx<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>需要注意上面的代码，需要 import 一些类和方法：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>common<span class="token punctuation">.</span>base<span class="token punctuation">.</span></span><span class="token class-name">Charsets</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>common<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Files</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token namespace">com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>common<span class="token punctuation">.</span>base<span class="token punctuation">.</span></span><span class="token class-name">Preconditions</span><span class="token punctuation">.</span>*<span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">System</span><span class="token punctuation">.</span>*<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="获得文件内容" tabindex="-1"><a class="header-anchor" href="#获得文件内容" aria-hidden="true">#</a> 获得文件内容</h2><p>Files 类提供了 readLines 方法可以方便的读取文件的内容，如下 demo 代码：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">String</span> testFilePath <span class="token operator">=</span> <span class="token string">&quot;d:\\\\test.txt&quot;</span><span class="token punctuation">;</span>\n<span class="token class-name">File</span> testFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>testFilePath<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> lines <span class="token operator">=</span> <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">readLines</span><span class="token punctuation">(</span>testFile<span class="token punctuation">,</span> <span class="token class-name">Charsets</span><span class="token punctuation">.</span>UTF_16<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> line <span class="token operator">:</span> lines<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>注意这里的 readLines 方法返回的是 <code>List&lt;String&gt;</code> 的接口，这对于大文件处理是会有问题的。大文件处理可以使用 readLines 方法的另一个重载。下面的例子演示从一个大文件中逐行读取文本，并做行号计数。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">main<span class="token punctuation">.</span>com<span class="token punctuation">.</span>jd<span class="token punctuation">.</span>coo<span class="token punctuation">.</span>guava<span class="token punctuation">.</span>io</span><span class="token punctuation">;</span>\n\n<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>common<span class="token punctuation">.</span>base<span class="token punctuation">.</span></span><span class="token class-name">Charsets</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>common<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Files</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>common<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">LineProcessor</span><span class="token punctuation">;</span>\n\n<span class="token doc-comment comment">/**\n * Created by outofmemory.cn  on 2014/7/24.\n */</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FilesDemo</span> <span class="token punctuation">{</span>\n    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">CounterLine</span> <span class="token keyword">implements</span> <span class="token class-name">LineProcessor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>\n        <span class="token keyword">private</span> <span class="token keyword">int</span> rowNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n\n        <span class="token annotation punctuation">@Override</span>\n        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">processLine</span><span class="token punctuation">(</span><span class="token class-name">String</span> line<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n            rowNum <span class="token operator">++</span><span class="token punctuation">;</span>\n            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token annotation punctuation">@Override</span>\n        <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">return</span> rowNum<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n        <span class="token class-name">String</span> testFilePath <span class="token operator">=</span> <span class="token string">&quot;d:\\\\test.txt&quot;</span><span class="token punctuation">;</span>\n        <span class="token class-name">File</span> testFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>testFilePath<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">CounterLine</span> counter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CounterLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">readLines</span><span class="token punctuation">(</span>testFile<span class="token punctuation">,</span> <span class="token class-name">Charsets</span><span class="token punctuation">.</span>UTF_16<span class="token punctuation">,</span> counter<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>counter<span class="token punctuation">.</span><span class="token function">getResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><p>这个 readLines 的重载，需要我们实现一个 LineProcessor 的泛型接口，在这个接口的实现方法 processLine 方法中我们可以对行文本进行处理，getResult 方法可以获得一个最终的处理结果，这里我们只是简单的返回了一个行计数。</p><p>另外还有 readBytes 方法可以对文件的字节做处理，readFirstLine 可以返回第一行的文本，<code>Files.toString(File, Charset)</code> 可以返回文件的所有文本内容。</p><h2 id="复制移动-剪切-文件" tabindex="-1"><a class="header-anchor" href="#复制移动-剪切-文件" aria-hidden="true">#</a> 复制移动（剪切）文件</h2><p>在 Guava 中复制文件操作提供了一组的 copy 方法，我们看一个示例：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token doc-comment comment">/**\n * 演示如何使用guava的Files.copy方法复制文件\n *\n * <span class="token keyword">@param</span> <span class="token parameter">sourceFileName</span> 复制的源文件名\n * <span class="token keyword">@param</span> <span class="token parameter">targetFileName</span> 目标文件名\n */</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demoSimpleFileCopy</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> sourceFileName<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">String</span> targetFileName<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">final</span> <span class="token class-name">File</span> sourceFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>sourceFileName<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">final</span> <span class="token class-name">File</span> targetFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>targetFileName<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">try</span> <span class="token punctuation">{</span>\n        <span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>sourceFile<span class="token punctuation">,</span> targetFile<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> err<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n         err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;ERROR trying to copy file &#39;&quot;</span> <span class="token operator">+</span> sourceFileName\n                <span class="token operator">+</span> <span class="token string">&quot;&#39; to file &#39;&quot;</span> <span class="token operator">+</span> targetFileName <span class="token operator">+</span> <span class="token string">&quot;&#39; - &quot;</span> <span class="token operator">+</span> fileIoEx<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>Guava 中移动文件使用 move 方法，用法和 copy 一样。</p><h2 id="比较文件内容" tabindex="-1"><a class="header-anchor" href="#比较文件内容" aria-hidden="true">#</a> 比较文件内容</h2><p>Guava 中提供了 <code>Files.equal(File,File)</code> 方法来比较两个文件的内容是否完全一致，请看下面的示例：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token doc-comment comment">/**\n * 演示 Files.equal(File,File) 来比较两个文件的内容\n *\n * <span class="token keyword">@param</span> <span class="token parameter">fileName1</span> 比较的文件1文件名\n * <span class="token keyword">@param</span> <span class="token parameter">fileName2</span> 比较的文件2文件名\n */</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demoEqual</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> fileName1<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">String</span> fileName2<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">final</span> <span class="token class-name">File</span> file1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>fileName1<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">final</span> <span class="token class-name">File</span> file2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>fileName2<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">try</span> <span class="token punctuation">{</span>\n        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;File &#39;&quot;</span> <span class="token operator">+</span> fileName1 <span class="token operator">+</span> <span class="token string">&quot;&#39; &quot;</span>\n           <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>file1<span class="token punctuation">,</span> file2<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">&quot;IS&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;is NOT&quot;</span><span class="token punctuation">)</span>\n           <span class="token operator">+</span> <span class="token string">&quot; the same as file &#39;&quot;</span> <span class="token operator">+</span> fileName2 <span class="token operator">+</span> <span class="token string">&quot;&#39;.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> fileIoEx<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n         err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;ERROR trying to compare two files &#39;&quot;</span>\n            <span class="token operator">+</span> fileName1 <span class="token operator">+</span> <span class="token string">&quot;&#39; and &#39;&quot;</span> <span class="token operator">+</span> fileName2 <span class="token operator">+</span> <span class="token string">&quot;&#39; - &quot;</span> <span class="token operator">+</span> fileIoEx<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h2 id="其他有用的方法" tabindex="-1"><a class="header-anchor" href="#其他有用的方法" aria-hidden="true">#</a> 其他有用的方法</h2><p>Guava 的 Files 类中还提供了其他一些文件的简捷方法。比如</p><ul><li><p><code>touch()</code> 方法创建或者更新文件的时间戳。</p></li><li><p><code>createTempDir()</code> 方法创建临时目录</p></li><li><p><code>Files.createParentDirs(File)</code> 创建父级目录</p></li><li><p><code>getChecksum(File)</code> 获得文件的 checksum</p></li><li><p><code>hash(File)</code> 获得文件的 hash</p></li><li><p><code>map</code> 系列方法获得文件的内存映射</p></li><li><p><code>getFileExtension(String)</code> 获得文件的扩展名</p></li><li><p><code>getNameWithoutExtension(String file)</code> 获得不带扩展名的文件名</p></li></ul>',25),e={render:function(n,s){return p}}}}]);