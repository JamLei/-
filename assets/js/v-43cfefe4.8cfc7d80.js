"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[4112],{61972:(e,t,s)=>{s.r(t),s.d(t,{data:()=>a});const a={key:"v-43cfefe4",path:"/git/Git-99-SourceTree.html",title:"SourceTree 破解",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"下载安装",slug:"下载安装",children:[]},{level:2,title:"从远程服务器克隆项目",slug:"从远程服务器克隆项目",children:[]},{level:2,title:"SourceTree 分支相关知识",slug:"sourcetree-分支相关知识",children:[{level:3,title:"创建分支",slug:"创建分支",children:[]},{level:3,title:"删除分支",slug:"删除分支",children:[]},{level:3,title:"合并分支",slug:"合并分支",children:[]},{level:3,title:"发布新版本",slug:"发布新版本",children:[]}]},{level:2,title:"关于版本回退那些事",slug:"关于版本回退那些事",children:[{level:3,title:"多人协作",slug:"多人协作",children:[]},{level:3,title:"解决冲突",slug:"解决冲突",children:[]},{level:3,title:"版本回退",slug:"版本回退",children:[]}]},{level:2,title:"老版本安装过程中的用户注册",slug:"老版本安装过程中的用户注册",children:[]}],filePathRelative:"git/Git-99-SourceTree.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},21421:(e,t,s)=>{s.r(t),s.d(t,{default:()=>h});var a=s(66252);const n=(0,a.uE)('<h1 id="sourcetree-破解" tabindex="-1"><a class="header-anchor" href="#sourcetree-破解" aria-hidden="true">#</a> SourceTree 破解</h1><p>SourceTree 是老牌的 Git GUI 管理工具了，也号称是最好用的 Git GUI 工具：</p><table><thead><tr><th style="text-align:center;">#</th><th style="text-align:left;">优点</th></tr></thead><tbody><tr><td style="text-align:center;">1</td><td style="text-align:left;">免费</td></tr><tr><td style="text-align:center;">2</td><td style="text-align:left;">自带中文语言包<small>（国内初学者大多就是奔着这个去的）</small></td></tr><tr><td style="text-align:center;">3</td><td style="text-align:left;">功能强大：无论你是新手还是重度用户，SourceTree 都会让你觉得很顺手。对于非常重度用户，SourceTree 还支持自定义脚本的执行。</td></tr><tr><td style="text-align:center;">4</td><td style="text-align:left;">同时支持 Windows 和 Mac 操作系统<small>（可惜不支持 Linux 系统）</small></td></tr><tr><td style="text-align:center;">5</td><td style="text-align:left;">同时支持 Git 和 Mercurial 两种 VCS</td></tr><tr><td style="text-align:center;">6</td><td style="text-align:left;">内置 GitHub, BitBucket 和 Stash 的支持：直接绑定帐号即可操作远程 repo</td></tr></tbody></table><h2 id="下载安装" tabindex="-1"><a class="header-anchor" href="#下载安装" aria-hidden="true">#</a> 下载安装</h2>',4),i=(0,a.Uk)("官网下载网址："),r={href:"https://www.sourcetreeapp.com/",target:"_blank",rel:"noopener noreferrer"},p=(0,a.Uk)("https://www.sourcetreeapp.com/"),o=(0,a.Uk)("，当前"),c=(0,a._)("small",null,"（20210619）",-1),g=(0,a.Uk)("最新版本是 "),l=(0,a._)("code",null,"3.4.5",-1),u=(0,a.Uk)(" 。"),m=(0,a.uE)('<p>新版本的安装省掉了麻烦的 <code>注册账户</code> 这一步。现在 SourceTree 匿名即可使用。</p><ul><li><p>Registration</p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/git/img/sourcetree-00-1.png" alt="sourcetree-00-1"></p><p>上页界面中点击 <code>跳过</code> 。</p></li><li><p>安装工具</p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/git/img/sourcetree-00-2.png" alt="sourcetree-00-2"></p><p>我们用不到 Mercurial 服务。</p></li><li><p>Preferences</p><p>如果你在 git 中通过 <code>git config --global user.name</code> 和 <code>git config --global user.email</code> 命令配置过用户名和邮箱，那么在下面的安装界面中，SourceTree 会很只能地识别到它们。</p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/git/img/sourcetree-00-3.png" alt="sourcetree-00-3"></p><p>另外，我们暂时不配置 SSH 密钥，后面有需要的时候再配置。</p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/git/img/sourcetree-00-4.png" alt="sourcetree-00-4"></p></li></ul><p>安装完成 SourceTree，界面如下：</p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/git/img/sourcetree-02.png" alt="sourcetree-02"></p><p>SourceTree 本质其实就是主要是把 Git 命令进行了可视化，降低 Git 的使用门槛。接下来我们就正式利用 SourceTree 来管理我们的 Git 项目。</p><h2 id="从远程服务器克隆项目" tabindex="-1"><a class="header-anchor" href="#从远程服务器克隆项目" aria-hidden="true">#</a> 从远程服务器克隆项目</h2><p>相信大家对利用 Git 命令从远程服务器上克隆项目足以熟悉，即 Git Clone 仓库的 URL，那么利用可视化工具如何进行操作呢？如下图所示，点击 Clone（克隆），输入远程仓库地址与本地仓库地址，点击克隆按钮即可。</p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/git/img/sourcetree-03.png" alt="sourcetree-x"></p><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>从远程仓库获取项目的时候，会要求你输入用户名和密码，输入你自己的用户名和密码即可。</p></div><hr><p>克隆完成项目后，如下图所示（远程仓库是空的项目） ：</p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/git/img/sourcetree-04.png" alt="sourcetree-x"></p><hr><p>接下来我们在本地仓库中新建一个 <code>readme.md</code> 的文件，并输入相关内容，如下图所示。</p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/git/img/sourcetree-05.png" alt="sourcetree-x"></p><hr><p>新建完成之后，我们可以观察 SourceTree 界面的变化，如下图所示。</p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/git/img/sourcetree-06.png" alt="sourcetree-x"></p><hr><p>然后我们将改文件添加到暂存区，并输入提交信息，进行提交。</p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/git/img/sourcetree-07.png" alt="sourcetree-x"></p><p>这一过程本质上是通过 <code>git add .</code> 的命令将工作区的文件添加到暂存区，然后通过 <code>git commit -m</code> 命令提交 readme 文件，如下图所示。</p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/git/img/sourcetree-08.png" alt="sourcetree-x"></p><p>此时我们点击推送按钮，并勾选推送。这步操作本质上相当于 <code>git push</code> 的命令，将本地的仓库信息推送到远程仓库。</p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/git/img/sourcetree-09.png" alt="sourcetree-x"></p><p>推送完成后，我们可以查看 GitHub 仓库，观察到文件已经提交。</p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/git/img/sourcetree-10.png" alt="sourcetree-x"></p><p><strong>注意</strong>：推送到远程仓库，可能也会让你输入用户名和密码，这里的用户名密码是之你的 Github、Gitee 这些网站的用户名密码。但是，这些都只会输入一次，之后就会被 SourceTree 记住。但是，<strong>务必保证要输对</strong>！<small>实在没记住的，先到 Github、Gitee 上退出后再登录，先试出正确的用户名密码。</small></p><p>提交完成之后，我们对 <code>readme.md</code> 文件进行修改，在其中加入一些内容，如下图所示。其中操作的步骤与 Git 命令的逻辑相同，不同的是命令与界面的区别。</p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/git/img/sourcetree-11.png" alt="sourcetree-x"></p><p>在提交之后，执行提交按钮，修改的文件被提交到远程仓库，如下图所示。</p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/git/img/sourcetree-12.png" alt="sourcetree-x"></p><p>然后我们选择日志/历史，可以查看到提交的信息与修改的相关日期、描述、作者、版本等信息。</p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/git/img/sourcetree-13.png" alt="sourcetree-x"></p><h2 id="sourcetree-分支相关知识" tabindex="-1"><a class="header-anchor" href="#sourcetree-分支相关知识" aria-hidden="true">#</a> SourceTree 分支相关知识</h2><h3 id="创建分支" tabindex="-1"><a class="header-anchor" href="#创建分支" aria-hidden="true">#</a> 创建分支</h3><p>创建分支只需要简单的几个步骤，点击分支—输入新分支的名称—创建分支即可，如下图所示。</p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/git/img/sourcetree-14.png" alt="sourcetree-x"></p><p>创建完成分支后，我们将分支推送到远程仓库中，同样只需要简单操作即可，如下图所示。</p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/git/img/sourcetree-15.png" alt="sourcetree-x"></p><p>推送完成后，我们进到 GitHub 仓库中查看 Branch 下已经多了 SourceTreeDev 分支。</p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/git/img/sourcetree-16.png" alt="sourcetree-x"></p><h3 id="删除分支" tabindex="-1"><a class="header-anchor" href="#删除分支" aria-hidden="true">#</a> 删除分支</h3><p>在介绍删除分支之前，我们再创建一个 Dev 分支，方法同上。</p><p>我们直接从 master 新建一个 temp 分支出来，这里不再详细介绍如何创建 temp 分支。</p><p>删除分支时，要保证 head 不在要删除的分支上，比如我们现在试着删除 temp 分支，选择当前分支 temp 然后执行删除分支。</p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/git/img/sourcetree-17.png" alt="sourcetree-x"></p><p>此时我们执行删除分支时，会报错，如下图所示。</p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/git/img/sourcetree-18.png" alt="sourcetree-x"></p><p>然后我们将当前的 head 指向切换到其它分支 （master）执行删除分支，temp 分支删除成功。</p><h3 id="合并分支" tabindex="-1"><a class="header-anchor" href="#合并分支" aria-hidden="true">#</a> 合并分支</h3><p>在介绍合并分支前，我们在 SourceTree 分支先进行一些操作：首先我们切换到 SourceTree 分支下，然后我们进行前面讲解的修改分支操作，在 <code>readme.md</code> 文件中添加一句“玩转分支”的内容。添加完成后，SourceTree 会提示有未提交的更改，相信大家对这个操作已经十分清楚。</p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/git/img/sourcetree-19.png" alt="sourcetree-x"></p><p>然后我们不做任何操作，直接切换到 master 分支，切换过程中 SourceTree 会警告，询问你是否确定切换分支。并且，可以选择清除修改。如果我们不清除修改，那么切换后它就会提示你有新的未提交的更改。这个操作是想告诉大家，如果我们还未提交修改的文件就切换到其他分支，这种修改也会带到其他分支。</p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/git/img/sourcetree-20.png" alt="sourcetree-x"></p><p>显然上述效果并不是我们想要的，所以我们在切换到 master 分支之前，并提交修改的文件。</p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/git/img/sourcetree-21.png" alt="sourcetree-x"></p><p>OK，准备工作做完之后，从上图可以清楚的看到，SourceTree 分支已经超前一个版本。此时我们需要将 SourceTree 分支上做的修改合并到 master 分支上，这也就是我们要介绍的“合并分支”。</p><p>在讲解合并分支前，我们需要了解一个注意点，我们现在是要将 SourceTree 分支的修改合并到 master 分支上，那么我们该在那个分支上操作呢？当然是 master 分支。</p><p>切换到主分支 master 之后，我们点击合并分支，选择要合并分支的节点（注意不要选错），然后提交。</p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/git/img/sourcetree-22.png" alt="sourcetree-x"></p><p>合并完成分支之后如下图所示，我们将 master 分支推送到远程仓库。</p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/git/img/sourcetree-23.png" alt="sourcetree-x"></p><p>推送到远程仓库之后，我们可以看到 readme.md 文件已经修改。</p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/git/img/sourcetree-24.png" alt="sourcetree-x"></p><h3 id="发布新版本" tabindex="-1"><a class="header-anchor" href="#发布新版本" aria-hidden="true">#</a> 发布新版本</h3><p>最后我再介绍一下发布新版本的那些事，在上面我们已经将 SourceTree 分支修改的内容合并到主分支 master 了。我们选择标签，输入标签即版本号，然后勾选提交，并添加标签。</p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/git/img/sourcetree-25.png" alt="sourcetree-x"></p><p>最后我们将 master 分支上的标签推送到远程仓库，如下图所示。这个版本表示已经发布，我们可以将该版本下载到本地。</p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/git/img/sourcetree-26.png" alt="sourcetree-x"></p><h2 id="关于版本回退那些事" tabindex="-1"><a class="header-anchor" href="#关于版本回退那些事" aria-hidden="true">#</a> 关于版本回退那些事</h2><p>在讲解版本回退之前，我们需要介绍多人协作开发，因为在开发中我们一般都是多人同时开发，经常在提交代码的时候会发生一些冲突，那么遇到冲突该如何解决呢？</p><h3 id="多人协作" tabindex="-1"><a class="header-anchor" href="#多人协作" aria-hidden="true">#</a> 多人协作</h3><p>由于是在一台电脑上进行操作，我们假设 A 与 B 表示两个同事进行协同开发。</p><p>之前的工作文件夹 ChatSorceTree 表示 A，然后我们从远程仓库克隆一份代码到 ChatSorceTreeB 表示 B 的工作目录。</p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/git/img/sourcetree-27.png" alt="sourcetree-x"></p><p>克隆完成之后，我们可以看到 B 与 A 的工作代码目录相同，因为远程仓库默认 master 分支。</p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/git/img/sourcetree-28.png" alt="sourcetree-x"></p><p>那么 B 要工作的话，就要在 sourceTreeDev 分支下进行工作，然后我们检出 sourceTreeDev 分支。检出后如下图所示，也许你会问 sourceTreeDev 分支的状态为什么没有是“玩转分支”的状态呢？那是因为 A 并没有把添加「玩转分支」的内容提交到远程仓库。</p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/git/img/sourcetree-29.png" alt="sourcetree-x"></p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/git/img/sourcetree-30.png" alt="sourcetree-x"></p><p>推送完成之后，我们在 A 工作区 sourceTreeDev 分支下新建一个 <code>a.txt</code> 并提交到远程仓库。然后我们来到 B 的工作区，选择拉取，拉取时选择 sourceTreeDev 分支，拉取完成，B 工作区的状态已经发生变化，如下图所示。</p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/git/img/sourcetree-31.png" alt="sourcetree-x"></p><p>OK，B 已经将 sourceTreeDev 分支最新内容从远程仓库拉取到本地，然后 B 对工作区中的 a.txt 文件进行修改，并添加内容新增了聊天功能。然后提交到远程仓库。</p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/git/img/sourcetree-32.png" alt="sourcetree-x"></p><p>然后 A 也做了同样的事情，A 新增了聊天功能，如下图所示。</p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/git/img/sourcetree-33.png" alt="sourcetree-x"></p><p>A 先并不做提交，进行 pull 拉取操作，点击拉取会看到报错，报错信息的意思是您对以下文件的本地更改将被覆盖——a.txt。请在合并之前提交更改或存储更改。</p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/git/img/sourcetree-34.png" alt="sourcetree-x"></p><p>然后根据报错信息，我们对 A 工作区的文件进行提交，点击提交后又发生了报错，错误的意思是远程仓库已近添加了相同的键的项。</p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/git/img/sourcetree-35.png" alt="sourcetree-x"></p><h3 id="解决冲突" tabindex="-1"><a class="header-anchor" href="#解决冲突" aria-hidden="true">#</a> 解决冲突</h3><p>当多个人同时修改了同一个文件时，后提交的需要先从服务器 pull 代码到问题，手动解决完冲突之后再 push 到远程服务器。</p><p>上述冲突发生的原因，主要是 A 与 B 都对同一文件 a.txt 的同一位置进行了修改。产生冲突之后，需要我们解决冲突之后才能提交。</p><p>关于如何解决冲突文件，直接选择冲突文件，选择解决冲突，对比文件差异，将冲突的内容干掉即可，然后再做提交即可。这里不做详细介绍，相信大家可以很容易解决。</p><h3 id="版本回退" tabindex="-1"><a class="header-anchor" href="#版本回退" aria-hidden="true">#</a> 版本回退</h3><p>最后我们介绍一下版本回退的一些事情。关于版本回退 Git 的命令是 <code>git reset</code> 。</p><p>版本回退（建议加上 <code>--hard</code>，Git 支持无限次后悔）</p><ul><li><p>回退到上一个版本：<code>git reset --hard HEAD^</code></p></li><li><p>回退到上上一个版本：<code>git reset --hard HEAD^^</code></p></li><li><p>回退到上 N 个版本：<code>git reset --hard HEAD~N</code>（N 是一个整数）</p></li><li><p>回退到任意一个版本：git reset --hard 版本号</p></li></ul><p>首先我们进入 ChatSourceTree 工作区，输入 git reflog 命令，我们可以清楚地看到版本号下对应做了什么事。</p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/git/img/sourcetree-36.png" alt="sourcetree-x"></p><p>比如我们需要回退到 HEAD@{13}，我们输入 git reset --hard 6b34060 (版本号) 即可回退到对应的位置。</p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/git/img/sourcetree-37.png" alt="sourcetree-x"></p><p>然后我们进入 SourceTree 界面可以，看到已近回退到了 A 新增了聊天功能的位置，如下图所示。</p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/git/img/sourcetree-38.png" alt="sourcetree-x"></p><hr><p>记住密码功能... 删除 accounts.json 同级目录下的两个文件：...</p><h2 id="老版本安装过程中的用户注册" tabindex="-1"><a class="header-anchor" href="#老版本安装过程中的用户注册" aria-hidden="true">#</a> 老版本安装过程中的用户注册</h2><p>安装 SourceTree 的过程中，它会要求你输入 google 账号，或 Atlassian 账号进行登录。</p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/git/img/sourcetree-01.png" alt="sourcetree-01"></p><p>其实，只要注册 Atlassian 账户就可以登录使用 Source Tree，相当于 SourceTree 本质上是免费的。但是 Atlassian 账户的注册过程调用了 Google 的人机认证功能，而 Google 又被墙掉了，所以这个注册过程你永远不会成功...</p><p>其实这个登录的过程就是为了在指定目录下生成一个含有指定内容的文件，我们接下来将手动实现这个效果，从而“绕过”登录/注册界面。</p><p>下载好之后会有这么一个界面要求你注册或登录。（不管它）将下面的一串字符串放进我的电脑的地址栏，打开 sourcetree 的文件夹</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>%LocalAppData%\\Atlassian\\SourceTree\\\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>其实这会打开类似以下的一个目录：</p><blockquote><p>C:\\Users\\Administrator\\AppData\\Local\\Atlassian\\SourceTree</p></blockquote><p>在该目录下新建一个 <code>accounts.json</code> 文件。其实安装过程中的输入账号的目的就是为了生成这个文件。将以下内容复制进该文件：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">[</span>\n  <span class="token punctuation">{</span>\n    <span class="token string">&quot;$id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span>\n    <span class="token string">&quot;$type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;SourceTree.Api.Host.Identity.Model.IdentityAccount, SourceTree.Api.Host.Identity&quot;</span><span class="token punctuation">,</span>\n    <span class="token string">&quot;Authenticate&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token string">&quot;HostInstance&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token string">&quot;$id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">,</span>\n      <span class="token string">&quot;$type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;SourceTree.Host.Atlassianaccount.AtlassianAccountInstance, SourceTree.Host.AtlassianAccount&quot;</span><span class="token punctuation">,</span>\n      <span class="token string">&quot;Host&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token string">&quot;$id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;3&quot;</span><span class="token punctuation">,</span>\n        <span class="token string">&quot;$type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;SourceTree.Host.Atlassianaccount.AtlassianAccountHost, SourceTree.Host.AtlassianAccount&quot;</span><span class="token punctuation">,</span>\n        <span class="token string">&quot;Id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;atlassian account&quot;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token string">&quot;BaseUrl&quot;</span><span class="token operator">:</span> <span class="token string">&quot;https://id.atlassian.com/&quot;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token string">&quot;Credentials&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token string">&quot;$id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;4&quot;</span><span class="token punctuation">,</span>\n      <span class="token string">&quot;$type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;SourceTree.Model.BasicAuthCredentials, SourceTree.Api.Account&quot;</span><span class="token punctuation">,</span>\n      <span class="token string">&quot;Username&quot;</span><span class="token operator">:</span> <span class="token string">&quot;看这里，看这里，看这里，...&quot;</span><span class="token punctuation">,</span>\n      <span class="token string">&quot;Email&quot;</span><span class="token operator">:</span> <span class="token string">&quot;看这里，看这里，看这里，...&quot;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token string">&quot;IsDefault&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p>其中倒数 5、6 行可填上用户名和邮箱，相当于 Git 中的配置：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>$ git config --global user.name xxx\n$ git config --global user.email &quot;xxx@xxx.xxx\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>保存此文件后，重新启动 Source Tree，则可跳过登录页面。</p>',121),h={render:function(e,t){const s=(0,a.up)("OutboundLink");return(0,a.wg)(),(0,a.iD)(a.HY,null,[n,(0,a._)("p",null,[i,(0,a._)("a",r,[p,(0,a.Wm)(s)]),o,c,g,l,u]),m],64)}}}}]);