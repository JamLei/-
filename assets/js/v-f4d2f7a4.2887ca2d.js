"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[9474],{51318:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-f4d2f7a4",path:"/junit/JUnit-01-%E5%9F%BA%E7%A1%80.html",title:"基本概念",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"基本概念",slug:"基本概念-1",children:[{level:3,title:"JUnit 4",slug:"junit-4",children:[]},{level:3,title:"JUnit 5",slug:"junit-5",children:[]}]},{level:2,title:"一个简单的示例",slug:"一个简单的示例",children:[]},{level:2,title:"Junit 5 更新 - 执行生命周期注解",slug:"junit-5-更新-执行生命周期注解",children:[]},{level:2,title:"单元测试的编写原则",slug:"单元测试的编写原则",children:[]},{level:2,title:"Junit 5 新特性：设置用例别名",slug:"junit-5-新特性-设置用例别名",children:[]},{level:2,title:"JUnit 5 的 Maven pom 依赖",slug:"junit-5-的-maven-pom-依赖",children:[]}],filePathRelative:"junit/JUnit-01-基础.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},62378:(n,s,a)=>{a.r(s),a.d(s,{default:()=>p});const t=(0,a(66252).uE)('<h1 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念" aria-hidden="true">#</a> 基本概念</h1><p>JUnit 是 java 领域占有率非常高的一个单元测试框架，已经成为了单元测试的标准。</p><h2 id="基本概念-1" tabindex="-1"><a class="header-anchor" href="#基本概念-1" aria-hidden="true">#</a> 基本概念</h2><h3 id="junit-4" tabindex="-1"><a class="header-anchor" href="#junit-4" aria-hidden="true">#</a> JUnit 4</h3><p>JUnit 3 在大量的 Java 应用开发中已经得到了广泛的应用，而到 JUnit 4 更引入了灵活的注解模式，一度成为 Java 应用单元测试的标准。而在 JUnit 4 发布 11 年后的 2017 年推出的 JUnit 5 更是进行了比较彻底的重构，不单纯是 JUnit 框架的进化，而是作为一个平台横空出世。</p><blockquote><p>正是因为 TestNG 的出现对 JUnit 4 造成了一定的冲击，从而促使 JUnit 的发展走向了更高的『层次』：从测试框架，走向了测试平台！</p></blockquote><h3 id="junit-5" tabindex="-1"><a class="header-anchor" href="#junit-5" aria-hidden="true">#</a> JUnit 5</h3><p>和 JUnit 4 只是一个单独的 jar 包不同，目前的 JUnit 5 组成如下：</p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/junit/img/JUnit5-01.png" alt="图1"></p><table><thead><tr><th style="text-align:left;">jar 包</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">JUnit Platform                                          </td><td style="text-align:left;">提供平台功能的模块。通过 JUnit Platform ，其他的自动化测试引擎<small>（例如 TestNG）</small>都可以接入 JUnit 实现对接和执行。</td></tr><tr><td style="text-align:left;">JUnit Jupiter</td><td style="text-align:left;">JUnit5 的核心，可以看作是承载 JUnit4 升级演进。包含了很多丰富的新特性。</td></tr><tr><td style="text-align:left;">JUnit Vintage<small>（非必须）</small></td><td style="text-align:left;">这个模块是对 JUnit3、JUnit4 版本兼容的测试引擎，使旧版本 junit 的自动化测试脚本也可以运行在 JUnit5 平台下。<br><small>如果你的测试代码并非基于 JUnit3、JUnit4 编写的，那么自然就不需要这个包。</small></td></tr></tbody></table><p><img src="https://hemiao3000.gitee.io/java-note-img/images/junit/img/JUnit5-02.png" alt="图2"></p><p>使用 JUnit 5 进行测试需要引入的包有：</p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/junit/img/JUnit5-05.png" alt="图5"></p><p>上述关系图中包含的包有：</p><ul><li>apiguardian-api-1.0.0.jar</li><li>junit-jupiter-api-5.4.2.jar</li><li>junit-jupiter-engine-5.4.2.jar</li><li>junit-platform-commons-1.4.2.jar</li><li>junit-platform-engine-1.4.2.jar</li><li>junit-platform-launcher-1.4.2.jar</li><li>opentest4j-1.1.1.jar</li></ul><blockquote><p>如果要兼容 JUnit3、JUnit4 还需要加上：</p><ul><li>hamcrest-core-1.3.jar</li><li>junit-4.12.jar</li><li>junit-vintage-engine-5.4.2.jar</li></ul><p>另外，JUnit 5 的 maven pom 依赖见最后。</p></blockquote><h2 id="一个简单的示例" tabindex="-1"><a class="header-anchor" href="#一个简单的示例" aria-hidden="true">#</a> 一个简单的示例</h2><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JUnit5Test</span> <span class="token punctuation">{</span>\n\n    <span class="token annotation punctuation">@Test</span>\n    <span class="token keyword">void</span> <span class="token function">succeedingTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;成功执行测试！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="junit-5-更新-执行生命周期注解" tabindex="-1"><a class="header-anchor" href="#junit-5-更新-执行生命周期注解" aria-hidden="true">#</a> Junit 5 更新 - 执行生命周期注解</h2><p>Junit 5 基本延续 Junit 4 的生命周期的概念，但修改了对应的注解命名，使其表达的意思更加符合字面含义，对比关系如图：</p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/junit/img/JUnit5-03.png" alt="图3"></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestLifeCycle</span> <span class="token punctuation">{</span>\n\n    <span class="token comment">/*\n     * 此方法只会在运行所有单元测试前执行一次,\n     * 通常用来获取数据库连接, Spring 管理的 Bean 等等\n     */</span>\n    <span class="token annotation punctuation">@BeforeAll</span>\n    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">initAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;*******BeforeAll********&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">/*\n     * 此方法运行每个单元测试前都会执行,\n     * 通常用来准备数据或获取单元测试依赖的数据或对象\n     */</span>\n    <span class="token annotation punctuation">@BeforeEach</span>\n    <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;------BeforeEach-------&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">/*\n     * 测试类的主要方法,在这里写所有的测试业务逻辑\n     */</span>\n    <span class="token annotation punctuation">@Test</span>\n    <span class="token keyword">void</span> <span class="token function">succeedingTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;成功执行测试！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n\n    <span class="token comment">/*\n     * @Disabled 为禁用功能，功能和 Junit4中的 @ignore 类似\n     * 这里用来方暂未完成的测试逻辑。它不会被 JUnit 执行。\n     */</span>\n    <span class="token annotation punctuation">@Test</span>\n    <span class="token annotation punctuation">@Disabled</span><span class="token punctuation">(</span><span class="token string">&quot;for demonstration purposes&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">void</span> <span class="token function">skippedTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// not executed</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">/*\n     * 此方法运行每个单元测试后都会执行,\n     * 主要用来和 setUp 对应,清理获取的资源\n     */</span>\n    <span class="token annotation punctuation">@AfterEach</span>\n    <span class="token keyword">void</span> <span class="token function">tearDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;------AfterEach-------&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">/*\n     * 此方法会在运行所有单元测试后执行一次,\n     * 通常用来释放资源,例如数据库连接,IO流等等\n     */</span>\n    <span class="token annotation punctuation">@AfterAll</span>\n    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">tearDownAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;*******AfterAll********&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br></div></div><p>执行结果及输出如下：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>*******BeforeAll********\n------BeforeEach-------\n成功执行测试！\n------AfterEach-------\n\nfor demonstration purposes\n*******AfterAll********\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="单元测试的编写原则" tabindex="-1"><a class="header-anchor" href="#单元测试的编写原则" aria-hidden="true">#</a> 单元测试的编写原则</h2><ol><li><p>在 eclipse 中创建 1 个 source folder 命名为 test<small>（使用 Maven 后已要求必须创建）</small></p></li><li><p>测试类所在的包要求和被测试类的包一致</p></li><li><p>测试类要使 Tes 作为开头或结，如 UserServiceTest</p></li><li><p>测试类的每个方法，都必须是可以独立执行的，不存在顺序或依赖</p></li></ol><h2 id="junit-5-新特性-设置用例别名" tabindex="-1"><a class="header-anchor" href="#junit-5-新特性-设置用例别名" aria-hidden="true">#</a> Junit 5 新特性：设置用例别名</h2><p>默认情况下，在 Junit 执行完毕后的测试报告中显示的是测试方法名称。但很多情况下，我们可能需要更加直观可读更好的信息。</p><p>Junit 5 引入了 <strong>@DisplayName</strong> 注解，通过它可以给指定测试报告中的名字，<small>而不是显示类和方法的名字。</small></p><p>例如，指定测试类的自定义显示名称：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">&quot;测试类自定义名称测试&quot;</span><span class="token punctuation">)</span> \n<span class="token keyword">class</span> <span class="token class-name">TestDiskplayName</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><strong>@DisplayName</strong> 也可以用在方法上，指定具体测试方法的别名。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token annotation punctuation">@DisplayName</span><span class="token punctuation">(</span><span class="token string">&quot;测试方法名称001&quot;</span><span class="token punctuation">)</span> \n<span class="token keyword">void</span> <span class="token function">test001</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">assertTrue</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="junit-5-的-maven-pom-依赖" tabindex="-1"><a class="header-anchor" href="#junit-5-的-maven-pom-依赖" aria-hidden="true">#</a> JUnit 5 的 Maven pom 依赖</h2><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.junit.platform<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>junit-platform-launcher<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.4.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token comment">&lt;!-- JUnit 平台 API：\n        被 engine 依赖，会自动导入，可省略 --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.junit.jupiter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>junit-jupiter-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.4.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span> \n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- JUnit 5 --&gt;</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.junit.jupiter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>junit-jupiter-engine<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.4.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token comment">&lt;!-- Junit3、Junit4 接入『平台』的“适配器”\n&lt;dependency&gt;\n    &lt;groupId&gt;org.junit.vintage&lt;/groupId&gt;\n    &lt;artifactId&gt;junit-vintage-engine&lt;/artifactId&gt;\n    &lt;version&gt;5.4.2&lt;/version&gt;\n    &lt;scope&gt;test&lt;/scope&gt;\n&lt;/dependency&gt;\n--&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div>',35),p={render:function(n,s){return t}}}}]);