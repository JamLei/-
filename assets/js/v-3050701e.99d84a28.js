"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[6791],{78805:(t,n,a)=>{a.r(n),a.d(n,{data:()=>e});const e={key:"v-3050701e",path:"/spring-mvc/301-%E6%95%B0%E6%8D%AE%E6%A0%A1%E9%AA%8C.html",title:"数据校验",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"概述",slug:"概述",children:[]},{level:2,title:"JSR 303 的注解",slug:"jsr-303-的注解",children:[]},{level:2,title:"Hibernate Validator 的扩展注解",slug:"hibernate-validator-的扩展注解",children:[]},{level:2,title:"使用 JSR 303",slug:"使用-jsr-303",children:[]}],filePathRelative:"spring-mvc/301-数据校验.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},39292:(t,n,a)=>{a.r(n),a.d(n,{default:()=>s});const e=(0,a(66252).uE)('<h1 id="数据校验" tabindex="-1"><a class="header-anchor" href="#数据校验" aria-hidden="true">#</a> 数据校验</h1><h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述" aria-hidden="true">#</a> 概述</h2><p>在 Web 应用程序中，为了防止客户端传来的数据引发程序异常，常常需要对数据进行验证。</p><p>数据验证分为：</p><ul><li>客户端验证 <ul><li>客户端验证主要通过 JavaScript 脚本进行。</li></ul></li><li>服务端验证 <ul><li>服务端验证主要通过 Java 代码进行验证。</li></ul></li></ul><blockquote><p>为了保证数据的安全性，客户端和服务端验证都是必须的。</p></blockquote><p>Spring MVC 提供了强大的数据校验功能，其中有两种方法可以验证输入：</p><ul><li>利用 Spring 自带的 Validation 校验框架（早于 JSR 303，不建议使用）</li><li>利用 JSR 303（Java 校验规范）实现校验功能</li></ul><p>JSR 只是一套规范，其具体的实现中 Hibernate Validator 是最常见的实现，它即实现了 JSR 303 的要求，又实现了更新的 JSR 349 的要求）。</p><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>由于版本原因，<code>使用 hibernate-validator 6.x 版本</code> 和 <code>使用 tomcat 7 插件</code> 只能二选一。</p></div><p>Spring MVC 对 JSR 提供了良好的支持，如果，Spring MVC 的配置文件中配置了 <code>&lt;mvc:annotation-driven /&gt;</code>，那么就不再需要其它任何配置了。</p><p>以下 <strong>所有</strong> 注解都有 <code>message</code> 属性用以在验证不通过是显示提示信息。</p><h2 id="jsr-303-的注解" tabindex="-1"><a class="header-anchor" href="#jsr-303-的注解" aria-hidden="true">#</a> JSR 303 的注解</h2><table><thead><tr><th style="text-align:left;">注解</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><code>@Null</code></td><td style="text-align:left;">被注解的元素必须为 null</td></tr><tr><td style="text-align:left;"><code>@NotNull</code></td><td style="text-align:left;">被注解的元素必须不为 null</td></tr><tr><td style="text-align:left;"><code>@AssertTrue</code></td><td style="text-align:left;">被注解的元素必须为 true</td></tr><tr><td style="text-align:left;"><code>@AssertFalse</code></td><td style="text-align:left;">被注解的元素必须为 false</td></tr><tr><td style="text-align:left;"><code>@Min</code></td><td style="text-align:left;">被注解的元素必须是一个数字，其值必须小于指定值。</td></tr><tr><td style="text-align:left;"><code>@Max</code></td><td style="text-align:left;">被注解的元素必须是一个数字，其值必须大于指定值。</td></tr><tr><td style="text-align:left;"><code>@DecimalMin</code></td><td style="text-align:left;">被注解的元素必须是一个数字，其值必须小于指定值。</td></tr><tr><td style="text-align:left;"><code>@DecimalMax</code></td><td style="text-align:left;">被注解的元素必须是一个数字，其值必须大于指定值。</td></tr><tr><td style="text-align:left;"><code>@Size(min, max)</code></td><td style="text-align:left;">被注解的数组和集合型元素的长度是必须给定的范围之内</td></tr><tr><td style="text-align:left;"><code>@Digits(integer, fraction)</code></td><td style="text-align:left;">要求字符串必须是数字型字符串，且整数部分有 interger 位，小数部分有 fraction 位。</td></tr><tr><td style="text-align:left;"><code>@Past</code></td><td style="text-align:left;">要求必须是一个过去日期。用于 Date 和 Calendar</td></tr><tr><td style="text-align:left;"><code>@Future</code></td><td style="text-align:left;">要求必须是一个未来日期。用于 Date 和 Calendar</td></tr><tr><td style="text-align:left;"><code>@Pattern(regexp, flag)</code></td><td style="text-align:left;">要求字符串内容必须符合正则表达式的规则</td></tr><tr><td style="text-align:left;"><code>@Valid</code></td><td style="text-align:left;">要求递归检查数组和容器中关联对象。</td></tr></tbody></table><p>所有的这些注解都有 message 属性，用于设置错误提示信息<small>（如果没有设置，则会有默认的错误提示信息）</small>。</p><h2 id="hibernate-validator-的扩展注解" tabindex="-1"><a class="header-anchor" href="#hibernate-validator-的扩展注解" aria-hidden="true">#</a> Hibernate Validator 的扩展注解</h2><p>Hibernate Validator 实现了 JSR 303，它除了支持所有标准的校验注解外，还支持一些『额外』的注解：</p><table><thead><tr><th style="text-align:left;">注解</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><code>@NotBlank</code></td><td style="text-align:left;">要求字符串必须不为 NULL，且执行 trim() 后必须为非空字符串</td></tr><tr><td style="text-align:left;"><code>@Email</code></td><td style="text-align:left;">要求字符串内容必须符合邮箱格式。但是 null 会放过</td></tr><tr><td style="text-align:left;"><code>@Length(min, max)</code></td><td style="text-align:left;">要求字符串的长度必须在指定范围内</td></tr><tr><td style="text-align:left;"><code>@NotEmpty</code></td><td style="text-align:left;">备注解的字符串必须为非空</td></tr><tr><td style="text-align:left;"><code>@Range(min, max)</code></td><td style="text-align:left;">检查数字是否介于 min 和 max 之间</td></tr></tbody></table><h2 id="使用-jsr-303" tabindex="-1"><a class="header-anchor" href="#使用-jsr-303" aria-hidden="true">#</a> 使用 JSR 303</h2><p><code>注意</code> 使用验证框架时，请求处理方法的参数对象必须用 <code>@Valid</code> 注解修饰，并且处理方法要多出一个 <code>BindingResult</code> 参数对象。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;...&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token class-name">ModelAndView</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Valid</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token class-name">BindingResult</span> result<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><strong>BindingResult</strong> 参数对象中包含了验证结果，及其相关信息。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">hasErrors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">FieldError</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">getFieldErrors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\t<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">FieldError</span> error <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;, &quot;</span> <span class="token operator">+</span> error<span class="token punctuation">.</span><span class="token function">getDefaultMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>更优雅的改进方案：结合全局异常处理，当 <code>result.hasErrors() == true</code> 时，在 Controller 中直接抛出异常，由 Controller 的异常处理类来解析 BindingResult 中的异常信息，并返回对应的错误信息给客户端。</p>',24),s={render:function(t,n){return e}}}}]);