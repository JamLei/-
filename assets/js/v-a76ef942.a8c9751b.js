"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[1462],{56187:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-a76ef942",path:"/java8/01-Optional.html",title:"如何正确使用 Optional",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"基本使用",slug:"基本使用",children:[]},{level:2,title:"map 函数隆重登场",slug:"map-函数隆重登场",children:[]},{level:2,title:"Optional 的使用场景和使用原则",slug:"optional-的使用场景和使用原则",children:[]}],filePathRelative:"java8/01-Optional.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},51094:(n,s,a)=>{a.r(s),a.d(s,{default:()=>e});const p=(0,a(66252).uE)('<h1 id="如何正确使用-optional" tabindex="-1"><a class="header-anchor" href="#如何正确使用-optional" aria-hidden="true">#</a> 如何正确使用 Optional</h1><p>Java 8 增加了一些很有用的 API，其中一个就是 Optional。目的是从 JDK 级别解决 NPE 问题。大多数新语言都从语法层面上解决了 NPE 问题。</p><p>你『<strong>不应该</strong>』以如下方式使用 Optional：</p><ul><li><p>调用它的 <strong>isPresent</strong> 方法</p></li><li><p>调用它的 <strong>get</strong> 方法</p></li><li><p>用 Optional 类型作为类/实例属性</p></li><li><p>用 Optional 类型作为方法参数</p></li></ul><p>一句话小结: 使用 Optional 时尽量不要直接调用 Optional 的 <strong>get</strong> 方法, Optional 的 <strong>isPresent</strong> 方法更应该被视为一个私有方法。</p><h2 id="基本使用" tabindex="-1"><a class="header-anchor" href="#基本使用" aria-hidden="true">#</a> 基本使用</h2><p>Optional 的 3 种构造方式:</p><ul><li><p>明确的 <strong>Optional.empty()</strong></p><p>它是用来构造一个 Optional 空容器。实际上使用它的机会几乎没有。</p></li><li><p><strong>Optional.of(obj)</strong></p><p>它要求传入的 obj 不能是 null 值的, 否则还没开始进入角色就倒在了 NullPointerException 异常上了。</p></li><li><p><strong>Optional.ofNullable(obj)</strong></p><p>它以更智能、宽容的方式来构造一个 Optional 实例，来者不拒。传 null 进到就等价于调用 <code>Optional.empty()</code>, 非 null 就等价于调用 <code>Optional.of(obj)</code> 。</p></li></ul><p>使用 <strong>Optional.of(obj)</strong> 来构造 Optional 实例的场景：</p><ol><li><p>当我们非常的明确将要传给 <code>Optional.of(obj)</code> 的 obj 参数不可能为 null 时, 比如它是一个刚 new 出来的对象（例如，<code>Optional.of(new User(...))</code>）, 或者是一个非 null 常量时;</p></li><li><p>逻辑上 obj 明确不允许为 null 。一旦为 null ，立即报错，抛出 NPE 。不允许接续执行。</p></li></ol><p>那怎么去使用一个已有的 Optional 实例？假定我们有一个实例 Optional&lt;User&gt; user。<strong>应避免 if(user.isPresent()) { ... } else { ... } 的方式进行应用</strong>。</p><p>存在即返回, 无则提供默认值：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">return</span> user<span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">return</span> user<span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span>UNKNOWN_USER<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>存在即返回, 无则由函数来产生：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">return</span> user<span class="token punctuation">.</span><span class="token function">orElseGet</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token function">fetchAUserFromDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>存在才对它做点什么：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>user<span class="token punctuation">.</span><span class="token function">ifPresent</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n \n<span class="token comment">/* 而不要下边那样\nif (user.isPresent()) {\n  System.out.println(user.get());\n}\n*/</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="map-函数隆重登场" tabindex="-1"><a class="header-anchor" href="#map-函数隆重登场" aria-hidden="true">#</a> map 函数隆重登场</h2><p>当 <strong>user.isPresent()</strong> 为真, 获得它关联的 orders, 为假则返回一个空集合时, 我们用上面的 <strong>orElse()</strong>, <strong>orElseGet()</strong> 方法都乏力时, 那原本就是 <strong>map</strong> 函数的责任, 我们可以这样一行：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">return</span> user<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>u <span class="token operator">-&gt;</span> u<span class="token punctuation">.</span><span class="token function">getOrders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n<span class="token comment">/* 上面避免了我们类似 Java 8 之前的做法\nif(user.isPresent()) {\n  return user.get().getOrders();\n} else {\n  return Collections.emptyList();\n}\n*/</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>map 是可能无限级联的, 比如再深一层, 获得用户名的大写形式</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">return</span> user<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>u <span class="token operator">-&gt;</span> u<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n           <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>name <span class="token operator">-&gt;</span> name<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n           <span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>这要搁在以前, 每一级调用的展开都需要放一个 null 值的判断</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>user <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">String</span> name <span class="token operator">=</span> user<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> name <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> name<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="optional-的使用场景和使用原则" tabindex="-1"><a class="header-anchor" href="#optional-的使用场景和使用原则" aria-hidden="true">#</a> Optional 的使用场景和使用原则</h2><p>Optional 通常（只应该）出现在方法的返回值类型部分。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Optional</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Department</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectDepartmentByPrimaryKey</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> deptno<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><code>Optional&lt;Department&gt;</code> 和 <code>Department</code> 两种不同类型的返回值，代表着方法的作者对方法的使用者的两种『暗示』和『约定』：</p><ul><li><p><code>Department</code> 类型的返回值</p><ul><li><p>由方法的作者确保该方法 <strong>一定会/必须要</strong> 返回一个非空的 Department 对象。方法的使用者无须判断/担心该方法的返回值为 null 的问题。</p></li><li><p>即便是出现了返回 null 的问题，责任在方法的作者一方，由他负责修改/调整代码，务必确保该方法返回值为非空。</p></li></ul></li><li><p><code>Optional&lt;Department&gt;</code> 类型的返回值</p><ul><li><p>方法的作者在暗示使用者，本方法的返回值 Optional 容器中存放的 Department 对象可能存在，也可能不存在（为 Null）。逻辑上，相当于本方法的返回值有两种可能。</p></li><li><p>由方法的使用者，在从 Optional 中取出 Department 对象时来判断-处理有可能为 null 的情况。</p></li><li><p>此时，方法的使用者，必须通过 <code>.orElseGet()</code> 或 <code>.orElseThrow()</code> 方法从 Optional 中取值（一定不要使用 <code>get()</code> 方法从中取 Department 。</p></li></ul></li></ul><p>简而言之，<code>Optional&lt;T&gt;</code> 类型的返回值，就是在强迫你思考：<strong>这个方法的返回值有可能是 NULL，接下来你需要对这种情况作出处理（给它个默认值，或者抛出异常）</strong> 。</p>',30),e={render:function(n,s){return p}}}}]);