"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[7326],{38366:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-2582bcd4",path:"/redis/02-Redis%E5%91%BD%E4%BB%A4.html",title:"Redis 常用命令",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"通用命令",slug:"通用命令",children:[]},{level:2,title:"字符串命令",slug:"字符串命令",children:[{level:3,title:"set 命令",slug:"set-命令",children:[]},{level:3,title:"带参数的 set 命令",slug:"带参数的-set-命令",children:[]},{level:3,title:"get",slug:"get",children:[]},{level:3,title:"del 命令",slug:"del-命令",children:[]}]},{level:2,title:"哈希命令",slug:"哈希命令",children:[{level:3,title:"hset 命令",slug:"hset-命令",children:[]},{level:3,title:"hsetnx 命令",slug:"hsetnx-命令",children:[]},{level:3,title:"Hmset 命令",slug:"hmset-命令",children:[]},{level:3,title:"Hdel",slug:"hdel",children:[]},{level:3,title:"Hexists",slug:"hexists",children:[]},{level:3,title:"Hget",slug:"hget",children:[]}]},{level:2,title:"链表命令",slug:"链表命令",children:[{level:3,title:"Lpush 命令",slug:"lpush-命令",children:[]},{level:3,title:"Rpush 命令",slug:"rpush-命令",children:[]},{level:3,title:"Lindex 命令",slug:"lindex-命令",children:[]},{level:3,title:"Llen 命令",slug:"llen-命令",children:[]},{level:3,title:"Lpop 命令",slug:"lpop-命令",children:[]},{level:3,title:"Rpop 命令",slug:"rpop-命令",children:[]},{level:3,title:"Linsert 命令",slug:"linsert-命令",children:[]},{level:3,title:"Lrange 命令",slug:"lrange-命令",children:[]},{level:3,title:"Lrem 命令",slug:"lrem-命令",children:[]}]},{level:2,title:"集合（Set）命令",slug:"集合-set-命令",children:[{level:3,title:"Sadd 命令",slug:"sadd-命令",children:[]},{level:3,title:"Scard 命令",slug:"scard-命令",children:[]},{level:3,title:"Sismember 命令",slug:"sismember-命令",children:[]},{level:3,title:"Smembers 命令",slug:"smembers-命令",children:[]},{level:3,title:"Srandmember 命令",slug:"srandmember-命令",children:[]},{level:3,title:"Smove 命令",slug:"smove-命令",children:[]},{level:3,title:"Spop 命令",slug:"spop-命令",children:[]},{level:3,title:"Srem 命令",slug:"srem-命令",children:[]}]},{level:2,title:"有序集合命令",slug:"有序集合命令",children:[{level:3,title:"Zadd 命令",slug:"zadd-命令",children:[]},{level:3,title:"Zcard 命令",slug:"zcard-命令",children:[]},{level:3,title:"Zcount 命令",slug:"zcount-命令",children:[]},{level:3,title:"Zincrby 命令",slug:"zincrby-命令",children:[]},{level:3,title:"Zrem 命令",slug:"zrem-命令",children:[]},{level:3,title:"Zrange 命令",slug:"zrange-命令",children:[]},{level:3,title:"Zrank 命令",slug:"zrank-命令",children:[]},{level:3,title:"Zrevrank 命令",slug:"zrevrank-命令",children:[]},{level:3,title:"Zscore 命令",slug:"zscore-命令",children:[]}]}],filePathRelative:"redis/02-Redis命令.md",git:{updatedTime:1629826614e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},86698:(n,s,a)=>{a.r(s),a.d(s,{default:()=>p});const e=(0,a(66252).uE)('<h1 id="redis-常用命令" tabindex="-1"><a class="header-anchor" href="#redis-常用命令" aria-hidden="true">#</a> Redis 常用命令</h1><h2 id="通用命令" tabindex="-1"><a class="header-anchor" href="#通用命令" aria-hidden="true">#</a> 通用命令</h2><table><thead><tr><th style="text-align:center;">#</th><th style="text-align:left;">命令</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:center;">1</td><td style="text-align:left;">keys</td><td style="text-align:left;">查看所有的 key</td></tr><tr><td style="text-align:center;">2</td><td style="text-align:left;">dbsize</td><td style="text-align:left;">统计键值对的数量</td></tr><tr><td style="text-align:center;">3</td><td style="text-align:left;">exists</td><td style="text-align:left;">判断指定键值对是否存在</td></tr><tr><td style="text-align:center;">4</td><td style="text-align:left;">del</td><td style="text-align:left;">删除指定键值对</td></tr><tr><td style="text-align:center;">5</td><td style="text-align:left;">expire</td><td style="text-align:left;">设置过期自动删除</td></tr><tr><td style="text-align:center;">6</td><td style="text-align:left;">type</td><td style="text-align:left;">查看键值对数据模型类型</td></tr></tbody></table><hr><ol><li><p>keys 命令</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token operator">&gt;</span> keys *\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>遍历所有的 key。keys 命令一般不在生产环境中使用<small>（因为生产环境中键值对极多）</small></p></li><li><p>dbsize 命令</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token operator">&gt;</span> dbsize\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>计算 key 的总数。</p></li><li><p>exists 命令</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token operator">&gt;</span> exists <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>存在则返回 1，不存在返回 0</p></li><li><p>del 命令</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token operator">&gt;</span> del <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span> <span class="token punctuation">[</span> <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span> <span class="token punctuation">..</span>. <span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>删除指定的键值对</p></li><li><p>expire 命令</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token operator">&gt;</span> expire <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>seconds<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>key 在 seconds 秒后过期。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token operator">&gt;</span> ttl <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>查询 key 的剩余过期时间。返回 -1 表示没有过期设置；返回 -2 表示过期删除。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token operator">&gt;</span> persist key\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>去掉 key 的过期设置</p></li><li><p>type 命令</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token builtin class-name">type</span> <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>返回 key 的数据模型，即值的类型。</p></li></ol><h2 id="字符串命令" tabindex="-1"><a class="header-anchor" href="#字符串命令" aria-hidden="true">#</a> 字符串命令</h2><p>Redis 中的键<small>（key）</small>都是字符串，但是值可以有多种类型<small>（常见五种）</small>。</p><p>字符串类型的值（Value）最大不能超过 512M<small>（已经足够大了）</small>。</p><p>一般情况下，考虑到并发、流量等问题，通常字符串类型的值最大也只是『百K』级别。</p><p>主要命令：</p><table><thead><tr><th style="text-align:left;">命令</th><th style="text-align:left;">语法</th></tr></thead><tbody><tr><td style="text-align:left;">get</td><td style="text-align:left;"><code>get &lt;key&gt;</code></td></tr><tr><td style="text-align:left;">set</td><td style="text-align:left;"><code>set &lt;key&gt; &lt;value&gt;</code></td></tr><tr><td style="text-align:left;">del</td><td style="text-align:left;"><code>del &lt;key&gt;</code></td></tr></tbody></table><h3 id="set-命令" tabindex="-1"><a class="header-anchor" href="#set-命令" aria-hidden="true">#</a> set 命令</h3><p>set 命令用于新增或更新键值对。具体是新增还是更新，取决于该键值对原本是否存在。</p><p>语法：</p><pre><code>SET &lt;key&gt; &lt;value&gt;\n</code></pre><p>SET 执行成功时返回 OK 。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># 对不存在的键进行设置</span>\n<span class="token operator">&gt;</span> SET key <span class="token string">&quot;value&quot;</span>\nOK\n    \n<span class="token operator">&gt;</span> GET key\n<span class="token string">&quot;value&quot;</span>\n\n<span class="token comment"># 对已存在的键进行设置</span>\n\n<span class="token operator">&gt;</span> SET key <span class="token string">&quot;new-value&quot;</span>\nOK\n    \n<span class="token operator">&gt;</span> GET key\n<span class="token string">&quot;new-value&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><ul><li><p>set 一个『不存在』的 key ，就是『新增』一个键值对；</p></li><li><p>set 一个『已存在』的 key ，就是『更新』这个键值对。</p></li></ul><h3 id="带参数的-set-命令" tabindex="-1"><a class="header-anchor" href="#带参数的-set-命令" aria-hidden="true">#</a> 带参数的 set 命令</h3><ul><li><p>无论 key 是否存在，都进行设置</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token builtin class-name">set</span> <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>val<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li><p>key 不存在，才设置；等同于 <strong>setnx &lt;key&gt; &lt;val&gt;</strong> 。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token builtin class-name">set</span> <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>val<span class="token operator">&gt;</span> NX\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>这是真正意义上的『新增』操作，因为要求之前是必须没有的。</p></li><li><p>key 存在，才设置。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token operator">&gt;</span> <span class="token builtin class-name">set</span> <span class="token operator">&lt;</span>key<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>val<span class="token operator">&gt;</span> XX\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>这是真正意义上的『更新』操作，因为要求之前是必须有的。</p></li></ul><h3 id="get" tabindex="-1"><a class="header-anchor" href="#get" aria-hidden="true">#</a> get</h3><p>Get 命令用于获取某个键值对的值<small>（String）</small>，具体是哪个键值对由参数 <code>key</code> 决定。</p><p>如果键值对不存在，则返回 <code>nil</code> 。</p><p>如果键值对的值部分并非字符串<small>（String）</small>类型，则返回一个错误。<small>简而言之，redis 在告诉你 get 命令用错地方了。</small></p><p>语法：</p><pre><code>get &lt;key&gt;\n</code></pre><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># 对不存在的 *key* 或字符串类型 *key* 进行 Get</span>\n<span class="token operator">&gt;</span> GET db\n<span class="token punctuation">(</span>nil<span class="token punctuation">)</span>\n    \n<span class="token operator">&gt;</span> SET db redis\nOK\n    \n<span class="token operator">&gt;</span> GET db\n<span class="token string">&quot;redis&quot;</span>\n\n<span class="token comment"># 对不是字符串类型的 *key* 进行 GET</span>\n<span class="token operator">&gt;</span> DEL db\n<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>\n    \n<span class="token comment"># 在 redis 中添加一个 list 类型的键值对</span>\n<span class="token operator">&gt;</span> LPUSH db redis mongodb mysql\n<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">3</span>\n    \n<span class="token operator">&gt;</span> GET db\n<span class="token punctuation">(</span>error<span class="token punctuation">)</span> ERR Operation against a key holding the wrong kind of value\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h3 id="del-命令" tabindex="-1"><a class="header-anchor" href="#del-命令" aria-hidden="true">#</a> del 命令</h3><p>del 命令用于删除某个键值对。</p><p>如果 <em>key</em> 代表的键值对不存在，则该操作无任何效果。</p><p>实际上 del 命令是一个通用命令，各种类型结构都有这个命令。</p><p>语法：</p><pre><code>del &lt;key&gt;\n</code></pre><p>del 命令将返回被删除的键值对的数量。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token operator">&gt;</span> SET w3ckey redis\nOK\n\n<span class="token comment"># 删除已创建的 *key* 。</span>\n<span class="token operator">&gt;</span> DEL w3ckey\n<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="哈希命令" tabindex="-1"><a class="header-anchor" href="#哈希命令" aria-hidden="true">#</a> 哈希命令</h2><p>Hash 结构与 String 结构有一定的相似性。</p><p>在 Hash 结构中，键值对的值又分为两个部分：<strong>field</strong> 和 <strong>value</strong> 。例如：</p><ul><li><p>key：<strong>users:1</strong></p><ul><li><p>field: <strong>id</strong> ，value: ...</p></li><li><p>field: <strong>name</strong> ，value: ...</p></li><li><p>field: <strong>age</strong> ，value: ...</p></li><li><p>field: <strong>address</strong> ，value: ...</p></li><li><p>field: <strong>email</strong> ，value: ...</p></li></ul></li></ul><p>Hash 类型的价值在于，在 Redis 中存储了一个对象的信息后，可以单独更新该对象的某个属性的值，而不需要：取出-更新-序列化-存入 。</p><p>注意，与数据库中的列不同，Hash 结构中不强求两个键值对中必须有同样数量/名称的 field 。</p><h3 id="hset-命令" tabindex="-1"><a class="header-anchor" href="#hset-命令" aria-hidden="true">#</a> hset 命令</h3><p>hset 命令用于向某个 HashTable 中添加新的键值对 <small><em>field - value</em></small>。至于是哪个哈希表则取决与参数 <em>key</em> 。</p><p><code>注意</code>，这里有两层键值对。</p><ul><li><p>首先，整个 Redis 中的数据内容就是一对一对键值对<small>（ key - hashtable ）</small>，其中，每个键值对的值部分都是一个 HashTable<small>（HashTable 是 HashMap 的“高级”版本）</small></p></li><li><p>其次，HashTable 中存放的又是一对一对的键值对<small>（ filed - value ）</small>。</p></li></ul><p>如果 <em>哈希表</em> 不存在，这个哈希表会被创建，并添加至 Redis 中，然后再进行 Hset 操作。</p><p>如果 将要添加进哈希表中的 <em>键值对</em> 已经存在，则该 <em>键值对</em> 的旧值将被覆盖。</p><p>语法：</p><pre><code>hset key field value \n</code></pre><p>如果 <em>field-value</em> 是哈希表中的一个新建键值对，并且值设置成功，返回 1 。</p><p>如果在哈希表中 <em>field - value</em> 字段已经存在，则旧值被新值覆盖，返回 0 。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token operator">&gt;</span> HSET myhash field1 <span class="token string">&quot;foo&quot;</span>\nOK\n<span class="token operator">&gt;</span> HGET myhash field1\n<span class="token string">&quot;foo&quot;</span>\n\n<span class="token comment"># 设置一个新域   </span>\n<span class="token operator">&gt;</span> HSET website google <span class="token string">&quot;www.g.cn&quot;</span>       \n<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>\n\n<span class="token comment"># 覆盖一个旧域   </span>\n<span class="token operator">&gt;</span>HSET website google <span class="token string">&quot;www.google.com&quot;</span> \n<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="hsetnx-命令" tabindex="-1"><a class="header-anchor" href="#hsetnx-命令" aria-hidden="true">#</a> hsetnx 命令</h3><p>Hsetnx 命令用于向某个哈希表中添加新的 <em>field - value</em> ，具体是哪个 HashTable 取决于参数 <em>key</em> 。</p><p>这里要求 <em>filed - value</em> 原本不存在于该 HashTable 中 。</p><p>如果 <em>filed - value</em> 不存在，则这个 <em>filed - value</em> 将被添加到 HashTable 中。</p><p>如果 <em>filed - value</em> 已经存在于哈希表中，操作无效。</p><p>如果 HashTable 不存在，一个新哈希表将被创建，并执行 HSETNX 命令。</p><p>语法：</p><pre><code>hsetnx &lt;key&gt; &lt;field&gt; &lt;value&gt;\n</code></pre><p>hsetnx 命令设置成功时，返回 1 。如果给定 <em>filed - value</em> 已经存在，则没有操作被执行，返回 0 。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># key 或 field 不存在时，才进行设值操作。</span>\n<span class="token operator">&gt;</span> HSETNX myhash field1 <span class="token string">&quot;foo&quot;</span>\n<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span> <span class="token comment"># 不存在，操作成功</span>\n\n<span class="token operator">&gt;</span> HSETNX myhash field1 <span class="token string">&quot;bar&quot;</span>\n<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span> <span class="token comment"># 存在，操作失败</span>\n\n<span class="token operator">&gt;</span> HGET myhash field1\n<span class="token string">&quot;foo&quot;</span> <span class="token comment"># 不会有『覆盖』情况出现</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="hmset-命令" tabindex="-1"><a class="header-anchor" href="#hmset-命令" aria-hidden="true">#</a> Hmset 命令</h3><p>Hmset 命令用于同时将多个 <em>field - value</em> 设置到某个哈希表中，至于具体是哪个哈希表则取决于参数 <em>key</em> 。</p><p>如果 <em>field - value</em> 在 HashTable 中已存在，此命令会覆盖其旧值。</p><p>如果 HashTable 不存在，会创建一个空HashTable，再执行 Hmset 操作。</p><p>语法：</p><pre><code>Hmset &lt;key&gt; &lt;field1&gt; &lt;value1&gt; [field2 value2] ... \n</code></pre><p>如果命令执行成功，返回 OK 。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># 一次性设置 2 个 filed-value 。</span>\n<span class="token operator">&gt;</span> HSET myhash field1 <span class="token string">&quot;foo&quot;</span> field2 <span class="token string">&quot;bar&quot;</span>\nOK\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="hdel" tabindex="-1"><a class="header-anchor" href="#hdel" aria-hidden="true">#</a> Hdel</h3><p>Hdel 命令用于从某个 HashTable 中删除一个或多个 <em>filed - value</em> ，具体从哪个HashTable中删除，取决于参数 <em>key</em> ，具体删除那一个/些个 <em>filed - value</em> 取决于参数 <em>filed1 ...</em> 。</p><p>不存在的 <em>filed - value</em> 将被忽略。</p><p>语法：</p><pre><code>HDEL &lt;key&gt; &lt;field1&gt; [ field2 ... ]\n</code></pre><p>HDEL 命令返回被成功删除 <em>field - value</em> 的数量，其中不包括被忽略的 <em>filed - value</em> 。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token operator">&gt;</span> HSET myhash field1 <span class="token string">&quot;foo&quot;</span>\n<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>\n\n<span class="token operator">&gt;</span> HDEL myhash field1\n<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>\n\n<span class="token operator">&gt;</span> HDEL myhash field2\n<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="hexists" tabindex="-1"><a class="header-anchor" href="#hexists" aria-hidden="true">#</a> Hexists</h3><p>Hexists 命令用于查看某个HashTable中是否存在某个 <em>filed - values</em> 。</p><p>语法：</p><pre><code>Hexists key field\n</code></pre><p>如果哈希表含有给定 <em>field - value</em> ，返回 1 ； 果哈希表不含有给定 <em>field - value</em> ，返回 0 。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token operator">&gt;</span> HSET myhash field1 <span class="token string">&quot;foo&quot;</span>\n<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>\n\n<span class="token operator">&gt;</span> HEXISTS myhash field1\n<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>\n\n<span class="token operator">&gt;</span> HEXISTS myhash field2\n<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="hget" tabindex="-1"><a class="header-anchor" href="#hget" aria-hidden="true">#</a> Hget</h3><p>Hget 命令用于返回某个哈希表中某个 <em>field - value</em> 的值。</p><p>语法：</p><pre><code>Hget &lt;key&gt; &lt;field&gt;\n</code></pre><p>返回给定 <em>filed - value</em> 的值。如果给定的 HashTable 或 <em>field - value</em> 不存在，则返回 nil 。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># 字段存在</span>\n<span class="token operator">&gt;</span> HSET site redis redis.com\n<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>\n    \n<span class="token operator">&gt;</span> HGET site redis\n<span class="token string">&quot;redis.com&quot;</span>\n\n<span class="token comment"># 字段不存在</span>\n<span class="token operator">&gt;</span> HGET site mysql\n<span class="token punctuation">(</span>nil<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="链表命令" tabindex="-1"><a class="header-anchor" href="#链表命令" aria-hidden="true">#</a> 链表命令</h2><h3 id="lpush-命令" tabindex="-1"><a class="header-anchor" href="#lpush-命令" aria-hidden="true">#</a> Lpush 命令</h3><table><thead><tr><th style="text-align:left;">增</th><th style="text-align:left;">删</th><th style="text-align:left;">改</th><th style="text-align:left;">查</th></tr></thead><tbody><tr><td style="text-align:left;">lpush</td><td style="text-align:left;">lpop</td><td style="text-align:left;">lset</td><td style="text-align:left;">lrange</td></tr><tr><td style="text-align:left;">linsert</td><td style="text-align:left;">rpop</td><td style="text-align:left;">lindex</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">lrem</td><td style="text-align:left;">llen</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">ltrim</td><td style="text-align:left;"></td><td style="text-align:left;"></td></tr></tbody></table><p>Lpush 命令将一个或多个值插入到某个列表头部<small>（左侧）</small>，具体是哪个链表由参数 <em>key</em> 决定。</p><p>如果链表不存在，一个空列表会被创建，而后再执行 Lpush 操作。</p><p>当 key 对应的类型不是列表类型时，返回一个错误。</p><p>语法：</p><pre><code>Lpush &lt;key&gt; &lt;value&gt; [ value ... ]\n</code></pre><p>执行 Lpush 命令后，将返回列表的长度。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token operator">&gt;</span> LPUSH <span class="token number">9527</span> <span class="token number">10</span>\n<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>\n\n<span class="token operator">&gt;</span> LPUSH <span class="token number">9527</span> <span class="token number">20</span>\n<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">2</span>\n\n<span class="token operator">&gt;</span> LRANGE <span class="token number">9527</span> <span class="token number">0</span> -1\n<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;10&quot;</span>\n<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;20&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="rpush-命令" tabindex="-1"><a class="header-anchor" href="#rpush-命令" aria-hidden="true">#</a> Rpush 命令</h3><p>Rpush 命令用于将一个或多个值插入到某个列表的尾部（最右边），具体是哪个列表由参数 <em>key</em> 决定。</p><p>如果列表不存在，一个空列表会被创建，然后再执行 Rpush 操作。</p><p>当 key 对应的类型不是列表类型时，返回一个错误。</p><p>语法：</p><pre><code>Rpush &lt;key&gt; &lt;value&gt; [ value ... ]\n</code></pre><p>执行 Rpush 操作后，将返回列表的长度。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token operator">&gt;</span> RPUSH <span class="token number">9528</span> <span class="token string">&quot;hello&quot;</span>\n<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>\n\n<span class="token operator">&gt;</span> RPUSH <span class="token number">9528</span> <span class="token string">&quot;world&quot;</span>\n<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">2</span>\n\n<span class="token operator">&gt;</span> RPUSH <span class="token number">9528</span> <span class="token string">&quot;goodbye&quot;</span>\n<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">3</span>\n\n<span class="token operator">&gt;</span> LRANGE <span class="token number">9528</span> <span class="token number">0</span> -1\n<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;hello&quot;</span>\n<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;world&quot;</span>\n<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">&quot;goodbye&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="lindex-命令" tabindex="-1"><a class="header-anchor" href="#lindex-命令" aria-hidden="true">#</a> Lindex 命令</h3><p>Lindex 命令用于通过索引获取某个列表中的元素，具体是哪个列表由参数 <em>key</em> 决定。</p><p>索引都是从头向尾（从左到右）的方向算，从 0 开始。</p><p>你也可以使用负数下标，以 -1 表示列表的最后一个元素， -2 表示列表的倒数第二个元素，以此类推。</p><p>语法：</p><pre><code>Lindex &lt;key&gt; &lt;index&gt;\n</code></pre><p>Lindex 命令返回列表中下标所指定的位置的值。如果指定索引值不在列表的区间范围内，返回 nil 。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token operator">&gt;</span> LPUSH list_1 <span class="token string">&quot;World&quot;</span>\n<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>\n    \n<span class="token operator">&gt;</span> LPUSH list_1 <span class="token string">&quot;Hello&quot;</span>\n<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">2</span>\n    \n<span class="token operator">&gt;</span> LINDEX list_1 <span class="token number">0</span>\n<span class="token string">&quot;Hello&quot;</span>\n    \n<span class="token operator">&gt;</span> LINDEX list_1 -1\n<span class="token string">&quot;World&quot;</span>\n    \n<span class="token operator">&gt;</span> LINDEX list_1 <span class="token number">3</span>        <span class="token comment"># index不在 mylist 的区间范围内</span>\n<span class="token punctuation">(</span>nil<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="llen-命令" tabindex="-1"><a class="header-anchor" href="#llen-命令" aria-hidden="true">#</a> Llen 命令</h3><p>Llen 命令用于返回某个列表的长度。</p><p>如果列表不存在，则返回 0 。</p><p>如果 key 对应的不是列表类型，则返回一个错误。</p><p>语法：</p><pre><code>Llen &lt;key&gt;\n</code></pre><p>Llen 返回列表的长度。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token operator">&gt;</span> RPUSH list1 <span class="token string">&quot;foo&quot;</span>\n<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>\n\n<span class="token operator">&gt;</span> RPUSH list1 <span class="token string">&quot;bar&quot;</span>\n<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">2</span>\n\n<span class="token operator">&gt;</span> LLEN list1\n<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">2</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="lpop-命令" tabindex="-1"><a class="header-anchor" href="#lpop-命令" aria-hidden="true">#</a> Lpop 命令</h3><p>Lpop 命令用于移除，并返回某个列表的第一个元素（最左侧的元素）。</p><p>语法：</p><pre><code>Lpop &lt;key&gt;\n</code></pre><p>Lpop 将返回列表的第一个元素；当列表不存在时，返回 nil 。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token operator">&gt;</span> RPUSH list1 <span class="token string">&quot;foo&quot;</span>\n<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>\n\n<span class="token operator">&gt;</span> RPUSH list1 <span class="token string">&quot;bar&quot;</span>\n<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">2</span>\n\n<span class="token operator">&gt;</span> LPOP list1\n<span class="token string">&quot;foo&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="rpop-命令" tabindex="-1"><a class="header-anchor" href="#rpop-命令" aria-hidden="true">#</a> Rpop 命令</h3><p>Rpop 命令用于移除，并返回某个列表的最后一个元素（最右侧的元素）。</p><p>语法：</p><pre><code>RPOP key\n</code></pre><p>Rpop 命令将会返回列表的最后一个元素；当列表不存在时，返回 nil 。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token operator">&gt;</span> RPUSH mylist <span class="token string">&quot;hello&quot;</span>\n<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>\n\n<span class="token operator">&gt;</span> RPUSH mylist <span class="token string">&quot;hello&quot;</span>\n<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">2</span>\n\n<span class="token operator">&gt;</span> RPUSH mylist <span class="token string">&quot;foo&quot;</span>\n<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">3</span>\n\n<span class="token operator">&gt;</span> RPUSH mylist <span class="token string">&quot;bar&quot;</span>\n<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">4</span>\n\n<span class="token operator">&gt;</span> RPOP mylist\nOK\n\n<span class="token operator">&gt;</span> LRANGE mylist <span class="token number">0</span> -1\n<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;hello&quot;</span>\n<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;hello&quot;</span>\n<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">&quot;foo&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h3 id="linsert-命令" tabindex="-1"><a class="header-anchor" href="#linsert-命令" aria-hidden="true">#</a> Linsert 命令</h3><p>Linsert 命令用于在某个列表的元素（锚点元素）前或者后插入元素。</p><p>当列表不存在时，被视为空列表，不执行任何操作。</p><p>如果 key 对应的不是列表类型，返回一个错误。</p><p>当指定的锚点元素不存在于列表中时，不执行任何操作。</p><p>语法：</p><pre><code>Linsert &lt;key&gt; [before | after] &lt;pivot&gt; &lt;value&gt;\n</code></pre><p>如果 Linsert 命令执行成功，返回插入操作完成之后，列表的长度；如果没有找到指定元素 ，返回 -1；如果类表不存在或为空列表，返回 0 。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token operator">&gt;</span> RPUSH list1 <span class="token string">&quot;foo&quot;</span>\n<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>\n\n<span class="token operator">&gt;</span> RPUSH list1 <span class="token string">&quot;bar&quot;</span>\n<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">2</span>\n\n<span class="token operator">&gt;</span> LINSERT list1 BEFORE <span class="token string">&quot;bar&quot;</span> <span class="token string">&quot;Yes&quot;</span>\n<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">3</span>\n\n<span class="token operator">&gt;</span> LRANGE mylist <span class="token number">0</span> -1\n<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;foo&quot;</span>\n<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;Yes&quot;</span>\n<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">&quot;bar&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="lrange-命令" tabindex="-1"><a class="header-anchor" href="#lrange-命令" aria-hidden="true">#</a> Lrange 命令</h3><p>Lrange 返回某个列表中指定区间内的元素，区间以参数 <em>start</em> 和 <em>end</em> 指定。其中 0 表示列表的第一个元素， 1 表示列表的第二个元素，以此类推。</p><p>你也可以使用负数下标，以 -1 表示列表的最后一个元素， -2 表示列表的倒数第二个元素，以此类推。</p><p>语法：</p><pre><code>Lrange &lt;key&gt; &lt;start&gt; &lt;end&gt;\n</code></pre><p>Lrange 命令返回一个列表，包含指定区间内的元素。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token operator">&gt;</span> LPUSH list1 <span class="token string">&quot;foo&quot;</span>\n<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>\n\n<span class="token operator">&gt;</span> LPUSH list1 <span class="token string">&quot;bar&quot;</span>\n<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">2</span>\n\n<span class="token operator">&gt;</span> LPUSHX list1 <span class="token string">&quot;bar&quot;</span>\n<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span>\n\n<span class="token operator">&gt;</span> LRANGE list1 <span class="token number">0</span> -1\n<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;foo&quot;</span>\n<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;bar&quot;</span>\n<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">&quot;bar&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="lrem-命令" tabindex="-1"><a class="header-anchor" href="#lrem-命令" aria-hidden="true">#</a> Lrem 命令</h3><p>Lrem 根据参数 <em>count</em> 的值，移除某个列表中与参数 <em>value</em> 相等的元素。</p><p><em>count</em> 的值可以是以下几种：</p><ul><li><p>count &gt; 0 : 从表头开始向表尾搜索，移除与 VALUE 相等的元素，数量为 <em>count</em> 。</p></li><li><p>count &lt; 0 : 从表尾开始向表头搜索，移除与 VALUE 相等的元素，数量为 <em>count</em> 的绝对值。</p></li><li><p>count = 0 : 移除表中所有与 VALUE 相等的值。</p></li></ul><p>语法：</p><pre><code>Lrem &lt;key&gt; &lt;count&gt; &lt;value&gt;\n</code></pre><p>Lrem 命令返回被移除元素的数量。 列表不存在时返回 0 。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token operator">&gt;</span> RPUSH mylist <span class="token string">&quot;hello&quot;</span>\n<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>\n\n<span class="token operator">&gt;</span> RPUSH mylist <span class="token string">&quot;hello&quot;</span>\n<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">2</span>\n\n<span class="token operator">&gt;</span> RPUSH mylist <span class="token string">&quot;foo&quot;</span>\n<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">3</span>\n\n<span class="token operator">&gt;</span> RPUSH mylist <span class="token string">&quot;hello&quot;</span>\n<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">4</span>\n\n<span class="token operator">&gt;</span> LREM mylist -2 <span class="token string">&quot;hello&quot;</span>\n<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">2</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="集合-set-命令" tabindex="-1"><a class="header-anchor" href="#集合-set-命令" aria-hidden="true">#</a> 集合（Set）命令</h2><p>特点：</p><ul><li>无序</li><li>无重复</li><li>集合间操作</li></ul><table><thead><tr><th style="text-align:left;">集合内 API</th><th style="text-align:left;">集合间 API</th></tr></thead><tbody><tr><td style="text-align:left;">sadd</td><td style="text-align:left;">sdiff</td></tr><tr><td style="text-align:left;">srem</td><td style="text-align:left;">sinter</td></tr><tr><td style="text-align:left;">scard</td><td style="text-align:left;">sunion</td></tr><tr><td style="text-align:left;">sismember</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">srandmember</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">smembers</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">spop</td><td style="text-align:left;"></td></tr></tbody></table><h3 id="sadd-命令" tabindex="-1"><a class="header-anchor" href="#sadd-命令" aria-hidden="true">#</a> Sadd 命令</h3><p>Sadd 命令将一个或多个成员元素加入到某个集合中，已经存在于集合的成员元素将被忽略。</p><p>假如集合不存在，则创建一个新的集合，而后再执行 Sadd 操作。</p><p>当 <em>key</em> 对应的并非集合类型时，返回一个错误。</p><p>语法：</p><pre><code>Sadd &lt;key&gt; &lt;value&gt; [ value ... ]\n</code></pre><p>Sadd 命令将被添加到集合中的新元素的数量，不包括被忽略的元素。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token operator">&gt;</span> SADD myset <span class="token string">&quot;hello&quot;</span>\n<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>\n\n<span class="token operator">&gt;</span> SADD myset <span class="token string">&quot;foo&quot;</span>\n<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>\n\n<span class="token operator">&gt;</span> SADD myset <span class="token string">&quot;hello&quot;</span>\n<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span>\n\n<span class="token operator">&gt;</span> SMEMBERS myset\n<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;hello&quot;</span>\n<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;foo&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="scard-命令" tabindex="-1"><a class="header-anchor" href="#scard-命令" aria-hidden="true">#</a> Scard 命令</h3><p>Scard 命令返回某个集合中元素的数量。</p><p>语法：</p><pre><code>SCARD &lt;key&gt;\n</code></pre><p>Scard 命令将返回集合中元素的数量；当集合 key 不存在时，返回 0 。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token operator">&gt;</span> SADD myset <span class="token string">&quot;hello&quot;</span>\n<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>\n\n<span class="token operator">&gt;</span> SADD myset <span class="token string">&quot;foo&quot;</span>\n<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>\n\n<span class="token operator">&gt;</span> SADD myset <span class="token string">&quot;hello&quot;</span>\n<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span>\n\n<span class="token operator">&gt;</span> SCARD myset\n<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">2</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="sismember-命令" tabindex="-1"><a class="header-anchor" href="#sismember-命令" aria-hidden="true">#</a> Sismember 命令</h3><p>Sismember 命令判断成员元素是否是某个集合的成员。</p><p>语法：</p><pre><code>Sismember &lt;key&gt; &lt;value&gt;\n</code></pre><p>如果成员元素是集合的成员，Sismsmber 将返回 1 ；如果成员元素不是集合的成员，或集合不存在，返回 0 。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token operator">&gt;</span> SADD myset1 <span class="token string">&quot;hello&quot;</span>\n<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>\n\n<span class="token operator">&gt;</span> SISMEMBER myset1 <span class="token string">&quot;hello&quot;</span>\n<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>\n\n<span class="token operator">&gt;</span> SISMEMBER myset1 <span class="token string">&quot;world&quot;</span>\n<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="smembers-命令" tabindex="-1"><a class="header-anchor" href="#smembers-命令" aria-hidden="true">#</a> Smembers 命令</h3><p>Smembers 命令返回某个集合中的所有的成员。</p><p>如果集合不存在，则视其为一个空集合。</p><p>语法：</p><pre><code>Smembers &lt;key&gt;\n</code></pre><p>Smembers 命令将返回集合中的所有成员。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token operator">&gt;</span> SADD myset1 <span class="token string">&quot;hello&quot;</span>\n<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>\n\n<span class="token operator">&gt;</span> SADD myset1 <span class="token string">&quot;world&quot;</span>\n<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>\n\n<span class="token operator">&gt;</span> SMEMBERS myset1\n<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;World&quot;</span>\n<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;Hello&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="srandmember-命令" tabindex="-1"><a class="header-anchor" href="#srandmember-命令" aria-hidden="true">#</a> Srandmember 命令</h3><p>Srandmember 命令用于从某个集合中返回一个或多个随机元素。</p><p>从 Redis 2.6 版本开始， Srandmember 命令接受可选的 <em>count</em> 参数：</p><p>如果 <em>count</em> 为正数，且小于集合基数，那么命令返回一个包含 <em>count</em> 个元素的数组，数组中的元素各不相同。如果 <em>count</em> 大于等于集合基数，那么返回整个集合。</p><p>如果 <em>count</em> 为负数，那么命令返回一个数组，数组中的元素可能会重复出现多次，而数组的长度为 count 的绝对值。</p><p>返回的元素并不会从集合中移除。</p><p>语法：</p><pre><code>Srandmember &lt;key&gt; [ count ]\n</code></pre><p>如果没有 <em>count</em> 参数，Srandmember 将返回一个元素；如果提供了 <em>count</em> 参数，那么返回一个数组；如果集合为空，返回空数组；如果集合为空，返回 nil 。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token operator">&gt;</span> SADD myset1 <span class="token string">&quot;hello&quot;</span>\n<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>\n\n<span class="token operator">&gt;</span> SADD myset1 <span class="token string">&quot;world&quot;</span>\n<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>\n\n<span class="token operator">&gt;</span> SADD myset1 <span class="token string">&quot;bar&quot;</span>\n<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>\n\n<span class="token operator">&gt;</span> SRANDMEMBER myset1\n<span class="token string">&quot;bar&quot;</span>\n\n<span class="token operator">&gt;</span> SRANDMEMBER myset1 <span class="token number">2</span>\n<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;Hello&quot;</span>\n<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;world&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h3 id="smove-命令" tabindex="-1"><a class="header-anchor" href="#smove-命令" aria-hidden="true">#</a> Smove 命令</h3><p>Smove 命令将指定成员 <em>member</em> 元素从 <em>source</em> 集合移动到 <em>destination</em> 集合。</p><p>SMOVE 是原子性操作。</p><p>如果 source 集合不存在或不包含指定的 member 元素，则 SMOVE 命令不执行任何操作，仅返回 0 。</p><p>否则， member 元素从 source 集合中被移除，并添加到 destination 集合中去。</p><p>当 destination 集合已经包含 member 元素时， SMOVE 命令只是简单地将 source 集合中的 member 元素删除。</p><p>当 source 或 destination 不是集合类型时，返回一个错误。</p><p>语法：</p><pre><code>SMOVE &lt;source&gt; &lt;destination&gt; &lt;member&gt;\n</code></pre><p>如果成员元素被成功移除，SMOVE 返回 1 。</p><p>如果成员元素不是 source 集合的成员，并且没有任何操作对 destination 集合执行，那么返回 0 。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token operator">&gt;</span> SADD myset1 <span class="token string">&quot;hello&quot;</span>\n<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>\n\n<span class="token operator">&gt;</span> SADD myset1 <span class="token string">&quot;world&quot;</span>\n<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>\n\n<span class="token operator">&gt;</span> SADD myset1 <span class="token string">&quot;bar&quot;</span>\n<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>\n\n<span class="token operator">&gt;</span> SADD myset2 <span class="token string">&quot;foo&quot;</span>\n<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>\n\n<span class="token operator">&gt;</span> SMOVE myset1 myset2 <span class="token string">&quot;bar&quot;</span>\ninteger<span class="token punctuation">)</span> <span class="token number">1</span>\n\n<span class="token operator">&gt;</span> SMEMBERS myset1\n<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;World&quot;</span>\n<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;Hello&quot;</span>\n\n<span class="token operator">&gt;</span> SMEMBERS myset2\n<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;foo&quot;</span>\n<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;bar&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h3 id="spop-命令" tabindex="-1"><a class="header-anchor" href="#spop-命令" aria-hidden="true">#</a> Spop 命令</h3><p>Spop 命令用于『<strong>随机</strong>』移除，并返回集合中的一个元素。</p><p>语法：</p><pre><code>Spop key\n</code></pre><p>被移除的随机元素。 当集合不存在或是空集时，返回 nil 。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token operator">&gt;</span> SADD myset1 <span class="token string">&quot;hello&quot;</span>\n<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>\n\n<span class="token operator">&gt;</span> SADD myset1 <span class="token string">&quot;world&quot;</span>\n<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>\n\n<span class="token operator">&gt;</span> SADD myset1 <span class="token string">&quot;bar&quot;</span>\n<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>\n\n<span class="token operator">&gt;</span> SPOP myset1\n<span class="token string">&quot;bar&quot;</span>\n\n<span class="token operator">&gt;</span> SMEMBERS myset1\n<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;Hello&quot;</span>\n<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;world&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h3 id="srem-命令" tabindex="-1"><a class="header-anchor" href="#srem-命令" aria-hidden="true">#</a> Srem 命令</h3><p>Srem 命令用于移除集合中的一个或多个成员元素，不存在的成员元素会被忽略。</p><p>当 key 对应的不是集合类型时，返回一个错误。</p><p>语法：</p><pre><code>Srem &lt;key&gt; &lt;member&gt; [ member ... ]\n</code></pre><p>Srem 返回被成功、实际移除的元素的数量，不包括被忽略的元素。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token operator">&gt;</span> SADD myset1 <span class="token string">&quot;hello&quot;</span>\n<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>\n\n<span class="token operator">&gt;</span> SADD myset1 <span class="token string">&quot;world&quot;</span>\n<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>\n\n<span class="token operator">&gt;</span> SADD myset1 <span class="token string">&quot;bar&quot;</span>\n<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>\n<span class="token operator">&gt;</span> SREM myset1 <span class="token string">&quot;hello&quot;</span>\n<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>\n\n<span class="token operator">&gt;</span> SREM myset1 <span class="token string">&quot;foo&quot;</span>\n<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span>\n\n<span class="token operator">&gt;</span> SMEMBERS myset1\n<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;bar&quot;</span>\n<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;world&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h2 id="有序集合命令" tabindex="-1"><a class="header-anchor" href="#有序集合命令" aria-hidden="true">#</a> 有序集合命令</h2><p>和『哈希』有点类似，有序集合中的键值对的值中，也是有两个部分：<strong>score</strong> 和 <strong>value</strong> 。</p><p>score 的值决定了与之对应的 value 的顺序</p><ul><li>zadd</li><li>zrem</li><li>zscore</li><li>zincrby</li><li>zcard</li><li>zrange</li><li>zrangebyscore</li><li>zcount</li><li>zremrangebyrank</li><li>zremrangebyscore</li></ul><h3 id="zadd-命令" tabindex="-1"><a class="header-anchor" href="#zadd-命令" aria-hidden="true">#</a> Zadd 命令</h3><p>Zadd 命令用于将一个或多个成员元素及其分数值加入到某个有序集当中。</p><p>如果某个成员已经是有序集的成员，那么更新这个成员的分数值。<small>有序集合内部会重新调整成员元素的位置，来保证这个集合的有序性。</small></p><p>分数值可以是整数值或双精度浮点数。通常使用整数值。</p><p>如果有序集合不存在，则创建一个空的有序集并执行 Zadd 操作。</p><p>当 key 所对应的并非有序集类型时，返回一个错误。</p><p>语法：</p><pre><code>Zadd &lt;key&gt; &lt;score&gt; &lt;value&gt; [scoren value ... ]\n</code></pre><p>Zadd 命令将被成功添加的新成员的数量，不包括那些被更新的、已经存在的成员。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token operator">&gt;</span> ZADD set1 <span class="token number">1</span> <span class="token string">&quot;hello&quot;</span>\n<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>\n<span class="token operator">&gt;</span> ZADD set1 <span class="token number">1</span> <span class="token string">&quot;foo&quot;</span>\n<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>\n<span class="token operator">&gt;</span> ZADD set1 <span class="token number">2</span> <span class="token string">&quot;world&quot;</span> <span class="token number">3</span> <span class="token string">&quot;bar&quot;</span>\n<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">2</span>\n    \n<span class="token operator">&gt;</span> ZRANGE set1 <span class="token number">0</span> -1 WITHSCORES\n<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;hello&quot;</span>\n<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;1&quot;</span>\n<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">&quot;foo&quot;</span>\n<span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">&quot;1&quot;</span>\n<span class="token number">5</span><span class="token punctuation">)</span> <span class="token string">&quot;world&quot;</span>\n<span class="token number">6</span><span class="token punctuation">)</span> <span class="token string">&quot;2&quot;</span>\n<span class="token number">7</span><span class="token punctuation">)</span> <span class="token string">&quot;bar&quot;</span>\n<span class="token number">8</span><span class="token punctuation">)</span> <span class="token string">&quot;3&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h3 id="zcard-命令" tabindex="-1"><a class="header-anchor" href="#zcard-命令" aria-hidden="true">#</a> Zcard 命令</h3><p>Zcard 命令用于计算某个集合中元素的数量。</p><p>语法：</p><pre><code>Zcard &lt;key&gt;\n</code></pre><p>当集合存在时，Zcard 返回有序集的基数；当集合不存在时，返回 0 。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token operator">&gt;</span> ZADD myset <span class="token number">1</span> <span class="token string">&quot;hello&quot;</span>\n<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>\n\n<span class="token operator">&gt;</span> ZADD myset <span class="token number">1</span> <span class="token string">&quot;foo&quot;</span>\n<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>\n\n<span class="token operator">&gt;</span> ZADD myset <span class="token number">2</span> <span class="token string">&quot;world&quot;</span> <span class="token number">3</span> <span class="token string">&quot;bar&quot;</span>\n<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">2</span>\n\n<span class="token operator">&gt;</span> ZCARD myzset\n<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">4</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="zcount-命令" tabindex="-1"><a class="header-anchor" href="#zcount-命令" aria-hidden="true">#</a> Zcount 命令</h3><p>Zcount 命令用于计算某有序集合中指定分数区间的成员数量。</p><p>语法：</p><pre><code>Zcount &lt;key&gt; &lt;min&gt; &lt;max&gt;\n</code></pre><p>Zcount 返回分数值在 <em>min</em> 和 <em>max</em> 之间的成员的数量。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token operator">&gt;</span> ZADD myzset <span class="token number">1</span> <span class="token string">&quot;hello&quot;</span>\n<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>\n\n<span class="token operator">&gt;</span> ZADD myzset <span class="token number">1</span> <span class="token string">&quot;foo&quot;</span>\n<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>\n\n<span class="token operator">&gt;</span> ZADD myzset <span class="token number">2</span> <span class="token string">&quot;world&quot;</span> <span class="token number">3</span> <span class="token string">&quot;bar&quot;</span>\n<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">2</span>\n\n<span class="token operator">&gt;</span> ZCOUNT myzset <span class="token number">1</span> <span class="token number">3</span>\n<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">4</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="zincrby-命令" tabindex="-1"><a class="header-anchor" href="#zincrby-命令" aria-hidden="true">#</a> Zincrby 命令</h3><p>Zincrby 命令对某有序集合中指定成员的分数加上增量 <em>increment</em></p><p>可以通过传递一个负数值 <em>increment</em> ，让分数减去相应的值，比如 ZINCRBY key -5 member ，就是让 member 的 score 值减去 5 。</p><p>当有序集合不存在，或有序集合中不存在指定分数时， Zincrby 等同于 Zadd 。</p><p>当 key 对应的不是有序集时，返回一个错误。</p><p>分数值可以是整数值或双精度浮点数。</p><p>语法：</p><pre><code>Zincrby &lt;key&gt; &lt;increment&gt; &lt;member&gt;\n</code></pre><p>Zincrby 命令返回参数 <code>member</code> 的新的分数值<small>（以字符串形式表示）</small>。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token operator">&gt;</span> ZADD myzset <span class="token number">1</span> <span class="token string">&quot;hello&quot;</span>\n<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>\n\n<span class="token operator">&gt;</span> ZADD myzset <span class="token number">1</span> <span class="token string">&quot;foo&quot;</span>\n<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>\n\n<span class="token operator">&gt;</span> ZINCRBY myzset <span class="token number">2</span> <span class="token string">&quot;hello&quot;</span>\n<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">3</span>\n\n<span class="token operator">&gt;</span> ZRANGE myzset <span class="token number">0</span> -1 WITHSCORES\n<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;foo&quot;</span>\n<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;2&quot;</span>\n<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">&quot;hello&quot;</span>\n<span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">&quot;3&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="zrem-命令" tabindex="-1"><a class="header-anchor" href="#zrem-命令" aria-hidden="true">#</a> Zrem 命令</h3><p>Zrem 命令用于移除某个有序集中的一个或多个成员，不存在的成员将被忽略。</p><p>如果 key 对应的并非是有序集类型，则返回一个错误。</p><p>语法：</p><pre><code>Zrem &lt;key&gt; &lt;member&gt;\n</code></pre><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># 基本示例</span>\n<span class="token operator">&gt;</span> ZRANGE page_rank <span class="token number">0</span> -1 WITHSCORES\n<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;bing.com&quot;</span>\n<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;8&quot;</span>\n<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">&quot;baidu.com&quot;</span>\n<span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">&quot;9&quot;</span>\n<span class="token number">5</span><span class="token punctuation">)</span> <span class="token string">&quot;google.com&quot;</span>\n<span class="token number">6</span><span class="token punctuation">)</span> <span class="token string">&quot;10&quot;</span>\n\n<span class="token comment"># 移除单个元素</span>\n<span class="token operator">&gt;</span> ZREM page_rank google.com\n<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>\n    \n<span class="token operator">&gt;</span> ZRANGE page_rank <span class="token number">0</span> -1 WITHSCORES\n<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;bing.com&quot;</span>\n<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;8&quot;</span>\n<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">&quot;baidu.com&quot;</span>\n<span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">&quot;9&quot;</span>\n\n<span class="token comment"># 移除多个元素</span>\n<span class="token operator">&gt;</span> ZREM page_rank baidu.com bing.com\n<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">2</span>\n\n<span class="token operator">&gt;</span> ZRANGE page_rank <span class="token number">0</span> -1 WITHSCORES\n<span class="token punctuation">(</span>empty list or <span class="token builtin class-name">set</span><span class="token punctuation">)</span>\n\n\n<span class="token comment"># 移除不存在元素</span>\n<span class="token operator">&gt;</span> ZREM page_rank non-exists-element\n<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><h3 id="zrange-命令" tabindex="-1"><a class="header-anchor" href="#zrange-命令" aria-hidden="true">#</a> Zrange 命令</h3><p>Zrange 返回某有序集中，指定区间内的成员。</p><p>如果需要逆序显示，请使用 Zrevrange 命令。</p><p>语法：</p><pre><code>Zrange &lt;key&gt; &lt;start&gt; &lt;stop&gt; [ WITHSCORES ]\n</code></pre><p>Zrange 命令将指定区间内，带有分数值<small>（可选）</small>的有序集成员的列表。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># 显示整个有序集成员</span>\n<span class="token operator">&gt;</span> ZRANGE salary <span class="token number">0</span> -1 WITHSCORES\n<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;jack&quot;</span>\n<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;3500&quot;</span>\n<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">&quot;tom&quot;</span>\n<span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">&quot;5000&quot;</span>\n<span class="token number">5</span><span class="token punctuation">)</span> <span class="token string">&quot;boss&quot;</span>\n<span class="token number">6</span><span class="token punctuation">)</span> <span class="token string">&quot;10086&quot;</span>\n\n<span class="token comment"># 显示有序集下标区间 1 至 2 的成员</span>\n<span class="token operator">&gt;</span> ZRANGE salary <span class="token number">1</span> <span class="token number">2</span> WITHSCORES\n<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;tom&quot;</span>\n<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;5000&quot;</span>\n<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">&quot;boss&quot;</span>\n<span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">&quot;10086&quot;</span>\n\n<span class="token comment"># 测试 end 下标超出最大下标时的情况</span>\n<span class="token operator">&gt;</span> ZRANGE salary <span class="token number">0</span> <span class="token number">200000</span> WITHSCORES\n<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;jack&quot;</span>\n<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;3500&quot;</span>\n<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">&quot;tom&quot;</span>\n<span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">&quot;5000&quot;</span>\n<span class="token number">5</span><span class="token punctuation">)</span> <span class="token string">&quot;boss&quot;</span>\n<span class="token number">6</span><span class="token punctuation">)</span> <span class="token string">&quot;10086&quot;</span>\n\n<span class="token comment"># 测试当给定区间不存在于有序集时的情况</span>\n<span class="token operator">&gt;</span> ZRANGE salary <span class="token number">200000</span> <span class="token number">3000000</span> WITHSCORES\n<span class="token punctuation">(</span>empty list or <span class="token builtin class-name">set</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><h3 id="zrank-命令" tabindex="-1"><a class="header-anchor" href="#zrank-命令" aria-hidden="true">#</a> Zrank 命令</h3><p>Zrank 返回有序集中指定成员的排名。其中有序集成员按分数值递增<small>（从小到大）</small>顺序排列。</p><p>语法：</p><pre><code>ZRANK &lt;key&gt; &lt;member&gt;\n</code></pre><p>如果成员是有序集的成员，ZRANK 返回 member 的排名；如果成员不是有序集的成员，返回 nil 。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># 显示所有成员及其 score 值</span>\n<span class="token operator">&gt;</span> ZRANGE salary <span class="token number">0</span> -1 WITHSCORES\n<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;peter&quot;</span>\n<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;3500&quot;</span>\n<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">&quot;tom&quot;</span>\n<span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">&quot;4000&quot;</span>\n<span class="token number">5</span><span class="token punctuation">)</span> <span class="token string">&quot;jack&quot;</span>\n<span class="token number">6</span><span class="token punctuation">)</span> <span class="token string">&quot;5000&quot;</span>\n\n<span class="token comment"># 显示 tom 的薪水排名，第二</span>\n<span class="token operator">&gt;</span> ZRANK salary tom\n<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="zrevrank-命令" tabindex="-1"><a class="header-anchor" href="#zrevrank-命令" aria-hidden="true">#</a> Zrevrank 命令</h3><p>Zrevrank 命令返回有序集中成员的排名。其中有序集成员按分数值降序排序。</p><p>使用 Zrank 命令可以获得成员按分数值升序排序。</p><p>语法：</p><pre><code>Zrevrank &lt;key&gt; &lt;member&gt;\n</code></pre><p>如果成员是有序集的成员，Zrevrank 返回成员的排名；如果成员不是有序集的成员，返回 nil 。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token operator">&gt;</span> ZRANGE salary <span class="token number">0</span> -1 WITHSCORES     <span class="token comment"># 测试数据</span>\n<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;jack&quot;</span>\n<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;2000&quot;</span>\n<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">&quot;peter&quot;</span>\n<span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">&quot;3500&quot;</span>\n<span class="token number">5</span><span class="token punctuation">)</span> <span class="token string">&quot;tom&quot;</span>\n<span class="token number">6</span><span class="token punctuation">)</span> <span class="token string">&quot;5000&quot;</span>\n    \n<span class="token operator">&gt;</span> ZREVRANK salary peter     <span class="token comment"># peter 的工资排第二</span>\n<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span>\n\n<span class="token operator">&gt;</span> ZREVRANK salary tom       <span class="token comment"># tom 的工资最高</span>\n<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="zscore-命令" tabindex="-1"><a class="header-anchor" href="#zscore-命令" aria-hidden="true">#</a> Zscore 命令</h3><p>Zscore 命令返回有序集中，成员的分数值。</p><p>如果成员元素不是有序集的成员，或有序集合不存在，返回 nil 。</p><p>语法：</p><pre><code>Zscore &lt;key&gt; &lt;member&gt;\n</code></pre><p>Zscore 返回成员的分数值<small>（以字符串形式表示）</small>。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token operator">&gt;</span> ZRANGE salary <span class="token number">0</span> -1 WITHSCORES    <span class="token comment"># 测试数据</span>\n<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">&quot;tom&quot;</span>\n<span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">&quot;2000&quot;</span>\n<span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">&quot;peter&quot;</span>\n<span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">&quot;3500&quot;</span>\n<span class="token number">5</span><span class="token punctuation">)</span> <span class="token string">&quot;jack&quot;</span>\n<span class="token number">6</span><span class="token punctuation">)</span> <span class="token string">&quot;5000&quot;</span>\n    \n<span class="token operator">&gt;</span> ZSCORE salary peter              <span class="token comment"># 注意返回值是字符串</span>\n<span class="token string">&quot;3500&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div>',294),p={render:function(n,s){return e}}}}]);