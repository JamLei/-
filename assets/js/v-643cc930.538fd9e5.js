"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[7693],{73034:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-643cc930",path:"/linux/89-FRP%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F.html",title:"配置 FRP 实现内网穿透",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"FRP 的作用",slug:"frp-的作用",children:[]},{level:2,title:"配置说明",slug:"配置说明",children:[{level:3,title:"实现功能",slug:"实现功能",children:[]},{level:3,title:"配置前准备",slug:"配置前准备",children:[]}]},{level:2,title:"安装 FRP",slug:"安装-frp",children:[]},{level:2,title:"配置",slug:"配置",children:[{level:3,title:"服务端配置",slug:"服务端配置",children:[]},{level:3,title:"客户端配置",slug:"客户端配置",children:[]}]}],filePathRelative:"linux/89-FRP内网穿透.md",git:{updatedTime:1629790307e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},60867:(n,s,a)=>{a.r(s),a.d(s,{default:()=>o});var e=a(66252);const p=(0,e.uE)('<h1 id="配置-frp-实现内网穿透" tabindex="-1"><a class="header-anchor" href="#配置-frp-实现内网穿透" aria-hidden="true">#</a> 配置 FRP 实现内网穿透</h1><h2 id="frp-的作用" tabindex="-1"><a class="header-anchor" href="#frp-的作用" aria-hidden="true">#</a> FRP 的作用</h2><p>利用处于内网或防火墙后的机器，对外网环境提供 http 或 https 服务。</p><p>对于 http, https 服务支持基于域名的虚拟主机，支持自定义域名绑定，使多个域名可以共用一个 80 端口。</p><p>利用处于内网或防火墙后的机器，对外网环境提供 tcp 和 udp 服务，例如在家里通过 ssh 访问处于公司内网环境内的主机。</p><h2 id="配置说明" tabindex="-1"><a class="header-anchor" href="#配置说明" aria-hidden="true">#</a> 配置说明</h2><h3 id="实现功能" tabindex="-1"><a class="header-anchor" href="#实现功能" aria-hidden="true">#</a> 实现功能</h3><ol><li><p>外网通过 ssh 访问内网机器</p></li><li><p>自定义绑定域名访问内网 web 服务</p></li></ol><h3 id="配置前准备" tabindex="-1"><a class="header-anchor" href="#配置前准备" aria-hidden="true">#</a> 配置前准备</h3><ol><li><p>公网服务器 1 台。公网服务器是内网服务器的代理，所有的请求都先走到它这里，然后被它转到内网服务器，从而实现外网间接访问内网服务器的共嗯那个。它扮演的是 FRP Server 的角色。</p></li><li><p>内网服务器 1 台。内网服务器是逻辑上的真正的被访问服务， 它扮演的是 FRP client 的角色。</p></li><li><p>内网服务器部署一个 web 服务，可以用 tomcat 模拟，这里就不演示了。</p></li></ol><h2 id="安装-frp" tabindex="-1"><a class="header-anchor" href="#安装-frp" aria-hidden="true">#</a> 安装 FRP</h2><p>公网服务器与内网服务器都需要下载 FRP 进行安装，公网服务器通过配置，扮演 FRP Server 角色；内网服务器通过配置，扮演 FRP Client 角色。</p>',12),t=(0,e.Uk)("从 github 上下载："),l={href:"https://github.com/fatedier/frp/releases/download/v0.15.1/frp_0.15.1_linux_amd64.tar.gz",target:"_blank",rel:"noopener noreferrer"},r=(0,e.Uk)("frp_0.15.1_linux_amd64.tar.gz"),i=(0,e.Uk)(" 。"),c=(0,e.uE)('<p>将下载的压缩包解压，例如:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">tar</span> xzvf frp_0.15.1_linux_amd64.tar.gz -C /usr/share/\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>这里主要关注 4 个文件：</p><table><thead><tr><th style="text-align:left;">角色</th><th style="text-align:left;">关注</th></tr></thead><tbody><tr><td style="text-align:left;">服务端（公网服务器）</td><td style="text-align:left;">frps、frps.ini</td></tr><tr><td style="text-align:left;">客户端（内网服务器）</td><td style="text-align:left;">frpc、frpc.ini</td></tr></tbody></table><h2 id="配置" tabindex="-1"><a class="header-anchor" href="#配置" aria-hidden="true">#</a> 配置</h2><h3 id="服务端配置" tabindex="-1"><a class="header-anchor" href="#服务端配置" aria-hidden="true">#</a> 服务端配置</h3><p>FRP 服务端要运行在公网服务器上（因为它有公网 IP），它是内网服务器的代理。</p><p>配置服务端（公网服务器）时，可以先删掉 frpc 和 frpc.ini 这两个客户端配置文件（以免后续有混淆），然后再进行配置。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">vi</span> ./frps.ini\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>配置内容：</p><div class="language-ini ext-ini line-numbers-mode"><pre class="language-ini"><code><span class="token header"><span class="token punctuation">[</span><span class="token section-name selector">common</span><span class="token punctuation">]</span></span>\n<span class="token key attr-name">bind_port</span> <span class="token punctuation">=</span> <span class="token value attr-value">7000             # 与客户端绑定的进行通信的端口</span>\n<span class="token key attr-name">vhost_http_port</span> <span class="token punctuation">=</span> <span class="token value attr-value">8081     # 访问客户端 web 服务自定义的端口号</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>保存然后启动服务</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>./frps -c ./frps.ini\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>这是前台启动，后台启动命令为</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">nohup</span> ./frps -c ./frps.ini <span class="token operator">&amp;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="客户端配置" tabindex="-1"><a class="header-anchor" href="#客户端配置" aria-hidden="true">#</a> 客户端配置</h3><p>运行 FRP 的客户端的服务器是逻辑上的受访服务器，它才是用户真正所要访问、操作的对象。</p><p>配置客户端（内网服务器）时，可以先删掉 frps 和 frps.ini 两个服务端配置文件，以免混淆，然后再进行配置。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">vi</span> ./frpc.ini\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>配置内容：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token punctuation">[</span>common<span class="token punctuation">]</span>\nserver_addr <span class="token operator">=</span> <span class="token number">120.56</span>.37.48   <span class="token comment"># 公网服务器ip</span>\nserver_port <span class="token operator">=</span> <span class="token number">7000</span>                <span class="token comment"># 与服务端 bind_port一致</span>\n \n<span class="token comment"># 公网通过ssh访问内部服务器（未验证）</span>\n<span class="token punctuation">[</span>ssh<span class="token punctuation">]</span>\n<span class="token builtin class-name">type</span> <span class="token operator">=</span> tcp              <span class="token comment">#连接协议</span>\nlocal_ip <span class="token operator">=</span> <span class="token number">192.168</span>.3.48 <span class="token comment">#内网服务器ip</span>\nlocal_port <span class="token operator">=</span> <span class="token number">22</span>         <span class="token comment">#ssh默认端口号</span>\nremote_port <span class="token operator">=</span> <span class="token number">6000</span>      <span class="token comment">#自定义的访问内部ssh端口号</span>\n \n<span class="token comment"># 公网访问内部web服务器以http方式</span>\n<span class="token punctuation">[</span>web<span class="token punctuation">]</span>\n<span class="token builtin class-name">type</span> <span class="token operator">=</span> http         <span class="token comment">#访问协议</span>\nlocal_port <span class="token operator">=</span> <span class="token number">8081</span>   <span class="token comment">#内网web服务的端口号</span>\ncustom_domains <span class="token operator">=</span> repo.iwi.com   <span class="token comment"># 所绑定的公网服务器域名或IP</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div>',21),o={render:function(n,s){const a=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.iD)(e.HY,null,[p,(0,e._)("p",null,[t,(0,e._)("a",l,[r,(0,e.Wm)(a)]),i]),c],64)}}}}]);