"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[6848],{53706:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-159e47f4",path:"/spring-boot/07-spring-boot-jpa-b.html",title:"Spring Data JPA 的高级使用",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"关系映射",slug:"关系映射",children:[{level:3,title:"被省略调的默认设置",slug:"被省略调的默认设置",children:[]},{level:3,title:"一对多关系映射/配置",slug:"一对多关系映射-配置",children:[]},{level:3,title:"一对多双向关系的注意事项",slug:"一对多双向关系的注意事项",children:[]},{level:3,title:"一对一关系映射/配置",slug:"一对一关系映射-配置",children:[]}]},{level:2,title:"分页、排序、限制查询",slug:"分页、排序、限制查询",children:[{level:3,title:"限制查询 {docsify-ignore}",slug:"限制查询-docsify-ignore",children:[]}]},{level:2,title:"更复杂的条件查询",slug:"更复杂的条件查询",children:[{level:3,title:"使用案例",slug:"使用案例",children:[]}]},{level:2,title:"JPA 高级查询：QBC（自学、了解）",slug:"jpa-高级查询-qbc-自学、了解",children:[{level:3,title:"@Query",slug:"query",children:[]},{level:3,title:"QBC 多表查询",slug:"qbc-多表查询",children:[]}]},{level:2,title:"open session in view",slug:"open-session-in-view",children:[]},{level:2,title:"@Entity 对象转 JSON 时的一个异常",slug:"entity-对象转-json-时的一个异常",children:[]}],filePathRelative:"spring-boot/07-spring-boot-jpa-b.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},12245:(n,s,a)=>{a.r(s),a.d(s,{default:()=>e});const p=(0,a(66252).uE)('<h1 id="spring-data-jpa-的高级使用" tabindex="-1"><a class="header-anchor" href="#spring-data-jpa-的高级使用" aria-hidden="true">#</a> Spring Data JPA 的高级使用</h1><h2 id="关系映射" tabindex="-1"><a class="header-anchor" href="#关系映射" aria-hidden="true">#</a> 关系映射</h2><h3 id="被省略调的默认设置" tabindex="-1"><a class="header-anchor" href="#被省略调的默认设置" aria-hidden="true">#</a> 被省略调的默认设置</h3><p>由于 JPA 的默认设置在起作用，我们之前对 <strong><code>@Entity</code></strong> 中的属性的设置，『有些注解被省略掉了』。</p><ul><li><p>与主键列对应的属性，除了使用 <strong><code>@Id</code></strong> 注解，还要使用 <strong><code>@Column</code></strong> 注解。<small>（<strong><code>@GeneratedValue</code></strong> 注解的作用是另一码事，和我们这里说的无关）</small></p></li><li><p>与其它列对应的属性，除了使用 <strong><code>@Basic</code></strong> 注解，还要使用 <strong><code>@Column</code></strong> 注解。</p></li></ul><p>完整的形式应该如下：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Entity</span>\n<span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;department&quot;</span><span class="token punctuation">,</span> schema <span class="token operator">=</span> <span class="token string">&quot;scott&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Department</span> <span class="token punctuation">{</span>\n\n    <span class="token annotation punctuation">@Id</span>\n    <span class="token annotation punctuation">@Column</span>\n    <span class="token annotation punctuation">@GeneratedValue</span><span class="token punctuation">(</span>strategy <span class="token operator">=</span> <span class="token class-name">GenerationType</span><span class="token punctuation">.</span>IDENTITY<span class="token punctuation">)</span>\n    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@Basic</span>\n    <span class="token annotation punctuation">@Column</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@Basic</span>\n    <span class="token annotation punctuation">@Column</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> location<span class="token punctuation">;</span>\n\n    <span class="token comment">// getter / setter</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>这里【默认】的规则如下：</p><ul><li><p>Entity 的属性默认就是 <strong><code>@Basic</code></strong>。因此，逻辑上是 <strong><code>@Basic</code></strong> 的属性头上的 <strong><code>@Basic</code></strong> 就都可以省略。不是 <strong><code>@Basic</code></strong> 的属性，例如 <strong><code>@Id</code></strong>，自然就要明确标明 <strong><code>@Id</code></strong>。</p></li><li><p>如果属性名和列名是一致的，或只是驼峰命名法和下划线命名法这种命名风格的差异，那么，<strong><code>@Column</code></strong> 注解可以省略。反而言之，<strong><code>@Column</code></strong> 注解只有在双方命名不一致的情况下，才会出来干活。</p></li></ul><h3 id="一对多关系映射-配置" tabindex="-1"><a class="header-anchor" href="#一对多关系映射-配置" aria-hidden="true">#</a> 一对多关系映射/配置</h3><p>这里有个概念可以便于理解和记忆以下配置：<strong><strong><code>JoinColumn</code></strong> 指的就是外键列</strong>，只不过一个是编程领域中的叫法，一个是数据库领域中的叫法。<strong><code>@JoinColumn</code></strong> 的 <strong><code>name</code></strong> 自然就是外键列的列名。</p><p>如果没有映射成【引用】关系，那么 Entity 中的与外键列对应的属性，使用的注解自然就是 <strong><code>@Basic</code></strong> + <strong><code>@Column</code></strong>。例如：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Basic</span>\n<span class="token annotation punctuation">@Column</span>\n<span class="token keyword">private</span> <span class="token class-name">Integer</span> departmentId<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>当 <strong><code>Integer departmentId</code></strong> 属性要衍变为 <strong><code>Department department</code></strong> 属性时，自然不再适合使用 <strong><code>@Basic</code></strong> + <strong><code>@Column</code></strong> 注解。</p><p>在一对多的关系中：</p><ul><li><p>在多方<small>（例如员工、学生）</small>的属性上，使用 <strong><code>@ManyToOne</code></strong> + <strong><code>@JoinColumn</code></strong> 注解。</p></li><li><p>在一方<small>（例如部门、老师）</small>的属性上，使用 <strong><code>@OneToMany</code></strong> 注解。</p></li></ul><p>需要注意的是，<strong><code>@ManyToOne</code></strong> 和 <strong><code>@OneToMany</code></strong> 两个注解并非必须成对出现，只有在双向的关系中，一方和多方需要互相引用对象时，才会成对出现。如果是单向的关系，通常只是对多方使用 <strong><code>@ManyToOne</code></strong> 。</p><ul><li><p>Employee 类</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@ManyToOne</span>\n<span class="token annotation punctuation">@JoinColumn</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;department_id&quot;</span><span class="token punctuation">)</span>  <span class="token comment">// 外键列列名字</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li></ul><p>private Department department;</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>\n-   Department\n``` java\n@OneToMany(mappedBy = &quot;department&quot;) // 对应对端的相关属性名。\nprivate Set&lt;Employee&gt; employeeSet;  // 可以使用 List\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>另外，需要强调的是，由于在一对多关系中，外键列是在『<strong>从表</strong>』一方。也就是『<strong>多方</strong>』。因此，是【多方】的配置中出现 <strong><code>@JoinColumn</code></strong>。如果是双向关系的话，主表方/一方使用 <strong><code>mappedBy</code></strong> 。</p><ul><li><p>通用形式：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>多方<span class="token operator">/</span>从表方 <span class="token operator">:</span> <span class="token class-name">Employee</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n    <span class="token annotation punctuation">@ManyToOne</span>\n    <span class="token annotation punctuation">@JoinColumn</span><span class="token punctuation">(</span>\n\t    name <span class="token operator">=</span> <span class="token string">&quot;外键列 name（这一列是在从表中的）&quot;</span><span class="token punctuation">,</span>\n\t    referencedColumnName<span class="token operator">=</span><span class="token string">&quot;与外键列对应的列 name（通常是主表的主键列）&quot;</span>\n    <span class="token punctuation">)</span>\n    <span class="token keyword">private</span> <span class="token class-name">Department</span> department<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n一方<span class="token operator">/</span>主表方 <span class="token operator">:</span> <span class="token class-name">Department</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n    <span class="token annotation punctuation">@OneToMany</span><span class="token punctuation">(</span>mappedBy<span class="token operator">=</span><span class="token string">&quot;对端对应的属性的 name（就是用上了 @ManyToOne 的那个属性）&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">private</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> employeeSet<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div></li></ul><h3 id="一对多双向关系的注意事项" tabindex="-1"><a class="header-anchor" href="#一对多双向关系的注意事项" aria-hidden="true">#</a> 一对多双向关系的注意事项</h3><blockquote><p>再次强调，如无必要，尽量不要使用双向关系。</p></blockquote><ol><li><p>在『<strong>多方</strong>』 <strong><code>@ManyToOne</code></strong> 中要使用 <strong><code>FetchType.LAZY</code></strong>，否则会导致性能降低（1 + N 问题）。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n  <span class="token annotation punctuation">@ManyToOne</span><span class="token punctuation">(</span>fetch <span class="token operator">=</span> <span class="token class-name">FetchType</span><span class="token punctuation">.</span>LAZY<span class="token punctuation">)</span>\n  <span class="token annotation punctuation">@JoinColumn</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;department_id&quot;</span><span class="token punctuation">)</span>\n  <span class="token keyword">private</span> <span class="token class-name">Department</span> department<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></li><li><p>『<strong>一方</strong>』中要增加了 2 个方法，<em><strong><code>.addXxx()</code></strong></em> 和 <em><strong><code>.removeXxx()</code></strong></em> 。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Department</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n\n  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addEmployee</span><span class="token punctuation">(</span><span class="token class-name">Employee</span> employee<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>employeeSet<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>employee<span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token keyword">return</span><span class="token punctuation">;</span>\n\n    employeeSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>employee<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    employee<span class="token punctuation">.</span><span class="token function">setDepartment</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeEmployee</span><span class="token punctuation">(</span><span class="token class-name">Employee</span> employee<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>employeeSet<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>employee<span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token keyword">return</span><span class="token punctuation">;</span>\n\n    employeeSet<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>employee<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    employee<span class="token punctuation">.</span><span class="token function">setDepartment</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div></li><li><p>『<strong>多方</strong>』中的 <em><code>.setXxx()</code></em> 方法要重新设计。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDepartment</span><span class="token punctuation">(</span><span class="token class-name">Department</span> department<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>department <span class="token operator">==</span> department<span class="token punctuation">)</span>\n      <span class="token keyword">return</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>department <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span>department<span class="token punctuation">.</span><span class="token function">removeEmployee</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">this</span><span class="token punctuation">.</span>department <span class="token operator">=</span> department<span class="token punctuation">;</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>department <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>\n      department<span class="token punctuation">.</span><span class="token function">addEmployee</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div></li></ol><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>\n4.  在使用 JSON 来序列化对象或生成默认的 *`toString()`* 方法时，会产生无限递归&lt;small&gt;（Infinite recursion）&lt;/small&gt;问题：StackOverFlow。\n\n再次强调一点，&lt;span clss=&quot;strong&quot;&gt;最理想的情况应该是【有向无环】&lt;/strong&gt;。如非必要，尽量不要使用双向关系。因为一不小心容易出现逻辑错误。\n\n\n### 多对多关系映射/配置\n\n\n这里有个无关的小问题，由于下面的例子中使用到的素材里有个表名为 **`order`**，这与数据库关键字冲突，因此为了【告知】Hibernate/JPA 在【帮】我们执行 SQL 语句时要为它加返单引号，因此在 Entity 的 **`@Table`** 中做一点小改动：\n\n``` java\n@Table(name = &quot;`order`&quot;, schema = &quot;scott&quot;)\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>如果充分理解 <strong><code>@ManyToOne</code></strong>，那么接下来理解多对多关系中的 <strong><code>@ManyToMany</code></strong> 就很容易。</p><p>Order 类：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@ManyToMany</span>\n<span class="token annotation punctuation">@JoinTable</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;orderitem&quot;</span><span class="token punctuation">,</span>  <span class="token comment">// 指定中间表</span>\n    joinColumns <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@JoinColumn</span><span class="token punctuation">(</span>      <span class="token comment">// 【我】（Order）是如何和中间表关联</span>\n        name <span class="token operator">=</span> <span class="token string">&quot;order_id&quot;</span><span class="token punctuation">,</span>           <span class="token comment">// 中间表中的对应我的主键列的外键列</span>\n        referencedColumnName <span class="token operator">=</span> <span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 【我】的主键列</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    inverseJoinColumns <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@JoinColumn</span><span class="token punctuation">(</span> <span class="token comment">// 【我的对端】（Product）是如何和中间表关联</span>\n        name <span class="token operator">=</span> <span class="token string">&quot;prod_id&quot;</span><span class="token punctuation">,</span>              <span class="token comment">// 中间表中的对应我的对端的主键列的外键列</span>\n        referencedColumnName <span class="token operator">=</span> <span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span>   <span class="token comment">// 【我的对端】的主键列</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">)</span>\n<span class="token keyword">private</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Product</span><span class="token punctuation">&gt;</span></span> productSet<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>由于多对多的关系中，<strong>外键列</strong> 是在中间表中（A B 并没有对方的外键列），因此 <strong><code>@JoinColumn</code></strong> 自然是出现在 <strong><code>@JoinTable</code></strong> 【里面】的。并且，<strong><code>@JoinColumn</code></strong> 的 <strong><code>name</code></strong> 指的就是外键列的列名。</p><p>!FILENAME Product</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@ManyToMany</span><span class="token punctuation">(</span>mappedBy <span class="token operator">=</span> <span class="token string">&quot;productSet&quot;</span><span class="token punctuation">)</span>  <span class="token comment">// 对端的对应属性名</span>\n<span class="token keyword">private</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Order</span><span class="token punctuation">&gt;</span></span> orderSet<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>一对多双向关系中需要关注的那几点，在多对多双向关系中一样也要关注！</strong></p><ul><li><p>通用形式：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">A</span>方 <span class="token operator">:</span> <span class="token class-name">Order</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n    <span class="token annotation punctuation">@ManyToMany</span>\n    <span class="token annotation punctuation">@JoinTable</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&quot;中间表name&quot;</span><span class="token punctuation">,</span>\n  \t  joinColumns <span class="token operator">=</span> <span class="token punctuation">{</span> \t<span class="token comment">// 配置【我】（A方）与中间表的关系</span>\n  \t\t  <span class="token annotation punctuation">@JoinColumn</span><span class="token punctuation">(</span>\n  \t\t\t  name <span class="token operator">=</span> <span class="token string">&quot;中间表中A方的外键列name&quot;</span><span class="token punctuation">,</span>\n  \t\t\t  referencedColumnName <span class="token operator">=</span> <span class="token string">&quot;A方表中与之对应的列的name（通常就是A方的主键列）&quot;</span>\n  \t\t  <span class="token punctuation">)</span>\n  \t  <span class="token punctuation">}</span>\n  \t  inverseJoinColumns <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token comment">// 配置【对方】（B方）与中间表的关系</span>\n  \t\t  <span class="token annotation punctuation">@JoinColumn</span><span class="token punctuation">(</span>\n  \t\t\t  name <span class="token operator">=</span> <span class="token string">&quot;中间表中B方的外键列name&quot;</span><span class="token punctuation">,</span>\n  \t\t\t  referencedColumnName <span class="token operator">=</span> <span class="token string">&quot;B方表中与之对应的列的name（通常就是B方的主键列）&quot;</span>\n  \t\t  <span class="token punctuation">)</span>\n  \t  <span class="token punctuation">}</span>\n    <span class="token punctuation">)</span>\n    <span class="token keyword">private</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Product</span><span class="token punctuation">&gt;</span></span> productSet<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token class-name">B</span>方 <span class="token operator">:</span> <span class="token class-name">Product</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n\n    <span class="token annotation punctuation">@ManyToMany</span><span class="token punctuation">(</span>mappedBy<span class="token operator">=</span><span class="token string">&quot;对方用上了@ManyToMany和@JoinTable写了一大坨配置的那个属性的name&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">private</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Order</span><span class="token punctuation">&gt;</span></span> orderSet<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div></li></ul><h3 id="一对一关系映射-配置" tabindex="-1"><a class="header-anchor" href="#一对一关系映射-配置" aria-hidden="true">#</a> 一对一关系映射/配置</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Product</span> <span class="token punctuation">{</span> <span class="token comment">// 主表</span>\n  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n\n  <span class="token annotation punctuation">@OneToOne</span><span class="token punctuation">(</span>mappedBy<span class="token operator">=</span><span class="token string">&quot;product&quot;</span><span class="token punctuation">)</span>\n  <span class="token keyword">private</span> <span class="token class-name">Productnote</span> productnote<span class="token punctuation">;</span>\n  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Productnote</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n  <span class="token annotation punctuation">@OneToOne</span><span class="token punctuation">(</span>optional <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>\n  <span class="token annotation punctuation">@JoinColumn</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;prod_id&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 外键列</span>\n  <span class="token keyword">private</span> <span class="token class-name">Product</span> product<span class="token punctuation">;</span>\n  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>上面用到的 <em><code>optional</code></em> 并非必须，这里只是故意显示其作用。optional 的默认值为 true，在 <strong><code>@ManyToOne</code></strong> 和 <strong><code>@ManyToMany</code></strong> 中也可使用。</p><p>当 optional 的属性值为 true 时，Hibernate/JPA 执行的是内连（inner join）查询，因此 product 属性值必定null null 。为 false 时，Hibernate/JPA 执行的是左外连接（left join）查询，因此 product 属性的值有可能为 null （是否真为 null，取决于数据库的实际情况）。</p><ul><li><p>通用形式</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>主表 <span class="token operator">:</span> <span class="token class-name">Product</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n    <span class="token annotation punctuation">@OneToOne</span><span class="token punctuation">(</span>mappedBy<span class="token operator">=</span><span class="token string">&quot;从表方用上了 @OneToOne 和 @JoinColumn 的那个属性的name&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">private</span> <span class="token class-name">ProductNode</span> node<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n从表 <span class="token operator">:</span> <span class="token class-name">ProductNote</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n    <span class="token annotation punctuation">@OneToOne</span>\n    <span class="token annotation punctuation">@JoinColumn</span><span class="token punctuation">(</span>\n  \t  name<span class="token operator">=</span><span class="token string">&quot;外键列name（这一列肯定是在从表中的）&quot;</span><span class="token punctuation">,</span>\n  \t  referencedColumnName<span class="token operator">=</span><span class="token string">&quot;与外键列对应的列name（通常是主表的主键列）&quot;</span>\n    <span class="token punctuation">)</span>\n    <span class="token keyword">private</span> <span class="token class-name">Product</span> product<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div></li></ul><h2 id="分页、排序、限制查询" tabindex="-1"><a class="header-anchor" href="#分页、排序、限制查询" aria-hidden="true">#</a> 分页、排序、限制查询</h2><p>Spring Data JPA 已经帮我们内置了分页功能，在查询的方法中，需要传入参数 Pageable，当查询中有多个参数的时候 Pageable 建议 <em><strong>作为最后一个参数传入</strong></em>。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// Pageable pageable = PageRequest.of(0, 3);</span>\n<span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">findByNickNameAndEmail</span><span class="token punctuation">(</span><span class="token class-name">String</span> nickName<span class="token punctuation">,</span> <span class="token class-name">String</span> email<span class="token punctuation">,</span> <span class="token class-name">Pageable</span> pageable<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>具有分页功能的方法会返回一个 <strong><code>Page&lt;T&gt;</code></strong> 对象，其中封装了与分页有关的相关信息，及其所获取的数据。</p><p>Pageable 是 Spring 封装的分页实现类，使用的时候需要传入页数、每页条数和排序规则，Page 是 Spring 封装的分页对象，封装了总页数、分页数据等。返回对象除使用 Page 外，还可以使用 Slice 作为返回值。</p><p>Page 和 Slice 的区别如下:</p><ul><li><p>Page 接口继承自 Slice 接口，而 Slice 继承自 Iterable 接口。</p></li><li><p>Page 接口扩展了 Slice 接口，添加了获取总页数和元素总数量的方法，因此，返回 Page 接口时，必须执行两条 SQL，一条复杂查询分页数据，另一条负责统计数据数量。</p></li><li><p>返回 Slice 结果时，查询的 SQL 只会有查询分页数据这一条，不统计数据数量。</p></li><li><p>用途不一样：Slice 不需要知道总页数、总数据量，只需要知道是否有下一页、上一页，是否是首页、尾页等，比如前端滑动加载一页可用；而 Page 知道总页数、总数据量，可以用于展示具体的页数信息，比如后台分页查询。</p></li></ul><p>实例：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testPageQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">int</span> page<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>\n    <span class="token class-name">Sort</span> sort <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sort</span><span class="token punctuation">(</span><span class="token class-name">Sort<span class="token punctuation">.</span>Direction</span><span class="token punctuation">.</span>DESC<span class="token punctuation">,</span> <span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 排序</span>\n    <span class="token class-name">Pageable</span> pageable <span class="token operator">=</span> <span class="token class-name">PageRequest</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> size<span class="token punctuation">,</span> sort<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    userRepository<span class="token punctuation">.</span><span class="token function">findALL</span><span class="token punctuation">(</span>pageable<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    userRepository<span class="token punctuation">.</span><span class="token function">findByNickName</span><span class="token punctuation">(</span><span class="token string">&quot;aa&quot;</span><span class="token punctuation">,</span> pageable<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><ul><li><p>Sort，控制分页数据的排序，可以选择升序和降序。</p></li><li><p>PageRequest，控制分页的辅助类，可以设置页码、每页的数据条数、排序等。</p></li></ul><h3 id="限制查询-docsify-ignore" tabindex="-1"><a class="header-anchor" href="#限制查询-docsify-ignore" aria-hidden="true">#</a> 限制查询 {docsify-ignore}</h3><p>有时候我们只需要查询前 N 个元素，或者只取前一个实体。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// order by salary</span>\n<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> <span class="token function">findFirstByOrderBySalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n\n<span class="token comment">// order by salary desc limit 2</span>\n<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> <span class="token function">findFirst2ByOrderBySalaryDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// where job = ? order by salary desc limit 2 </span>\n<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> <span class="token function">findFirst2ByJobEqualsOrderBySalaryDesc</span><span class="token punctuation">(</span><span class="token class-name">String</span> job<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="更复杂的条件查询" tabindex="-1"><a class="header-anchor" href="#更复杂的条件查询" aria-hidden="true">#</a> 更复杂的条件查询</h2><p>我们可以通过 <strong><code>AND</code></strong> 或者 <strong><code>OR</code></strong> 等连接词来不断拼接属性来构建多条件查询，但如果参数大于 6 个时，方法名就会变得非常的长，并且还不能解决动态多条件查询的场景。到这里就需要给大家介绍另外一个利器 <strong><code>JpaSpecificationExecutor</code></strong> 了。</p><p><code>JpaSpecificationExecutor</code> 是 JPA 2.0 提供的 <strong><code>Criteria API</code></strong> 的使用封装，可以用于动态生成 Query 来满足我们业务中的各种复杂场景。我们只需要为我们的自定义接口多继承一个父接口：<code>JpaSpecificationExecutor</code> 。</p><ul><li><p>我们的自定义的接口多继承了 <code>JpaSpecificationExecutor</code> 后，我们的接口中自然就【多】出来一些入参为 <strong><code>Specification</code></strong> 类型的方法。</p></li><li><p><code>Specification</code> 是一个接口，其中的 <strong><code>toPredicate</code></strong> 方法的返回值 <strong><code>Predicate</code></strong> 对象就代表着查询条件。</p></li><li><p>简单来说，我们要去实现 <code>Specification</code> 接口，并通过实现它的 <code>toPredicate</code> 方法返回一个 <code>Predicate</code> 对象。<code>JpaSpecificationExecutor</code> 需要这个 <code>Predicate</code> 对象来执行查询操作。</p></li></ul><p>在使用 JpaSpecificationExecutor 构建复杂查询场景之前，我们需要了解几个概念：</p><table><thead><tr><th style="text-align:left;">概念</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><code>Root&lt;T&gt; root</code></td><td style="text-align:left;">代表了可以查询和操作的实体对象的根，可以通过 <code>get(&quot;属性名&quot;)</code> 来获取对应的值。</td></tr><tr><td style="text-align:left;"><code>CriteriaQuery&lt;?&gt; query</code></td><td style="text-align:left;">代表一个 <code>specific</code> 的顶层查询对象，它包含着查询的各个部分，比如 <code>select </code>、<code>from</code>、<code>where</code>、<code>group by</code>、<code>order by</code> 等。</td></tr><tr><td style="text-align:left;"><code>CriteriaBuilder cb</code></td><td style="text-align:left;">来构建 <code>CritiaQuery</code> 的构建器器对象，其实就相当于条件或者是条件组合，并以 <code>Predicate</code> 的形式返回。</td></tr></tbody></table><h3 id="使用案例" tabindex="-1"><a class="header-anchor" href="#使用案例" aria-hidden="true">#</a> 使用案例</h3><ul><li><p>为 <code>EmployeeRepository</code> 【多】添加接口：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Repository</span>\n<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">EmployeeRepository</span> <span class="token keyword">extends</span>\n      <span class="token class-name">JpaRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span>\n      <span class="token class-name">JpaSpecificationExecutor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>\n          <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></li><li><p>在 Service（或 Junit）中使用 JpaSpecificationExecutor 的具体使用。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// 1. Specification 的 toPredicate() 方法返回的 Predicate 对象负责描述【要找的人的标准】。</span>\n<span class="token class-name">Specification</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> specification <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Specification</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token annotation punctuation">@Override</span>\n  <span class="token keyword">public</span> <span class="token class-name">Predicate</span> <span class="token function">toPredicate</span><span class="token punctuation">(</span><span class="token class-name">Root</span> root<span class="token punctuation">,</span> <span class="token class-name">CriteriaQuery</span> query<span class="token punctuation">,</span> <span class="token class-name">CriteriaBuilder</span> criteriaBuilder<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Predicate</span> predicate1 <span class="token operator">=</span> criteriaBuilder<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;job&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;SALESMAN&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Predicate</span> predicate2 <span class="token operator">=</span> criteriaBuilder<span class="token punctuation">.</span><span class="token function">greaterThan</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;salary&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Predicate</span> predicate3 <span class="token operator">=</span> criteriaBuilder<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;job&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;MANAGER&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Predicate</span> predicate4 <span class="token operator">=</span> criteriaBuilder<span class="token punctuation">.</span><span class="token function">lessThan</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;salary&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">25000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Predicate</span> predicate5 <span class="token operator">=</span> criteriaBuilder<span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;A%&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">/*\n     * where (job = &#39;SALESMAN&#39; and salary &gt; 1000) \n     *   or (job = &#39;MANAGER&#39; and sal &lt; 2500) \n     *   or name like &#39;A%&#39;\n     */</span>\n    <span class="token keyword">return</span> criteriaBuilder<span class="token punctuation">.</span><span class="token function">or</span><span class="token punctuation">(</span>\n      criteriaBuilder<span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span>predicate1<span class="token punctuation">,</span> predicate2<span class="token punctuation">)</span><span class="token punctuation">,</span>\n      criteriaBuilder<span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span>predicate3<span class="token punctuation">,</span> predicate4<span class="token punctuation">)</span><span class="token punctuation">,</span>\n      predicate5\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 2. findAll() 负责干【找人】这个活。</span>\n<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> repository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span>specification<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nlist<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div></li></ul><p>JpaSpecificationExecutor 接口中的方法也支持分页和排序等功能。</p><h2 id="jpa-高级查询-qbc-自学、了解" tabindex="-1"><a class="header-anchor" href="#jpa-高级查询-qbc-自学、了解" aria-hidden="true">#</a> JPA 高级查询：QBC（自学、了解）</h2><h3 id="query" tabindex="-1"><a class="header-anchor" href="#query" aria-hidden="true">#</a> @Query</h3><p>使用 Spring Data 大部分的 SQL 都可以根据方法名定义的方式来实现，但是由于某些原因必须使用自定义的 SQL 来查询，Spring Data 也可以完美支持。</p><p>在 SQL 的查询方法上面使用 <em><strong><code>@Query</code></strong></em> 注解，在注解内写 Hql 来查询内容。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span><span class="token string">&quot;select e from Employee e where e.job = ?1&quot;</span><span class="token punctuation">)</span>\n<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> <span class="token function">xxx</span><span class="token punctuation">(</span><span class="token class-name">String</span> job<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span><span class="token string">&quot;select e from Employee e where e.job = :hello&quot;</span><span class="token punctuation">)</span>\n<span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> <span class="token function">yyy</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> job<span class="token punctuation">,</span> <span class="token class-name">Pageable</span> pageable<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>当然如果感觉使用原生 SQL 更习惯，它也是支持的，需要再添加一个参数 <em><code>nativeQuery = true</code></em> 。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;select * from employee where job = ?1&quot;</span><span class="token punctuation">,</span> nativeQuery <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>\n<span class="token class-name">Page</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> <span class="token function">zzz</span><span class="token punctuation">(</span><span class="token class-name">String</span> job<span class="token punctuation">,</span> <span class="token class-name">Pageable</span> pageable<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="qbc-多表查询" tabindex="-1"><a class="header-anchor" href="#qbc-多表查询" aria-hidden="true">#</a> QBC 多表查询</h3><p>多表查询在 Spring Data JPA 中有两种实现方式：</p><ol><li>利用 Hibernate 的级联查询来实现；</li><li>是创建一个结果集的接口来接收连表查询后的结果。</li></ol><p>这里主要介绍第二种方式。</p><p>定义一个结果集的<span class="strong">接口</span>，接口的内容来自于员工表和部门表。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">EmployeeInfo</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Integer</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">String</span> <span class="token function">getJob</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Integer</span> <span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Integer</span> <span class="token function">getDepartmentId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">String</span> <span class="token function">getDepartmentName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">String</span> <span class="token function">getDepartmentLocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>在运行中 Spring 会给接口（EmployeeInfo）自动生产一个代理类来接收返回的结果，代码中使用 <code>getXXX()</code> 的形式来获取。</p><p>在 <strong><code>EmployeeRepository</code></strong> 中添加查询的方法，返回类型设置为 UserInfo：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Query</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;select e.id as id,&quot;</span> <span class="token operator">+</span>\n        <span class="token string">&quot; e.name as name,&quot;</span> <span class="token operator">+</span>\n        <span class="token string">&quot; e.job as job,&quot;</span> <span class="token operator">+</span>\n        <span class="token string">&quot; e.salary as salary,&quot;</span> <span class="token operator">+</span>\n        <span class="token string">&quot; e.departmentId as departmentId,&quot;</span> <span class="token operator">+</span>\n        <span class="token string">&quot; d.name as departmentName,&quot;</span> <span class="token operator">+</span>\n        <span class="token string">&quot; d.location as departmentLocation&quot;</span> <span class="token operator">+</span>\n        <span class="token string">&quot; from Employee e, Department d&quot;</span> <span class="token operator">+</span>\n        <span class="token string">&quot; where e.departmentId = d.id and e.job = ?1&quot;</span><span class="token punctuation">)</span>\n<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">EmployeeInfo</span><span class="token punctuation">&gt;</span></span> <span class="token function">findEmployeeInfo</span><span class="token punctuation">(</span><span class="token class-name">String</span> job<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>特别注意这里的 SQL 是 HQL，需要写类的名和属性，这块很容易出错。</p><ul><li><p>测试验证：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">EmployeeInfo</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> repository<span class="token punctuation">.</span><span class="token function">findEmployeeInfo</span><span class="token punctuation">(</span><span class="token string">&quot;SALESMAN&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nlist<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>info <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;, &quot;</span> <span class="token operator">+</span> info<span class="token punctuation">.</span><span class="token function">getDepartmentName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li></ul><h2 id="open-session-in-view" tabindex="-1"><a class="header-anchor" href="#open-session-in-view" aria-hidden="true">#</a> open session in view</h2><p><span class="strong">因为延迟加载</span>，你有可能在执行代码时，发现报如下错误。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>hibernate<span class="token punctuation">.</span></span>LazyInitializationException</span><span class="token operator">:</span> could not initialize proxy <span class="token punctuation">[</span><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>softeem<span class="token punctuation">.</span>bean<span class="token punctuation">.</span>po<span class="token punctuation">.</span></span>Employee</span>#<span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> no <span class="token class-name">Session</span>\n\tat <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>hibernate<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span></span>AbstractLazyInitializer</span><span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token class-name">AbstractLazyInitializer</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">169</span><span class="token punctuation">)</span> <span class="token operator">~</span><span class="token punctuation">[</span>hibernate<span class="token operator">-</span>core<span class="token operator">-</span><span class="token number">5.3</span><span class="token number">.15</span><span class="token punctuation">.</span>Final<span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token number">5.3</span><span class="token number">.15</span><span class="token punctuation">.</span>Final<span class="token punctuation">]</span>\n\tat <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>hibernate<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span></span>AbstractLazyInitializer</span><span class="token punctuation">.</span><span class="token function">getImplementation</span><span class="token punctuation">(</span><span class="token class-name">AbstractLazyInitializer</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">309</span><span class="token punctuation">)</span> <span class="token operator">~</span><span class="token punctuation">[</span>hibernate<span class="token operator">-</span>core<span class="token operator">-</span><span class="token number">5.3</span><span class="token number">.15</span><span class="token punctuation">.</span>Final<span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token number">5.3</span><span class="token number">.15</span><span class="token punctuation">.</span>Final<span class="token punctuation">]</span>\n\tat <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>hibernate<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>bytebuddy<span class="token punctuation">.</span></span>ByteBuddyInterceptor</span><span class="token punctuation">.</span><span class="token function">intercept</span><span class="token punctuation">(</span><span class="token class-name">ByteBuddyInterceptor</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">45</span><span class="token punctuation">)</span> <span class="token operator">~</span><span class="token punctuation">[</span>hibernate<span class="token operator">-</span>core<span class="token operator">-</span><span class="token number">5.3</span><span class="token number">.15</span><span class="token punctuation">.</span>Final<span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token number">5.3</span><span class="token number">.15</span><span class="token punctuation">.</span>Final<span class="token punctuation">]</span>\n\tat <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>hibernate<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span></span>ProxyConfiguration</span>$<span class="token class-name">InterceptorDispatcher</span><span class="token punctuation">.</span><span class="token function">intercept</span><span class="token punctuation">(</span><span class="token class-name">ProxyConfiguration</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">95</span><span class="token punctuation">)</span> <span class="token operator">~</span><span class="token punctuation">[</span>hibernate<span class="token operator">-</span>core<span class="token operator">-</span><span class="token number">5.3</span><span class="token number">.15</span><span class="token punctuation">.</span>Final<span class="token punctuation">.</span>jar<span class="token operator">:</span><span class="token number">5.3</span><span class="token number">.15</span><span class="token punctuation">.</span>Final<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>例如，去查询一个员工信息，在 Service 层向 Web 层返回 Employee 对象后，去打印员工的部门的名字。</p><blockquote><p>不过，在 Spring Boot 中看到这个问题并不是很容易，因为，Spring Boot 的默认配置启用了 <em><code>opne-session-in-view</code></em> 功能，解决了这个问题。因此，你需要将这个功能关掉，才能看到这个错。</p><p>关闭的方法是：在配置文件中添加配置：spring.jpa.open-in-view=false 。很显然，这个配置项的默认值是 true 。</p></blockquote><p>出现这个问题的原因在于，当 Service 层的方法执行结束返回 Employee 对象时，与数据库之间的连接已经断开。因为延迟加载的原因，当 Web 层因为 <em><code>.getDepartment()</code></em> 而导致需要查询 Department 时，自然就没有连接/会话来支持这个操作的执行。</p><blockquote><p>从 Hibernate 的角度解释是，Employee 对象已经从持久态变为游离态，此时，无法再通过 Employee 对象去查询相关的 Department 对象了。</p></blockquote><p><em><code>open-session-in-view</code></em> 功能本质上就是延迟 session 的关闭，将原本在 Service 层结束时就该关闭的 Session，推迟到 Web 层结束时再关闭。因此，在 Web 层的方法中，你触发延迟加载时，仍有 session 可用，以支持背后的自动的查询行为。</p><p>启用 <em><code>open-session-in-view</code></em> 功能需要进行两步配置。不过这里 Spring Boot 都【帮】我们干完了。</p><p>启动类<small>（或某个配置类）</small>中加入</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>\n<span class="token keyword">public</span> <span class="token class-name">OpenEntityManagerInViewFilter</span> <span class="token function">openEntityManagerInViewFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n   <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">OpenEntityManagerInViewFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>配置文件中加入 <em><code>spring.jpa.open-in-view=true</code></em> 。</p><h2 id="entity-对象转-json-时的一个异常" tabindex="-1"><a class="header-anchor" href="#entity-对象转-json-时的一个异常" aria-hidden="true">#</a> @Entity 对象转 JSON 时的一个异常</h2><p>在 RESTful 风格的项目中，当 Web 层将 Service 层返回的 Entity 对象转换成 JSON 格式字符串时，有可能会报如下错误:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span>exc<span class="token punctuation">.</span></span>InvalidDefinitionException</span><span class="token operator">:</span> <span class="token class-name">No</span> serializer found <span class="token keyword">for</span> <span class="token keyword">class</span> <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>hibernate<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span>bytebuddy<span class="token punctuation">.</span></span>ByteBuddyInterceptor</span> and no properties discovered <span class="token keyword">to</span> <span class="token namespace">create</span> <span class="token class-name">BeanSerializer</span> <span class="token punctuation">(</span><span class="token keyword">to</span> <span class="token namespace">avoid</span> exception<span class="token punctuation">,</span> disable <span class="token class-name">SerializationFeature</span><span class="token punctuation">.</span>FAIL_ON_EMPTY_BEANS<span class="token punctuation">)</span> <span class="token punctuation">(</span>through reference chain<span class="token operator">:</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>childdream<span class="token punctuation">.</span>price<span class="token punctuation">.</span>entity<span class="token punctuation">.</span></span>Price</span>$<span class="token class-name">HibernateProxy</span>$<span class="token class-name">FGboGgyG</span><span class="token punctuation">[</span><span class="token string">&quot;hibernateLazyInitializer&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>直接分析原因的话，是因为 jackson 库在将 Entity 序列化为 JSON 格式字符串时，发现其中有一个名为 <code>hibernateLazyInitializer</code> 为 null 。这种情况许下下，jackson 不知道该如何处理这个属性，因此它就抛出异常抱错。</p><p>但是，问题是我们的 Entity 中好似并没有 <code>hibernateLazyInitializer</code> 属性!</p><p>这里的关键还是也延迟加载有关。实际上 Hibernate 并未真的去直接使用我们的 Entity，而是利用类似于 AOP 代理机制，去创建并使用了 Entity 的代理对象。从 Service 层返回到 Web 层的并不是真正的 Entity 对象，而是 Entity 的代理对象。</p><p>Entity 的代理对象中有这个 <code>hibernateLazyInitializer</code> 属性！</p><p>解决掉这个异常有两种办法：</p><ol><li><p>在 Entity 的头上标注 <code>@JsonIgnoreProperties(value = {&quot;hibernateLazyInitializer&quot;}) </code> 。</p><p>实际上就是在告诉 jackson，去序列化 Entity 时忽略调其中的 <code>hibernateLazyInitializer</code> 属性。</p></li><li><p>在 Spring Boot 配置文件中配置 <code>spring.jackson.serialization.FAIL_ON_EMPTY_BEANS=false</code> 。</p><p>这是在告诉 jackson，去序列化对象时，如果遇到为 null 的属性不要抛出异常，而是继续序列化。</p><p>这种情况下，Web 层返回给前端的 JSON 数据中会多一项：<code>hibernateLazyInitializer=&quot;&quot;</code> 。</p></li></ol><p>『The End』</p>',102),e={render:function(n,s){return p}}}}]);