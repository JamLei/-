"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[546],{81937:(n,a,s)=>{s.r(a),s.d(a,{data:()=>e});const e={key:"v-a78aee82",path:"/java8/FutureTask.html",title:"FutureTask",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"Callable 使用方式一：FutureTask",slug:"callable-使用方式一-futuretask",children:[]},{level:2,title:"Callable 使用方式二：线程池和Future",slug:"callable-使用方式二-线程池和future",children:[]}],filePathRelative:"java8/FutureTask.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},10247:(n,a,s)=>{s.r(a),s.d(a,{default:()=>p});const e=(0,s(66252).uE)('<h1 id="futuretask" tabindex="-1"><a class="header-anchor" href="#futuretask" aria-hidden="true">#</a> FutureTask</h1><p>使用 Thread 和 Runnable 实现线程来有一个小问题：不方便获得线程的执行结果。</p><p>为此，J.U.C 中提供了 Callable 接口和 Future 接口解决这个问题。</p><p>Callable 接口和 Runnable 接口很像，其中的 <code>call()</code> 方法是需要我们自己实现的线程执行方法。</p><p>不同的是 Runnable 接口的 <em><code>run()</code></em> 方法没有返回值，而 Callable 接口的 <em><code>call()</code></em> 方法有返回值，而这个返回值需要通过一个 Futrue 对象来获取。</p><p>Callable 对象不像 Runnable 对象那样可以作为 <em><code>new Thread()</code></em> 的参数来创建一个线程来运行它的 <em><code>call()</code></em> 方法。它需要【另一种】方式来使用。</p><h2 id="callable-使用方式一-futuretask" tabindex="-1"><a class="header-anchor" href="#callable-使用方式一-futuretask" aria-hidden="true">#</a> Callable 使用方式一：FutureTask</h2><p>FutureTask 对象类似于 Thread 对象，它是 Callable 对象的运行的执行者。创建 FutureTask对象，并传入 Callable 对象，再调用它的 <em><code>run()</code></em> 方法，就可以让一个新的线程去执行 Callable 对象的 <em><code>call</code></em> 方法。</p><p>至于如何获得 Callable 方法的返回值，这就需要调用 FutureTask 对象的 <em><code>get()</code></em> 方法。注意，这个方法有可能导致当前线程的阻塞，这取决于运行 Callable 的 <em><code>run()</code></em> 方法的线程当前是否执行结束了。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> task <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>\ntask<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>task<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="callable-使用方式二-线程池和future" tabindex="-1"><a class="header-anchor" href="#callable-使用方式二-线程池和future" aria-hidden="true">#</a> Callable 使用方式二：线程池和Future</h2><p>第二种用法和第一种用法本质上并没有太大区别，只不过是将 Callable 对象交过线程池，由线程池中的线程去执行而已。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">ExecutorService</span> service <span class="token operator">=</span>  <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> callable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;HELLO WORLD&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token string">&quot;hello world&quot;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span>  future <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>callable<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>future<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div>',13),p={render:function(n,a){return e}}}}]);