"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[2636],{43871:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-7c3fbc28",path:"/spring-mvc/002-%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B.html",title:"SpringMVC 的工作流程",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"总图",slug:"总图",children:[]},{level:2,title:"DispatcherServlet",slug:"dispatcherservlet",children:[]},{level:2,title:"必需的配置",slug:"必需的配置",children:[]},{level:2,title:"加载配置文件的两个时机",slug:"加载配置文件的两个时机",children:[]},{level:2,title:"定义控制器",slug:"定义控制器",children:[]},{level:2,title:"创建 JSP 视图",slug:"创建-jsp-视图",children:[]}],filePathRelative:"spring-mvc/002-工作流程.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},60452:(n,s,a)=>{a.r(s),a.d(s,{default:()=>p});const t=(0,a(66252).uE)('<h1 id="springmvc-的工作流程" tabindex="-1"><a class="header-anchor" href="#springmvc-的工作流程" aria-hidden="true">#</a> SpringMVC 的工作流程</h1><h2 id="总图" tabindex="-1"><a class="header-anchor" href="#总图" aria-hidden="true">#</a> 总图</h2><p><img src="https://hemiao3000.gitee.io/java-note-img/images/spring-mvc/img/SpringMVC工作流程.png" alt="SpringMVC工作流程"></p><p>如上图，Spring MVC 程序的完整执行流程如下：</p><ol><li><p>用户通过浏览器发送请求，请求会被 Spring MVC 的『前端控制器』<strong>DispatcherServler</strong> 接收。</p></li><li><p><strong>DispatcherServlet</strong> 拦截到请求后，会调用『处理器映射器』<strong>HandlerMapping</strong> 。</p></li><li><p>『处理器映射器』根据请求 URL 找到具体的『处理器』<strong>Handler</strong> ，生成『处理器』对象<small>（如果有，还会生成拦截器对象）</small>并返回给 <strong>DispatcherServlet</strong> 。</p></li><li><p><strong>DispatcherServlet</strong> 根据返回信息<small>（<em>Handler</em>）</small>选择合适的『处理器适配器』<strong>HandlerAdapter</strong> 。</p></li><li><p><strong>HandlerAdapter</strong> 会调用并指定 <strong>Handler</strong> 。<small>此处和上述所说的处理器 <strong>Handler</strong> ，就是我们所编写的 <strong>Controller</strong> 类。</small></p></li><li><p><strong>Controller</strong> 执行完成后，会返回一个 <strong>ModelAndView</strong> 对象，该对象中会包含『视图名』和『模型对象』。</p></li><li><p><strong>HandlerAdapter</strong> 将 <strong>ModelAndView</strong> 返回给 <strong>DispatcherServlet</strong> 。</p></li><li><p><strong>DispatcherServlet</strong> 会根据返回信息<small>（<em>ModelAndView</em>）</small>选择一个合适的『视图解析器』<strong>ViewResolver</strong> 。</p></li><li><p>视图解析器 <strong>ViewResolver</strong> 解析视图后，会向 <strong>DispatcherServlet</strong> 返回具体的 <strong>View</strong> 对象。</p></li><li><p><strong>DispatcherServlet</strong> 对 <strong>View</strong> 进行渲染。即，将『模型数据』填充至『视图』中。</p></li><li><p><strong>DispatcherServlet</strong> 将渲染后的结果返回、发送给客户端浏览器。</p></li></ol><p>在上述执行过程中，<em>DispatcherServlet</em>、<em>HandlerMapping</em>、<em>HandlerAdapter</em> 和 <em>ViewResolver</em> 对象的工作都是在框架内部执行的，开发人员并不需要关心这些对象内部实现过程。</p><p>和程序员有关的内容只有 <strong>Handler</strong><small>（即，代码中的 <strong>Controller</strong>）</small>，和 <strong>ModelAndView</strong> 对象。</p><h2 id="dispatcherservlet" tabindex="-1"><a class="header-anchor" href="#dispatcherservlet" aria-hidden="true">#</a> DispatcherServlet</h2><p>Spring Web 的『<strong>模型</strong> - <strong>视图</strong> - <strong>控制器</strong>』<small>（MVC）</small>框架是围绕 <strong>DispatcherServlet</strong> 设计的，它处理所有的 HTTP 请求和响应。</p><p>以下是对应于到 <strong>DispatcherServlet</strong> 的传入 HTTP 请求的事件顺序：</p><ul><li><p>在接收到 HTTP 请求后，<strong>DispatcherServlet</strong> 会查询 <strong>HandlerMapping</strong>，并通过 <strong>Adapter</strong> 调用相应的 <strong>Controller</strong> 。</p></li><li><p><strong>Controller</strong> 接受请求并根据使用的 <strong>GET</strong> 或 <strong>POST</strong> 方法调用相应的服务方法。 服务方法将基于定义的业务逻辑设置模型数据，并将视图名称返回给 <strong>DispatcherServlet</strong> 。</p></li><li><p><strong>DispatcherServlet</strong> 将从 <strong>ViewResolver</strong> 获取请求的定义视图。当视图完成，<strong>DispatcherServlet</strong> 将模型数据传递到最终的视图，并在浏览器上呈现。</p></li></ul><h2 id="必需的配置" tabindex="-1"><a class="header-anchor" href="#必需的配置" aria-hidden="true">#</a> 必需的配置</h2><p>需要通过使用 <em>web.xml</em> 文件中的 URL 映射来映射希望 <em>DispatcherServlet</em> 处理的请求。</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">&quot;</span></span>\n    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">&quot;</span></span>\n    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://xmlns.jcp.org/xml/ns/javaee \n        http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd<span class="token punctuation">&quot;</span></span>\n    <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>3.1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n\n    ...\n\n    <span class="token comment">&lt;!-- 配置 SpringMVC 前端控制器 --&gt;</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>HelloWeb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">&gt;</span></span>\n            org.springframework.web.servlet.DispatcherServlet\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">&gt;</span></span>\n        ...\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>HelloWeb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>*.do<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- 后缀拦截 --&gt;</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h2 id="加载配置文件的两个时机" tabindex="-1"><a class="header-anchor" href="#加载配置文件的两个时机" aria-hidden="true">#</a> 加载配置文件的两个时机</h2><p>SpringMVC 有两次加载 Spring 配置文件的时机：</p><p>首先在 SpringMVC 项目启动时，会依据 <em>web.xml</em> 配置文件中所配置的监听器：<strong>ContextLoaderListener</strong> 去加载对应位置下的 Spring 配置文件。</p><ul><li><p>Spring 配置文件版：web.xml</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>\n        classpath:spring-dao.xml,\n        classpath:spring-service.xml\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener-class</span><span class="token punctuation">&gt;</span></span>\n        org.springframework.web.context.ContextLoaderListener\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener-class</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div></li><li><p>Spring 代码配置版：web.xml</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>contextClass<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- 相较于 XML 配置，Java 代码配置『多』一个这个 --&gt;</span>\n        org.springframework.web.context.support.AnnotationConfigWebApplicationContext\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>\n        com.example.config.SpringServiceConfig,\n        com.example.config.SpringDaoConfig\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener-class</span><span class="token punctuation">&gt;</span></span>\n        org.springframework.web.context.ContextLoaderListener\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener-class</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div></li></ul><p>无论你有没有利用第一次加载时机<small>（配置 ContextLoadListener）</small>，那么 Spring MVC 都会继续进入第二个加载配置文件时机：根据 <strong>DispatcherServlet</strong> 的初始化配置<small>（<strong>&lt;init-param&gt;</strong>）</small>加载对应位置的 Spring 配置。</p><ul><li><p>Spring 配置文件版：web.xml</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>sampleServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">&gt;</span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>classpath:spring-web.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>\n    ...\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div></li><li><p>Spring 代码配置版：web.xml</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>sampleServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">&gt;</span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!-- 相较于 XML 配置，Java 代码配置『多』一个这个 --&gt;</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>contextClass<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>org.springframework.web.context.support.AnnotationConfigWebApplicationContext<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>com.example.config.SpringWebConfig<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>\n    ...\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div></li></ul><blockquote><p>如果是 XML 配置文件，这里的 Spring 配置文件的路径如果是以 <strong>classpath:</strong> 开始，则表示配置文件是在 classpath 路径下。否则，就是在项目的工程根目录<small>（ <strong>webapp</strong> ）</small>&gt;下。</p></blockquote><p>SpringMVC 首先加载的是 <strong>&lt;context-param&gt;</strong> 配置的内容，而并不会去初始化 servlet。只有进行了网站的跳转，经过了 <strong>DispatcherServlet</strong> 的导航的时候，才会初始化 Servlet，从而加载 <strong>&lt;init-param&gt;</strong> 中的内容。</p><p>一般而言，</p><ul><li><p><strong>&lt;context-param&gt;</strong> 配置的 Spring 配置文件，习惯性叫 <strong>applicationContext</strong> ，或 <strong>webApplicationContext</strong> ，表示全局性 Spring 配置。</p></li><li><p><strong>&lt;init-param&gt;</strong> 配置的 Spring 配置文件可以叫 <strong>SpringWebApplicationContext</strong> ，表示 spirng-webmvc<small>（web 层）</small>相关的 Spring 配置。</p></li></ul><p>现在来看看 <strong>SpringWebConfig.java</strong> 文件的必需配置：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>\n<span class="token annotation punctuation">@EnableWebMvc</span>\n<span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token string">&quot;com.example.inlet.controllers&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringWebConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>Spring MVC 配置类的关键，除了实现 <strong>WebMvcConfigurer</strong> 接口之外，还有就是需要标注 <strong>@EnableWebMvc</strong> 注解。</p><p>因为 <strong>@EnableWebMvc</strong> 注解的存在，Spring MVC 会自动创建、激活使用 19 个 Bean，这 19 个 Bean 在各个场景、环境中默默地支持着 Spring MVC 框架的的工作。</p><blockquote><p>当然，如果也可以不使用 <strong>@EnableWebMvc</strong> 注解，这样的话，你需要直接<small>（或间接地）</small>去声明这 19 个 Bean<small>（或其等价的替代品）</small>。否则，Spring MVC 就不会以你想当然地方式运行。</p></blockquote><p>另外，你也无须担心这默认的 19 个 Bean 是否符合你的需求，在合适的常见中，当你觉得其中的某个所提供的功能并非你所需要，你可以自定义 Bean 去覆盖、替代它<small>（们）</small>。</p><h2 id="定义控制器" tabindex="-1"><a class="header-anchor" href="#定义控制器" aria-hidden="true">#</a> 定义控制器</h2><p><strong>DispatcherServlet</strong> 将请求委派给控制器以执行特定于其的功能。 <strong>@Controller</strong> 注释指示特定类充当控制器的角色。<strong>@RequestMapping</strong> 注释用于将 URL 映射到整个类或特定处理程序方法。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Controller</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">{</span>\n\n  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">&quot;/hello&quot;</span><span class="token punctuation">,</span> method<span class="token operator">=</span><span class="token class-name">RequestMethod</span><span class="token punctuation">.</span>GET<span class="token punctuation">)</span>\n  <span class="token keyword">public</span> <span class="token class-name">ModelAndView</span> <span class="token function">printHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">ModelAndView</span> mav <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    mav<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Hello Spring MVC Framework!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    mav<span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">&quot;/WEB-INF/jsp/hello.jsp&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> mav<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p><strong>@Controller</strong> 注释将类定义为 <strong>Spring MVC</strong> 控制器。</p><p><strong>@RequestMapping</strong> 的第一个用法表示此控制器上的所有处理方法都与 <code>/hello</code> 路径相关。</p><p><strong>@RequestMapping(method = RequestMethod.GET)</strong> 用于声明 <strong>printHello</strong> 方法作为控制器的默认服务方法来处理 HTTP GET 请求。可以定义另一个方法来处理同一 URL 的任何 POST 请求。</p><p><strong>value</strong> 属性指示处理程序方法映射到的 URL，<strong>method</strong> 属性定义处理 HTTP GET 请求的服务方法。关于以上定义的控制器，需要注意以下几点：</p><ul><li><p>在服务方法中定义所需的业务逻辑。可以根据需要在此方法内调用其他方法。</p></li><li><p>基于定义的业务逻辑，将在此方法中创建一个模型。可以设置不同的模型属性，这些属性将被视图访问以呈现最终结果。此示例创建且有属性 <em>message</em> 的模型。</p></li><li><p>定义的服务方法可以返回一个 String，它包含要用于渲染模型的视图的名称。此示例将 <code>&quot;hello&quot;</code> 返回为逻辑视图名称。</p></li></ul><h2 id="创建-jsp-视图" tabindex="-1"><a class="header-anchor" href="#创建-jsp-视图" aria-hidden="true">#</a> 创建 JSP 视图</h2><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>prefix<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/WEB-INF/jsp/<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>suffix<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>.jsp<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Spring MVC 支持许多类型的视图用于不同的表示技术。<small>包括 JSP，HTML，PDF，Excel 工作表，XML，Velocity 模板，XSLT，JSON，Atom 和 RSS 源，JasperReports 等。</small>这里使用的是 JSP 模板，并在 <strong>/WEB-INF/hello/hello.jsp</strong> 中写一个简单的 hello 视图：</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Hello Spring MVC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>${message}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>这里 <strong><code>${message}</code></strong> 是在 Controller 中设置的属性。可以在视图中显示多个属性。</p>',43),p={render:function(n,s){return t}}}}]);