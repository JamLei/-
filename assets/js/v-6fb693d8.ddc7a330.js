"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[4603],{12871:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-6fb693d8",path:"/java/08-%E5%8F%8D%E5%B0%84.html",title:"反射",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"反射的概念",slug:"反射的概念",children:[]},{level:2,title:"获得类的 Class 信息",slug:"获得类的-class-信息",children:[{level:3,title:"获得 Class 对象",slug:"获得-class-对象",children:[]},{level:3,title:"名称信息",slug:"名称信息",children:[]}]},{level:2,title:"获得类的 Method 信息",slug:"获得类的-method-信息",children:[{level:3,title:"基本方法",slug:"基本方法",children:[]},{level:3,title:"创建对象和构造方法",slug:"创建对象和构造方法",children:[]}]},{level:2,title:"获得类的 Field 信息",slug:"获得类的-field-信息",children:[]}],filePathRelative:"java/08-反射.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},79702:(n,s,a)=>{a.r(s),a.d(s,{default:()=>t});const p=(0,a(66252).uE)('<h1 id="反射" tabindex="-1"><a class="header-anchor" href="#反射" aria-hidden="true">#</a> 反射</h1><h2 id="反射的概念" tabindex="-1"><a class="header-anchor" href="#反射的概念" aria-hidden="true">#</a> 反射的概念</h2><p>『<strong>反射</strong>』和注解、动态代理、类加载器等被称为 Java 的动态特性。利用这些特性，可以优雅地实现一些灵活通用的功能，它们经常用于各种框架、库和系统程序中。例如：</p><ul><li>jackson 库利用反射和注解实现了通用的序列化机制。</li><li>Spring MVC 框架在处理 Web 请求时，利用反射和注解，能方便地将用户的请求参数和内容转换为 Java 对象、将 Java 对象转变为响应内容。</li><li>面向切面编程<small>（AOP）</small>将编程中通用关注点<small>（如日志记录、安全检查等）</small>与业务的主体逻辑相分离，减少冗余代码，提高程序的可维护性。AOP 需要依赖包括反射在内的上述 Java 动态特性。</li><li>在单元测试中，JUnit 和 TestNG 库都使用到了反射。</li></ul><p>如果编写的架构足够灵活，在运行时之前都不知道要处理什么代码，那么通常都需要使用反射。</p><p>在一般操作数据的时候，我们都是知道并且依赖于数据类型的，比如：</p><ol><li>根据类型使用 new 创建对象；</li><li>根据类型定义变量，类型可能是基本类型、类、接口或数组。</li><li>将特定类型的对象传递给方法。</li><li>根据类型访问对象的属性，调用对象的方法。</li></ol><p>另外，编译器也是根据类型进行代码的检查编译的。</p><p>但是，反射不一样。</p><p>它是在运行时，而非编译时，动态获取类型的信息<small>（比如，接口信息、成员信息、方法信息、构造方法信息等）</small>，根据这些动态获取到的信息创建对象、访问/修改成员、调用方法等。</p><p>反射的入口是名为 <strong>Class</strong> 的类。注意，是首字母大写的 Class，而不是全小写的关键字 class 。</p><h2 id="获得类的-class-信息" tabindex="-1"><a class="header-anchor" href="#获得类的-class-信息" aria-hidden="true">#</a> 获得类的 Class 信息</h2><p><strong>Class</strong> 是反射的基石。</p><p>java.lang.Class 类的实例表示一种 Java 数据类型，而且包含所表示类型的元数据，它是在运行中 Java 进程里表示实时类型的方法。</p><p>每个已加载的类在内存中都有一个 Class 对象，每个对象都有指向它所属 Class 对象的引用。</p><h3 id="获得-class-对象" tabindex="-1"><a class="header-anchor" href="#获得-class-对象" aria-hidden="true">#</a> 获得 Class 对象</h3><p>所有类的根父类 Object 有一个方法，可以获得对象的 Class 对象：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">native</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Class 是一个泛型类，有一个类型参数，getClass 方法并不知道具体的类型，所以返回 Class&lt;?&gt; 。</p><p>获取 Class 对象不一定需要实例对象，如果在写程序时就知道类名，可以使用 &lt;类名&gt;.class 获取 Class 对象。比如：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Date</span><span class="token punctuation">&gt;</span></span> clazz <span class="token operator">=</span> <span class="token class-name">Date</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>接口也有 Class 对象，且这种方式对于接口也适用：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Comparable</span><span class="token punctuation">&gt;</span></span> clazz <span class="token operator">=</span> <span class="token class-name">Comparable</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>基本类型没有 getClass 方法，但也有对应的 Class 对象，类型参数未对应的包装类型：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> intClazz <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>\n<span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Double</span><span class="token punctuation">&gt;</span></span> doubleClazz <span class="token operator">=</span> <span class="token keyword">double</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>void 作为特殊的返回类型，也有对应的 Class：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">&gt;</span></span> voidClazz <span class="token operator">=</span> <span class="token keyword">void</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>对于数组，每种类型都有对应数组类型的 Class 对象，需要注意的是，不同类型的数组它们的 Class 对象并不相同：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> strArr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> oneDimArr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> towDimArr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token class-name">Class</span><span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> strArrClazz <span class="token operator">=</span> strArr<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">Class</span><span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> oneDimArrClazz <span class="token operator">=</span> oneDimArr<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">Class</span><span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> towDimArrClazz <span class="token operator">=</span> twoDimArr<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>Class 有一个 <strong>forName</strong> 静态方法，可以根据类名直接加载 .class 文件，获得 Class 对象：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> clazz <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">&quot;java.util.HashMap&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>注意，<strong>forName</strong> 可能抛出异常 ClassNotFoundException 。</p><p>有了 Class 对象后，我们就可以了解到关于类型的很多信息，并基于这些信息采取一些行动。</p><h3 id="名称信息" tabindex="-1"><a class="header-anchor" href="#名称信息" aria-hidden="true">#</a> 名称信息</h3><p>Class 有如下方法，可以获取与『<strong>名称</strong>』有关的信息：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token comment">// Java 内部使用的真正的名字</span>\n<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// 不带包信息</span>\n<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getCanonicalName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 相较于 getName 而言，它返回的名字对「人类」来说更友好。</span>\n<span class="token keyword">public</span> <span class="token class-name">Package</span> <span class="token function">getPackage</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment">// 返回包信息</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>它们的不同如下表：</p><table><thead><tr><th style="text-align:left;">Class 对象</th><th style="text-align:left;">getName</th><th style="text-align:left;">getSimpleName</th><th style="text-align:left;">getCanonicalName</th><th style="text-align:left;">getPackage</th></tr></thead><tbody><tr><td style="text-align:left;">int.class</td><td style="text-align:left;">int</td><td style="text-align:left;">int</td><td style="text-align:left;">int</td><td style="text-align:left;">null</td></tr><tr><td style="text-align:left;">int[].class</td><td style="text-align:left;">[I</td><td style="text-align:left;">int[]</td><td style="text-align:left;">int[]</td><td style="text-align:left;">null</td></tr><tr><td style="text-align:left;">int[][].class</td><td style="text-align:left;">[[I</td><td style="text-align:left;">int[][]</td><td style="text-align:left;">int[][]</td><td style="text-align:left;">null</td></tr><tr><td style="text-align:left;">String.class</td><td style="text-align:left;">java.lang.String</td><td style="text-align:left;">String</td><td style="text-align:left;">java.lang.String</td><td style="text-align:left;">java.lang</td></tr><tr><td style="text-align:left;">String[].class</td><td style="text-align:left;">[Ljava.lang.String;</td><td style="text-align:left;">String[]</td><td style="text-align:left;">java.lang.String[]</td><td style="text-align:left;">null</td></tr><tr><td style="text-align:left;">HashMap.class</td><td style="text-align:left;">java.util.HashMap</td><td style="text-align:left;">HashMap</td><td style="text-align:left;">java.util.HashMap</td><td style="text-align:left;">java.util</td></tr><tr><td style="text-align:left;">Map.Entry.class</td><td style="text-align:left;">java.util.Map$Entry</td><td style="text-align:left;">Entry</td><td style="text-align:left;">java.util.Map.Entry</td><td style="text-align:left;">java.util</td></tr></tbody></table><p>对于最根本、最核心的 getName 方法需要说明的是：</p><ul><li>对于数组类型，它在返回值中使用前缀 <code>[</code> 表示数组，有几个 <code>[</code> 表示是几维数组；</li><li>在描述数组中的元素的类型时，它在返回值中使用一个字符表示。例如，<code>I</code> 表示 int，<code>L</code> 表示类或接口，其它类型与字符的对应关系为：boolean（Z）、byte（B）、char（C）、double（D）、float（F）、long（J）、short（S）；</li><li>对于引用类型的数组，注意最后有一个分号 <code>;</code> 。</li></ul><h2 id="获得类的-method-信息" tabindex="-1"><a class="header-anchor" href="#获得类的-method-信息" aria-hidden="true">#</a> 获得类的 Method 信息</h2><p>类中定义的静态和实例方法都被称为『方法』，用类 java.lang.reflect.Member 表示。Class 有如下相关方法：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token doc-comment comment">/**\n * 返回所有的 public 方法，包括其父类的。\n * 如果没有，则返回空数组。\n */</span>\n<span class="token keyword">public</span> <span class="token class-name">Method</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token doc-comment comment">/**\n * 返回本类自己所声明的所有方法，包括非 public 的，因此不包括继承自父类的方法\n *\n */</span>\n<span class="token keyword">public</span> <span class="token class-name">Method</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token doc-comment comment">/**\n * 返回本类中指定名称和参数的 public 方法，包括继承自父类的\n * 如果没有，则抛出异常 NoSuchMethodException\n */</span>\n<span class="token keyword">public</span> <span class="token class-name">Method</span> <span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> parameterTypes<span class="token punctuation">)</span>\n\n<span class="token doc-comment comment">/**\n * 返回本类自己声明的指定名称和参数类型的方法，因此不包括继承自父类的\n * 如果没有，则抛出异常 NoSuchMethodException\n */</span>\n<span class="token keyword">public</span> <span class="token class-name">Method</span> <span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> parameterTypes<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h3 id="基本方法" tabindex="-1"><a class="header-anchor" href="#基本方法" aria-hidden="true">#</a> 基本方法</h3><p>通过 Method 可以获取方法的信息，也可以通过 Method 调用对象的方法，基本方法有：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// 获取方法的名称</span>\n<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token comment">// flag 设为 true 表示忽略 Java 的访问检查机制，以允许调用非 public 的方法。</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> flag<span class="token punctuation">)</span>\n\n<span class="token comment">// 在指定对象 obj 上调用 Method 代表的方法，传递参数列表为 args </span>\n<span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span>\n<span class="token class-name">IllegalAccessException</span><span class="token punctuation">,</span> <span class="token class-name">Illegal</span><span class="token operator">-</span><span class="token class-name">ArgumentException</span><span class="token punctuation">,</span> <span class="token class-name">InvocationTargetException</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>对 invoke 方法，如果 Method 为静态方法，obj 被忽略，可以为 null，args 可以为 null，也可以为一个空的数组，方法调用的返回值被包装为 Object 返回，如果实际方法调用抛出异常，异常被包装为 <strong>InvocationTargetException</strong> 重新抛出，可以通过 <strong>Exception#getCause()</strong> 方法得到原异常。</p><p>Method 还有很多方法，可以获取其修饰符、参数、返回值、注解等信息，具体就不列举了。</p><h3 id="创建对象和构造方法" tabindex="-1"><a class="header-anchor" href="#创建对象和构造方法" aria-hidden="true">#</a> 创建对象和构造方法</h3><p>Class 有一个方法，可以用它来创建对象：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InstantiationException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>它会调用类的默认构造方法<small>（即无参 public 构造方法）</small>，如果类没有该构造方法，会抛出异常 InstantiationException 。</p><p>Class#newInstance() 方法只能使用默认构造方法。Class 还有一些方法，可以获取所有的构造方法：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// 获取所有 public 构造方法，返回值可能长度为 0 的空数组。</span>\n<span class="token keyword">public</span> <span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 获取所有的构造方法，包括非 public 的</span>\n<span class="token keyword">public</span> <span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getDeclaredConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 获取指定参数类型的 public 构造方法，没找到抛出异常 NoSuchMethodException</span>\n<span class="token keyword">public</span> <span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> parameterTypes<span class="token punctuation">)</span>\n\n<span class="token comment">// 获取指定参数类型的构造方法，包括非 public 的。没有找到，则抛出异常 NoSuchMethodException</span>\n<span class="token keyword">public</span> <span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> parameterTypes<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>类 <strong>Constructor</strong> 表示构造方法，通过它可以创建对象，方法为：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token class-name">Object</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> initargs<span class="token punctuation">)</span>\n        <span class="token keyword">throws</span> <span class="token class-name">InstantiationException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span><span class="token punctuation">,</span>\n                <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">,</span> <span class="token class-name">InvocationTargetException</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>例如：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">StringBuilder</span><span class="token punctuation">&gt;</span></span> contructor <span class="token operator">=</span> \n        <span class="token class-name">StringBuilder</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> contructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>除了创建对象，Constructor 还有很多方法，可以获取关于构造方法的很多信息，包括参数、修饰符、注解等，具体就不列举了。</p><h2 id="获得类的-field-信息" tabindex="-1"><a class="header-anchor" href="#获得类的-field-信息" aria-hidden="true">#</a> 获得类的 Field 信息</h2><p>类中定义的静态和实例变量都被称为『<strong>字段</strong>』，用类 <strong>Field</strong> 表示，位于包 java.lang.reflect 下<small>（反射相关的类都在这个包下）</small>。</p><p>Class 有 4 个获取字段信息的方法：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token doc-comment comment">/**\n * 返回所有的 public 字段，包括继承自父类的。\n * 如果没有字段，返回空数组。\n */</span>\n<span class="token keyword">public</span> <span class="token class-name">Field</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token doc-comment comment">/** \n * 返回本类自己声明的所有字段，包括非 public 的。因此不包括继承自父类的。\n */</span>\n<span class="token keyword">public</span> field<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token comment">/* \n * 返回本类中指定名称的 public 字段，包括继承自父类的。\n * 如果没有，则抛出异常 NoSuchFieldException\n */</span>\n<span class="token keyword">public</span> <span class="token class-name">Field</span> <span class="token function">getField</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>\n\n<span class="token doc-comment comment">/** \n * 返回本类自己声明的指定名称的字段。因此不包含继承自父类的。\n * 如果没有，则抛出异常 NoSuchFieldException\n */</span>\n<span class="token keyword">public</span> <span class="token class-name">Field</span> <span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p>Field 也有很多方法，可以获取字段的信息，也可以通过 Field 访问和操作指定对象中该字段的值，基本方法有：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// 获取字段的名称</span>\n<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 判断当前程序是否有该字段的访问权限</span>\n<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isAccessiable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token comment">// flag 设置为 true 表示忽略 Java 的访问检查机制，以允许读写非 public 的字段。</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> flag<span class="token punctuation">)</span>\n\n<span class="token comment">// 获取指定对象 obj 中该字段的值</span>\n<span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span>\n\n<span class="token comment">// 将指定对象 obj 中该字段的值设为 value</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>在 get/set 方法中，对于静态变量，obj 被忽略，可以为 null，如果字段值为基本类型，get/set 会自动在基本类型与对应包装类型之间进行转换；对于 private 字段，直接使用 get/set 会抛出非法访问异常 IllegalAccessException，应该先调用 Field#setAccessible(true) 以关闭 java 的检查机制。</p><p>除了以上方法，Field 还有很多其它方法，比如：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// 返回字段的修饰符</span>\n<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 返回字段的类型</span>\n<span class="token keyword">public</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 以基本类型操作字段</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBoolean</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">,</span> <span class="token keyword">boolean</span> z<span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">getBoolean</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">,</span> obj<span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDouble</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token keyword">double</span> d<span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getDouble</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span>\n\n<span class="token comment">// 查询字段的注解信息，后续结合注解使用</span>\n<span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Annotation</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> annotationClass<span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token class-name">Annotation</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getDeclaredAnnotation</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>Field#getModifiers 返回一个 int ，可以通过 <strong>Modifier</strong> 类的静态方法进行解读。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Field</span> f <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>\n<span class="token keyword">int</span> mod <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Modifier</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>mod<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;  isPublic: &quot;</span> <span class="token operator">+</span> <span class="token class-name">Modifier</span><span class="token punctuation">.</span><span class="token function">isPublic</span><span class="token punctuation">(</span>mod<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;  isStatic: &quot;</span> <span class="token operator">+</span> <span class="token class-name">Modifier</span><span class="token punctuation">.</span><span class="token function">isStatic</span><span class="token punctuation">(</span>mod<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;   isFinal: &quot;</span> <span class="token operator">+</span> <span class="token class-name">Modifier</span><span class="token punctuation">.</span><span class="token function">isFinal</span><span class="token punctuation">(</span>mod<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;isVolatile: &quot;</span> <span class="token operator">+</span> <span class="token class-name">Modifier</span><span class="token punctuation">.</span><span class="token function">isVolatile</span><span class="token punctuation">(</span>mod<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>',70),t={render:function(n,s){return p}}}}]);