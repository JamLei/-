"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[1653],{44801:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-2d8f2608",path:"/vue/vue-03-%E4%B8%93%E9%A1%B9%E9%97%AE%E9%A2%98.html",title:"Vue 基础",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"v-cloak 解决页面加载时的闪烁问题",slug:"v-cloak-解决页面加载时的闪烁问题",children:[]},{level:2,title:"v-if 与 v-for 联合使用问题",slug:"v-if-与-v-for-联合使用问题",children:[]},{level:2,title:"响应式失效问题：为对象动态添加新属性",slug:"响应式失效问题-为对象动态添加新属性",children:[{level:3,title:"『为对象动态添加新属性』导致响应式失效",slug:"『为对象动态添加新属性』导致响应式失效",children:[]},{level:3,title:"『使用数组下标索引赋值 』导致响应式失效",slug:"『使用数组下标索引赋值-』导致响应式失效",children:[]},{level:3,title:"『重置数组长度』导致响应式失效",slug:"『重置数组长度』导致响应式失效",children:[]}]},{level:2,title:"响应式失效问题总结",slug:"响应式失效问题总结",children:[]},{level:2,title:"事件方法中 $event 为 undefined 问题",slug:"事件方法中-event-为-undefined-问题",children:[]},{level:2,title:"对 v-model 的理解",slug:"对-v-model-的理解",children:[{level:3,title:"v-model 用于『动键盘』的表单元素",slug:"v-model-用于『动键盘』的表单元素",children:[]},{level:3,title:"v-mode 用于『动鼠标』的表单元素",slug:"v-mode-用于『动鼠标』的表单元素",children:[]}]},{level:2,title:"mounted 时元素不全问题",slug:"mounted-时元素不全问题",children:[]},{level:2,title:"过滤器不能使用 this 问题",slug:"过滤器不能使用-this-问题",children:[]}],filePathRelative:"vue/vue-03-专项问题.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},83004:(n,s,a)=>{a.r(s),a.d(s,{default:()=>p});const t=(0,a(66252).uE)('<h1 id="vue-基础" tabindex="-1"><a class="header-anchor" href="#vue-基础" aria-hidden="true">#</a> Vue 基础</h1><h2 id="v-cloak-解决页面加载时的闪烁问题" tabindex="-1"><a class="header-anchor" href="#v-cloak-解决页面加载时的闪烁问题" aria-hidden="true">#</a> v-cloak 解决页面加载时的闪烁问题</h2><p>闪烁问题的原因在于：</p><blockquote><p>网页还在加载 Vue.js ，而导致 Vue 来不及渲染页面，这时页面就会显示出 Vue 源代码。</p></blockquote><p><strong>v-cloak</strong> 指令是 Vue 提供的一种机制：</p><blockquote><p>它保证被添加了 <strong>v-cloak</strong> 指令的元素在 Vue 渲染页面期间该指令，当页面被 Vue 渲染结束后，<strong>v-cloak</strong> 指令会被 Vue 移除。</p></blockquote><p>简单来说，在 Vue 渲染页面期间，下面是这样的：</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-cloak</span><span class="token punctuation">&gt;</span></span>\n...\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>一旦页面被 Vue 渲染结束，页面就变成这样了：</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n  ...\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><strong>v-cloak</strong> 指令可以被加载任何的元素上。</p><p>借助这个特性，我们可以结合 <code>display: none;</code> 样式，解决闪烁问题：</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/css<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">\n  <span class="token selector">[v-cloak]</span> <span class="token punctuation">{</span>\n    <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-cloak</span><span class="token punctuation">&gt;</span></span>\n  ...\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>在 <strong>v-cloak</strong> 存在期间，即 Vue 渲染页面期间它是不显示的。一旦 Vue 加载页面结束 <strong>v-cloak</strong> 被移除，该元素才被显示。</p><h2 id="v-if-与-v-for-联合使用问题" tabindex="-1"><a class="header-anchor" href="#v-if-与-v-for-联合使用问题" aria-hidden="true">#</a> v-if 与 v-for 联合使用问题</h2><pre><code>永远不要把 v-if 和 v-for 同时用在同一个元素上。\n</code></pre><p>官方文档明确写出上述建议的目的原因在于，v-if 和 v-for 的组合有 2 种逻辑：</p><ul><li>先做 if 判断，根据 if 的判断结果来决定是否要进行整个 for 循环；</li><li>先循环起来，在 for 循环的每一轮中进行 if 判断，来决定本轮循环要执行，或不要执行代码。</li></ul><p>由于 v-for 的优先级比 v-if 的优先级高，所以，当你在同一个元素上同时使用 v-for 和 v-if 时，它们的执行逻辑上上述『情况二』。</p><p>官方的意思是希望你以明确的不同的写法来表达你是想执行『情况一』，还是想执行『情况二』。</p><ul><li><p>对于上述情况一：<code>先 if 后 for</code>，<strong>建议拆分成父子<small>（内外）</small>两层。</strong></p><p><strong>v-if</strong> 用于父元素，<strong>v-for</strong> 用于子元素。即，v-if 在外，v-for 在内。例如：</p><p>逻辑上，你想根据 xxx 条件的成立与否来决定是否在页面上显示所有员工信息：<code>v-for=&quot;user in users&quot; v-if=&quot;shouldShowUsers&quot;</code> 。</p><p>这种情形下，请将 v-if 移动至容器元素上，比如 &lt;ul&gt;、&lt;ol&gt;，将 v-for 留在 &lt;li&gt; 上。</p></li><li><p>对于上述情况二：<code>先 for 后 if</code>，<strong>建议使用『计算属性<small>（computed）</small>』。</strong></p><p>将 <strong>v-if</strong> 的逻辑移入计算属性，在页面上保留 <strong>v-for</strong> 。例如：</p><p>逻辑上，你想在页面上状态为 xxx 的所有员工信息：<code>v-for=&quot;user in users&quot; v-if=&quot;user.isActive&quot;</code> 。</p><p>在这种情形下，请将 users 替换为一个计算属性（比如 <code>activeUsers</code>），让其返回过滤后的列表。</p></li></ul><h2 id="响应式失效问题-为对象动态添加新属性" tabindex="-1"><a class="header-anchor" href="#响应式失效问题-为对象动态添加新属性" aria-hidden="true">#</a> 响应式失效问题：为对象动态添加新属性</h2><p>常见有 3 种情况，你改动了 vue 的 data，但是 vue 没有重新渲染页面，即，响应式失效：</p><ol><li>为对象添加新属性；</li><li>通过数组下标索引操作数组；</li><li>通过 length 属性为数组扩容或缩容。</li></ol><h3 id="『为对象动态添加新属性』导致响应式失效" tabindex="-1"><a class="header-anchor" href="#『为对象动态添加新属性』导致响应式失效" aria-hidden="true">#</a> 『为对象动态添加新属性』导致响应式失效</h3><p><strong>不能使用『为对象不存在的属性赋值』的方式来为对象新增属性</strong>，Vue 监测不到这种方式的数据的变动。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n      user <span class="token operator">:</span> <span class="token punctuation">{</span>\n        username <span class="token operator">:</span> <span class="token string">&#39;tommy&#39;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 标准错误用法</span>\nvm<span class="token punctuation">.</span>user<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Vue 无法发现 user『多』出来一个 age 属性，并且值为 20 。</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>解决这个问题的常见办法是使用 <code>Vue.set()</code> 代替直接赋值，来为对象『新增』属性：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 在 vue 内部使用时</span>\nVue<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>user<span class="token punctuation">,</span> <span class="token string">&#39;age&#39;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 在 vue 外部使用时</span>\nVue<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>user<span class="token punctuation">,</span> <span class="token string">&#39;age&#39;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="『使用数组下标索引赋值-』导致响应式失效" tabindex="-1"><a class="header-anchor" href="#『使用数组下标索引赋值-』导致响应式失效" aria-hidden="true">#</a> 『使用数组下标索引赋值 』导致响应式失效</h3><p><strong>不能直接使用『下标索引』来设置数组的元素</strong>。Vue 监测不到这种方式的数据的变动。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  el<span class="token operator">:</span> <span class="token string">&#39;#app&#39;</span><span class="token punctuation">,</span>\n  data<span class="token operator">:</span> <span class="token punctuation">{</span>\n    dogs<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;tommy&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;jerry&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;ben&#39;</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 标准错误用法</span>\nvm<span class="token punctuation">.</span>dogs<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;Bob&#39;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Vue 无法发现 dogs 的第 3 个元素发生了变动。</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>解决这个问题的常见办法是使用 <code>Vue.set()</code> 代替下标索引方式赋值，来为对象『新增』属性：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 在 vue 内部使用时</span>\nVue<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>dogs<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;Bob&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 在 vue 外部使用时</span>\nVue<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>dogs<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;Bob&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><blockquote><p>除了 Vue.set() 方式之外，常见的解决办法还有使用『使用数组的 <code>.splice()</code> 方法』来移除数据中旧元素，并添加新元素，从而间接实现“修改”功能：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 在 vue 内部使用时</span>\n<span class="token keyword">this</span><span class="token punctuation">.</span>dogs<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;Bob&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 在 vue 外部使用时</span>\nvm<span class="token punctuation">.</span>dogs<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;Bob&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></blockquote><h3 id="『重置数组长度』导致响应式失效" tabindex="-1"><a class="header-anchor" href="#『重置数组长度』导致响应式失效" aria-hidden="true">#</a> 『重置数组长度』导致响应式失效</h3><p>JavaScript 的语法特新中有这样一个特性：可以设置一个数组的长度，自动让空元素填充数组至该长度，或者截掉数组的尾部。</p><p><small>具体是填充还是截掉取决于新设置的长度是比数组原长度长还是短。</small></p><p><strong>不过这个特性不能用于处理 data 对象中的数据</strong>，因为 Vue 不能检测到该操作对数组的任何更改。</p><p>可以用 <strong>splice()</strong> 方法代替：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>vm<span class="token punctuation">.</span>dogs<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>newLength<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><blockquote><p>不过这一方法只能用于缩短数组，并不能扩展它的长度。</p></blockquote><h2 id="响应式失效问题总结" tabindex="-1"><a class="header-anchor" href="#响应式失效问题总结" aria-hidden="true">#</a> 响应式失效问题总结</h2><p>上述响应式失效的 3 种情况，会涉及到 2 个解决问题的方法，其中：</p><ul><li><p><strong>Vue.set()</strong> 方法，解决情况 1 和 2 ；</p></li><li><p><strong>数组.splice()</strong> 方法，解决情况 2 和 3 。</p></li></ul><p>大家根据情况选择性使用。</p><h2 id="事件方法中-event-为-undefined-问题" tabindex="-1"><a class="header-anchor" href="#事件方法中-event-为-undefined-问题" aria-hidden="true">#</a> 事件方法中 $event 为 undefined 问题</h2><p>在 使用 v-on 为元素绑定处理函数时，本质上只有 2 种规范写法：</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token comment">&lt;!-- 写法一 --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>increase($event)<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>单击增加计数<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token comment">&lt;!-- 写法二 --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>increase()<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>单击增加计数<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>第 1 种写法意味着 increase 方法被触发执行时，你要求 vue 将事件对象传递到处理函数中。与之对应，你的事件处理函数自然需要有一个参数来『接收』vue 传给你的 $event 对象。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function-variable function">increase</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>counter<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// `this` 在方法里指向当前 Vue 实例</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// `event` 是 DOM 事件对象，记录了所发生的事件的相关信息</span>\n    console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>tagName<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>第 2 种写法在你的 increase 方法被触发执行时，vue 不会传入事件对象。此时，哪怕你的 increase 方法有参数，那么它的值必然是 <code>undefined</code> 。</p><p>除了上述 2 种写法之外，看似还有第 3 种写法：</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token comment">&lt;!-- 写法三 --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>increase<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>单击增加计数<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>『写法三』看似和『写法二』很像，但是它本质上是『写法一』的简写！</strong></p><p>我们这里要说明的 <code>$event</code> 为 <code>undefined</code> 的问题的原因在于：你本想写所谓的『写法三』<small>（本质上就是『写法一』）</small>，但是一不小心多加了一对 <code>()</code>，写成了『写法二』，vue 压根就不会往你的事件处理函数中传入 event 对象。你的参数值自然就是 <code>undefined</code> 。</p><p>所以，在你需要使用事件对象时，注意不要在 v-on 种多写了括号！</p><h2 id="对-v-model-的理解" tabindex="-1"><a class="header-anchor" href="#对-v-model-的理解" aria-hidden="true">#</a> 对 v-model 的理解</h2><p>vue 使用 v-model 实现这些标签数据的双向绑定，它会根据控件类型自动选取正确的方法来更新元素。</p><p>考虑到表单元素大体上分为需要我们『动键盘』和『动鼠标』2 种，这里我们分别解释。</p><h3 id="v-model-用于『动键盘』的表单元素" tabindex="-1"><a class="header-anchor" href="#v-model-用于『动键盘』的表单元素" aria-hidden="true">#</a> v-model 用于『动键盘』的表单元素</h3><pre><code>这种情况下，我们不需要编写 HTML 时去设置表单元素的 value 。\n</code></pre><p>在这种情况下，v-model 本质上是一个语法糖。例如，</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>test<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>所起到的作用如同：</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">:value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>test<span class="token punctuation">&quot;</span></span> <span class="token attr-name">@input</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>test = $event.target.value<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>其中：</p><ul><li>@input 是对 &lt;input&gt;\\输入事件的一个监听；</li><li>:value=&quot;test&quot; 是将监听事件中的数据放入到 input。</li></ul><p>在这边需要强调一点，v-model 不仅可以给 input 赋值还可以获取 input 中的数据，而且数据的获取是实时的，因为语法糖中是用 @input 对输入框进行监听的。</p><h3 id="v-mode-用于『动鼠标』的表单元素" tabindex="-1"><a class="header-anchor" href="#v-mode-用于『动鼠标』的表单元素" aria-hidden="true">#</a> v-mode 用于『动鼠标』的表单元素</h3><pre><code>这种情况下，需要我们去编写 HTML 时去设置表单元素的 value 。\n</code></pre><p>这里『动鼠标』的表单元素指的是下拉框、单选按钮、复选框。对于这些元素，v-model 要利用我们提前准备好的值来影响『动鼠标』的表单元素的选中效果。</p><p>以下拉框为例：</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>test2<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>北京<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>北京<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>上海<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>上海<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>深圳<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>深圳<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>武汉<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>武汉<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>{{ test2 }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ul><li>我们在页面上选中哪一个选项，data.test2 的值就是哪一个选项的值；</li><li>data.test2 的值是哪一个选项的值，页面呈现出的效果就是哪一个选项被选中。</li></ul><p>单选按钮和下拉框也是同样的道理。</p><p>但是，复选框又有一点点特殊、不同。逻辑上，单选按钮和下拉框是带有互斥效果的，因此，它们的 v-model 绑定的 data 属性值都是一个单值<small>（字符串）</small>。但是多选框有多选效果，因此它的 v-mode 绑定的属性值的类型应该是一个字符串数组：</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>checkbox<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>test4<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>bj<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>北京\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>checkbox<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>test4<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sh<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>上海\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>checkbox<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>test4<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sz<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>深圳\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>checkbox<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>test4<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>wh<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>武汉\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>{{ test4 }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>它的 v-model 的绑定值：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n        test4<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>如果，你有意（或无意）将 data 的属性值的类型写成的是非数组，而是一个单值，例如：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n        test4<span class="token operator">:</span> <span class="token keyword">undefined</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>那么 vue 通过 v-model 为它赋的值是 boolean 值 <code>true</code> 或 <code>false</code>，来表示这个 checkbox 是否被选中。反过来，这个 <code>true</code> 或 <code>false</code> 又会进一步影响到其它绑定到同一个 data 属性上的所有的 checkbox，从而出现比较『诡异』的效果。</p><p>所以，对于多选框 checkbox 的 v-model 绑定的属性值的类型不要写错了。</p><h2 id="mounted-时元素不全问题" tabindex="-1"><a class="header-anchor" href="#mounted-时元素不全问题" aria-hidden="true">#</a> mounted 时元素不全问题</h2><p>有一点需要注意，在 Vue 2.0 中，<strong>mounted</strong> 钩子触发时并不保证元素已经被添加到 DOM 上。如果想要保证元素已经被添加，可以调用 <strong>Vue.nextTick()</strong> 方法（也可以通过 <code>this.$nextTick()</code> 调用）并传入一个回调函数，在回调函数中添加需要在元素被添加到 DOM 之后运行的代码。</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>app<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-cloak</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>test<span class="token punctuation">&quot;</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>clickHandler()<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>hello world<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n<span class="token comment">&lt;!-- &lt;script src=&quot;https://unpkg.com/vue&quot;&gt;&lt;/script&gt; --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://unpkg.zhimg.com/vue<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n  <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    el<span class="token operator">:</span> <span class="token string">&#39;#app&#39;</span><span class="token punctuation">,</span>\n    <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 此时，不保证元素一定添加到了 DOM 上。</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$nextTick</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 此时元素一定被添加到了 DOM 上。</span>\n        console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h2 id="过滤器不能使用-this-问题" tabindex="-1"><a class="header-anchor" href="#过滤器不能使用-this-问题" aria-hidden="true">#</a> 过滤器不能使用 this 问题</h2><p>过滤器时组件中唯一不能使用 <strong>this</strong> 来访问数据或方法的地方。其实这不是个问题，这是故意设计成这样的！</p><p>这是因为过滤器应该是纯函数，也就是说对于同样的输入每次都返回同样的输出，而不涉及任何外部数据。如果想在过滤器中访问其它数据，可以将它作为参数传入。</p><blockquote><p>另外，再次提醒下，只可以在插值表达式和 v-bind 指令中使用过滤器。</p></blockquote>',91),p={render:function(n,s){return t}}}}]);