"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[1494],{11585:(e,a,s)=>{s.r(a),s.d(a,{data:()=>n});const n={key:"v-47385632",path:"/git/103-%E5%88%86%E6%94%AF%E9%AB%98%E7%BA%A7%E6%93%8D%E4%BD%9C.html",title:"分支：高级操作",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"merge 和 rebase 的区别",slug:"merge-和-rebase-的区别",children:[{level:3,title:"merge 命令",slug:"merge-命令",children:[]},{level:3,title:"rebase 命令",slug:"rebase-命令",children:[]},{level:3,title:"rebase 命令的第一种用法（标准“错误”用法）",slug:"rebase-命令的第一种用法-标准-错误-用法",children:[]},{level:3,title:"rebase 命令的第二种用法",slug:"rebase-命令的第二种用法",children:[]},{level:3,title:"带 rebase 参数同步分支",slug:"带-rebase-参数同步分支",children:[]}]},{level:2,title:"合并提交",slug:"合并提交",children:[]}],filePathRelative:"git/103-分支高级操作.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},82509:(e,a,s)=>{s.r(a),s.d(a,{default:()=>r});const n=(0,s(66252).uE)('<h1 id="分支-高级操作" tabindex="-1"><a class="header-anchor" href="#分支-高级操作" aria-hidden="true">#</a> 分支：高级操作</h1><h2 id="merge-和-rebase-的区别" tabindex="-1"><a class="header-anchor" href="#merge-和-rebase-的区别" aria-hidden="true">#</a> merge 和 rebase 的区别</h2><p>假设我们有两个分支<small>（master 和 feature）</small>。feature 是基于 master 的 C1 节点建立的分支，然后开发人员分别在两个分支各自开发：</p><blockquote><p>这里的箭头方向表示的是依赖关系，即，指向的是上一个版本。</p></blockquote><p><img src="https://hemiao3000.gitee.io/java-note-img/images/git/img/git-rebase-1.png" alt="git-rebase-1"></p><h3 id="merge-命令" tabindex="-1"><a class="header-anchor" href="#merge-命令" aria-hidden="true">#</a> merge 命令</h3><p>现在我们想要把 feature 分支开发的内容合并到 master，使用 merge 命令：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ <span class="token function">git</span> checkout master\n$ <span class="token function">git</span> merge feature\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><blockquote><p>merge 命令的使用是【站在 master 分支】的角度上来看，将 feature 分支的内容【纳入】到 master 分支。master 分支会演进出一个新的版本。</p></blockquote><p><img src="https://hemiao3000.gitee.io/java-note-img/images/git/img/git-rebase-2.png" alt="git-rebase-2"></p><p>从整体来看，merge 命令执行之后，会在之前的相关的 3 个版本节点之外生成一个新的节点 <sub>这个新节点将会是 master 线路上的最新的“终点”</sub>。</p><h3 id="rebase-命令" tabindex="-1"><a class="header-anchor" href="#rebase-命令" aria-hidden="true">#</a> rebase 命令</h3><p>对于同样的初始情况，如果我们使用 rebase 命令会有什么不同。</p><p>rebase 命令有两种使用方式：</p><h3 id="rebase-命令的第一种用法-标准-错误-用法" tabindex="-1"><a class="header-anchor" href="#rebase-命令的第一种用法-标准-错误-用法" aria-hidden="true">#</a> rebase 命令的第一种用法<sub>（标准“错误”用法）</sub></h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ <span class="token function">git</span> checkout master\n$ <span class="token function">git</span> rebase feature\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><img src="https://hemiao3000.gitee.io/java-note-img/images/git/img/git-rebase-3.png" alt="git-rebase-3"></p><p>Git 把 <code>C2</code> 备份成 <code>C2&#39;</code>，删除 <code>C2</code>，然后把 <code>C2&#39;</code> 追加到 <code>C3</code> 后面，把 master 指向 <code>C2&#39;</code> 。</p><p>我们之所以说这种用法是“<strong>错误</strong>”的用法是因为：</p><p>C2 版本节点作为 master 分支上的节点，其中包含了你的“同事”先于你提交的代码，一旦 rebase 之后，在时间线上却出现了你的代码会“早于”你同事的代码的情况。这在你最终将本地仓库 push 到远程仓库时，会引起麻烦。<sub>虽然我们有办法解决掉这个麻烦，但终归是要额外地多付出时间精力。而且，越多的人这样时候，你的“额外付出”会成倍地增加。</sub></p><p>这种 rebase 用法只在一种情况下可用：整个项目只有你一个人开发，即，你没有同事。那么，这个时间线的混乱问题虽然看起来有问题，但是不会影响到你的项目的推进。</p><h3 id="rebase-命令的第二种用法" tabindex="-1"><a class="header-anchor" href="#rebase-命令的第二种用法" aria-hidden="true">#</a> rebase 命令的第二种用法</h3><p>rebase 命令的第二种用法实际上就是第一种用法的改进版，以避免出现时间线混乱问题。这种用法需要和 merge 结合使用。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ <span class="token function">git</span> checkout feature\n$ <span class="token function">git</span> rebase master\n$ <span class="token function">git</span> checkout master\n$ <span class="token function">git</span> merge feature\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>第一步操作 rebase 之后的效果图如下：</p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/git/img/git-rebase-4.png" alt="git-rebase-4"></p><p>第二步操作 merge 之后的效果图如下：</p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/git/img/git-rebase-5.png" alt="git-rebase-5"></p><p>这种 rebase 的用法中，合并之后的时间线里逻辑就是正确的。</p><blockquote><p>feature rebase on master，master merge feature</p></blockquote><h3 id="带-rebase-参数同步分支" tabindex="-1"><a class="header-anchor" href="#带-rebase-参数同步分支" aria-hidden="true">#</a> 带 rebase 参数同步分支</h3><p>当多个人同时在同一个分支上开发时，为了保证这个分支有一个清晰的时间线，我们在使用 git pull 命令时要带上 rebase 参数：<code>git pull --rebase</code> 。</p><blockquote><p>具体细节此处不展开，因为工作中会尽量避免多个人在同一个分支上工作。</p></blockquote><h2 id="合并提交" tabindex="-1"><a class="header-anchor" href="#合并提交" aria-hidden="true">#</a> 合并提交</h2><p>有时你以为你的有一次提交完成了所有工作，但是最后的结果却是你随后陆陆续续还要再补充几次提交才算是完成了原计划的一项任务。</p><p>这种情况下，你在 Git 的提交记录中将留下多个历史版本。而实际上，这多个版本并无存在的必要，逻辑上，只需要有一个就行了。</p><p>理想情况下，你可以用 <strong><code>rebase</code></strong> 命令把多个 Commit 压缩成一个。</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>git rebase -i HEAD~&lt;N&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>例如，如果你想要压缩最后两个 Commit：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>git rebase -i HEAD~3\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><blockquote><p>注意，这里有 <code>[HEAD, HEAD~3)</code> 左开右闭的含义，因此，合并最后 <code>2</code> 个 Commit，出现的数字是 <code>3</code> 而不是 <code>2</code> 。</p></blockquote><p>当你执行完这个命令后，合并工作并没完，你看到的是一个交互式<small>（interactive ）</small>界面，例如：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>pick 16a9a47 update3 \npick a7186d8 update2\npick 7b16b28 update1\n\n Rebase a9269a3..7b16b28 onto a9269a3 (3 commands)\n\n Commands:\n p, pick = use commit\n r, reword = use commit, but edit the commit message\n e, edit = use commit, but stop for amending\n s, squash = use commit, but meld into previous commit\n f, fixup = like &quot;squash&quot;, but discard this commit&#39;s log message\n x, exec = run command (the rest of the line) using shell\n d, drop = remove commit\n\n...\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>在这里，Git 需要我们手动对这 3 个 Commit 进行设置。我们需要关注的状态是 <code>Squash</code> 和 <code>Reword</code> 。我们要将这 3 个 Commit 调整成如下状态：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>squash 16a9a47 update3 \nsquash a7186d8 update2\nreword 7b16b28 update1\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>这样，最近的 2 次 Commit（HEAD、HEAD~1）将合并到 HEAD~2 中，并且它们两个的 message 将会被合并到 HEAD~2 的 message 中。</p><p>『完』</p>',47),r={render:function(e,a){return n}}}}]);