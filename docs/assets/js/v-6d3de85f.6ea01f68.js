"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[5611],{45382:(n,a,s)=>{s.r(a),s.d(a,{data:()=>t});const t={key:"v-6d3de85f",path:"/spring-boot/10-spring-cache.html",title:"Spring Boot 中使用 Cache 缓存",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"基本概念",slug:"基本概念",children:[]},{level:2,title:"Spring Boot 中 Cache 的使用",slug:"spring-boot-中-cache-的使用",children:[]},{level:2,title:"整合 EHCache 初试 Spring Cache",slug:"整合-ehcache-初试-spring-cache",children:[]},{level:2,title:"@Cacheable",slug:"cacheable",children:[]},{level:2,title:"用于 Repository 上",slug:"用于-repository-上",children:[]},{level:2,title:"@CachePut",slug:"cacheput",children:[]},{level:2,title:"@CacheEvict",slug:"cacheevict",children:[{level:3,title:"allEntries 属性",slug:"allentries-属性",children:[]},{level:3,title:"beforeInvocation 属性",slug:"beforeinvocation-属性",children:[]}]},{level:2,title:"SpEL 上下文数据",slug:"spel-上下文数据",children:[]},{level:2,title:"@Caching",slug:"caching",children:[]}],filePathRelative:"spring-boot/10-spring-cache.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},67403:(n,a,s)=>{s.r(a),s.d(a,{default:()=>e});const t=(0,s(66252).uE)('<h1 id="spring-boot-中使用-cache-缓存" tabindex="-1"><a class="header-anchor" href="#spring-boot-中使用-cache-缓存" aria-hidden="true">#</a> Spring Boot 中使用 Cache 缓存</h1><h2 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念" aria-hidden="true">#</a> 基本概念</h2><p>绝大多数的网站/系统，最先遇到性能瓶颈就是数据库，而且绝大多数的网站/系统的业务对数据库的操作都是读多写少。使用缓存做数据库的前置缓存，可以非常有效地降低数据库的压力，从而提升整个系统的响应效率和并发量。</p><p>大部分使用缓存的场景是基于数据库的缓存，这类缓存场景的逻辑往往是：如果缓存中存在数据，就从缓存中读取；如果缓存中不存在数据，就再从数据库中读取。</p><p>为了简化业务代码中的相关逻辑判断，Spring 在 <code>3.1</code> 版本引入了了基于注释驱动的 <strong>Spring Cache</strong> 。它的原理是 Spring Cache 利用了 Spring AOP 的动态代理技术，在项目启动的时候动态生成它的代理类，在代理类中实现了对应的逻辑。</p><p><strong>Spring Cache 它本质上不是一个具体的缓存实现方案，而是一个对缓存使用的抽象</strong>。<small>简单来说，它相当于是 slf4j，它并不是真正干活的那个。</small></p><p>使用 Spring Cache 的好处：</p><table><thead><tr><th style="text-align:center;">#</th><th style="text-align:left;">好处</th></tr></thead><tbody><tr><td style="text-align:center;">1</td><td style="text-align:left;">提供基本的 Cache 抽象，方便切换各种底层 Cache；</td></tr><tr><td style="text-align:center;">2</td><td style="text-align:left;">通过注解 Cache 可以实现类似于事务一样，缓存逻辑透明的应用到我们的业务代码上，且只需要更少的代码就可以完成；</td></tr><tr><td style="text-align:center;">3</td><td style="text-align:left;">提供事务回滚时也自动回滚缓存；</td></tr><tr><td style="text-align:center;">4</td><td style="text-align:left;">支持比较复杂的缓存逻辑；</td></tr></tbody></table><h2 id="spring-boot-中-cache-的使用" tabindex="-1"><a class="header-anchor" href="#spring-boot-中-cache-的使用" aria-hidden="true">#</a> Spring Boot 中 Cache 的使用</h2><p>Spring Boot 提供了非常简单的解决方案，其中最核⼼的是三个注解：</p><table><thead><tr><th style="text-align:center;">#</th><th style="text-align:left;">注解</th></tr></thead><tbody><tr><td style="text-align:center;">1</td><td style="text-align:left;">@Cacheable</td></tr><tr><td style="text-align:center;">2</td><td style="text-align:left;">@CacheEvict</td></tr><tr><td style="text-align:center;">3</td><td style="text-align:left;">@CachePut</td></tr></tbody></table><p><strong><code>spring-boot-starter-cache</code></strong> 是 Spring Boot 体系内提供使用 Spring Cache 的 Starter 包。</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-cache<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>它会进行缓存的自动化配置和识别，Spring Boot 为 Redis 自动配置了 <strong>RedisCacheConfiguration</strong> 等信息，spring-boot-starter-cache 中的注解也主要是使用了 Spring Cache 提供的支持。</p><h2 id="整合-ehcache-初试-spring-cache" tabindex="-1"><a class="header-anchor" href="#整合-ehcache-初试-spring-cache" aria-hidden="true">#</a> 整合 EHCache 初试 Spring Cache</h2><p>EhCache 是一个纯 Java 的进程内缓存框架，具有快速、精干等特点。<small>Hibernate 中的默认 Cache 就是使用的 EhCache</small> 。</p><ul><li><p>pom.xml</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token comment">&lt;!--ehcache依赖--&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>net.sf.ehcache<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>ehcache<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li></ul><p>通过 spring-cache 使用 EhCache 有两点需要注意的地方：</p><ol><li><p>为配置类标注 <strong><code>@EnableCaching</code></strong> 注解，启用 spring-cache 功能。</p></li><li><p>被 EhCache 缓存的对象需要实现 <strong><code>Serializable</code></strong> 接口。</p></li></ol><ul><li><p>ehcache.xml</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ehcache</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">&quot;</span></span>\n       <span class="token attr-name"><span class="token namespace">xsi:</span>noNamespaceSchemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://ehcache.org/ehcache.xsd<span class="token punctuation">&quot;</span></span>\n       <span class="token attr-name">updateCheck</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>false<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n\n  <span class="token comment">&lt;!--\n      磁盘存储：将缓存中暂时不使用的对象，转移到硬盘，类似于 Windows 系统的虚拟内存\n      path：指定在硬盘上存储对象的路径。path 可以配置的目录有：\n                   user.home  用户的家目录。\n                    user.dir  用户当前的工作目录。\n              java.io.tmpdir  默认的临时目录。System.getProperty(&quot;java.io.tmpdir&quot;);\n      ehcache.disk.store.dir  ehcache 的配置目录。\n                 d:\\\\ehcache  手动指定一个绝对路径。\n   --&gt;</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>diskStore</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>java.io.tmpdir<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n\n  <span class="token comment">&lt;!--\n      defaultCache：默认的缓存配置信息，如果不加特殊说明，则所有对象按照此配置项处理\n      maxElementsInMemory 设置了缓存的上限，最多存储多少个记录对象\n                  eternal 代表对象是否永不过期 (指定 true 则下面两项配置需为 0，表示无限期)\n        timeToIdleSeconds 最大的发呆时间 /秒\n        timeToLiveSeconds 最大的存活时间 /秒\n           overflowToDisk 是否允许对象被写入到磁盘\n      说明：下列配置自缓存建立起 10x60 秒有效 。\n      在有效的 10x60 秒内，如果连续 2x60 秒未访问缓存，则缓存失效。\n      就算有访问，也只会存活 10x60 秒。\n   --&gt;</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>defaultCache</span> <span class="token attr-name">maxElementsInMemory</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>10000<span class="token punctuation">&quot;</span></span> <span class="token attr-name">eternal</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>false<span class="token punctuation">&quot;</span></span> <span class="token attr-name">timeToIdleSeconds</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>600<span class="token punctuation">&quot;</span></span>\n                <span class="token attr-name">timeToLiveSeconds</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>600<span class="token punctuation">&quot;</span></span> <span class="token attr-name">overflowToDisk</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cache</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cache<span class="token punctuation">&quot;</span></span> <span class="token attr-name">maxElementsInMemory</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>10000<span class="token punctuation">&quot;</span></span> <span class="token attr-name">eternal</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>false<span class="token punctuation">&quot;</span></span> <span class="token attr-name">timeToIdleSeconds</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>120<span class="token punctuation">&quot;</span></span>\n         <span class="token attr-name">timeToLiveSeconds</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>600<span class="token punctuation">&quot;</span></span> <span class="token attr-name">overflowToDisk</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ehcache</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div></li></ul><h2 id="cacheable" tabindex="-1"><a class="header-anchor" href="#cacheable" aria-hidden="true">#</a> @Cacheable</h2><p><em><code>@Cacheable</code></em> 注解标注于查询方法上。被标注了该注解的方法的返回值，会被 Sprig Cache 存入缓存，并且在调用中先从缓存中获取。缓存中没有，才会执行该查询方法本身的逻辑<small>（从数据库中查询）</small>。</p><p>例如：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/hello&quot;</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">&quot;helloCache&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;没有走缓存！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token string">&quot;hello &quot;</span> <span class="token operator">+</span> name<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>先后两次访问 <em><code>http://localhost:8080/hello?name=ben</code></em> 你会发现只有一个日志输出。</p><p><em><strong><code>@Cacheable</code></strong></em> 支持如下几个参数：</p><table><thead><tr><th style="text-align:left;">参数</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">value</td><td style="text-align:left;">缓存的名称。在 spring 配置文件中定义，必须指定⾄至少一个</td></tr><tr><td style="text-align:left;">key</td><td style="text-align:left;">缓存的 key，可以为空。<br>如果指定，则要按照 SpEL 表达式编写；<br>如果不指定，则缺省按照方法的所有参数进行组合。</td></tr><tr><td style="text-align:left;">condition</td><td style="text-align:left;">触发条件，只有满足条件的情况才会加入缓存，默认为空，既表示全部都加入缓存，支持 Spring EL 。</td></tr></tbody></table><p>上述方法可以改造成：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/condition&quot;</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">&quot;condition&quot;</span><span class="token punctuation">,</span> condition<span class="token operator">=</span><span class="token string">&quot;#name.length() &lt;= 4&quot;</span><span class="token punctuation">)</span>\n<span class="token comment">// @Cacheable(value=&quot;condition&quot;, condition=&quot;#name != null&quot;)</span>\n<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">condition</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;没有走缓存！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token string">&quot;hello &quot;</span> <span class="token operator">+</span> name<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>在浏览器多次访问 <em><code>http://localhost:8080/condition?name=justicando</code></em>，会发现日志一次输出 <code>没有缓存</code>，这就是因为参数 <em><code>name</code></em> 不满足 <em><code>length() &lt;= 4</code></em> 的要求<small>（只有满足要求才会走缓存逻辑）</small>。</p><p>总结：</p><ul><li><p>当执行到一个被 <em><code>@Cacheable</code></em> 注解的方法时，Spring 首先检查 <em><code>condition</code></em> 条件是否满足;</p></li><li><p>如果不满足，执行方法，返回；</p></li><li><p>如果满足，在缓存空间中查找使用 <em><code>key</code></em> 存储的对象，</p><ul><li><p>如果找到，将找到的结果返回，</p></li><li><p>如果没有找到，执行方法，将方法的返回值以 key-value 对象的方式存如缓存中，然后方法返回。</p></li></ul></li><li><p><strong>需要注意的是</strong>：当一个支持缓存的方法在对象内部被调用时是不不会触发缓存功能的。</p></li><li><p><em><code>@Cacheable</code></em> 可以标注于类上。其效果等同于类下所有方法都标注了该注解。</p></li></ul><h2 id="用于-repository-上" tabindex="-1"><a class="header-anchor" href="#用于-repository-上" aria-hidden="true">#</a> 用于 Repository 上</h2><p><em><strong><code>@Cacheable(cacheNames = &quot;cache&quot;, key = &quot;#a0&quot;)</code></strong></em></p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">Hibernate</span><span class="token punctuation">:</span> \n    select\n        account0_.id as id1_0_0_<span class="token punctuation">,</span>\n        account0_.amount as amount2_0_0_<span class="token punctuation">,</span>\n        account0_.name as name3_0_0_ \n    from\n        account account0_ \n    where\n        account0_.id=<span class="token punctuation">?</span>\n <span class="token key atrule">INFO | com.softeem.CqrsDemo3ApplicationTests</span>    <span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>Account<span class="token punctuation">{</span>id=1<span class="token punctuation">,</span> name=&#39;tommy&#39;<span class="token punctuation">,</span> amount=1000.0<span class="token punctuation">}</span><span class="token punctuation">]</span>\n<span class="token key atrule">Hibernate</span><span class="token punctuation">:</span> \n    select\n        account0_.id as id1_0_0_<span class="token punctuation">,</span>\n        account0_.amount as amount2_0_0_<span class="token punctuation">,</span>\n        account0_.name as name3_0_0_ \n    from\n        account account0_ \n    where\n        account0_.id=<span class="token punctuation">?</span>\n <span class="token key atrule">INFO | com.softeem.CqrsDemo3ApplicationTests</span>    <span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>Account<span class="token punctuation">{</span>id=1<span class="token punctuation">,</span> name=&#39;tommy&#39;<span class="token punctuation">,</span> amount=1000.0<span class="token punctuation">}</span><span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h2 id="cacheput" tabindex="-1"><a class="header-anchor" href="#cacheput" aria-hidden="true">#</a> @CachePut</h2><p><em><code>@CachePut</code></em> 与 <em><code>@Cacheable</code></em> 类似。相同点在于:</p><ul><li>被标注了 <em><code>@CachePut</code></em> 的方法的返回的结果会被缓存。<small>这和 <em><code>@Cacheable</code></em> 是一致的。</small></li></ul><p>不同点在于：</p><ul><li><em><code>@CachePut</code></em> 标注的方法没有从缓存中取数据的环节/功能 。</li></ul><p>简单来说，<em><code>@CachePut</code></em> 标注的方法只会向缓存中存数据，而从不从缓存中取数据。</p><p><em><code>@CachePut</code></em> 也是有 <em><code>value</code></em>、<em><code>key</code></em>、<em><code>condition</code></em> 三个属性，功能和使用方式和 @Cacheable 一致。</p><h2 id="cacheevict" tabindex="-1"><a class="header-anchor" href="#cacheevict" aria-hidden="true">#</a> @CacheEvict</h2><p><em><strong><code>@CacheEvict</code></strong></em> 注解标注于删除和修改方法上。</p><p>被标注了 <em><strong><code>@CacheEvict</code></strong></em> 注解的方法在执行结束后，Spring Cache 会删除该注解指定的缓存中的键值对。</p><p><em><strong><code>@CacheEvict</code></strong></em> 可以指定的属性有 <em><code>value</code></em>、<em><code>key</code></em>、<em><code>condition</code></em>、<em><code>allEntries</code></em> 和 <em><code>beforeInvocation</code></em>，其中 <em><code>value</code></em>、<em><code>key</code></em> 和 <em><code>condition</code></em> 的语义与 @Cacheable 对应的属性类似。即</p><ul><li><p><em><code>value</code></em> 表示清除操作是发生在哪些 Cache 上的（对应 Cache 的名称）；</p></li><li><p><em><code>key</code></em> 表示需要清除的是哪个 key，如未指定则会使用默认策略生成的 key；</p></li><li><p><em><code>condition</code></em> 表示清除操作发生的条件。</p></li></ul><h3 id="allentries-属性" tabindex="-1"><a class="header-anchor" href="#allentries-属性" aria-hidden="true">#</a> allEntries 属性</h3><p><em><code>allEntries</code></em> 是 boolean 类型，表示是否需要清除缓存中的所有元素，默认为 <em><code>false</code></em>，表示不需要。当指定了 <em><code>allEntries</code></em> 为 <em><code>true</code></em> 时，Spring Cache 将忽略指定的 <em><code>key</code></em>，删除 <em><code>value</code></em> 指定的缓存中的所有键值对。</p><h3 id="beforeinvocation-属性" tabindex="-1"><a class="header-anchor" href="#beforeinvocation-属性" aria-hidden="true">#</a> beforeInvocation 属性</h3><p>清除操作默认是在对应方法成功执行之后触发的，那么这就导致这样的一个情况：<em>方法如果因为抛出异常结束，而非正常结束，那么就不会触发清除操作</em> 。</p><p>使用 <em><code>beforeInvocation</code></em> 可以改变触发清除操作的时间，当我们指定该属性值为 <em><code>true</code></em> 时，Spring 会在 调用该方法之前清除缓存中的指定元素。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/beforeInvocation&quot;</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@CacheEvict</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">&quot;usersCache&quot;</span><span class="token punctuation">,</span> allEntries<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">,</span> beforeInvocation<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">beforeInvocation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;test beforeInvocation&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="spel-上下文数据" tabindex="-1"><a class="header-anchor" href="#spel-上下文数据" aria-hidden="true">#</a> SpEL 上下文数据</h2><p>Spring Cache 提供了一些供我们使用的 SpEL 上下文数据，下表直接摘自 Spring 官方文档：</p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/spring-boot/img/spring-cache-el-01.png" alt=""></p><h2 id="caching" tabindex="-1"><a class="header-anchor" href="#caching" aria-hidden="true">#</a> @Caching</h2><p>有时候我们可能组合多个 Cache 注解使用；比如用户新增成功后，我们要添加 id-user 键值对，添加 username-user 键值对，添加 email-user 键值对。此时就需要 <em><code>@Caching</code></em> 组合多个注解标签了。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Caching</span><span class="token punctuation">(</span>  \n    put <span class="token operator">=</span> <span class="token punctuation">{</span>  \n        <span class="token annotation punctuation">@CachePut</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span> key <span class="token operator">=</span> <span class="token string">&quot;#user.id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  \n        <span class="token annotation punctuation">@CachePut</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span> key <span class="token operator">=</span> <span class="token string">&quot;#user.username&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  \n        <span class="token annotation punctuation">@CachePut</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span> key <span class="token operator">=</span> <span class="token string">&quot;#user.email&quot;</span><span class="token punctuation">)</span>  \n    <span class="token punctuation">}</span>  \n<span class="token punctuation">)</span>  \n<span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>从 @Caching 注解源码可以看出，除了 <em><code>@Caching - @CachePut</code></em> 这种组合使用之外，它也可以结合 <em><code>@Cacheable</code></em> 和 <em><code>@CacheEvict</code></em> 使用：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Caching</span><span class="token punctuation">(</span>  \n  put <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@CachePut</span><span class="token punctuation">(</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token annotation punctuation">@CachePut</span><span class="token punctuation">(</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token annotation punctuation">@CachePut</span><span class="token punctuation">(</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">)</span>\n\n<span class="token annotation punctuation">@Caching</span><span class="token punctuation">(</span>  \n  cacheable <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">)</span>\n\n<span class="token annotation punctuation">@Caching</span><span class="token punctuation">(</span>  \n  evict <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@CacheEvict</span><span class="token punctuation">(</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token annotation punctuation">@CacheEvict</span><span class="token punctuation">(</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token annotation punctuation">@CacheEvict</span><span class="token punctuation">(</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div>',61),e={render:function(n,a){return t}}}}]);