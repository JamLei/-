"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[385],{73841:(t,e,s)=>{s.r(e),s.d(e,{data:()=>o});const o={key:"v-2105b8c3",path:"/git/003-%E6%92%A4%E9%94%80.html",title:"撤销",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"撤销场景一：代码实现思路有问题，我要放弃刚才的编码工作 {docsify-ignore}",slug:"撤销场景一-代码实现思路有问题-我要放弃刚才的编码工作-docsify-ignore",children:[]},{level:2,title:"撤销场景二：代码实现方案二更好，我要放弃代码实现方案一 {docsify-ignore}",slug:"撤销场景二-代码实现方案二更好-我要放弃代码实现方案一-docsify-ignore",children:[]},{level:2,title:"撤销场景三：任务取消，不管是方案几，都要放弃掉 {docsify-ignore}",slug:"撤销场景三-任务取消-不管是方案几-都要放弃掉-docsify-ignore",children:[]},{level:2,title:"提交到本地版本库后的撤销",slug:"提交到本地版本库后的撤销",children:[]}],filePathRelative:"git/003-撤销.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},5767:(t,e,s)=>{s.r(e),s.d(e,{default:()=>i});const o=(0,s(66252).uE)('<h1 id="撤销" tabindex="-1"><a class="header-anchor" href="#撤销" aria-hidden="true">#</a> 撤销</h1><h2 id="撤销场景一-代码实现思路有问题-我要放弃刚才的编码工作-docsify-ignore" tabindex="-1"><a class="header-anchor" href="#撤销场景一-代码实现思路有问题-我要放弃刚才的编码工作-docsify-ignore" aria-hidden="true">#</a> 撤销场景一：代码实现思路有问题，我要放弃刚才的编码工作 {docsify-ignore}</h2><p>比如，你准备着手完成某个分配给你的任务，你去编写这个任务的实现代码，<small>（在这个过程中你一致没有执行过 <strong>git stage</strong> 或 <strong>git add</strong> 命令）</small>，突然，你发现你的实现思路是错误的，那么你对于你的磁盘上的文件<small>（即，工作区中的文件）</small>的修改就是无效、无意义的，那么你需要对你做过的所有的工作做反向操作，放弃你的错误的工作成果。</p><p>如果撤销成功，那么撤销后，你的工作区、暂存区和版本库就重新一致了。</p><p>这种情况下，你只需要执行 <strong>git checkout -- &lt;文件名&gt;</strong> 命令即可。</p><p>意思就是，取本地版本库中的最新版本来覆盖工作目录中的内容。</p><p>这种情况下，你可以单独指定撤销某个文件的修改。</p><h2 id="撤销场景二-代码实现方案二更好-我要放弃代码实现方案一-docsify-ignore" tabindex="-1"><a class="header-anchor" href="#撤销场景二-代码实现方案二更好-我要放弃代码实现方案一-docsify-ignore" aria-hidden="true">#</a> 撤销场景二：代码实现方案二更好，我要放弃代码实现方案一 {docsify-ignore}</h2><p>比如，你已经完成了某个分配给你的任务，并通过 <strong>git stage</strong> 或 <strong>git add</strong> 命令将其提交到了暂存区。考虑到可能还有更好的方案，你没有执行 <strong>git commit</strong> 命令，将它提交到本地版本库。</p><p>经过第二轮的奋战,你在你的工作区中，完成了任务的第二种实现，通过比较，你觉得你后实现的方案二要好于之前的方案一，因此，你决定『放弃』暂存区的方案一。</p><p>这种情况下，你通过 <strong>git reset --mixed &lt;file&gt;...</strong> 命令能实现如下效果：</p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/git/img/git-reset-3.png" alt="git-reset-3"></p><p><strong>mixed</strong> 方式的 <strong>git reset</strong> 只会撤销你提交到暂存区的内容，而保留工作区的内容。</p><blockquote><p>keep working copy but reset index</p></blockquote><p>这里有 2 点值得注意的地方：</p><ol><li><p><strong>git reset --mixed</strong> 可以接指定的文件或目录作为参数，这种情况下只撤销这些文件和目录提交到暂存区的内容；它也可以不接参数，这样是撤销所有提价到暂存区的内容。</p></li><li><p>当你使用 <strong>git reset --mixed</strong> 时，Git 会提示你这条命令 <code>is deprecated</code>，它建议你用 <strong>git reset --</strong> 替代。<small>即，不要出现 <code>mixed</code> 单词。</small></p></li></ol><h2 id="撤销场景三-任务取消-不管是方案几-都要放弃掉-docsify-ignore" tabindex="-1"><a class="header-anchor" href="#撤销场景三-任务取消-不管是方案几-都要放弃掉-docsify-ignore" aria-hidden="true">#</a> 撤销场景三：任务取消，不管是方案几，都要放弃掉 {docsify-ignore}</h2><p><strong>git reset --hard</strong> 能实现如下效果：</p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/git/img/git-reset-4.png" alt="git-reset-4"></p><p><strong>hard</strong> 方式的 <strong>git reset</strong> 会同时撤销你对工作区的改动，以及你所提交到暂存区的内容。从而一步到位地回到『当初什么都没动过的样子』。</p><blockquote><p>discard all changes</p></blockquote><p>这里有 1 点值得注意的地方：</p><p><strong>git reset --hard</strong> 命令不能带参数。他直接就撤销了所有的变动。你无法指定『仅仅』撤销某个文件的变动。</p><hr><p>上一章曾经说过，Git 在监管你的文件时，如果发现你改动了你的文件或文件夹<small>（即，工作区的内容发生变动）</small>，它期望你作出『调整』，以保证『<strong>工作区和本地仓库的一致性</strong>』。</p><p>『提交变更』是调整手段之一，『<strong>撤销</strong>』则是另一种调整手段。</p><p>我们将『不一致』的情况由简单到复杂分为以下 2 种：</p><ol><li><p>未添加。即，未执行过 <strong>git stage</strong><small>（<strong>git add</strong>）</small>命令 。</p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/git/img/git-reset-1.png" alt="git-reset-1"></p></li><li><p>已添加，未提交。即，未执行过 <strong>git commit</strong> 命令。</p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/git/img/git-reset-2.png" alt="git-reset-2"></p></li></ol><h2 id="提交到本地版本库后的撤销" tabindex="-1"><a class="header-anchor" href="#提交到本地版本库后的撤销" aria-hidden="true">#</a> 提交到本地版本库后的撤销</h2><blockquote><p>理论上来说，提交之后就不应该撤销了。因为提交之后，工作区和本地仓库<small>（还包括暂存区）</small>的内容就一致了。在 Git 看来这种情况是正常的、理想中的、它所追求的状态。</p></blockquote><p>考虑到手滑的情况，如果你提交了变更，白纸黑字地记录在了 Git 的历史记录中，但是后又发现这个变更本不应该提交，这种情况下，还是需要撤销提交后的变更。</p><blockquote><p>你可能发现了 <strong>git reset</strong> 命令的选项，除了有 <strong>--mixed</strong> 和 <strong>--hard</strong> 之外，还有一种：<strong>--soft</strong> 。</p></blockquote><p><strong>git reset --soft</strong> 命令就可以用来实现撤销已提交的变更。</p><p><strong>git reset --soft</strong> 命令的本意是：移动 HEAD 到指定的提交上。而 HEAD 指针是你的分支的逻辑上的<small>（当前的）</small>终点。</p><p>例如：</p><p>你的 Git 仓库的历史记录历经演进，当前到了 v4 版本，在你历史记录的演进过程中，HEAD 指针也是持续前进的，当前它也指向了 v4 版本。</p><p>当你使用 <strong>git reset --soft HEAD^1</strong> 时，你就人为地将 HEAD 指针指向了你的上一个版本。即，你人为人为 v3 版本就是『最新版』。</p><p>最关键的在于：在你移动 HEAD 指针的过程中，你的工作区的文件的实际内容仍然停留在了 v4 版本的样子。<small>你的暂存区中的内容同时也是 v4 版。</small></p><p>简单来说，这就实现了『时间的回拨』，现在你仿佛回到了你当初开发 v4 版本的样子：</p><ul><li><p>你基于最新版本 v3 版作出了改动，并将改动添加到了暂存区。</p></li><li><p>此时，你正准备<small>（还没有）</small>提交你的变更。如果接下来你执行 <strong>git commit</strong> 那么你的最新版将从 v3 版演进到 v4 版本。</p></li></ul><blockquote><p>则就是你曾经作过的事情，你又回到了当初的那个临提交前时刻。</p></blockquote><p>到这里，你可以选择撤销、放弃你对工作目录作出的修改<small>（以及添加到暂存区的内容）</small>。这就相当于你回到了过去的那个『十字路口』选择放弃演进 v4 版本，从而让 Git 仍停留在 v3 版。</p><p>那么，因为你手滑而出现过的 v4 版本，就从 Git 的历史上消失了。</p><blockquote><p>如果愿意，你可以回到更久之前，让更多的曾经出现过的历史版本都消失。</p></blockquote><hr><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> log --graph\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>每一个 Commit 节点都会有一个父节点，HEAD 节点的父节点可以写成 <strong>HEAD^1</strong>，可简写成 <strong>HEAD^</strong> 。<small>另一种表示方式为 <strong>HEAD~1</strong> 。</small></p><blockquote><p>注意，当前节点的<em>爷爷节点</em> 表示为：<code>HEAD~2</code>，注意不能写成 <code>HEAD^2</code>（它表示另一种含义）。</p></blockquote>',48),i={render:function(t,e){return o}}}}]);