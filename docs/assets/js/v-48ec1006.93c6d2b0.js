"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[8096],{98442:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-48ec1006",path:"/spring-cloud/06-netflix-zuul.html",title:"服务网关（Zuul）",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"1. Zuul 快速入门",slug:"_1-zuul-快速入门",children:[{level:3,title:"1.1 创建服务提供者",slug:"_1-1-创建服务提供者",children:[]},{level:3,title:"1.2 创建 gateway 工程",slug:"_1-2-创建-gateway-工程",children:[]}]},{level:2,title:"2. Zuul 路由的映射规则配置",slug:"_2-zuul-路由的映射规则配置",children:[{level:3,title:"2.1 服务路由配置",slug:"_2-1-服务路由配置",children:[]},{level:3,title:"2.2 服务路由的默认规则",slug:"_2-2-服务路由的默认规则",children:[]}]},{level:2,title:"3. 路由截取",slug:"_3-路由截取",children:[]},{level:2,title:"4. Zuul 与 Hystrix 结合实现熔断",slug:"_4-zuul-与-hystrix-结合实现熔断",children:[]},{level:2,title:"5. Zuul 中的 Eager Load 配置",slug:"_5-zuul-中的-eager-load-配置",children:[]},{level:2,title:"6. 服务拦截",slug:"_6-服务拦截",children:[]},{level:2,title:"7. 禁用 zuul 过滤器",slug:"_7-禁用-zuul-过滤器",children:[]}],filePathRelative:"spring-cloud/06-netflix-zuul.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},89497:(n,s,a)=>{a.r(s),a.d(s,{default:()=>z});var e=a(66252);const p=(0,e.uE)('<h1 id="服务网关-zuul" tabindex="-1"><a class="header-anchor" href="#服务网关-zuul" aria-hidden="true">#</a> 服务网关（Zuul）</h1><pre><code>为什么需要使用微服务网关？\n</code></pre><p>微服务网关最重要的功能就是可以实现路由转发和过滤。在微服务架构体系中，一个项目会包含多个微服务，并且每个微服务会独立部署，提供不同的网络地址，客户端可以通过调用多个微服务接口完成一个用户请求，这样会带来以下几个明显问题：</p><ul><li>客户端多次请求不同的微服务，增加了客户端的复杂性。</li><li>每个服务都需要独立认证，过于繁琐、复杂。</li><li>存在跨域请求，在特殊场景下处理会比较复杂。</li><li>难以重构。</li></ul><p>通过网关就可以解决以上问题。</p><p>微服务网关时存在于客户端和服务端的中间层，客户端发来的所有请求都会先通过微服务网关再转发到真正的微服务进行处理。</p><p>Zuul 是 Netflix 的一个开源组件，是通过 Servlet 实现的。Zuul 作为 Spring Cloud 中的服务网关组件，能够通过与 Eureka 进行整合，将自身注册到 Ereka Server 中，与 Eureka、Ribbon、Hystrix 等进行组合，同时从 Eureka 中获得其它微服务实例的信息。</p><p>通过这样的设计，能够把网关和服务管理整合到一起，让 Zuul 可以获取到服务注册信息，结合 Ribbon、Hystrix 等更好地实现路由转发、负载均衡等功能。</p><h2 id="_1-zuul-快速入门" tabindex="-1"><a class="header-anchor" href="#_1-zuul-快速入门" aria-hidden="true">#</a> 1. Zuul 快速入门</h2><h3 id="_1-1-创建服务提供者" tabindex="-1"><a class="header-anchor" href="#_1-1-创建服务提供者" aria-hidden="true">#</a> 1.1 创建服务提供者</h3><p>提前准备两个被调服务：<code>eureka-client-department</code> 和 <code>eureka-client-employee</code> 。简单起见，他们不需要是完整的项目，只有 <strong>@Controller</strong> 对外返回简单的字符串数据即可。</p><p>将被调用服务注册到 Eureka Server 注册中心。</p><blockquote><p>在引入『网关』的概念之后，对于服务的访问就分为：『外部访问』和『内部访问』两种。外部访问都要经过网关，而内部访问则不需要经过网关。</p></blockquote><p>它们两个分别对外暴露如下 URI：</p><ul><li>eureka-client-department <ul><li>http://localhost:8080</li><li>http://localhost:8080/xxx</li></ul></li><li>eureka-client-employee <ul><li>http://localhost:9090</li><li>http://localhost:9090/xxx</li></ul></li></ul><p><strong>注意</strong> 为了为后续的一个知识点做铺垫，这里我们的 URI 中没有出现 <code>employee</code> 和 <code>department</code> 字样。</p><h3 id="_1-2-创建-gateway-工程" tabindex="-1"><a class="header-anchor" href="#_1-2-创建-gateway-工程" aria-hidden="true">#</a> 1.2 创建 gateway 工程</h3><p>新建 zuul 工程，命名为 <strong>zuul-gateway</strong> 。在 Spring Initializer 中引入三项依赖：<em>Spring Web</em>、<em>Eureka Discovery Client</em> 和 <strong>Zuul</strong> 。</p><blockquote><p>网关项目<small>（Zuul）</small>和注册中心项目<small>（Eureka Server）</small>一样，都是独立的项目，是独立运行的。而且，网关项目还是一个 Eureka Client 项目，它需要连接、注册到 Eureka Server 。</p></blockquote><p>创建 EurekaZuulApplication 启动类，并增加 <strong>@EnableZuulProxy</strong> 注解:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>\n<span class="token annotation punctuation">@EnableEurekaClient</span>\n<span class="token annotation punctuation">@EnableZuulProxy</span>  <span class="token comment">// 看这里，看这里，看这里。</span>\n<span class="token annotation punctuation">@EnableCircuitBreaker</span> <span class="token comment">// 开启熔断器功能</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EurekaZuulApplication</span> <span class="token punctuation">{</span>\n  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">EurekaZuulApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><ul><li><p>添加 bootstrap.yml 配置文件：</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">eureka</span><span class="token punctuation">:</span>\n  <span class="token key atrule">instance</span><span class="token punctuation">:</span>\n    <span class="token key atrule">instance-id</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>eureka.instance.hostname<span class="token punctuation">}</span><span class="token punctuation">:</span>$<span class="token punctuation">{</span>server.port<span class="token punctuation">}</span>\n    <span class="token key atrule">prefer-ip-address</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>\n    <span class="token key atrule">lease-renewal-interval-in-seconds</span><span class="token punctuation">:</span> <span class="token number">5</span>\n    <span class="token key atrule">lease-expiration-duration-in-seconds</span><span class="token punctuation">:</span> <span class="token number">10</span>\n  <span class="token key atrule">client</span><span class="token punctuation">:</span>\n    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>\n      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span>8761/eureka/\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div></li><li><p>添加 <strong>application.yml</strong> 配置文件:</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">server</span><span class="token punctuation">:</span>\n  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">7600</span>\n\n<span class="token key atrule">spring</span><span class="token punctuation">:</span>\n  <span class="token key atrule">application</span><span class="token punctuation">:</span>\n    <span class="token key atrule">name</span><span class="token punctuation">:</span> zuul<span class="token punctuation">-</span>gateway\n<span class="token key atrule">eureka</span><span class="token punctuation">:</span>\n  <span class="token key atrule">instance</span><span class="token punctuation">:</span>\n    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>spring.cloud.client.ip<span class="token punctuation">-</span>address<span class="token punctuation">}</span>\n<span class="token key atrule">zuul</span><span class="token punctuation">:</span>\n  <span class="token key atrule">routes</span><span class="token punctuation">:</span>\n    <span class="token key atrule">eureka-client-employee</span><span class="token punctuation">:</span> /employee/<span class="token important">**</span>\n    <span class="token key atrule">eureka-client-department</span><span class="token punctuation">:</span> /department/<span class="token important">**</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div></li></ul><p>这里的核心配置就是 <code>zuul.routes</code> 这段：</p><ul><li><p>当 zuul 收到以 <code>/employee</code> 开头的请求时，将转发至 eureka-client-employee 微服务，至于 eureka-client-employee 微服务的具体地址再哪，zuul 会自己去查从 Eureka Server 那里下载的注册表；</p></li><li><p>当 zuul 收到以 <code>/department</code> 开头的请求时，将转发至 eureka-client-department 微服务，至于 eureka-client-department 微服务的具体地址在哪，zuul 会自己去查从 Eureka Server 那里下载的注册表。</p></li></ul><p><strong>注意</strong> eureka-client-employee 和 eureka-client-department 对外暴露的路径中，不强求有 <code>/employee</code>、<code>/department</code> 。</p>',25),t=(0,e.Uk)("依次启动启动服务注册中心、服务提供者、服务网关，访问地址: "),l={href:"http://localhost:7600/employee/xxx",target:"_blank",rel:"noopener noreferrer"},o=(0,e.Uk)("http://localhost:7600/employee/xxx"),c=(0,e.Uk)(" 和 "),u={href:"http://localhost:7600/department/xxx",target:"_blank",rel:"noopener noreferrer"},r=(0,e.Uk)("http://localhost:7600/department/xxx"),i=(0,e.Uk)(" 测试。"),k=(0,e.uE)('<p>另外，当一个服务启动多个实例时，Zuul 服务网关会依次请求不同端口，以达到负载均衡的目的。</p><h2 id="_2-zuul-路由的映射规则配置" tabindex="-1"><a class="header-anchor" href="#_2-zuul-路由的映射规则配置" aria-hidden="true">#</a> 2. Zuul 路由的映射规则配置</h2><h3 id="_2-1-服务路由配置" tabindex="-1"><a class="header-anchor" href="#_2-1-服务路由配置" aria-hidden="true">#</a> 2.1 服务路由配置</h3><p>Zuul 通过与 Eureka 的整合，实现了对服务实例的自动化维护，即服务路由功能。</p><p>只需要通过 <code>zuul.routes.&lt;路由名&gt;.path</code> 和 <code>zuul.routes.&lt;路由名&gt;.serviceId</code> 的方式成对配置即可。例如：</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">zuul</span><span class="token punctuation">:</span>\n  <span class="token key atrule">routes</span><span class="token punctuation">:</span>\n    <span class="token comment"># eureka-client-employee: /employee/**</span>\n    <span class="token comment"># eureka-client-department: /department/**</span>\n    <span class="token key atrule">xxx</span><span class="token punctuation">:</span>\n      <span class="token key atrule">path</span><span class="token punctuation">:</span> /employee/<span class="token important">**</span>\n      <span class="token key atrule">service-id</span><span class="token punctuation">:</span> eureka<span class="token punctuation">-</span>client<span class="token punctuation">-</span>employee\n    <span class="token key atrule">yyy</span><span class="token punctuation">:</span>\n      <span class="token key atrule">path</span><span class="token punctuation">:</span> /department/<span class="token important">**</span>\n      <span class="token key atrule">service-id</span><span class="token punctuation">:</span> eureka<span class="token punctuation">-</span>client<span class="token punctuation">-</span>department\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>有 2 点需要指出：</p><ul><li><code>路由名</code> 是程序员自定义的名字，是一个任意内容。</li><li>上一章的写法，本质上是上述写法的简写。即，<code>zuul.routes.&lt;serviceId&gt;=&lt;path&gt;</code> 。</li></ul><h3 id="_2-2-服务路由的默认规则" tabindex="-1"><a class="header-anchor" href="#_2-2-服务路由的默认规则" aria-hidden="true">#</a> 2.2 服务路由的默认规则</h3><p>如果你有意<small>（或无意）</small>忘记了在网关项目的配置文件中配置 zuul 的路由规则，那么 zuul 也是可用的！</p><p>在这种情况下，zuul 使用的就是默认的路由规则：以服务的『<strong>服务名</strong>』作为前缀路径。即：</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">zuul</span><span class="token punctuation">:</span>\n  <span class="token key atrule">routes</span><span class="token punctuation">:</span>\n    <span class="token key atrule">xxx</span><span class="token punctuation">:</span>\n      <span class="token key atrule">path</span><span class="token punctuation">:</span> /eureka<span class="token punctuation">-</span>client<span class="token punctuation">-</span>employee/<span class="token important">**</span>\n      <span class="token key atrule">service-id</span><span class="token punctuation">:</span> eureka<span class="token punctuation">-</span>client<span class="token punctuation">-</span>employee\n    <span class="token key atrule">yyy</span><span class="token punctuation">:</span>\n      <span class="token key atrule">path</span><span class="token punctuation">:</span> /eureka<span class="token punctuation">-</span>client<span class="token punctuation">-</span>department/<span class="token important">**</span>\n      <span class="token key atrule">service-id</span><span class="token punctuation">:</span> eureka<span class="token punctuation">-</span>client<span class="token punctuation">-</span>department\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>即简写形式为：</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">zuul</span><span class="token punctuation">:</span>\n  <span class="token key atrule">routes</span><span class="token punctuation">:</span>\n    <span class="token key atrule">eureka-client-employee</span><span class="token punctuation">:</span> /employee<span class="token punctuation">-</span>client<span class="token punctuation">-</span>employee/<span class="token important">**</span>\n    <span class="token key atrule">eureka-client-department</span><span class="token punctuation">:</span> /employee<span class="token punctuation">-</span>client<span class="token punctuation">-</span>department/<span class="token important">**</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>如果不想使用默认的路由规则，就可以在配置文件中加入下列内容，即可关闭所有默认的路由规则：</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">zuul</span><span class="token punctuation">:</span>\n  <span class="token key atrule">ignored-services</span><span class="token punctuation">:</span> <span class="token string">&#39;*&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>在关闭默认的路由配置之后，此时需要在配置文件中逐个为需要路由的服务添加映射规则。</p><h2 id="_3-路由截取" tabindex="-1"><a class="header-anchor" href="#_3-路由截取" aria-hidden="true">#</a> 3. 路由截取</h2><p>默认情况下，zuul 会截取、删除掉你访问它<small>（zuul）</small>的 URI 的第一部分，而后再路由到目标服务。例如，</p><p>你访问的 zuul 的 URI 是 <code>/department/xxx</code>，根据路由配置，请求路由到部门服务后，触发的是 <code>/xxx</code> URI 。</p><p>如果你不需要这种默认的路由截取的功能，你可以通过 <code>strip-prefix</code> 配置项进行配置：</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">zuul</span><span class="token punctuation">:</span>\n  <span class="token key atrule">routes</span><span class="token punctuation">:</span>\n    <span class="token key atrule">xxx</span><span class="token punctuation">:</span>\n      <span class="token key atrule">path</span><span class="token punctuation">:</span> /employee/<span class="token important">**</span>\n      <span class="token key atrule">service-id</span><span class="token punctuation">:</span> eureka<span class="token punctuation">-</span>client<span class="token punctuation">-</span>employee\n      <span class="token key atrule">strip-prefix</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>\n    <span class="token key atrule">yyy</span><span class="token punctuation">:</span>\n      <span class="token key atrule">path</span><span class="token punctuation">:</span> /department/<span class="token important">**</span>\n      <span class="token key atrule">service-id</span><span class="token punctuation">:</span> eureka<span class="token punctuation">-</span>client<span class="token punctuation">-</span>department\n      <span class="token key atrule">strip-prefix</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>在 Zuul 中，路由表达式采用了 Ant 风格定义。</p><p>Ant 风格的路由表达式共 有 3 种通配符：</p><table><thead><tr><th style="text-align:left;">通配符</th><th style="text-align:left;">说明</th><th style="text-align:left;">举例</th></tr></thead><tbody><tr><td style="text-align:left;">?</td><td style="text-align:left;">匹配任意单个字符</td><td style="text-align:left;">/xxx/?</td></tr><tr><td style="text-align:left;">*</td><td style="text-align:left;">匹配任意数量的字符</td><td style="text-align:left;">/xxx/*</td></tr><tr><td style="text-align:left;">**</td><td style="text-align:left;">匹配任意数量的字符，<br>包括多级目录</td><td style="text-align:left;">/xxx/**</td></tr></tbody></table><hr><p>为了让用户更灵活地使用路由配置规则，zuul 还提供了一个忽略表达式参数 <code>zuul.ignored-patterns</code>，该参数用来设置不被网关进行路由的 RUL 表达式。</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">zuul</span><span class="token punctuation">:</span>\n  <span class="token key atrule">ignored-patterns</span><span class="token punctuation">:</span> /<span class="token important">**/xxx/**</span>\n  <span class="token key atrule">routes</span><span class="token punctuation">:</span>\n    <span class="token key atrule">eureka-client-employee</span><span class="token punctuation">:</span> /employee/<span class="token important">**</span>\n    <span class="token key atrule">eureka-client-department</span><span class="token punctuation">:</span> /department/<span class="token important">**</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="_4-zuul-与-hystrix-结合实现熔断" tabindex="-1"><a class="header-anchor" href="#_4-zuul-与-hystrix-结合实现熔断" aria-hidden="true">#</a> 4. Zuul 与 Hystrix 结合实现熔断</h2><p>Zuul 和 Hystrix 结合使用实现熔断功能时，需要完成 FallbackProvider 接口。该接口提供了 2 个方法：</p><ul><li><strong>.getRoute</strong> 方法：用于指定为哪个服务提供 fallback 功能。</li><li><strong>.fallbackResponse</strong> 方法：用于执行回退操作的具体逻辑。</li></ul><p>例如，我们为 service-id 为 <code>eureka-client-department</code> 的微服务<small>（在 zuul 网关处）</small>提供熔断 fallback 功能。</p><ul><li><p>实现 FallbackProvider 接口，并托管给 Spring IoC 容器</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DepartmentFallback</span> <span class="token keyword">implements</span> <span class="token class-name">FallbackProvider</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getRoute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 服务名 application name，而非路径</span>\n        <span class="token keyword">return</span> <span class="token string">&quot;eureka-client-department&quot;</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// return &quot;*&quot;; 对所有的路由服务生效</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">ClientHttpResponse</span> <span class="token function">fallbackResponse</span><span class="token punctuation">(</span><span class="token class-name">String</span> route<span class="token punctuation">,</span> <span class="token class-name">Throwable</span> cause<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 这里需要自定义 fallback 时的响应信息</span>\n        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DepartmentClientHttpResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div></li><li><p>实现 ClientHttpResponse 接口<small>（被 DepartmentFallback 使用）</small></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DepartmentClientHttpResponse</span> <span class="token keyword">implements</span> <span class="token class-name">ClientHttpResponse</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">HttpStatus</span> <span class="token function">getStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token class-name">HttpStatus</span><span class="token punctuation">.</span>OK<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getRawStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token function">getStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getStatusText</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token function">getStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getReasonPhrase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">InputStream</span> <span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n        <span class="token comment">// json-string</span>\n        <span class="token class-name">String</span> body <span class="token operator">=</span> <span class="token string">&quot;连接异常，请稍后重试&quot;</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>body<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token class-name">HttpHeaders</span> <span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">HttpHeaders</span> headers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">MediaType</span> type <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MediaType</span><span class="token punctuation">(</span><span class="token string">&quot;application&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;json&quot;</span><span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        headers<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> headers<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div></li></ul><h2 id="_5-zuul-中的-eager-load-配置" tabindex="-1"><a class="header-anchor" href="#_5-zuul-中的-eager-load-配置" aria-hidden="true">#</a> 5. Zuul 中的 Eager Load 配置</h2><p>zuul 的路由转发也是由通过 Ribbon 实现负载均衡的。默认情况下，客户端相关的 Bean 会延迟加载，在第一次调用微服务时，才会初始化这些对象。所以 zuul 无法在第一时间加载到 Ribbon 的负载均衡。</p><p>如果想提前加载 Ribbon 客户端，就可以在配置文件中开启饥饿加载<small>（即，立即加载）</small>：</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">zuul</span><span class="token punctuation">:</span>\n  <span class="token key atrule">ribbon</span><span class="token punctuation">:</span>\n    <span class="token key atrule">eager-load</span><span class="token punctuation">:</span>\n      <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>注意 <strong>eager-load</strong> 配置对于默认路由不起作用。因此，通常它都是结合 <code>忽略所有的默认路由</code> 一起使用的：<code>zuul.ignored-services=*</code> ，以达到 zuul 启动时就默认已经初始化各个路由所要转发的负载均衡对象。</p><h2 id="_6-服务拦截" tabindex="-1"><a class="header-anchor" href="#_6-服务拦截" aria-hidden="true">#</a> 6. 服务拦截</h2><p>前面我们提到，服务网关还有个作用就是接口的安全性校验，这个时候我们就需要通过 zuul 进行统一拦截，zuul 通过继承过滤器 <strong>ZuulFilter</strong> 进行处理，下面请看具体用法。</p><p>新建一个类 <em><strong>ApiFilter</strong></em> 并继承 <em><strong>ZuulFilter</strong></em>：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApiFilter</span> <span class="token keyword">extends</span> <span class="token class-name">ZuulFilter</span> <span class="token punctuation">{</span>\n\n  <span class="token annotation punctuation">@Override</span>\n  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">filterType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token string">&quot;pre&quot;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token annotation punctuation">@Override</span>\n  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">filterOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token annotation punctuation">@Override</span>\n  <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">shouldFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token annotation punctuation">@Override</span>\n  <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ZuulException</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 这里写校验代码。例如 JWT 的校验。</span>\n    <span class="token class-name">RequestContext</span> context <span class="token operator">=</span> <span class="token class-name">RequestContext</span><span class="token punctuation">.</span><span class="token function">getCurrentContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">HttpServletRequest</span> request <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">HttpServletResponse</span> response <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    response<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-type&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;text/html;charset=UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;请求进入过滤器，访问的 url：{}，访问的方法：{}&quot;</span><span class="token punctuation">,</span> \n                request<span class="token punctuation">.</span><span class="token function">getRequestURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> \n                request<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 根据需要获取请求中的参数</span>\n    <span class="token class-name">String</span> token <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">&quot;token&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">int</span> random <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>random <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;请求不通过过滤器&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">try</span> <span class="token punctuation">{</span>\n        response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;token is invalid.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n\n      <span class="token comment">// 根据业务逻辑，本次请求就【到此为止】，不要再向下传递了。</span>\n      context<span class="token punctuation">.</span><span class="token function">setSendZuulResponse</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      context<span class="token punctuation">.</span><span class="token function">setResponseStatusCode</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;请求通过过滤器&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br></div></div><p>其中:</p><ul><li><p><strong>filterType</strong> 为过滤类型，可选值有</p><ul><li>pre：在 Zuul 按照规则路由到下级服务之前执行。如果需要对请求进行预处理，比如鉴权、限流等，都应该考虑在此类 Filter 中实现。</li><li>route：这类 Filter 是 Zuul 路由动作的执行者。<small>我们通常不会实现这类路由。</small></li><li>post：这类 Filter 是在源服务返回结果或者异常信息发生后执行的，如果需要对返回信息做一些处理，则在此类 Filter 进行处理。</li><li>error：在整个路由环节中如果发生异常，则会进入 error Filter，可做全局异常处理。</li></ul></li><li><p><strong>filterOrdery</strong> 为过滤的顺序，如果有多个过滤器，则数字越小越先执行</p></li><li><p><strong>shouldFilter</strong> 表示是否过滤。它的返回值决定了该 Filter 是否执行，可以作为开关来使用。<small>不过，通常它都是返回 true，『开关』的问题有专门的配置项进行配置。</small></p></li><li><p><strong>run</strong> 为过滤器执行的具体逻辑，在这里可以做很多事情，比如:权限判断、合法性校验等。</p></li></ul>',44),b=(0,e.Uk)("启动 gateway，在浏览器输入地址: "),m={href:"http://localhost:8080/api/hello",target:"_blank",rel:"noopener noreferrer"},d=(0,e.Uk)("http://localhost:8080/api/hello"),y=(0,e.Uk)("，可以看到以下界面："),g=(0,e._)("div",{class:"language-text ext-text line-numbers-mode"},[(0,e._)("pre",{class:"language-text"},[(0,e._)("code",null,"token is invalid\n")]),(0,e._)("div",{class:"line-numbers"},[(0,e._)("span",{class:"line-number"},"1"),(0,e._)("br")])],-1),h=(0,e.Uk)("再通过浏览器输入地址: "),v={href:"http://localhost:8080/api/index?token=12345",target:"_blank",rel:"noopener noreferrer"},x=(0,e.Uk)("http://localhost:8080/api/index?token=12345"),f=(0,e.Uk)("，可以看到以下界面:"),w=(0,e.uE)('<div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>端口: 8762\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="_7-禁用-zuul-过滤器" tabindex="-1"><a class="header-anchor" href="#_7-禁用-zuul-过滤器" aria-hidden="true">#</a> 7. 禁用 zuul 过滤器</h2><p>Spring Cloud 默认为 zuul 编写并启动了一些过滤器，这些过滤器都放在 <code> org.springframework.cloud.netflix.zuul.filters</code> 包下。</p><p>如果需要禁用某个过滤器，只需要设置 <code>zuul.&lt;SimpleClassName&gt;.&lt;filterType&gt;.disabled=true</code>，就能禁用名为 <code>&lt;SimpleClassName&gt;</code> 的过滤器。例如:</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">zuul</span><span class="token punctuation">:</span>\n  <span class="token key atrule">JwtFilter</span><span class="token punctuation">:</span>\n    <span class="token key atrule">pre</span><span class="token punctuation">:</span>\n      <span class="token key atrule">disable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>上述配置就禁用掉了我们自定义的 JwtFilter 。</p>',6),z={render:function(n,s){const a=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.iD)(e.HY,null,[p,(0,e._)("p",null,[t,(0,e._)("a",l,[o,(0,e.Wm)(a)]),c,(0,e._)("a",u,[r,(0,e.Wm)(a)]),i]),k,(0,e._)("p",null,[b,(0,e._)("a",m,[d,(0,e.Wm)(a)]),y]),g,(0,e._)("p",null,[h,(0,e._)("a",v,[x,(0,e.Wm)(a)]),f]),w],64)}}}}]);