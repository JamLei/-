"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[8916],{61181:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-16d98ffe",path:"/spring-mvc/103-%E8%BD%AC%E5%8F%91%E5%92%8C%E9%87%8D%E5%AE%9A%E5%90%91.html",title:"转发和重定向",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"View Resolver",slug:"view-resolver",children:[]},{level:2,title:"Model 和 ModelAndView",slug:"model-和-modelandview",children:[]},{level:2,title:"转发、重定向",slug:"转发、重定向",children:[]},{level:2,title:"跳转异常页面（了解、自学）",slug:"跳转异常页面-了解、自学",children:[]}],filePathRelative:"spring-mvc/103-转发和重定向.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},92933:(n,s,a)=>{a.r(s),a.d(s,{default:()=>t});const e=(0,a(66252).uE)('<h1 id="转发和重定向" tabindex="-1"><a class="header-anchor" href="#转发和重定向" aria-hidden="true">#</a> 转发和重定向</h1><h2 id="view-resolver" tabindex="-1"><a class="header-anchor" href="#view-resolver" aria-hidden="true">#</a> View Resolver</h2><p>Spring MVC 中的视图解析器<small>（View Resolver）</small>负责解析视图。可以通过在配置文件中定义一个 View Resolver 来配置视图解析器：</p><ul><li><p>配置文件版：spring-web.xml</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token comment">&lt;!-- for jsp --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>prefix<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/WEB-INF/jsp/<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>suffix<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>.jsp<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li><li><p>代码配置版：SpringWebConfig.java</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>\n<span class="token keyword">public</span> <span class="token class-name">InternalResourceViewResolver</span> <span class="token function">internalResourceViewResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">InternalResourceViewResolver</span> viewResolver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InternalResourceViewResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    viewResolver<span class="token punctuation">.</span><span class="token function">setPrefix</span><span class="token punctuation">(</span><span class="token string">&quot;/WEB-INF/jsp/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    viewResolver<span class="token punctuation">.</span><span class="token function">setSuffix</span><span class="token punctuation">(</span><span class="token string">&quot;.jsp&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> viewResolver<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></li></ul><p>对于一个已知的『<strong>逻辑视图名</strong>』，<strong>DispatcherServlet</strong> 会将请求转发到 <code>prefix + view_name + suffix</code> 的页面。</p><p>补充：<strong>InternalResourceViewResolver</strong> 是最常用的视图解析器<small>（用于 .jsp 场景)</small>，但不是唯一的一个，Spring MVC 还有其他的视图解析器，例如：<strong>ThymeleafViewResolver</strong> 。</p><h2 id="model-和-modelandview" tabindex="-1"><a class="header-anchor" href="#model-和-modelandview" aria-hidden="true">#</a> Model 和 ModelAndView</h2><p>Spring MVC 提供了一个 <strong>Model</strong> 接口，它功能类似于 <em>java.util.Map</em> 接口。<strong>ModelMap</strong> 是 <strong>Model</strong> 接口的实现类。</p><p>如果 <em>Controller</em> 的处理方法中有 <em>Model</em> 或 <em>ModeMap</em> 作为参数，那么 Spring MVC 会<small>（在 Controller 方法外）</small>创建 <em>ModelMap</em> 对象，并传入 <em>Controller</em> 方法。<em>ModelMap</em> 对象将作为模型数据的存储容器。</p><blockquote><p>ModelMap 对象起到的就是一个『<strong>结果参数</strong>』的作用。</p></blockquote><p>在 <em>Controller</em> 方法中，我们可以从 <em>ModelMap</em> 对象中，存、取数据。</p><p>如果处理方法的返回结果是 <em>ModelAndView</em> ，则其既包含模型数据信息，也包含视图信息。</p><p>在 JSP 页面，可以直接通过 EL 表达式从模型对象中，取出模型数据以供页面展示。</p><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>Servlet 3.0 以下版本 EL 表达式功能默认时关闭的，记得要打开它。</p></div><h2 id="转发、重定向" tabindex="-1"><a class="header-anchor" href="#转发、重定向" aria-hidden="true">#</a> 转发、重定向</h2><p>如果你的 Controller 的『下一步』是跳转页面显示，那么你只需要在请求处理方法中返回逻辑视图名即可。</p><p>如果你的『下一步』操作是触发另一个 <strong>.do</strong><small>（或其它什么后缀）</small>，那么你需要使用转发和重定向。</p><p>Spring MVC 中实现转发和重定向非常简单：</p><ul><li><p>转发</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// 注意，</span>\n<span class="token keyword">return</span> <span class="token string">&quot;forward:&lt;url&gt;&quot;</span><span class="token punctuation">;</span>\n\n<span class="token comment">/* 或 */</span>\nmav<span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">&quot;forward:&lt;url&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">return</span> mav<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></li><li><p>重定向</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">return</span> <span class="token string">&quot;redirect:&lt;url&gt;&quot;</span><span class="token punctuation">;</span>\n<span class="token comment">/* 或 */</span>\nmav<span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">&quot;redirect:&lt;url&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">return</span> mav<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li></ul><p>这里有 2 点注意：</p><ol><li><p><strong>forward:</strong> 和 <strong>redirect:</strong> 后的 <strong><code>:</code></strong> 后面没有空格。</p></li><li><p>这里的 <strong>&lt;url&gt;</strong> 是『<strong>方法映射路径</strong>』，即 <strong>.do</strong> 一类，也就是你的另一个 <strong>@Controller</strong> 中的某个 <strong>@RequestMapping</strong> 中的那个值，<small>而不是逻辑视图名</small>。</p></li></ol><p>例如：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">return</span> <span class="token string">&quot;forward:/department/main.do&quot;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><hr><p>注意，<code>return &quot;main&quot;;</code> 和 <code>return &quot;forward:/main-page&quot;;</code> 的最终执行的『效果』是一样的，但是执行的过程，走过的『路径』并不同。</p><h2 id="跳转异常页面-了解、自学" tabindex="-1"><a class="header-anchor" href="#跳转异常页面-了解、自学" aria-hidden="true">#</a> 跳转异常页面（了解、自学）</h2><p><strong>全局异常处理后续专项讲解</strong></p><p>在 Webapp 中，一旦发生了异常可以层层上抛，直到抛给 Spring MVC 的 <strong>DispacherServlet</strong> 。而 <strong>DispacherServlet</strong> 可以根据开发者所配置的配置一个『<strong>全局异常处理器</strong>』，来决定跳转哪个页面，展示何种信息。</p><p>默认情况下，Spring MVC 所使用的异常处理器是：<strong>SimpleMappingExceptionResolver</strong> <small>（它是注解驱动帮我们配出来的那 19 个 JavaBean 之一）</small>，它所处理的效果正是我们当前所看到的内容：在一个临时页面上显示异常堆栈信息。</p><p>自定义的异常处理器需要实现 Spring MVC 提供的 <strong>HandlerExceptionResolver</strong> 接口，在其中 <strong>.resolveException</strong> 方法中可以根据自定义的逻辑返回 <strong>ModelAndView</strong> 对象，以决定跳转页面和展示信息。</p><p>使用自定义的异常处理器，需要在 Spring MVC 配置文件中做出配置：</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>customHandleException<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.hemiao.web.exception.MyHandlerExceptionResolver<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',32),t={render:function(n,s){return e}}}}]);