"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[1032],{82382:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-883b9d10",path:"/restful/02-SpringMVC.html",title:"Spring MVC 对 RESTful 的支持",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"PUT、PATCH 的参数问题",slug:"put、patch-的参数问题",children:[]},{level:2,title:"解决方案",slug:"解决方案",children:[{level:3,title:"方案一：使用特定 Filter 处理",slug:"方案一-使用特定-filter-处理",children:[]},{level:3,title:"方法二：使用 application/json 曲线救国",slug:"方法二-使用-application-json-曲线救国",children:[]}]},{level:2,title:"批量删除时传入多个 id 实现",slug:"批量删除时传入多个-id-实现",children:[{level:3,title:"方案一：@PathVariable",slug:"方案一-pathvariable",children:[]},{level:3,title:"方案二：利用 FormContentFilter 强用 @RequestParam",slug:"方案二-利用-formcontentfilter-强用-requestparam",children:[]}]},{level:2,title:"ResponseEntity<T> 类型",slug:"responseentity-t-类型",children:[]}],filePathRelative:"restful/02-SpringMVC.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},46580:(n,s,a)=>{a.r(s),a.d(s,{default:()=>p});const t=(0,a(66252).uE)('<h1 id="spring-mvc-对-restful-的支持" tabindex="-1"><a class="header-anchor" href="#spring-mvc-对-restful-的支持" aria-hidden="true">#</a> Spring MVC 对 RESTful 的支持</h1><h2 id="put、patch-的参数问题" tabindex="-1"><a class="header-anchor" href="#put、patch-的参数问题" aria-hidden="true">#</a> PUT、PATCH 的参数问题</h2><p>RESTful API 要求服务端能响应：get / post / put / delete 请求，以对应增删改查四大功能。对此 Spring MVC 都能支持，只需要在请求处理方法头上加上：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">&quot;/...&quot;</span><span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span>GET<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>或者使用：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/...&quot;</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/...&quot;</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@PutMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/...&quot;</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@DeleteMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/...&quot;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>就能表示该方法仅针对于特定请求方式作出响应。</p><p><strong>默认 Spring MVC 可以接受 PUT 请求和 PATCH 请求，但是，不接受 PUT 请求和 PATCH 请求发送来参数！！！</strong></p><p>Spring MVC 通过　<em><strong>@RequestParam</strong></em> 注解接收的请求只有两类：</p><ol><li><p>接收 GET 请求提交的参数。</p></li><li><p>接收 <code>application/x-www-form-urlencoded</code> 方式的 POST 请求提交的参数。</p></li><li><p><strong>不支持</strong> PUT、PATCH<small>（也包括 DELETE）</small>请求的参数的获取。</p></li></ol><p>当然，究其原因这个锅不该 Spring MVC 背：</p><ol><li><p>Servlet 的 <code>request.getParameter(&quot;&quot;);</code> 本身就只支持 GET 和 POST 方法传参。</p></li><li><p>Servlet API 中并没有 <code>doPatch()</code> 方法，更谈不上获取请求参数了。</p></li></ol><h2 id="解决方案" tabindex="-1"><a class="header-anchor" href="#解决方案" aria-hidden="true">#</a> 解决方案</h2><p>解决 PUT、PATCH 的参数传递的方案有两种：</p><h3 id="方案一-使用特定-filter-处理" tabindex="-1"><a class="header-anchor" href="#方案一-使用特定-filter-处理" aria-hidden="true">#</a> 方案一：使用特定 Filter 处理</h3><p>Spring MVC 从 <em><code>3.1</code></em> 开始提供了一个 Filter<small>（过滤器）</small>来解决这个传参问题。</p><ul><li><p>从 <em><code>3.1</code></em> 开始，提供了一个名为 <strong>HttpPutFormContentFilter</strong>；</p></li><li><p>从 <em><code>5.1</code></em> 开始，又提供了一个名为 <strong>FormContentFilter</strong> 的新的 Filter 来替代 <em>HttpPutFormContentFilter</em> 。which is the same but also handles DELETE` 。</p></li></ul><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">&gt;</span></span>\t<span class="token comment">&lt;!-- 默认 Spring MVC 无法接受 PUT 请求参数 --&gt;</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>httpPutFormContentFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">&gt;</span></span>\n      org.springframework.web.filter.HttpPutFormContentFilter\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>httpPutFormContentFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>   \n    <span class="token comment">&lt;!-- 注意匹配规则，这里是 /* ，表示拦截所有请求 --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>这两个过滤器会拦截所有的 PUT 和 PATCH 请求，将它们的底层处理方式转变为与 POST 请求相同的处理方式。这样你才可以在 PUT 和 PATCH 请求的处理方法中使用 @RequestParm 注解。<small>（否则，该注解使用无效）。</small></p><h3 id="方法二-使用-application-json-曲线救国" tabindex="-1"><a class="header-anchor" href="#方法二-使用-application-json-曲线救国" aria-hidden="true">#</a> 方法二：使用 application/json 曲线救国</h3><p>PUT 和 PATCH 的请求参数默认是以 <em><code>x-www-form-urlencoded</code></em> 的 <em><code>contentType</code></em> 来发送信息，即请求参数是放在 request 的 body 中，以 <code>aaa=xxx&amp;bbb=yyy&amp;ccc=zzz</code>。</p><p>在默认情况下，<strong>@ReqeustParam</strong> 是不会去获取它们在 body 中的请求参数的<small>（除非采用方案一，挂羊头卖狗肉）</small>。</p><p>方案二的本质就是索性 <strong>不使用 <code>@RequestParam</code> 获取参数，而使用 <code>@RequestBody</code></strong> 。</p><p>利用 <em><strong><code>application/json</code></strong></em> 方式传递请求参数，将参数以 JSON 格式字符串的形式放在 request 的 <em><strong>body</strong></em> 中，在 Controller 中再配合 <em><code>@RequestBody</code></em> 进行参数绑定，从而获取参数。<strong>绕开</strong> <em><strong>@RequestParam</strong></em> / <em><strong>request.getParam()</strong></em> 的限制。</p><h2 id="批量删除时传入多个-id-实现" tabindex="-1"><a class="header-anchor" href="#批量删除时传入多个-id-实现" aria-hidden="true">#</a> 批量删除时传入多个 id 实现</h2><h3 id="方案一-pathvariable" tabindex="-1"><a class="header-anchor" href="#方案一-pathvariable" aria-hidden="true">#</a> 方案一：@PathVariable</h3><p>接收用数组，调用 api 时，url 后面可跟多个 id，用逗号隔开，如：localhost/user/1234,1235,1236</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@DeleteMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/{id}&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token class-name">JsonData</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> userIds<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    userService<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>userIds<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token class-name">JsonData</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="方案二-利用-formcontentfilter-强用-requestparam" tabindex="-1"><a class="header-anchor" href="#方案二-利用-formcontentfilter-强用-requestparam" aria-hidden="true">#</a> 方案二：利用 FormContentFilter 强用 @RequestParam</h3><p>在使用 <strong>FormContentFilter</strong> 后，DELETE 请求的底层处理方式会被 Spring MVC 偷换成 POST 方式，这样，实际上就完全可以像 POST 请求那样传递多 id 。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@DeleteMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/delete&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ids<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;[{}]&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>ids<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>客户端发出的请求参数类似是：<code>?ids=1&amp;ids=2&amp;ids=3</code> 。</p><h2 id="responseentity-t-类型" tabindex="-1"><a class="header-anchor" href="#responseentity-t-类型" aria-hidden="true">#</a> ResponseEntity&lt;T&gt; 类型</h2><p>在有的 Rest-ful 风格的项目中，是通过设置响应状态码来告知请求方请求是否成功。这种情况下，自然就不能始终使用默认的 200 作为响应状态码，而是要手动设置一个符合逻辑的状态码。</p><p><strong>ResponseEntity</strong> 返回值类型能实现这样的功能。Spring MVC 中返回的 <strong>ResponseEntity</strong> 对象，一方面包含了 HTTP 响应信息，另一方面还包含返回给请求方的数据。</p><p>Spring MVC 发现你的方法返回的是 ResponseEntity 类型的对象时，它会做如下 2 件事情：</p><ol><li>将 ResponseEntity 对象中所设置的『<strong>响应状态码</strong>』信息作为本次 HTTP 请求地响应状态码。</li><li>将 ResponseEntity 对象中所设置的『<strong>返回数据</strong>』转换为 JSON 格式字符串后，携带在 HTTP 响应地 Body 中返回。</li></ol><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/test1&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Department</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n   <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Department</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span> \n   <span class="token keyword">return</span> <span class="token class-name">ResponseEntity</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 等同于</span>\n<span class="token comment">// return ResponseEntity.status(HttpStatus.OK).body(dept);</span>\n<span class="token punctuation">}</span>\n\n<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/test2&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token class-name">ResponseEntity</span><span class="token punctuation">.</span><span class="token function">badRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token string">&quot;...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 等同于</span>\n<span class="token comment">//  return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(...)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>再强调一遍，标注了 <strong>@ResponseEntity</strong> 注解，就不需要再标注 <strong>@ResponseBody</strong> 注解 。</p>',39),p={render:function(n,s){return t}}}}]);