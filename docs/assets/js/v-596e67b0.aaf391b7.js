"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[4319],{28635:(n,s,t)=>{t.r(s),t.d(s,{data:()=>e});const e={key:"v-596e67b0",path:"/git/102-%E5%90%88%E5%B9%B6%E5%88%86%E6%94%AF.html",title:"分支：合并分支",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[],filePathRelative:"git/102-合并分支.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},18692:(n,s,t)=>{t.r(s),t.d(s,{default:()=>a});const e=(0,t(66252).uE)('<h1 id="分支-合并分支" tabindex="-1"><a class="header-anchor" href="#分支-合并分支" aria-hidden="true">#</a> 分支：合并分支</h1><p>分支是 Git 的『拳头』特性，使用 <strong>git merge</strong> 命令进行分支合并是 Git 中最重要也是最常见的操作之一。</p><blockquote><p>相较于 Git，在 Subversion 中创建分支的代价比较大，会占用更多的空间，且创建、删除过程时间比较长。</p></blockquote><p>在大多数情况下，项目的分支都会被合并到主要分支。合并项目分支需要使用 <strong>git merge</strong> 命令：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> merge <span class="token operator">&lt;</span>另一个分支名<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><strong>该命令会把『另一个分支』合并到当前分支，合并后的 Commit 属于当前分支。</strong></p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/git/img/git_merge_1.png" alt="git_merge_1"></p><blockquote><p>如果合并后想反悔，那么可以执行之前所学的 <code>git reset --soft HEAD~1</code>，回到提交前夜，然后放弃提交。</p></blockquote><p>分支合并后，在当前分支上会产生一个新的 Commit 节点，也就是新的 HEAD 。这个节点与其他节点不同的是，它有两个父节点，分别表示为：<code>HEAD^1</code><small>（父节点）</small> 和 <code>HEAD^2</code><small>（母节点）</small> 。</p><p>Git 的设计目标之一就是为了能够让开发者之间的分布式协作变得尽可能容易一些。因此从很大程度上来说，merge 命令能自动对分支进行合并，完全不需要用户交互。</p><p>不过，有时候文件的冲突无法被 Git 自动化解决：</p><ul><li><p>编辑冲突：两个开发者对『<strong>同一行</strong>』代码做了不同修改的时候。</p></li><li><p>内容冲突：两个开发者对同一份代码的『<strong>不同部分</strong>』作出各自修改的时候。</p></li></ul><blockquote><p>当 Git 遇到了自身无法解决的冲突时，就会显示以下错误信息。</p><p>$ git merge a-branch Auto-merging foo.txt CONFLICT (content): Merge conflict in foo.txt Automatic merge failed; fix conflicts and then commit the result.</p></blockquote><p>此时，如果执行 <strong>git status</strong> 命令，会看到 git 提醒你，它无法完成自动合并，需要你手动进行编辑，并且要求你在编辑之后，执行 <strong>git commit</strong> 。</p><p>如果配置了 <strong>git mergetool</strong> 那么，在 Git 告知你合并冲突后，通过 <strong>git mergetool</strong> 命令启动 Merge Tool，来进行图形化界面的操作。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ <span class="token function">git</span> status\n\nOn branch master\nYou have unmerged paths.\n  <span class="token punctuation">(</span>fix conflicts and run <span class="token string">&quot;git commit&quot;</span><span class="token punctuation">)</span>\n\nUnmerged paths:\n  <span class="token punctuation">(</span>use <span class="token string">&quot;git add &lt;file&gt;...&quot;</span> to mark resolution<span class="token punctuation">)</span>\n \nboth modified:   foo.txt\n \nno changes added to commit <span class="token punctuation">(</span>use <span class="token string">&quot;git add&quot;</span> and/or <span class="token string">&quot;git commit -a&quot;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>冲突标志通常会描述两组修改。首先这些被修改的行在当前分支（HEAD）中的内容。接下来又列出了他们在另外一个分支的内容，例如：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>第一次修改\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\n第二次修改\n=======\n在a-branch上进行的修改\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; a-branch\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>手动解决完冲突以后，运行 <strong>git add</strong> 命令把相关文件添加到暂存区。继续执行 <strong>git merge --continue</strong> 命令编辑新生成的提交的 log 信息。然后 merge 完成。</p><p>在合并过程中，一个分支是另一个分支的祖先是很常见的，在这种情况下，Git 就只需要将分支指针前移即可，无需去创建合并提交。这被称为快速合并：<strong>--no-ff</strong> 。</p>',20),a={render:function(n,s){return e}}}}]);