"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[9227],{81622:(s,n,a)=>{a.r(n),a.d(n,{data:()=>e});const e={key:"v-06b2e2fd",path:"/mysql/05-%E7%B4%A2%E5%BC%95.html",title:"索引",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"索引的概念、优点及缺点",slug:"索引的概念、优点及缺点",children:[]},{level:2,title:"索引的分类",slug:"索引的分类",children:[]},{level:2,title:"索引的设计原则：",slug:"索引的设计原则",children:[]},{level:2,title:"索引的创建",slug:"索引的创建",children:[]}],filePathRelative:"mysql/05-索引.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},57013:(s,n,a)=>{a.r(n),a.d(n,{default:()=>l});const e=(0,a(66252).uE)('<h1 id="索引" tabindex="-1"><a class="header-anchor" href="#索引" aria-hidden="true">#</a> 索引</h1><h2 id="索引的概念、优点及缺点" tabindex="-1"><a class="header-anchor" href="#索引的概念、优点及缺点" aria-hidden="true">#</a> 索引的概念、优点及缺点</h2><ul><li>索引是创建在表上的，是对数据库表中 <strong>一列或多列</strong> 的值进行 <strong>排序</strong> 的一种结构。</li><li>索引可以提高查询速度。</li><li>通过索引，查询数据时不必读完记录的所有信息，而只是查询索引列。</li></ul><p>索引的缺点：</p><ul><li>创建和维护索引需要消耗时间，简单来说，就是牺牲增删改的时间，换查询时间。</li><li>索引需要占物理空间。</li></ul><h2 id="索引的分类" tabindex="-1"><a class="header-anchor" href="#索引的分类" aria-hidden="true">#</a> 索引的分类</h2><p>从 <strong>存储类型</strong> 上分，有两种索引类型：</p><ul><li>BTree 索引</li><li>Hash 索引</li></ul><p>InnoDB 和 MyISAM 引擎都支持的 BTree 索引。</p><p>除了类型分类法，索引还有另外的分类方式，被分为：</p><ul><li>普通索引。普通索引没有任何附加条件，可以创建在任何数据类型中。</li><li>唯一索引。唯一索引必须建在使用了 UNIQUE 修饰的列上。</li><li>全文索引。全文索引必须建在使用了 FULLTEXT 修饰的列上，而且该列的数据类型必须是 CAHR、VARCHAR 或 TEXT 类型。另外，MyISAM 支持全文索引，但 InnoDB 不支持。</li><li>空间索引。这种索引只能建立在空间数据类型的列上，且仅 MyISAM 引擎支持。极为罕见。</li></ul><p>索引可以建立在某个列上，这样的索引无论是上述何种类型，都称为<strong>单列索引</strong>。相对应的，如果是在表的多个列上创建一个索引，这种索引被称为<strong>多列索引</strong>，但是只有查询条件中使用了这些列的第一个时，索引才会被使用。</p><h2 id="索引的设计原则" tabindex="-1"><a class="header-anchor" href="#索引的设计原则" aria-hidden="true">#</a> 索引的设计原则：</h2><ul><li><small>如果有唯一性的列，必建唯一索引。</small></li><li><small>为常作为查询条件的字段建立索引。</small></li><li><small>为经常需要排序，分组和联合操作的字段建立索引。</small></li><li><small>限制索引数量。</small></li><li><small>即使删除不再使用，或很少使用的索引。</small></li><li><small>数据量小的表没有必要建立索引。</small></li></ul><h2 id="索引的创建" tabindex="-1"><a class="header-anchor" href="#索引的创建" aria-hidden="true">#</a> 索引的创建</h2><p>在建表时，对某列使用过 <strong>主键</strong>、<strong>外键</strong> 或 <strong>唯一</strong> 约束，MySQL 会默认在这些列上创建索引。</p><p>创建索引语句，在表声明的尾部。所用关键字可以是 INDEX，也可以是 KEY 。</p><ul><li><p>普通索引</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">INDEX</span> <span class="token punctuation">[</span>索引名<span class="token punctuation">]</span><span class="token punctuation">(</span>列名<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li><p>唯一索引：</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">UNIQUE</span> <span class="token keyword">INDEX</span> <span class="token punctuation">[</span>索引名<span class="token punctuation">]</span>（列名）\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li><p>全文索引：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>FULLTEXT INDEX [索引名]（列名）\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li><p>以上创建的都是单列索引，如果要创建多列索引则：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>INDEX [索引名]（列名1, 列名2, ...)\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li></ul><p>如果在建表语句之外，通过『修改』命令可以添加/删除索引。</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token operator">&lt;</span>表名<span class="token operator">&gt;</span> <span class="token keyword">ADD</span> <span class="token keyword">INDEX</span> <span class="token punctuation">[</span>索引名<span class="token punctuation">]</span><span class="token punctuation">(</span>列名<span class="token punctuation">,</span> <span class="token punctuation">[</span>列名<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token operator">&lt;</span>表名<span class="token operator">&gt;</span> <span class="token keyword">DROP</span> <span class="token keyword">INDEX</span> <span class="token operator">&lt;</span>索引名<span class="token operator">&gt;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> 索引名 <span class="token keyword">ON</span> 表<span class="token punctuation">(</span>列<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">DROP</span> <span class="token keyword">INDEX</span> 索引名 <span class="token keyword">ON</span> 表<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>',20),l={render:function(s,n){return e}}}}]);