"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[6453],{85869:(t,e,l)=>{l.r(e),l.d(e,{data:()=>d});const d={key:"v-57c041c7",path:"/mysql/99-%E4%B8%89%E8%8C%83%E5%BC%8F.html",title:"第一范式",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[],filePathRelative:"mysql/99-三范式.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},93225:(t,e,l)=>{l.r(e),l.d(e,{default:()=>a});const d=(0,l(66252).uE)('<p><span class="title">数据库三范式</span></p><p>什么是范式：简言之就是，范式就是规范的数据库的设计所尽量满足的科学的规范。</p><h1 id="第一范式" tabindex="-1"><a class="header-anchor" href="#第一范式" aria-hidden="true">#</a> 第一范式</h1><p>第一范式要求表的列的原子性，即数据库表里的字段都是不可分割的。</p><table><thead><tr><th style="text-align:left;">学号</th><th style="text-align:left;">姓名</th><th style="text-align:left;">年龄</th><th style="text-align:left;">年级专业</th></tr></thead><tbody><tr><td style="text-align:left;">201511216776</td><td style="text-align:left;">王玉伟</td><td style="text-align:left;">20</td><td style="text-align:left;">15 级软工</td></tr></tbody></table><p>以上 <code>年级专业</code> 就不具备原子性。逻辑上，应该是 <code>年级</code> 和 <code>专业</code> 单独成列。</p><h1 id="第二范式" tabindex="-1"><a class="header-anchor" href="#第二范式" aria-hidden="true">#</a> 第二范式</h1><p>在满足第一范式的前提下，第二范式要求表的其他非主键列必须完全依赖主键（不能依赖主键一部分，这是针对联合主键说的）</p><table><thead><tr><th style="text-align:left;">学号</th><th style="text-align:left;">姓名</th><th style="text-align:left;">年龄</th><th style="text-align:left;">课程名</th><th style="text-align:left;">课程号</th></tr></thead><tbody><tr><td style="text-align:left;">201511216776</td><td style="text-align:left;">张三</td><td style="text-align:left;">20</td><td style="text-align:left;">英语</td><td style="text-align:left;">20003</td></tr></tbody></table><p>以上的 <code>课程名</code> 是可以通过 <code>课程号</code> 『求』出来的。</p><p><small>更常见的例子有，一个员工表中，有 <code>工资列</code>、<code>奖金列</code> 和 <code>总工资列</code> 。这里，<code>总工资列</code> 就是多余的，因为总工资就是直接拿工资和奖级求和求出来的，完全没有必要再专门定义一列进行存储。</small></p><h1 id="第三范式" tabindex="-1"><a class="header-anchor" href="#第三范式" aria-hidden="true">#</a> 第三范式</h1><p>在满足第二范式的前提下，第三范式要求表的非主键列必须直接依赖于主键，而不能传递依赖。</p><table><thead><tr><th style="text-align:left;">学号</th><th style="text-align:left;">姓名</th><th style="text-align:left;">年龄</th><th style="text-align:left;">年级</th><th style="text-align:left;">学院</th><th style="text-align:left;">学院地址</th></tr></thead><tbody><tr><td style="text-align:left;">201511216776</td><td style="text-align:left;">王玉伟</td><td style="text-align:left;">20</td><td style="text-align:left;">15级</td><td style="text-align:left;">计算机学院</td><td style="text-align:left;">内蒙古呼和浩特市赛罕区</td></tr></tbody></table><p>以上的 <code>学院地址</code> 依赖于学院，学院地址应该在 <code>学院表</code> 中和 <code>学院 ID</code> 有依赖关系，而和学生表中的 <code>学号</code> 无关。</p>',15),a={render:function(t,e){return d}}}}]);