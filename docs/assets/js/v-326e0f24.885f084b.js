"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[1990],{51774:(t,n,e)=>{e.r(n),e.d(n,{data:()=>a});const a={key:"v-326e0f24",path:"/js/jquery.html",title:"jQuery",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"1. 简介",slug:"_1-简介",children:[]},{level:2,title:"2. 选择器",slug:"_2-选择器",children:[{level:3,title:"1. jQuery 对象",slug:"_1-jquery-对象",children:[]},{level:3,title:"2. 核心选择器",slug:"_2-核心选择器",children:[]},{level:3,title:"3. 属性选择器",slug:"_3-属性选择器",children:[]},{level:3,title:"4. 亲属关系选择器",slug:"_4-亲属关系选择器",children:[]},{level:3,title:"5. 表单选择器",slug:"_5-表单选择器",children:[]}]},{level:2,title:"3. 过滤器",slug:"_3-过滤器",children:[{level:3,title:"1. 索引过滤器",slug:"_1-索引过滤器",children:[]},{level:3,title:"2. 内容过滤器",slug:"_2-内容过滤器",children:[]},{level:3,title:"3. 身份过滤器",slug:"_3-身份过滤器",children:[]},{level:3,title:"4. 表单控件状态过滤器",slug:"_4-表单控件状态过滤器",children:[]},{level:3,title:"5. 可见性过滤器",slug:"_5-可见性过滤器",children:[]}]},{level:2,title:"4. 操作 DOM",slug:"_4-操作-dom",children:[{level:3,title:"1. 元素属性操作",slug:"_1-元素属性操作",children:[]},{level:3,title:"2. HTML 属性和 DOM 属性、attr 方法和 prop 方法",slug:"_2-html-属性和-dom-属性、attr-方法和-prop-方法",children:[]},{level:3,title:"3. 元素内容操作",slug:"_3-元素内容操作",children:[]},{level:3,title:"4. 元素样式操作",slug:"_4-元素样式操作",children:[]},{level:3,title:"5. 创建新的元素节点和插入新节点",slug:"_5-创建新的元素节点和插入新节点",children:[]},{level:3,title:"6. 删除和替换元素节点",slug:"_6-删除和替换元素节点",children:[]},{level:3,title:"7. 遍历结果集中的元素",slug:"_7-遍历结果集中的元素",children:[]}]},{level:2,title:"5. 事件",slug:"_5-事件",children:[{level:3,title:"1. jQuery 的 ready 事件的两种写法",slug:"_1-jquery-的-ready-事件的两种写法",children:[]},{level:3,title:"2. 绑定事件",slug:"_2-绑定事件",children:[]},{level:3,title:"3. 模拟鼠标悬停事件",slug:"_3-模拟鼠标悬停事件",children:[]},{level:3,title:"4. 移除事件",slug:"_4-移除事件",children:[]}]},{level:2,title:"6. 动画与特效",slug:"_6-动画与特效",children:[]}],filePathRelative:"js/jquery.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},58146:(t,n,e)=>{e.r(n),e.d(n,{default:()=>s});const a=(0,e(66252).uE)('<h1 id="jquery" tabindex="-1"><a class="header-anchor" href="#jquery" aria-hidden="true">#</a> jQuery</h1><h2 id="_1-简介" tabindex="-1"><a class="header-anchor" href="#_1-简介" aria-hidden="true">#</a> 1. 简介</h2><p>jQuery 作为 JavaScript 库诞生于 2006 年 1 月，由 Johon Resig 编写、发布。它虽然不是第一款 JavaScript 库，但是是当今最流行的 JavaScript 库。</p><p>jQuery 的核心功能包括：</p><ul><li>取得文档中的元素</li><li>修改页面的外观</li><li>改变文档的内容</li><li>响应用户的交互操作</li><li>为页面添加动态效果</li><li>无需刷新页面从服务器获取信息</li><li>简化常见的 JavaScript 任务</li></ul><p>jQuery 有 <code>1.x</code>、<code>2.x</code> 和 <code>3.x</code> 三大版本。它们的主要区别在于：</p><ul><li><p>1.x 版本支持低版本浏览器<small>（特别是 IE8）</small>；</p></li><li><p>2.x 版本则不支持低版本浏览器，从而『瘦身』很多；</p></li><li><p>3.x 版本更加激进，它需要利用新浏览器的 <strong>Strict Mode</strong> 特性和浏览器的新功能。</p></li></ul><h2 id="_2-选择器" tabindex="-1"><a class="header-anchor" href="#_2-选择器" aria-hidden="true">#</a> 2. 选择器</h2><p>jQuery 最强大、最吸引人的特性之一就是它能够简化在 DOM 中选择元素的任务。</p><p>jQuery 中可以通过与 CSS 相同的『<strong>选择器语法</strong>』来选中 DOM 树中的某个或某些元素节点。甚至 jQuery 还提供了它所特有的选择器。</p><h3 id="_1-jquery-对象" tabindex="-1"><a class="header-anchor" href="#_1-jquery-对象" aria-hidden="true">#</a> 1. jQuery 对象</h3><p>在使用 jQuery 选择器时，我们首先必须使用 <code>$()</code> 函数来包装我们的 CSS 规则。而 CSS 规则作为参数传递到 jQuery 对象内部后，再返回包含页面中对应元素的『<strong>jQuery 对象</strong>』。随后，我们就可以对这个获取到的 DOM 节点进行行为操作了。</p><p>通过使用 jQuery 对象可以实现和使用 DOM 对象同样的效果。但是 jQuery 对象和 DOM 对象是不同的。</p><p>jQuery 对象和 DOM 对象是不同的体系中的对象，两者的属性和方法『<strong>不能</strong><small>（不能、不能）</small>』混用。</p><ul><li><p>你获得的是 DOM 对象<small>（例如，<strong>getElementById</strong> 方法的返回值）</small>，接下来，你要使用的是 DOM 对象的属性和方法。</p></li><li><p>你获得的是 jQuery 对象<small>（例如，<code>$</code> 方法的返回值）</small>，接下来，你要使用的是 jQuery 对象的属性和方法。</p></li></ul><p>jQuery 对象是 DOM 对象的容器、集合。一个 jQuery 对象中包含着一个或多个 DOM 对象。如果有需要，你可以从中取出 DOM 对象。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>dom_obj <span class="token operator">=</span> jquery_obj<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>反过来，如果你手头拥有的是一个 DOM 对象，你也可以直接构造出一个 jQuery 对象，从而去使用 jQuery 体系中的属性和方法来简化代码。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>jqeury_obj <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span>dom_obj<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="_2-核心选择器" tabindex="-1"><a class="header-anchor" href="#_2-核心选择器" aria-hidden="true">#</a> 2. 核心选择器</h3><ul><li>类型选择器</li><li>id 选择器</li><li>class 选择器</li><li>选择器复合使用：<strong>与</strong> 和 <strong>或</strong></li></ul><p>例如：<code>$(&#39;#box&#39;).css(&#39;color&#39;, &#39;red&#39;);</code></p><p>元素的 id（应该）具有唯一性，但是元素的标签名和 class 不具备唯一性，所以在使用标签选择器和 class 选择器时，可能会匹配多个，此时可以使用 jQuery 自带的 <strong>length</strong> 属性和 <strong>size</strong> 方法来查看匹配的元素个数。</p><p>我们通过 jQuery 的各种选择符和方法取得的结果集合会被包装在 jQuery 对象中。通过 jQeury 对象实际地操作这些元素会非常简单。</p><h3 id="_3-属性选择器" tabindex="-1"><a class="header-anchor" href="#_3-属性选择器" aria-hidden="true">#</a> 3. 属性选择器</h3><table><thead><tr><th style="text-align:left;">选择器</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">[attr]</td><td style="text-align:left;">具有属性 attr 的元素</td></tr><tr><td style="text-align:left;">[attr=&#39;val&#39;]</td><td style="text-align:left;">属性 attr 的值为 val 的元素</td></tr><tr><td style="text-align:left;">[attr!=&#39;val&#39;]</td><td style="text-align:left;">属性 attr 的值不为 val 的元素</td></tr><tr><td style="text-align:left;">[attr^=&#39;val&#39;]</td><td style="text-align:left;">属性 attr 的值以 val 开头的元素</td></tr><tr><td style="text-align:left;">[attr$=&#39;val&#39;]</td><td style="text-align:left;">属性 attr 的值以 val 结尾的元素</td></tr><tr><td style="text-align:left;">[attr*=&#39;val&#39;]</td><td style="text-align:left;">属性 attr 的值含有 val 的元素</td></tr></tbody></table><h3 id="_4-亲属关系选择器" tabindex="-1"><a class="header-anchor" href="#_4-亲属关系选择器" aria-hidden="true">#</a> 4. 亲属关系选择器</h3><table><thead><tr><th style="text-align:left;">选择器</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">&lt;选择器1&gt; &lt;选择器2&gt;</td><td style="text-align:left;">在满足 &lt;选择器1&gt; 的元素的子孙元素中查找<br>满足 &lt;选择器2&gt; 的元素</td></tr><tr><td style="text-align:left;">&lt;选择器1&gt; &gt; &lt;选择器2&gt;</td><td style="text-align:left;">在满足 &lt;选择器1&gt; 的元素的子元素中查找<br>满足 &lt;选择器2&gt; 的元素</td></tr><tr><td style="text-align:left;">&lt;选择器1&gt; + &lt;选择器2&gt;</td><td style="text-align:left;">匹配一个元素的紧邻弟弟元素，<br>哥哥必须满足 &lt;选择器1&gt; ，<br>弟弟必须满足 &lt;选择器2&gt;</td></tr><tr><td style="text-align:left;">&lt;选择器1&gt; ~ &lt;选择器2&gt;</td><td style="text-align:left;">匹配一个元素的所有弟弟元素，<br>哥哥必须满足 &lt;选择器1&gt; ，<br>弟弟必须满足 &lt;选择器2&gt;</td></tr></tbody></table><h3 id="_5-表单选择器" tabindex="-1"><a class="header-anchor" href="#_5-表单选择器" aria-hidden="true">#</a> 5. 表单选择器</h3><p>相较于 CSS 选择器，表单选择器是 jQuery『多』出来选择器。</p><table><thead><tr><th style="text-align:left;">表单选择器</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">:input</td><td style="text-align:left;">选中所有的 input、textarea、select 元素</td></tr><tr><td style="text-align:left;">:text</td><td style="text-align:left;">选中所有的单行文本框</td></tr><tr><td style="text-align:left;">:password</td><td style="text-align:left;">选中所有的密码框</td></tr><tr><td style="text-align:left;">:radio</td><td style="text-align:left;">选中所有的单选按钮</td></tr><tr><td style="text-align:left;">:checkbox</td><td style="text-align:left;">选中所有的复选框</td></tr><tr><td style="text-align:left;">:submit</td><td style="text-align:left;">选中所有的提交按钮</td></tr><tr><td style="text-align:left;">:reset</td><td style="text-align:left;">选中所有的重置按钮</td></tr><tr><td style="text-align:left;">:button</td><td style="text-align:left;">选中所有的按钮</td></tr></tbody></table><h2 id="_3-过滤器" tabindex="-1"><a class="header-anchor" href="#_3-过滤器" aria-hidden="true">#</a> 3. 过滤器</h2><p>有些伪类、伪元素结合选择器使用起到了过滤结果集的作用，所以也称它们为『<strong>过滤器</strong>』，过滤器也叫筛选器 。</p><p>jQuery 提供了若干伪选择器以便于在页面上选取表单元素。</p><h3 id="_1-索引过滤器" tabindex="-1"><a class="header-anchor" href="#_1-索引过滤器" aria-hidden="true">#</a> 1. 索引过滤器</h3><table><thead><tr><th style="text-align:left;">索引过滤器</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">:first</td><td style="text-align:left;">过滤出原结果集中的第一个元素</td></tr><tr><td style="text-align:left;">:last</td><td style="text-align:left;">过滤出原结果集中的最后一个元素</td></tr><tr><td style="text-align:left;">:not(&lt;选择器&gt;)</td><td style="text-align:left;">过滤出原结果集中不符合 &lt;选择器&gt; 的元素</td></tr><tr><td style="text-align:left;">:even</td><td style="text-align:left;">过滤出原结果集中索引为偶数的元素，索引从 0 开始</td></tr><tr><td style="text-align:left;">:odd</td><td style="text-align:left;">过滤出原结果集中索引为奇数的元素，索引从 0 开始</td></tr><tr><td style="text-align:left;">:eq(index)</td><td style="text-align:left;">过滤出原结果集中索引为指定索引的元素，索引从 0 开始</td></tr><tr><td style="text-align:left;">:gt(index)</td><td style="text-align:left;">过滤出原结果集中索引大于指定索引的元素，索引从 0 开始</td></tr><tr><td style="text-align:left;">:lt(index)</td><td style="text-align:left;">过滤出原结果集中索引小于指定索引的元素，索引从 0 开始</td></tr></tbody></table><h3 id="_2-内容过滤器" tabindex="-1"><a class="header-anchor" href="#_2-内容过滤器" aria-hidden="true">#</a> 2. 内容过滤器</h3><table><thead><tr><th style="text-align:left;">内容过滤器</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">:contains(&lt;text&gt;)</td><td style="text-align:left;">过滤出原结果集中含有指定文本的元素</td></tr><tr><td style="text-align:left;">:has(&lt;选择器&gt;)</td><td style="text-align:left;">过滤出原结果集中含有符合 &lt;选择器&gt; 的子元素的元素</td></tr><tr><td style="text-align:left;">:empty</td><td style="text-align:left;">过滤出原结果集中不包含任何子元素或任何文本的元素</td></tr></tbody></table><h3 id="_3-身份过滤器" tabindex="-1"><a class="header-anchor" href="#_3-身份过滤器" aria-hidden="true">#</a> 3. 身份过滤器</h3><table><thead><tr><th style="text-align:left;">身份过滤器</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">:parent</td><td style="text-align:left;">过滤出原结果集中『具有父亲身份<small>（即含有子元素或文本）</small>』的元素</td></tr><tr><td style="text-align:left;">:first-child</td><td style="text-align:left;">过滤出原结果集中『具有长子身份』的元素</td></tr><tr><td style="text-align:left;">:last-child</td><td style="text-align:left;">过滤出原结果集中『具有幼子身份』的元素</td></tr><tr><td style="text-align:left;">:only-child</td><td style="text-align:left;">过滤出原结果集中『具有独生子身份』的元素</td></tr><tr><td style="text-align:left;">:nth-child(odd | even | N)</td><td style="text-align:left;">过滤出原结果集中『具有特定儿子身份的元素』的元素。<br>若传入数字，参数从 1 开始</td></tr></tbody></table><h3 id="_4-表单控件状态过滤器" tabindex="-1"><a class="header-anchor" href="#_4-表单控件状态过滤器" aria-hidden="true">#</a> 4. 表单控件状态过滤器</h3><table><thead><tr><th style="text-align:left;">表单控件状态过滤器</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">:enabled</td><td style="text-align:left;">过滤出原结果集中处于『可用状态』的表单控件</td></tr><tr><td style="text-align:left;">:disabled</td><td style="text-align:left;">过滤出原结果集中处于『不可用状态』的表单控件</td></tr><tr><td style="text-align:left;">:checked</td><td style="text-align:left;">过滤出原结果集中处于『选中状态』的表单控件</td></tr><tr><td style="text-align:left;">:selected</td><td style="text-align:left;">过滤出原结果集中『被选中』的 <code>&lt;option&gt;</code> 元素</td></tr></tbody></table><h3 id="_5-可见性过滤器" tabindex="-1"><a class="header-anchor" href="#_5-可见性过滤器" aria-hidden="true">#</a> 5. 可见性过滤器</h3><table><thead><tr><th style="text-align:left;">可见性过滤器</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">:hidden</td><td style="text-align:left;">过滤出原结果集中所有不可见元素。包括: <br> <code>visibility: hidden</code>、 <code>display: none</code>、<code>&lt;input type=&quot;hidden&quot;&gt;</code></td></tr><tr><td style="text-align:left;">:visible</td><td style="text-align:left;">过滤出原结果集中所有可见元素</td></tr></tbody></table><h2 id="_4-操作-dom" tabindex="-1"><a class="header-anchor" href="#_4-操作-dom" aria-hidden="true">#</a> 4. 操作 DOM</h2><h3 id="_1-元素属性操作" tabindex="-1"><a class="header-anchor" href="#_1-元素属性操作" aria-hidden="true">#</a> 1. 元素属性操作</h3><p><strong>attr</strong> 方法『<strong>同时兼具</strong>』对元素属性的『取值、设值』功能。</p><ul><li><p><strong>attr</strong> 方法当前操作是取值操作，还是设值操作？取决于方法的 <strong>参数细节</strong> 。</p></li><li><p>如果是『取值』操作，则该操作针对结果集中的『<strong>第一个</strong>』元素。</p></li><li><p>如果是『设值』操作，则该操作针对结果集中的『<strong>每一个</strong>』元素。</p></li></ul><blockquote><p>像 attr 方法这样，同时兼具取值和设值功能的常见方法还有： <strong>pro</strong> 方法、<strong>text</strong> 方法、<strong>html</strong> 方法、<strong>val</strong> 方法、<strong>css</strong> 方法。</p><p>关于它们的『取值』和『设值』、『第一个』和『每一个』问题后续不再重复讲解。</p></blockquote><p><strong>attr</strong> 方法常见形式:</p><ul><li>取值：<strong>.attr( 属性名 )</strong></li><li>设值：<strong>.attr( 属性名, 属性值 )</strong></li><li>设值：<strong>.attr( {属性名:属性值, 属性名:属性值, ...} )</strong></li></ul><p>通过 <strong>removeAttr(属性名)</strong> 方法可以删除元素的指定属性，该操作针对结果集中的『<strong>每一个</strong>』元素。</p><blockquote><p>注意，此处的『<strong>属性</strong>』指的是 HTML 属性<small>（Attribute）</small>。</p></blockquote><h3 id="_2-html-属性和-dom-属性、attr-方法和-prop-方法" tabindex="-1"><a class="header-anchor" href="#_2-html-属性和-dom-属性、attr-方法和-prop-方法" aria-hidden="true">#</a> 2. HTML 属性和 DOM 属性、attr 方法和 prop 方法</h3><ul><li><p>Attribute 是指 HTML 中的属性；</p></li><li><p>Property 是指 DOM 中的属性。<strong>优先考虑使用</strong>。</p></li></ul><p>由于页面上的元素，和内存中的元素对象<small>（DOM 对象）</small>是一一对应的。因此，大多数情况下，HTML 中的 <strong>attribute</strong>，DOM 中都有与之对应的 <strong>property</strong> 。</p><p>例如：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;#li1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;#li1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>但是两者也有不一样的地方：</p><h4 id="_2-1-区别一-有可能没有" tabindex="-1"><a class="header-anchor" href="#_2-1-区别一-有可能没有" aria-hidden="true">#</a> 2.1 区别一：有可能没有</h4><p>有些 DOM 中有的 property，HTML 中没有这样的 attribute</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;#li1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">&#39;nodeName&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;#li1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">&#39;nodeName&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="_2-2-区别二-数据类型不一致" tabindex="-1"><a class="header-anchor" href="#_2-2-区别二-数据类型不一致" aria-hidden="true">#</a> 2.2 区别二：数据类型不一致</h4><p>虽然有，但是有些 DOM 中的与之对应的 property 的值的类型却不一样</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;input&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">&#39;disabled&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;input&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">&#39;disabled&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>总的来说，在 JavaScript 中『<strong>优先考虑使用 Property</strong>』。</p><h3 id="_3-元素内容操作" tabindex="-1"><a class="header-anchor" href="#_3-元素内容操作" aria-hidden="true">#</a> 3. 元素内容操作</h3><p><strong>html</strong> 方法和 <strong>text</strong> 方法是对元素的 html 内容和文本内容进行读写操作。</p><ul><li>取值：<code>.html()</code> 、 <code>.text()</code></li><li>设值：<code>.html(内容)</code> 、 <code>.text(内容)</code></li></ul><p><strong>.html</strong> 方法获取和设置的是 HTML 内容，例如：<code>&lt;strong&gt;好好学习&lt;/strong&gt;</code>；<strong>.text</strong> 方法获取和设置的是纯文本内容，例如：<code>好好学习</code> 。</p><p>对于表单元素，jQuery 提供了 <strong>.val</strong> 方法获得表单元素的值进行读写。</p><ul><li><p>取值：<code>.val()</code></p></li><li><p>设值：<code>.val(新值)</code></p></li></ul><h3 id="_4-元素样式操作" tabindex="-1"><a class="header-anchor" href="#_4-元素样式操作" aria-hidden="true">#</a> 4. 元素样式操作</h3><p>通过 <strong>.css</strong> 方法可以对样式的内容进行 <strong>获取</strong>、<strong>设置</strong> 操作。</p><ul><li>取值：<em>.css( 属性名 )</em></li><li>设值：<em>.css( 属性名, 属性值 )</em></li></ul><p>另外，对于元素的 <strong>class</strong> 属性的读写，jQuery 专门提供了方法：</p><ul><li><p><strong>.addClass(class属性值)</strong> 为元素的 class 属性<strong>追加</strong><small>（追加、追加）</small>值。</p></li><li><p><strong>.removeClass(class属性值)</strong> 为元素移除指定的 class。</p></li></ul><p><strong>.addClass</strong> 方法和 <strong>.removeClass</strong> 方法都是对选中的『<strong>每一个</strong>』元素生效。</p><h3 id="_5-创建新的元素节点和插入新节点" tabindex="-1"><a class="header-anchor" href="#_5-创建新的元素节点和插入新节点" aria-hidden="true">#</a> 5. 创建新的元素节点和插入新节点</h3><p>通过 <strong>$(html)</strong> 即可创建一个元素节点<small>（确切地说是一个 jQuery 对象）</small>，再通过上述方法可以为该<small>（新）</small>节点添加内容、属性、CSS 样式。</p><p>添加节点从『<strong>添加角度</strong>』和『<strong>添加位置</strong>』两个条件来看分为四种：</p><table><thead><tr><th style="text-align:left;">父子添加</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">A.append(B)</td><td style="text-align:left;">在 A 元素的末尾添加 B 元素。添加后，A 是父元素，B 是其最后子元素</td></tr><tr><td style="text-align:left;">A.appendTo(B)</td><td style="text-align:left;">将 A 元素添加至 B 元素某位。添加后，B 是父元素，A 是其最后子元素</td></tr><tr><td style="text-align:left;">A.prepend(B)</td><td style="text-align:left;">在 A 元素的前部添加 B 元素。添加后，A 是父元素，B 是其第一子元素</td></tr><tr><td style="text-align:left;">A.prependTo(B)</td><td style="text-align:left;">将 A 元素添加至 B 元素前部。添加后，B 是父元素，A 是其第一子元素</td></tr></tbody></table><table><thead><tr><th style="text-align:left;">兄弟添加</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">A.after(B)</td><td style="text-align:left;">在 A 元素的后面添加 B 元素。添加后，A 是兄元素，B 是其弟元素</td></tr><tr><td style="text-align:left;">A.insertAfter(B)</td><td style="text-align:left;">将 A 元素添加到B元素的后面。添加后，B 是兄元素，A 是其弟元素</td></tr><tr><td style="text-align:left;">A.before(B)</td><td style="text-align:left;">在 A 元素的前面添加 B 元素。添加后，B 是兄元素，A 是其弟元素</td></tr><tr><td style="text-align:left;">A.insertBefore(B)</td><td style="text-align:left;">将 A 元素添加到 B 元素的前面。添加后，A 是兄元素，B 是其弟元素</td></tr></tbody></table><p><strong>.clone</strong> 方法是以复制的方式创建一个新的元素节点。默认情况下是不复制源元素的事件处理方法的。<strong>.clone(true)</strong> 表示也复制其事件处理方法。</p><h3 id="_6-删除和替换元素节点" tabindex="-1"><a class="header-anchor" href="#_6-删除和替换元素节点" aria-hidden="true">#</a> 6. 删除和替换元素节点</h3><p><strong>.remove</strong> 方法将会从页面上删除结果集中的『<strong>每一个</strong>』元素。</p><p><strong>.empty</strong> 方法删除的并非元素本身，而是清空元素的所有『<strong>子元素</strong>』<small>（包括文本内容）</small>，但本元素仍存在。</p><p>通过 <strong>.replaceWith</strong> 方法可以将结果集中的『<strong>每一个</strong>』元素替换成参数指定的 HTML 或 DOM 元素。</p><h3 id="_7-遍历结果集中的元素" tabindex="-1"><a class="header-anchor" href="#_7-遍历结果集中的元素" aria-hidden="true">#</a> 7. 遍历结果集中的元素</h3><p>jQuery 提供了 <strong>.each</strong> 方法简化了 for 循环遍历结果集。该方法要求传入一个函数，jQuery 会循环调用这个函数。</p><p>该函数每一轮循环中有 <strong>this</strong> 关键字可用，它代表着本轮循环所处理的 DOM 对象。另外，该函数还接受一个形参 index，此参数为遍历的当前元素的下标索引，从 0 开始。</p><h2 id="_5-事件" tabindex="-1"><a class="header-anchor" href="#_5-事件" aria-hidden="true">#</a> 5. 事件</h2><h3 id="_1-jquery-的-ready-事件的两种写法" tabindex="-1"><a class="header-anchor" href="#_1-jquery-的-ready-事件的两种写法" aria-hidden="true">#</a> 1. jQuery 的 ready 事件的两种写法</h3><p><code>$(document).ready()</code> 事件处理程序可以用来响应网页的加载（load）事件。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token operator">...</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token operator">...</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>表面上看起来，<code>$(document).ready()</code> 实现了和 window.onload 同样的效果，但是两者有些许小区别：</p><ul><li><p>触发时机不同</p><ul><li><p>window.onload 触发时，表示浏览器接受/下载了所有文档（例如，包括图片）；</p></li><li><p>而 <code>$(document).ready()</code> 触发时，表示 DOM 完全就绪并可用，此时页面所关联的文件并不意味下载完毕。</p></li></ul></li><li><p>调用次数不同</p><ul><li><p>一个页面上只能执行一次 window.onload；</p></li><li><p>但可以执行多个 <code>$(document).ready()</code></p></li></ul></li></ul><h3 id="_2-绑定事件" tabindex="-1"><a class="header-anchor" href="#_2-绑定事件" aria-hidden="true">#</a> 2. 绑定事件</h3><p>jQuery 还提供了 <strong>.bind()</strong> 方法进行事件的绑定。<strong>.bind()</strong> 方法需要两个必要的参数，一个是事件名称，另一个是处理函数。</p><p>除此之外，jQuery 为 <strong>.bind()</strong> 方法提供了简化方式： <strong>xxx()</strong> 方法。 对于 <strong>xxx</strong> 事件直接使用 <strong>.xxx()</strong> 绑定方法，例如: <strong>.click()</strong> 方法。这样的绑定方法要求传入一个函数，表示当指定元素上发生此事件时，就执行所传入的函数。</p><h3 id="_3-模拟鼠标悬停事件" tabindex="-1"><a class="header-anchor" href="#_3-模拟鼠标悬停事件" aria-hidden="true">#</a> 3. 模拟鼠标悬停事件</h3><p><strong>hover()</strong> 方法模拟了鼠标悬停事件，当进入元素区域时，执行一个参数 function，离开元素区域时执行另一个参数 function 。</p><h3 id="_4-移除事件" tabindex="-1"><a class="header-anchor" href="#_4-移除事件" aria-hidden="true">#</a> 4. 移除事件</h3><p>在 jQuery 中，可以通过 <strong>unbind()</strong> 方法可以移除绑定的所有事件或指定某一个事件，它是 <strong>bind()</strong> 操作的反向操作。</p><p>如果没有参数，则删除所有绑定事件。如果提供事件类型作为参数，则只删除该类型的绑定事件。如果还有第二个参数 function，则只移除绑定指定的函数。</p><h2 id="_6-动画与特效" tabindex="-1"><a class="header-anchor" href="#_6-动画与特效" aria-hidden="true">#</a> 6. 动画与特效</h2><p>jQuery 中的 <strong>show()</strong> 与 <strong>hide()</strong> 方法，不仅可以实现“无动画”版的显示与隐藏，还可以完成有动画效果的显示和隐藏，只需要在为方法传入表示动画持续时间（或 <strong>slow</strong> | <strong>normal</strong> | <strong>fase</strong>）的参数 。</p><p><strong>slideDown()</strong> 和 <strong>slideUp()</strong> 方法实现了元素滑动的效果 。</p><p><strong>fadeIn()</strong> 和 <strong>faseOut()</strong> 方法实现了淡入淡出效果</p>',109),s={render:function(t,n){return a}}}}]);