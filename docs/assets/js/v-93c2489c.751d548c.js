"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[1828],{24364:(e,a,n)=>{n.r(a),n.d(a,{data:()=>t});const t={key:"v-93c2489c",path:"/rabbitmq/01-%E7%AE%80%E4%BB%8B.html",title:"RabbitMQ 简介",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"1. 简介",slug:"_1-简介",children:[]},{level:2,title:"2. 路由",slug:"_2-路由",children:[{level:3,title:"Direct 交换器",slug:"direct-交换器",children:[]},{level:3,title:"Topic 交换器",slug:"topic-交换器",children:[]},{level:3,title:"Fanout 交换器",slug:"fanout-交换器",children:[]},{level:3,title:"Headers 交换器",slug:"headers-交换器",children:[]}]},{level:2,title:"3. 默认交换机",slug:"_3-默认交换机",children:[]},{level:2,title:"3. 虚拟主机（了解、自学）",slug:"_3-虚拟主机-了解、自学",children:[]},{level:2,title:"4. Connection 和 Channel（了解、自学）",slug:"_4-connection-和-channel-了解、自学",children:[]}],filePathRelative:"rabbitmq/01-简介.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},74599:(e,a,n)=>{n.r(a),n.d(a,{default:()=>i});const t=(0,n(66252).uE)('<h1 id="rabbitmq-简介" tabindex="-1"><a class="header-anchor" href="#rabbitmq-简介" aria-hidden="true">#</a> RabbitMQ 简介</h1><h2 id="_1-简介" tabindex="-1"><a class="header-anchor" href="#_1-简介" aria-hidden="true">#</a> 1. 简介</h2><p>RabbitMQ 是一个由 Erlang 语言开发的基于 AMQP 标准的开源实现，同时它也是最常见的 AMQP 实现。</p><p>对于 Broker、Producer、Consumer 等基本概念，AMQP 标准和 JMS 标准是一样的。</p><p>不同的是 AMQP 规范相较于 JMS 规范『多』了 <strong>Exchange</strong> 和 <strong>Binding</strong> 两个概念，这两个概念组成了 AMQP 规范的特色功能：路由。</p><h2 id="_2-路由" tabindex="-1"><a class="header-anchor" href="#_2-路由" aria-hidden="true">#</a> 2. 路由</h2><p>消息的生产者需要把消息发布到 <strong>Exchange</strong> 上，消息最终到达队列并被消费者接收，而 <strong>Binding</strong> 决定交换器上的消息应该被发送到哪个队列中。</p><p>不同类型的交换器分发消息<small>（至队列）</small>的策略也不同，目前交换器有 4 种类型，除 <em>Headers</em> 类型功能有重复且性能较差，需要了解掌握的有：<strong>Direct</strong>、<strong>Fanout</strong>、<strong>Topic</strong> 。</p><table><thead><tr><th style="text-align:left;">类型</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">Direct</td><td style="text-align:left;">其类型的行为是 <code>先匹配、再投送</code>，即在绑定时设定一个 <code>routing_key</code>，消息的 <code>routing_key</code> 与之匹配时，才会被交换器投送到所绑定的队列中去。</td></tr><tr><td style="text-align:left;">Topic</td><td style="text-align:left;">按规则转发消息（最灵活）。</td></tr><tr><td style="text-align:left;">Headers</td><td style="text-align:left;">设置 <code>header attribute</code> 参数类型的交换机。</td></tr><tr><td style="text-align:left;">Fanout</td><td style="text-align:left;">转发消息到所有绑定队列。</td></tr></tbody></table><h3 id="direct-交换器" tabindex="-1"><a class="header-anchor" href="#direct-交换器" aria-hidden="true">#</a> Direct 交换器</h3><p>Direct 类型是 RabbitMQ 默认的交换机类型<small>（也是最简单的模式）</small>：根据 key 全文匹配去寻找队列。</p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/rabbitmq/img/rabbitmq-exchange-direct-01.png" alt="rabbitmq-exchange-direct-01"></p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/rabbitmq/img/rabbitmq-exchange-direct-02.png" alt="rabbitmq-exchange-direct-02"></p><p>以上图为例：</p><ul><li><p>X 和 Q1 的 binding key 是 <code>orange</code>；</p></li><li><p>X 和 Q2 有 2 个 binding key，分别是 <code>black</code> 和 <code>green</code> 。</p></li><li><p>当 P 发送至 X 的消息中的路由键与这 3 个 binding-key 中的某一个对应上时，那么消息就被路由器『转交』到了对应的队列<small>（交给了 <code>队列1</code>，从而 <code>消费者1</code> 收到了消息）</small>。</p></li></ul><p>如果消息种的路由键<small>（routing key）</small>和 Binding 中的绑定键<small>（binding key）</small>一致，交换器就将消息发送到对应的队列中。路由键与队列名称要完全匹配。</p><p>相当于 SQL 中的 <code>=</code> 规则。</p><h3 id="topic-交换器" tabindex="-1"><a class="header-anchor" href="#topic-交换器" aria-hidden="true">#</a> Topic 交换器</h3><p><strong>Topic</strong> 类型交换机相当于是 <strong>Direct</strong> 类型的升级版：<strong>它允许使用通配符</strong>。</p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/rabbitmq/img/rabbitmq-exchange-topic-01.png" alt="rabbitmq-exchange-topic-01"></p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/rabbitmq/img/rabbitmq-exchange-topic-02.png" alt="rabbitmq-exchange-topic-01"></p><p>Topic 类型的交换机对于 Binding Key 的设置有一定的要求：</p><p>以上图为例：</p><ul><li>P 发送到 X 的消息的 binding-key 符合 <code>xxx.orange.xxx</code> 规则，那么，该消息会被 X 转交给 Q1 。</li><li>P 发送到 X 的消息的 binding-key 符合 <code>xxx.xxx.rabbit</code> 规则，那么，该消息会被 X 转交给 Q2 。</li><li>P 发送到 X 的消息的 binding-key 符合 <code>lazy.xxx.xxx.xxx....</code> 规则，那么，该消息会被 X 转交给 Q2 。</li></ul><h3 id="fanout-交换器" tabindex="-1"><a class="header-anchor" href="#fanout-交换器" aria-hidden="true">#</a> Fanout 交换器</h3><p>Fanout 就是消息广播，完全不考虑 key 的情况，交换器 X 将它收到的所有消息发送给所有与之绑定的消息队列<small>（无一例外）</small>。</p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/rabbitmq/img/rabbitmq-exchange-fanout-01.png" alt="rabbitmq-exchange-fanout-01"></p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/rabbitmq/img/rabbitmq-exchange-fanout-02.png" alt="rabbitmq-exchange-fanout-02"></p><p>Fantout 交换器不处理路由键<small>（有也当作没看见）</small>，只是简单地将队列绑定到交换器，发送到交换器的每条消息都会被转发到与该交换器绑定的所有队列中。</p><p>相当于子网广播，子网内的每个主机都获得了一份复制的消息。</p><p>通过 Fanout 交换器转发消息是最快的。</p><h3 id="headers-交换器" tabindex="-1"><a class="header-anchor" href="#headers-交换器" aria-hidden="true">#</a> Headers 交换器</h3><p>Headers 类型交换器是早期的一种交换器，其工作机制与上述三者完全不一样，而且性能最低。所以现在基本不再使用。</p><h2 id="_3-默认交换机" tabindex="-1"><a class="header-anchor" href="#_3-默认交换机" aria-hidden="true">#</a> 3. 默认交换机</h2><p>默认交换机，又名 Default 交换机。它是一个没有名字的、Direct 类型的交换机。</p><p>在 RabbitMQ 中：</p><ul><li><p>每个队列都要和一个交换机有绑定关系</p><p>如果你没有指明、配置队列与哪个交换机有绑定关系，那么它<small>（队列）</small>默认就是与 Default Exchange 有绑定关系，并且是以 queue-name 作为 banding-key 。</p></li><li><p>每一个发往 RabbitMQ 的消息，都要说明是发送个 RabbitMQ 上的哪个交换机。</p><p>如果你在向 RabbitMQ 发送消息时没有指明、配置时发往哪个交换机，那么它<small>（消息）</small>默认就是发往了 Default Exchange 。</p></li></ul><h2 id="_3-虚拟主机-了解、自学" tabindex="-1"><a class="header-anchor" href="#_3-虚拟主机-了解、自学" aria-hidden="true">#</a> 3. 虚拟主机（了解、自学）</h2><p>虚拟主机<small>（Virtual Host，在 RabbitMQ 中称作 <strong>vhost</strong>）</small>是 AMQP 规范中的一个基本概念，客户端在连接消息服务器时必须指定一个虚拟主机。</p><p>虚拟主机本质上就是一个缩小版的 RabbitMQ 服务器，其内部有自己的队列、交换器、绑定等。</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>RabbitMQ\n│\n│── 虚拟主机-1\n│   │── Queue\n│   │── Exchange\n│   └── Binding\n│\n│── 虚拟主机-2\n│   │── Queue\n│   │── Exchange\n│   └── Binding\n│\n└── 虚拟主机-3\n    │── Queue\n    │── Exchange\n    └── Binding\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>比较特别的是，RabbitMQ 中的权限控制是以 vhost 为单位的。也就是说，消息客户端在访问时不能把 vhost-A 中的 Exchange 绑定到 vhost-B 中的 Queue 上。</p><p><small>如果一个 RabbitMQ 服务器被多个应用共用，此时就可以让每一个应用使用一个 vhost，而不用担心相互之间的干扰。</small></p><p>RabbitMQ 中有一个默认的 vhost，它的名字/值是 <em><code>/</code></em>，用户名和密码都是 <em><code>guest</code></em> 。</p><p>RabbitMQ 提供了 <em><code>rabbitmqclt</code></em> 工具管理 vhost：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>## 创建虚拟主机 test\nrabbitmqctl add_vhost test\n\n## 删除虚拟主机 test\nrabbitmqctl delete_vhost test\n\n## 查询当前 RabbitMQ 中所有的虚拟主机\nrabbitmqctl list_vhosts\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="_4-connection-和-channel-了解、自学" tabindex="-1"><a class="header-anchor" href="#_4-connection-和-channel-了解、自学" aria-hidden="true">#</a> 4. Connection 和 Channel（了解、自学）</h2><p>无论是生产者还是消费者，都需要和 RabbitMQ Broker 建立连接，这个连接就是一条 TCP 连接，也就是 Connection 。一旦 TCP 连接建立起来，客户端紧接着就可以创建一个 AMQP 信道<small>（Channel）</small>，每个信道都会被指派一个唯一的 ID 。</p><p>信道是建立再 Connection 之上的虚拟连接，RabbitMQ 处理的每条 AMQP 指令都是通过信道完成的。</p><blockquote><p>我们完全可以直接使用 Conneciton 就能完成信道的工作，为什么还要引入信道呢？</p></blockquote><p><small>试想这样的一个场景，一个应用程序中有很多个线程需要从 RabbitMQ 中消费消息，或生产消息，那么必然需要建立很多个 Connection，也就是多个 TCP 连接。然而对于操作系统而言，建立和销毁 TCP 连接时有开销的。如果遇到使用高峰，性能瓶颈也随之显现。</small></p><p>RabbitMQ 采用类似 NIO（Non-block I/O）的做饭，选择 TCP 连接复用，不仅可以减少性能开销，同时也便于管理。</p><p><small>NIO，也称非阻塞 I/O，包括三大核心部分：Channel（信道）、Buffer（缓存区）和 Selector（选择器）。NIO 基于 Channel 和 Buffer 进行操作，数据总是从信道读取数据到缓冲区，或者从缓冲区中写入信道中。Selector 用于监听多个信道的时间（比如链接打开，数据到达等）。因此，单线程可以监听多个数据的信道。</small></p><p>每个线程把持一个信道，所以信道复用了 Connection 的 TCP 连接。同时 RabbitMQ 可以确保每个线程的私密性，就像拥有独立的连接一样。当每个信道的流量不是很大时，复用单一的 Connection 可以有效地节省 TCP 连接资源。</p><p>信道在 AMQP 中是一个很重要的概念，大多数操作都是在信道这个层面展开的。</p>',55),i={render:function(e,a){return t}}}}]);