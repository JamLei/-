"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[1327],{75458:(a,n,s)=>{s.r(n),s.d(n,{data:()=>t});const t={key:"v-35c44576",path:"/interview-questions/07-mybatis.html",title:"Mybatis 相关面试题",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:3,title:"1.MyBatis 有哪些优缺点？",slug:"_1-mybatis-有哪些优缺点",children:[]},{level:3,title:"2.以下不属于 MyBatis 优点的是？",slug:"_2-以下不属于-mybatis-优点的是",children:[]},{level:3,title:"3.MyBatis 和 Hibernate 有哪些不同？",slug:"_3-mybatis-和-hibernate-有哪些不同",children:[]},{level:3,title:"4. # 和 $ 有什么区别？",slug:"_4-和-有什么区别",children:[]},{level:3,title:"5.在 MyBatis 中怎么解决实体类属性名和表字段名不一致的问题？",slug:"_5-在-mybatis-中怎么解决实体类属性名和表字段名不一致的问题",children:[]},{level:3,title:"6.在 MyBatis 中如何实现 like 查询？",slug:"_6-在-mybatis-中如何实现-like-查询",children:[]},{level:3,title:"7.MyBatis 有几种分页方式？",slug:"_7-mybatis-有几种分页方式",children:[]},{level:3,title:"8.RowBounds 是一次性查询全部结果吗？为什么？",slug:"_8-rowbounds-是一次性查询全部结果吗-为什么",children:[]},{level:3,title:"9.为什么阿里巴巴不允许使用 HashMap 或 Hashtable 作为查询结果集直接输出？",slug:"_9-为什么阿里巴巴不允许使用-hashmap-或-hashtable-作为查询结果集直接输出",children:[]},{level:3,title:"10.什么是动态 SQL？",slug:"_10-什么是动态-sql",children:[]},{level:3,title:"11.为什么不建议在程序中滥用事务？",slug:"_11-为什么不建议在程序中滥用事务",children:[]},{level:3,title:"12.如何开启 MyBatis 的延迟加载？",slug:"_12-如何开启-mybatis-的延迟加载",children:[]},{level:3,title:"13.什么是 MyBatis 的一级缓存和二级缓存？",slug:"_13-什么是-mybatis-的一级缓存和二级缓存",children:[]},{level:3,title:"14.如何设置 Ehcache 为 MyBatis 的二级缓存？",slug:"_14-如何设置-ehcache-为-mybatis-的二级缓存",children:[]},{level:3,title:"15.MyBatis 有哪些拦截器？如何实现拦截功能？",slug:"_15-mybatis-有哪些拦截器-如何实现拦截功能",children:[]}],filePathRelative:"interview-questions/07-mybatis.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},89893:(a,n,s)=>{s.r(n),s.d(n,{default:()=>p});const t=(0,s(66252).uE)('<h1 id="mybatis-相关面试题" tabindex="-1"><a class="header-anchor" href="#mybatis-相关面试题" aria-hidden="true">#</a> Mybatis 相关面试题</h1><h3 id="_1-mybatis-有哪些优缺点" tabindex="-1"><a class="header-anchor" href="#_1-mybatis-有哪些优缺点" aria-hidden="true">#</a> 1.MyBatis 有哪些优缺点？</h3><p>答：MyBatis 优缺点如下：</p><ul><li><p><strong>优点：</strong></p><ul><li>相比于 JDBC 需要编写的代码更少</li><li>使用灵活，支持动态 SQL</li><li>提供映射标签，支持对象与数据库的字段关系映射</li></ul></li><li><p><strong>缺点：</strong></p><ul><li>SQL 语句依赖于数据库，数据库移植性差</li><li>SQL 语句编写工作量大，尤其在表、字段比较多的情况下</li></ul></li></ul><p>总体来说，MyBatis 是一个非常不错的持久层解决方案，它专注于 SQL 本身，非常灵活，适用于需求变化较多的互联网项目，也是当前国内主流的 ORM 框架。</p><h3 id="_2-以下不属于-mybatis-优点的是" tabindex="-1"><a class="header-anchor" href="#_2-以下不属于-mybatis-优点的是" aria-hidden="true">#</a> 2.以下不属于 MyBatis 优点的是？</h3><p>A：可以灵活的编辑 SQL 语句 B：很好的支持不同数据库之间的迁移 C：能够很好的和 Spring 框架集成 D：提供映射标签支持对象和数据库的字段映射</p><p>答：B</p><p>因为 MyBatis 需要自己编写 SQL 语句，但每个数据库的 SQL 语句有略有差异，所以 MyBatis 不能很好的支持不同数据库之间的迁移。</p><h3 id="_3-mybatis-和-hibernate-有哪些不同" tabindex="-1"><a class="header-anchor" href="#_3-mybatis-和-hibernate-有哪些不同" aria-hidden="true">#</a> 3.MyBatis 和 Hibernate 有哪些不同？</h3><p>答：MyBatis 和 Hibernate 都是非常优秀的 ORM 框架，它们的区别如下：</p><ul><li>灵活性：MyBatis 更加灵活，自己可以写 SQL 语句，使用起来比较方便；</li><li>可移植性：MyBatis 有很多自己写的 SQL，因为每个数据库的 SQL 可以不相同，所以可移植性比较差；</li><li>开发效率：Hibernate 对 SQL 语句做了封装，让开发者可以直接使用，因此开发效率更高；</li><li>学习和使用门槛：MyBatis 入门比较简单，使用门槛也更低。</li></ul><h3 id="_4-和-有什么区别" tabindex="-1"><a class="header-anchor" href="#_4-和-有什么区别" aria-hidden="true">#</a> 4. # 和 $ 有什么区别？</h3><p>答：<code>#</code> 是预编译处理，<code>$</code> 是字符替换。 在使用 <code>#</code> 时，MyBatis 会将 SQL 中的参数替换成 <code>?</code> ，配合 PreparedStatement 的 set 方法赋值，这样可以有效的防止 SQL 注入，保证程序的运行安全。</p><h3 id="_5-在-mybatis-中怎么解决实体类属性名和表字段名不一致的问题" tabindex="-1"><a class="header-anchor" href="#_5-在-mybatis-中怎么解决实体类属性名和表字段名不一致的问题" aria-hidden="true">#</a> 5.在 MyBatis 中怎么解决实体类属性名和表字段名不一致的问题？</h3><p>答：通常的解决方案有以下两种方式。</p><ol><li><p>在 SQL 语句中重命名为实体类的属性名，可参考以下配置：</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selectorder<span class="token punctuation">&quot;</span></span> <span class="token attr-name">parametertype</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>int<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultetype</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.interview.order<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    select order_id id, order_no orderno form order where order_id=#{id};\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p>通过 &lt;resultMap&gt; 映射对应关系，可参考以下配置：</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>BaseResultMap<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.interview.mybatislearning.model.UserEntity<span class="token punctuation">&quot;</span></span> <span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>id<span class="token punctuation">&quot;</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>id<span class="token punctuation">&quot;</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>BIGINT<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>username<span class="token punctuation">&quot;</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>userName<span class="token punctuation">&quot;</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>VARCHAR<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>password<span class="token punctuation">&quot;</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>passWord<span class="token punctuation">&quot;</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>VARCHAR<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>nick_name<span class="token punctuation">&quot;</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>nickName<span class="token punctuation">&quot;</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>VARCHAR<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>getAll<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>BaseResultMap<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    select * from t_user\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div></li></ol><h3 id="_6-在-mybatis-中如何实现-like-查询" tabindex="-1"><a class="header-anchor" href="#_6-在-mybatis-中如何实现-like-查询" aria-hidden="true">#</a> 6.在 MyBatis 中如何实现 like 查询？</h3><p>答：可以在 Java 代码中添加 SQL 通配符来实现 like 查询，这样也可以有效的防治 SQL 注入，具体实现如下：</p><p>Java 代码：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">&quot;%wang%&quot;</span><span class="token operator">:</span>\n<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">likeName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Mapper 配置：</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>likeName<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    select * form t_user where name like #{name};\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="_7-mybatis-有几种分页方式" tabindex="-1"><a class="header-anchor" href="#_7-mybatis-有几种分页方式" aria-hidden="true">#</a> 7.MyBatis 有几种分页方式？</h3><p>答：MyBatis 的分页方式有以下 2 种：</p><ul><li><p>逻辑分页，使用 MyBatis 自带的 RowBounds 进行分页，它是一次性查询很多数据，然后在数据中再进行检索；</p></li><li><p>物理分页，自己手写 SQL 分页或使用分页插件 PageHelper，去数据库查询指定条数的分页数据形式。</p></li></ul><h3 id="_8-rowbounds-是一次性查询全部结果吗-为什么" tabindex="-1"><a class="header-anchor" href="#_8-rowbounds-是一次性查询全部结果吗-为什么" aria-hidden="true">#</a> 8.RowBounds 是一次性查询全部结果吗？为什么？</h3><p>答：RowBounds 表面是在“所有”数据中检索数据，其实并非是一次性查询出所有数据。因为 MyBatis 是对 JDBC 的封装，在 JDBC 驱动中有一个 Fetch Size 的配置，它规定了每次最多从数据库查询多少条数据，假如你要查询更多数据，它会在执行 next() 的时候，去查询更多的数据。 就好比你去自动取款机取 10000 元，但取款机每次最多能取 2500 元，要取 4 次才能把钱取完。对于 JDBC 来说也是一样，这样做的好处是可以有效的防止内存溢出。</p><h3 id="_9-为什么阿里巴巴不允许使用-hashmap-或-hashtable-作为查询结果集直接输出" tabindex="-1"><a class="header-anchor" href="#_9-为什么阿里巴巴不允许使用-hashmap-或-hashtable-作为查询结果集直接输出" aria-hidden="true">#</a> 9.为什么阿里巴巴不允许使用 HashMap 或 Hashtable 作为查询结果集直接输出？</h3><p>答：因为使用 HashMap 或 Hashtable 作为查询结果集直接输出，会导致值类型不可控，给调用人员造成困扰，给系统带来更多不稳定的因素。</p><h3 id="_10-什么是动态-sql" tabindex="-1"><a class="header-anchor" href="#_10-什么是动态-sql" aria-hidden="true">#</a> 10.什么是动态 SQL？</h3><p>答：动态 SQL 是指可以根据不同的参数信息来动态拼接的不确定的 SQL 叫做动态 SQL，MyBatis 动态 SQL 的主要元素有：if、choose/when/otherwise、trim、where、set、foreach 等。 以 if 标签的使用为例：</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>findUser<span class="token punctuation">&quot;</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.interview.entity.User<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.interview.entity.User<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n    select * from t_user where\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>id!=null<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n        id = #{id}\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>username!=null<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n        and username = #{username}\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>password!=null<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n        and password = #{password}\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="_11-为什么不建议在程序中滥用事务" tabindex="-1"><a class="header-anchor" href="#_11-为什么不建议在程序中滥用事务" aria-hidden="true">#</a> 11.为什么不建议在程序中滥用事务？</h3><p>答：因为事务的滥用会影响数据的 QPS<small>（每秒查询率）</small>，另外使用事务的地方还要考虑各方面回滚的方案，如缓存回滚、搜索引擎回滚、消息补偿、统计修正等。</p><h3 id="_12-如何开启-mybatis-的延迟加载" tabindex="-1"><a class="header-anchor" href="#_12-如何开启-mybatis-的延迟加载" aria-hidden="true">#</a> 12.如何开启 MyBatis 的延迟加载？</h3><p>答：只需要在 mybatis-config.xml 设置 <code>&lt;setting name=&quot;lazyLoadingEnabled&quot; value=&quot;true&quot;/&gt;</code> 即可打开延迟缓存功能，完整配置文件如下：</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">&gt;</span></span>\n        <span class="token comment">&lt;!-- 开启延迟加载 --&gt;</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>lazyLoadingEnabled<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="_13-什么是-mybatis-的一级缓存和二级缓存" tabindex="-1"><a class="header-anchor" href="#_13-什么是-mybatis-的一级缓存和二级缓存" aria-hidden="true">#</a> 13.什么是 MyBatis 的一级缓存和二级缓存？</h3><p>答：</p><ul><li><p>一级缓存是 SqlSession 级别的，是 MyBatis 自带的缓存功能，并且无法关闭，因此当有两个 SqlSession 访问相同的 SQL 时，一级缓存也不会生效，需要查询两次数据库；</p></li><li><p>二级缓存是 Mapper 级别的，只要是同一个 Mapper，无论使用多少个 SqlSession 来操作，数据都是共享的，多个不同的 SqlSession 可以共用二级缓存，MyBatis 二级缓存默认是关闭的，需要使用时可手动开启，二级缓存也可以使用第三方的缓存，比如，使用 Ehcache 作为二级缓存。</p></li></ul><p>手动开启二级缓存，配置如下：</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">&gt;</span></span>\n        <span class="token comment">&lt;!-- 开启二级缓存 --&gt;</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cacheEnabled<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="_14-如何设置-ehcache-为-mybatis-的二级缓存" tabindex="-1"><a class="header-anchor" href="#_14-如何设置-ehcache-为-mybatis-的二级缓存" aria-hidden="true">#</a> 14.如何设置 Ehcache 为 MyBatis 的二级缓存？</h3><p>答：可直接在 XML 中配置开启 EhcacheCache，代码如下：</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.interview.repository.ClassesReposirory<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span> \n    <span class="token comment">&lt;!-- 开启二级缓存 --&gt;</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cache</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.mybatis.caches.ehcache.EhcacheCache<span class="token punctuation">&quot;</span></span> <span class="token punctuation">&gt;</span></span>\n        <span class="token comment">&lt;!-- 缓存创建以后，最后一次访问缓存的时间至失效的时间间隔 --&gt;</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>timeToIdleSeconds<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>3600<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>\n        <span class="token comment">&lt;!-- 缓存自创建时间起至失效的时间间隔--&gt;</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>timeToLiveSeconds<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>3600<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>\n        <span class="token comment">&lt;!-- 缓存回收策略，LRU 移除近期最少使用的对象 --&gt;</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>memoryStoreEvictionPolicy<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>LRU<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cache</span><span class="token punctuation">&gt;</span></span>\n\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>findById<span class="token punctuation">&quot;</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>java.lang.Long<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.interview.entity.Classes<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n        select * from classes where id = #{id}\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h3 id="_15-mybatis-有哪些拦截器-如何实现拦截功能" tabindex="-1"><a class="header-anchor" href="#_15-mybatis-有哪些拦截器-如何实现拦截功能" aria-hidden="true">#</a> 15.MyBatis 有哪些拦截器？如何实现拦截功能？</h3><p>答：MyBatis 提供的连接器有以下 4 种。</p><ul><li>Executor：拦截内部执行器，它负责调用 StatementHandler 操作数据库，并把结果集通过 ResultSetHandler 进行自动映射，另外它还处理了二级缓存的操作。</li><li>StatementHandler：拦截 SQL 语法构建的处理，它是 MyBatis 直接和数据库执行 SQL 脚本的对象，另外它也实现了 MyBatis 的一级缓存。</li><li>ParameterHandler：拦截参数的处理。</li><li>ResultSetHandler：拦截结果集的处理。</li></ul><p>拦截功能具体实现如下：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Intercepts</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token annotation punctuation">@Signature</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">Executor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token string">&quot;query&quot;</span><span class="token punctuation">,</span>\n        args <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token class-name">MappedStatement</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">RowBounds</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">ResultHandler</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">Interceptor</span> <span class="token punctuation">{</span>\n   <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">intercept</span><span class="token punctuation">(</span><span class="token class-name">Invocation</span> invocation<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>\n     <span class="token class-name">Object</span> target <span class="token operator">=</span> invocation<span class="token punctuation">.</span><span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//被代理对象</span>\n     <span class="token class-name">Method</span> method <span class="token operator">=</span> invocation<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//代理方法</span>\n     <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> invocation<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//方法参数</span>\n     <span class="token comment">// 方法拦截前执行代码块</span>\n     <span class="token class-name">Object</span> result <span class="token operator">=</span> invocation<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n     <span class="token comment">// 方法拦截后执行代码块</span>\n     <span class="token keyword">return</span> result<span class="token punctuation">;</span>\n   <span class="token punctuation">}</span>\n   <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">plugin</span><span class="token punctuation">(</span><span class="token class-name">Object</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n     <span class="token keyword">return</span> <span class="token class-name">Plugin</span><span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n   <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div>',51),p={render:function(a,n){return t}}}}]);