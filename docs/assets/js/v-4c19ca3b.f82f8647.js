"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[7655],{68154:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-4c19ca3b",path:"/spring-cloud/02-netflix-eureka.html",title:"服务注册与发现：Eureka",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"1. Spring Cloud 常用的服务注册中心",slug:"_1-spring-cloud-常用的服务注册中心",children:[]},{level:2,title:"2. 服务注册中心（Registry Center）",slug:"_2-服务注册中心-registry-center",children:[]},{level:2,title:"3. 服务提供者（Service Producer）",slug:"_3-服务提供者-service-producer",children:[]},{level:2,title:"4. 服务发现原理",slug:"_4-服务发现原理",children:[]},{level:2,title:"5. Eureka 的自我保护与健康检查",slug:"_5-eureka-的自我保护与健康检查",children:[]},{level:2,title:"6. Eureka 集群服务注册（了解、自学）",slug:"_6-eureka-集群服务注册-了解、自学",children:[]},{level:2,title:"7. config.properties",slug:"_7-config-properties",children:[]},{level:2,title:"8. Gist",slug:"_8-gist",children:[{level:3,title:"8.1 Eureka Server",slug:"_8-1-eureka-server",children:[]},{level:3,title:"8.2 Eureka Client",slug:"_8-2-eureka-client",children:[]}]}],filePathRelative:"spring-cloud/02-netflix-eureka.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},917:(n,s,a)=>{a.r(s),a.d(s,{default:()=>g});var e=a(66252);const p=(0,e.uE)('<h1 id="服务注册与发现-eureka" tabindex="-1"><a class="header-anchor" href="#服务注册与发现-eureka" aria-hidden="true">#</a> 服务注册与发现：Eureka</h1><p>在微服务架构中，每一个微服务都可以通过集群或者其它方式进行动态扩展，每一个微服务实例的网络地址都可能动态变化，这使得原本通过『<strong>硬编码地址的调用方式失去了作用</strong>』。</p><p>微服务架构中，服务地址的动态变化和数量变动，迫切需要系统建立一个『<strong>中心化的组件</strong>』对各个微服务实例信息进行登记和管理，同时让各个微服务实例之间能够相互发现，从而达到互相调用的结果。</p><dl><dt>服务注册</dt><dd>服务在中央注册表中注册其服务位置的过程。通常注册其主机和端口，有时还注册认证凭证，协议，版本号和或环境信息。</dd><dt>服务发现</dt><dd>客户端应用程序查询中央注册表以了解服务位置的过程。</dd></dl><p>维护中央注册表的角色被称为『<strong>服务注册平台</strong>』或者『<strong>服务注册中心</strong>』。</p><p>当一个微服务启动的时候，必须主动向服务注册中心注册其服务地址，以供其他微服务查询调用。图中橘黄色为服务注册中心，绿色为微服务节点。</p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/spring-cloud/img/Eureka-3.png" alt="图片"></p><p>当一个微服务有多个实例的时候，由调用者从服务注册中心获取注册服务列表；调用者拿到『<strong>注册服务列表</strong>』之后，决定访问哪一个服务实例。</p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/spring-cloud/img/Eureka-4.png" alt="图片"></p><h2 id="_1-spring-cloud-常用的服务注册中心" tabindex="-1"><a class="header-anchor" href="#_1-spring-cloud-常用的服务注册中心" aria-hidden="true">#</a> 1. Spring Cloud 常用的服务注册中心</h2><p>Spring Cloud Netflix <strong>Eureka</strong> 是 Spring Cloud 提供用于服务于发现和注册的基础组件，是搭建 Spring Cloud 微服务架构的前提之一。</p><p>Eureka 由两部分组成：</p><ul><li><p>一个是 Eureka Server，提供服务注册和发现功能，即，我们上述的服务器端；</p></li><li><p>另一个是 Eureka Client，它简化了客户端与服务端之间的交互。</p></li></ul><p>Eureka Client 会定时将自己的注册信息登记到 Eureka Server 中，并从 Server 中下载包括了其它 Eurek Client 信息的『注册表』。</p><ul><li><p>基本架构：</p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/spring-cloud/img/Eureka-1.png" alt="图片"></p></li></ul><h2 id="_2-服务注册中心-registry-center" tabindex="-1"><a class="header-anchor" href="#_2-服务注册中心-registry-center" aria-hidden="true">#</a> 2. 服务注册中心（Registry Center）</h2><p>首先，创建一个 Spring Boot Maven 工程，通过</p><p>引入依赖：</p><ul><li><p>在 Spring Initializer<small>（https://start.spring.io、https://start.aliyun.com）</small>中搜索 <strong>Eureka Server</strong> 后再选中。或</p></li><li><p>在 <strong>Spring Cloud Discovery</strong> 下选中 <strong>Eureka Server</strong> 。</p></li></ul><p>注意事项：</p><ul><li><p>这里『<strong>不需要</strong>』引入 <em>Spring Web</em></p></li><li><p>除非完全没有网络，而无法利用 Spring Initializer 功能，否则对于初学者而言，不要自己去创建普通的 Maven 项目后再添加相关包的依赖。这样做很容易遗漏和出错。</p></li><li><p>被引入的依赖项是：</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-netflix-eureka-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li></ul><p>创建启动类 <strong>RegistryApplication.java</strong> ：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>\n<span class="token annotation punctuation">@EnableEurekaServer</span> <span class="token comment">// 看这里，看这里，看这里</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RegistryApplication</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span> <span class="token class-name">RegistryApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>这里，我们注意到除了前面提到的 @SpringBootApplication 外，这个类还增加了一个注解：<strong>@EnableEurekaServer</strong> ，这个注解的作用就是标注该应用程序是一个注册中心，只是添加这个注解还不够，还需要增加配置。</p><p>为项目添加配置文件：</p><ul><li><p><strong>application.yml</strong> 配置文件<small>（先看执行效果，特殊配置的细节，后续讲解）</small>：</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">server</span><span class="token punctuation">:</span>\n  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8761</span>\n<span class="token key atrule">spring</span><span class="token punctuation">:</span>\n  <span class="token key atrule">application</span><span class="token punctuation">:</span>\n    <span class="token key atrule">name</span><span class="token punctuation">:</span> eureka<span class="token punctuation">-</span>server<span class="token punctuation">-</span>registry\n<span class="token key atrule">eureka</span><span class="token punctuation">:</span>\n  <span class="token key atrule">instance</span><span class="token punctuation">:</span>\n    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> 127.0.0.1   <span class="token comment"># ${spring.cloud.client.ip-address}</span>\n    <span class="token comment"># 微服务的唯一标识</span>\n    <span class="token key atrule">instance-id</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>eureka.instance.hostname<span class="token punctuation">}</span><span class="token punctuation">:</span>$<span class="token punctuation">{</span>server.port<span class="token punctuation">}</span>\n    <span class="token key atrule">prefer-ip-address</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>\n  <span class="token key atrule">client</span><span class="token punctuation">:</span>\n    <span class="token comment"># 不向注册中心注册自己</span>\n    <span class="token key atrule">register-with-eureka</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>\n    <span class="token comment"># 不从 Eureka Server 获取服务的注册信息</span>\n    <span class="token key atrule">fetch-registry</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>\n    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>\n      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//$<span class="token punctuation">{</span>eureka.instance.hostname<span class="token punctuation">}</span><span class="token punctuation">:</span>$<span class="token punctuation">{</span>server.port<span class="token punctuation">}</span>/eureka/\n  <span class="token key atrule">server</span><span class="token punctuation">:</span>\n    <span class="token key atrule">enable-self-preservation</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 在较新的版本中，关闭自保护模式会告警。</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>在这里，我们通过 <code>eureka.instance.hostname</code> 配置项『写死』了我们的微服务项目的 IP 地址，实际上，在 spring cloud 中有一个内置的变量 <code>${spring.cloud.client.ip-address}</code>，可以通过它去『求得』当前服务器的 IP 地址，而不用写死。</p><p><strong>注意</strong> 如果你的当前服务器有多个 IP ，那么，这里还需要其它配置搭配使用，才能保证合乎你心意。</p></li><li><p><strong>bootstrap.yml</strong> 配置文件：</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token comment"># 日志相关配置，略。</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li></ul>',26),t=(0,e.Uk)("启动该应用程序，打开浏览器并访问: "),l={href:"http://localhost:8761",target:"_blank",rel:"noopener noreferrer"},r=(0,e.Uk)("http://localhost:8761"),c=(0,e.Uk)(" 。如果看到如下界面，说明注册中心已经启动起来了:"),o=(0,e.uE)('<p><img src="https://hemiao3000.gitee.io/java-note-img/images/spring-cloud/img/spring-cloud-registry.png" alt="registry"></p><p>下面说明一下注册中心各个配置项的含义:</p><ul><li><h3>eureka.server.enable-self-preservation</h3><p>是否开启自我保护，默认为 true 。</p><p><strong>15</strong> 分钟内超过 <strong>85%</strong> 的客户端节点都掉线了，注册中心就认为是自己掉线，而非客户端掉线。这种情况下，注册中心不会将不可用客户端节点信息从注册表中移除，而是等待网络恢复。</p><p>这里设置为 false ，即关闭自我保护。</p><p>在开发过程中，我们很容易频繁地启动、关停、重启客户端，从而很容易达到自我保护模式的标准。这时，会导致注册中心会『残留』已关闭的客户端信息。因此，开发环境中建议关闭自我保护模式。</p><p><small>不过在最新的、高版本的 spring cloud 中关闭 Eureka Server 的自我保护模式会有警告信息。</small></p></li><li><h3>eureka.instance.prefer-ip-address</h3><p>是否以客户端节点的 IP 为标识注册到注册中心<small>（的注册表）</small>，默认是以客户端节点的 hostname 来注册的。</p><p><small>这个配置，和 instance-id 不是一码事。</small></p></li><li><h3>eureka.client.serviceUrl.defaultZone</h3><p>注册中心默认地址。这里看起来似乎有点奇怪：为什么 Eureka Server 需要配置 Eureka Server 的 URL ？</p><p>因为 Eureka Server 可以集群部署，而在居群部署的情况下，Eureka Server 之间会进行注册表信息的同步操作。因此，每个 Eureka Server 需要『感知』其它的 Eureka Server 的存在。</p><p>一个 Eureka Server 也是一个 Eureka Client，它会尝试其它的 Eureka Server 那注册自己，所以需要至少一个注册中心的 URL 来定位其它的 Eureka Server 。如果不提供这样一个注册端点，注册中心也能工作，但是会在日志中打印无法向注册中心注册自己的信息。</p></li></ul><blockquote><p>建议按照以上的配置项写就行了。</p></blockquote><p>Eureka Server 与 Eureka Client 之间的联系主要通过心跳的方式实现。心跳<small>（Heartbeat）</small>即 Eureka Client 定时向 Eureka Server 汇报本服务实例当前的状态，维护本服务实例在注册表中租约的有效性。</p><p>为了避免 Eureka Client 在每次服务间调用都向注册中心请求所依赖的服务实例的信息，Eureka Client 将定时从 Eureka Server 中拉取注册表中的信息，并将这些信息缓存到本地，用于服务发现。</p><h2 id="_3-服务提供者-service-producer" tabindex="-1"><a class="header-anchor" href="#_3-服务提供者-service-producer" aria-hidden="true">#</a> 3. 服务提供者（Service Producer）</h2><p>我们有了注册中心，那么就可以创建一个服务提供者（即客户端）注册到注册中心去了。</p><br><hr><br><p>同样地，按照注册中心的创建方式，创建领一个 Spring Boot Maven 项目，通过 <code>http://start.spring.io</code> 或 <code>https://start.aliyun.com</code> 所提供的 Spring Initializer 功能，引入依赖：</p><ul><li><p>在 Initializer 中搜索 <strong>Eureka Discovery Client</strong> 后再选中。或</p></li><li><p>在 <strong>Spring Cloud Discovery</strong> 下选中 <strong>Eureka Discovery Client</strong> 。</p></li></ul><p>注意事项：</p><ul><li><p>这里『<strong>需要</strong>』引入 <strong>Spring Web</strong> 。</p></li><li><p>除非完全没有网络，而无法利用 Spring Initializer 功能，否则对于初学者而言，不要自己去创建普通的 Maven 项目后再添加相关包的依赖。这样做很容易遗漏和出错。</p></li><li><p>实际引入的依赖项目是</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div></li></ul><p>然后创建 <strong>EurekaProducer1Application.java</strong> ：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>\n<span class="token annotation punctuation">@EnableEurekaClient</span> <span class="token comment">// 看这里，看这里，看这里</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EurekaProducer1Application</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">EurekaProducer1Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n<span class="token punctuation">}</span>\n\n\n<span class="token annotation punctuation">@RestController</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TempController</span> <span class="token punctuation">{</span>\n\n  <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;${server.port}&quot;</span><span class="token punctuation">)</span>\n  <span class="token class-name">String</span> port<span class="token punctuation">;</span>\n\n  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/hello&quot;</span><span class="token punctuation">)</span>\n  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">home</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token string">&quot;hi &quot;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">&quot;, i am from port:&quot;</span> <span class="token operator">+</span> port<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p>这里用到了一个注解：<strong>@EnableEurekaClient</strong>，标注了此注解，说明该项目是一个服务提供者。</p><p>为项目添加配置项：</p><ul><li><p><strong>application.yml</strong> 配置文件：</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">server</span><span class="token punctuation">:</span>\n  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8081</span>\n<span class="token key atrule">spring</span><span class="token punctuation">:</span>\n  <span class="token key atrule">application</span><span class="token punctuation">:</span>\n    <span class="token key atrule">name</span><span class="token punctuation">:</span> erueka<span class="token punctuation">-</span>client<span class="token punctuation">-</span>producer\n<span class="token key atrule">eureka</span><span class="token punctuation">:</span>\n  <span class="token key atrule">instance</span><span class="token punctuation">:</span>\n    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> 127.0.0.1\n    <span class="token key atrule">instance-id</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>eureka.instance.hostname<span class="token punctuation">}</span><span class="token punctuation">:</span>$<span class="token punctuation">{</span>server.port<span class="token punctuation">}</span>\n    <span class="token key atrule">prefer-ip-address</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>\n    <span class="token key atrule">lease-renewal-interval-in-seconds</span><span class="token punctuation">:</span> <span class="token number">5</span>\n    <span class="token key atrule">lease-expiration-duration-in-seconds</span><span class="token punctuation">:</span> <span class="token number">10</span>\n  <span class="token key atrule">client</span><span class="token punctuation">:</span>\n    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>\n      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span>8761/eureka/\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div></li><li><p><strong>bootstrap.yml</strong> 配置文件：</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token comment"># 日志相关配置，略。</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li></ul><p>其中，<strong>spring.application.name</strong> 为该服务的名字，<strong>eureka.client.serviceUrl.defaultZone</strong> 的作用是指定注册中心的地址。</p>',21),u=(0,e.Uk)("然后启动该工程，重新访问："),i={href:"http://localhost:8761",target:"_blank",rel:"noopener noreferrer"},k=(0,e._)("code",null,"http://localhost:8761",-1),m=(0,e.Uk)("，即可看到如下界面:"),b=(0,e.uE)('<p><img src="https://hemiao3000.gitee.io/java-note-img/images/spring-cloud/img/produer-1.png" alt="producer-1"></p><p>我们可以看到，刚刚创建的服务提供者 eurekaclient 已经被注册到注册中心了。</p><p>以上就是本文关于 Eureka 服务注册与发现的全部内容<small>（仅仅只学习上面的知识还远远不够）</small>。</p><h2 id="_4-服务发现原理" tabindex="-1"><a class="header-anchor" href="#_4-服务发现原理" aria-hidden="true">#</a> 4. 服务发现原理</h2><p><img src="https://hemiao3000.gitee.io/java-note-img/images/spring-cloud/img/Eureka-2.png" alt=""></p><table><thead><tr><th style="text-align:left;">#</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>Application Service                               </strong></td><td style="text-align:left;">是一个 Eureka Client，扮演服务提供者的角色，提供业务服务，向 Eureka Server 注册和更新自己的信息，同时能从 Eureka Server 注册表中获取到其它服务的信息。</td></tr><tr><td style="text-align:left;"><strong>Eureka Server</strong></td><td style="text-align:left;">扮演服务注册中心的角色，提供服务注册和发现的功能。每个 Eureka Client 向 Eureka Server 注册自己的信息，也可以通过 Eureka Server 获取到其它服务的信息达到发现和调用其它服务的目的。</td></tr><tr><td style="text-align:left;"><strong>Application Client</strong></td><td style="text-align:left;">是一个 Eureka Client，扮演了服务消费者的角色，通过 Eureka Server 获取到注册到其上的其它服务的信息，从而根据信息找到所需的服务发起远程调用。</td></tr><tr><td style="text-align:left;"><strong>Replicate</strong></td><td style="text-align:left;">Eureka Server 之间注册表信息的同步复制，使 Eureka Server 集群中不同注册表中服务实例信息保持一致。</td></tr><tr><td style="text-align:left;">Make Remote Call</td><td style="text-align:left;">服务之间的远程调用。</td></tr><tr><td style="text-align:left;">Register</td><td style="text-align:left;">注册服务实例</td></tr></tbody></table><h2 id="_5-eureka-的自我保护与健康检查" tabindex="-1"><a class="header-anchor" href="#_5-eureka-的自我保护与健康检查" aria-hidden="true">#</a> 5. Eureka 的自我保护与健康检查</h2><p>在 Eureka Server 的各个服务的 Status 栏显示着 <strong>UP</strong> ，表示该服务及其多实例处于状态正常。其它取值 <strong>DOWN</strong> 、<strong>OUT_OF_SERVICE</strong> 、<strong>UNKNOWN</strong> 等均表示该服务处于不可被请求的状态，只有 <strong>UP</strong> 状态的微服务会被请求。</p><p>Eureka Server 与 Eureka Client 之间使用『<strong>心跳机制</strong>』来确定Eureka Client（微服务实例）的状态。</p><p>在 Eureka Client 端，有 2 个配置与这个『心跳机制』有关：</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token comment"># Eureka Client 配置</span>\n<span class="token key atrule">eureka</span><span class="token punctuation">:</span>\n  <span class="token key atrule">instance</span><span class="token punctuation">:</span>\n    <span class="token key atrule">lease-renewal-interval-in-seconds</span><span class="token punctuation">:</span> <span class="token number">30</span> <span class="token comment"># 默认值</span>\n    <span class="token key atrule">lease-expiration-duration-in-seconds</span><span class="token punctuation">:</span> <span class="token number">90</span> <span class="token comment"># 默认值</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li><p><strong>lease-renewal-interval-in-seconds</strong> ：表示每间隔 N 秒，Client 向 Server 发送一次心跳，以证明自己<small>（Client）</small>还存活。</p></li><li><p><strong>lease-expiration-duration-in-seconds</strong> ：是 Client 端告知 Server，如果<small>（未来）</small>我<small>（Client）</small>在连续的 N 秒内没有给你<small>（Server）</small>发心跳，就代表我<small>（Client）</small>“死”了，请你<small>（Server）</small>将我<small>（Client）</small>踢除。</p></li></ul><hr><p>Eureka Client 通过心跳机制向 Eureka Server 证明自己的存活状态，但是，一旦 Eureka Client 挂掉了，超过了 Client 自己所声明的最长上报时间，Eureka Server 也不是实时将其移除。</p><p>Eureka Server 每间隔一段时间时间『集中』清理无效的客户端，这个配置是 Server 端的：</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token comment"># Eureka Server 配置</span>\n<span class="token key atrule">eureka</span><span class="token punctuation">:</span>\n  <span class="token key atrule">server</span><span class="token punctuation">:</span>\n    <span class="token key atrule">eviction-interval-timer-in-ms</span><span class="token punctuation">:</span> <span class="token number">60000</span> <span class="token comment"># 默认值，单位毫秒</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><br><hr><br><p>Eureka Server 发现 Client 没给它<small>（Server）</small>发送心跳，不一定是 Client 出现了问题，也有可能是 Eureka Server 自己掉线了。</p><p>默认情况下，如果在 <strong>15</strong> 分钟内超过 <strong>85%</strong> 的客户端节点都没有正常的心跳，那么 Eureka 就认为这些客户端与注册中心出现了网络故障<small>（比如网络故障或频繁的启动关闭客户端）</small>，Eureka Server自动进入『<strong>自我保护模式</strong>』。</p><p>和这个概念有关的配置是：</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token comment"># Eureka Server 配置</span>\n<span class="token key atrule">eureka</span><span class="token punctuation">:</span>\n  <span class="token key atrule">server</span><span class="token punctuation">:</span>\n    <span class="token key atrule">enable-self-preservation</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>\n    <span class="token key atrule">renewal-threshold-update-interval-ms</span><span class="token punctuation">:</span> 15 * 60 * 1000\n    <span class="token key atrule">renewal-percent-threshold</span><span class="token punctuation">:</span> <span class="token number">0.85</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>Eureka Server 一旦认为是自己出了问题，从而开启保护模式后，就不再将失效的服务从列表中剔除。当网络故障恢复后，Eureka Server 会自动退出自我保护模式。</p><p>在开发和测试环境中，由于我们会经常性地、频繁地启停服务，导致心跳消失，因此我们通常会将 Eureka Server 的『<strong>自我保护模式</strong>』关闭掉，以避免它触发进入保护模式，从而导致改下线的服务没有下线。</p><p>关闭自我保护模式，需要在服务端和客户端配置：</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token comment"># 服务端配置</span>\n<span class="token comment"># 1. 关闭自我保护模式。（新版本中官方不建议关闭，会有告警）</span>\n<span class="token comment"># 2. 缩短清理周期。（其实默认值也行）</span>\n<span class="token key atrule">eureka</span><span class="token punctuation">:</span>\n  <span class="token key atrule">server</span><span class="token punctuation">:</span>\n    <span class="token key atrule">enable-self-preservation</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> \n    <span class="token key atrule">eviction-interval-timer-in-ms</span><span class="token punctuation">:</span> <span class="token number">60000</span>\n\n<span class="token comment"># 客户端配置：</span>\n<span class="token comment"># 1. 缩短心跳上报周期</span>\n<span class="token comment"># 2. 缩短有效期时长</span>\n<span class="token key atrule">eureka</span><span class="token punctuation">:</span>\n  <span class="token key atrule">instance</span><span class="token punctuation">:</span>\n    <span class="token key atrule">lease-renewal-interval-in-seconds</span><span class="token punctuation">:</span> <span class="token number">4</span>\n    <span class="token key atrule">lease-expiration-duration-in-seconds</span><span class="token punctuation">:</span> <span class="token number">12</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h2 id="_6-eureka-集群服务注册-了解、自学" tabindex="-1"><a class="header-anchor" href="#_6-eureka-集群服务注册-了解、自学" aria-hidden="true">#</a> 6. Eureka 集群服务注册（了解、自学）</h2><p>服务注册中心在整个微服务体系中，至关重要！如果服务注册中心挂了，整个系统都将崩溃。所以服务注册中心通常不会被部署为单点应用，而是采用集群的部署方式，其中个别节点挂掉不影响整个系统的运行。</p><p>假设：</p><table><thead><tr><th style="text-align:left;">注册中心</th><th style="text-align:left;">IP 地址</th></tr></thead><tbody><tr><td style="text-align:left;">peer-1</td><td style="text-align:left;">192.168.1.110</td></tr><tr><td style="text-align:left;">peer-2</td><td style="text-align:left;">192.168.1.111</td></tr><tr><td style="text-align:left;">peer-3</td><td style="text-align:left;">192.168.1.112</td></tr></tbody></table><p>关键配置在于：</p><ul><li><p>在 eureka 集群搭建过程中，<strong>fetch-registry</strong> 和 <strong>register-with-eureka</strong> 一定设置为 true 。表示从其他 2 个实例同步服务注册信息，并且向其他的 2 个 Server 注册自己。</p></li><li><p>将 peer-1 的 defaultZone 设置为 peer-2 和 peer-3 。</p></li></ul><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>\n  <span class="token key atrule">application</span><span class="token punctuation">:</span>\n    <span class="token key atrule">name</span><span class="token punctuation">:</span> eureka<span class="token punctuation">-</span>server<span class="token punctuation">-</span>registry<span class="token punctuation">-</span><span class="token number">1</span>\n<span class="token key atrule">server</span><span class="token punctuation">:</span>\n  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8761</span>\n<span class="token key atrule">eureka</span><span class="token punctuation">:</span>\n  <span class="token key atrule">instance</span><span class="token punctuation">:</span>\n    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> 192.168.1.110\n    <span class="token key atrule">health-check-url</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//$<span class="token punctuation">{</span>eureka.instance.hostname<span class="token punctuation">}</span><span class="token punctuation">:</span>$<span class="token punctuation">{</span>server.port<span class="token punctuation">}</span>/actuator/health\n  <span class="token key atrule">client</span><span class="token punctuation">:</span>\n    <span class="token key atrule">fetch-registry</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>\n    <span class="token key atrule">register-with-eureka</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>\n    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>\n      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//192.168.1.111<span class="token punctuation">:</span>8761/eureka/<span class="token punctuation">,</span>http<span class="token punctuation">:</span>//192.168.1.112<span class="token punctuation">:</span>8761/eureka/\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>另外两个 Server 的配置反之亦然。</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="_7-config-properties" tabindex="-1"><a class="header-anchor" href="#_7-config-properties" aria-hidden="true">#</a> 7. config.properties</h2><p>在注册中心启动过程中，你会看到日志信息中有这样的 WARN 日志：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>No URLs will be polled as dynamic configuration sources\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>这里的原因在于我们的项目间接引用到了 <strong>spring-cloud-starter-netflix-archaius</strong> 包。虽然，我们没有用到它，但是这个包既然在我们项目中，那么它就会『<strong>期望</strong>』我们项目的 resources 目录下有一个名为 <strong>config.properties</strong> 的配置文件<small>（其中放它要用到的配置文件）</small>。</p><p>由于实际上我们并没由于用到这个包，所以，你可以将这个包移除。或者在 <strong>resources</strong> 目录下创建一个空的 <strong>config.properties</strong> 文件。</p><h2 id="_8-gist" tabindex="-1"><a class="header-anchor" href="#_8-gist" aria-hidden="true">#</a> 8. Gist</h2><h3 id="_8-1-eureka-server" tabindex="-1"><a class="header-anchor" href="#_8-1-eureka-server" aria-hidden="true">#</a> 8.1 Eureka Server</h3><ul><li><p>application.yml</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">server</span><span class="token punctuation">:</span>\n  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8761</span>\n<span class="token key atrule">spring</span><span class="token punctuation">:</span>\n  <span class="token key atrule">application</span><span class="token punctuation">:</span>\n    <span class="token key atrule">name</span><span class="token punctuation">:</span> eureka<span class="token punctuation">-</span>server<span class="token punctuation">-</span>registry\n<span class="token key atrule">eureka</span><span class="token punctuation">:</span>\n  <span class="token key atrule">instance</span><span class="token punctuation">:</span>\n    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>spring.cloud.client.ip<span class="token punctuation">-</span>address<span class="token punctuation">}</span>\n    <span class="token key atrule">instanceId</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>eureka.instance.hostname<span class="token punctuation">}</span><span class="token punctuation">:</span>$<span class="token punctuation">{</span>server.port<span class="token punctuation">}</span>\n    <span class="token key atrule">prefer-ip-address</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>\n  <span class="token key atrule">client</span><span class="token punctuation">:</span>\n    <span class="token key atrule">fetchRegistry</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>\n    <span class="token key atrule">registerWithEureka</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>\n    <span class="token key atrule">serviceUrl</span><span class="token punctuation">:</span>\n      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span>$<span class="token punctuation">{</span>server.port<span class="token punctuation">}</span>/eureka\n  <span class="token key atrule">server</span><span class="token punctuation">:</span>\n    <span class="token key atrule">enable-self-preservation</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>\n    <span class="token key atrule">eviction-interval-timer-in-ms</span><span class="token punctuation">:</span> <span class="token number">3000</span> <span class="token comment"># 默认值，单位毫秒</span>\n<span class="token key atrule">logging</span><span class="token punctuation">:</span>\n  <span class="token key atrule">level</span><span class="token punctuation">:</span>\n    <span class="token key atrule">root</span><span class="token punctuation">:</span> WARN\n    <span class="token key atrule">com.woniu</span><span class="token punctuation">:</span> debug\n    <span class="token key atrule">com.example</span><span class="token punctuation">:</span> debug\n  <span class="token key atrule">pattern</span><span class="token punctuation">:</span>\n    <span class="token key atrule">console</span><span class="token punctuation">:</span> &quot;$<span class="token punctuation">{</span>CONSOLE_LOG_PATTERN<span class="token punctuation">:</span>\\\n        <span class="token directive important">%clr(${LOG_LEVEL_PATTERN:%5p}) \\</span>\n        <span class="token directive important">%clr([%15.15t]){faint} \\</span>\n        <span class="token directive important">%clr(%-40.40logger{39}){cyan} \\</span>\n        <span class="token directive important">%clr(:){faint} \\</span>\n        <span class="token directive important">%m%n${LOG_EXCEPTION_CONVERSION_WORD:%wEx}}&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div></li></ul><h3 id="_8-2-eureka-client" tabindex="-1"><a class="header-anchor" href="#_8-2-eureka-client" aria-hidden="true">#</a> 8.2 Eureka Client</h3><ul><li><p>bootstrap.yml</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">eureka</span><span class="token punctuation">:</span>\n  <span class="token key atrule">instance</span><span class="token punctuation">:</span>\n    <span class="token key atrule">instance-id</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>eureka.instance.hostname<span class="token punctuation">}</span><span class="token punctuation">:</span>$<span class="token punctuation">{</span>server.port<span class="token punctuation">}</span>\n    <span class="token key atrule">prefer-ip-address</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>\n    <span class="token key atrule">lease-renewal-interval-in-seconds</span><span class="token punctuation">:</span> <span class="token number">5</span>\n    <span class="token key atrule">lease-expiration-duration-in-seconds</span><span class="token punctuation">:</span> <span class="token number">10</span>\n  <span class="token key atrule">client</span><span class="token punctuation">:</span>\n    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>\n      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span>8761/eureka\n\n<span class="token key atrule">management</span><span class="token punctuation">:</span>\n  <span class="token key atrule">endpoints</span><span class="token punctuation">:</span>\n    <span class="token key atrule">web</span><span class="token punctuation">:</span>\n      <span class="token key atrule">exposure</span><span class="token punctuation">:</span>\n        <span class="token key atrule">include</span><span class="token punctuation">:</span> <span class="token string">&quot;*&quot;</span>\n<span class="token comment">#        include: refresh,health,hystrix.stream</span>\n  <span class="token key atrule">endpoint</span><span class="token punctuation">:</span>\n    <span class="token key atrule">health</span><span class="token punctuation">:</span>\n      <span class="token key atrule">show-details</span><span class="token punctuation">:</span> always\n\n<span class="token key atrule">logging</span><span class="token punctuation">:</span>\n  <span class="token key atrule">level</span><span class="token punctuation">:</span>\n    <span class="token key atrule">root</span><span class="token punctuation">:</span> WARN\n  <span class="token key atrule">pattern</span><span class="token punctuation">:</span>\n    <span class="token key atrule">console</span><span class="token punctuation">:</span> &quot;$<span class="token punctuation">{</span>CONSOLE_LOG_PATTERN<span class="token punctuation">:</span>\\\n      <span class="token directive important">%clr(${LOG_LEVEL_PATTERN:%5p}) \\</span>\n      <span class="token directive important">%clr([%15.15t]){faint} \\</span>\n      <span class="token directive important">%clr(%-40.40logger{39}){cyan} \\</span>\n      <span class="token directive important">%clr(:){faint} \\</span>\n      <span class="token directive important">%m%n${LOG_EXCEPTION_CONVERSION_WORD:%wEx}}&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div></li><li><p>application.yml</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">server</span><span class="token punctuation">:</span>\n  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8080</span>\n<span class="token key atrule">spring</span><span class="token punctuation">:</span>\n  <span class="token key atrule">application</span><span class="token punctuation">:</span>\n    <span class="token key atrule">name</span><span class="token punctuation">:</span> <span class="token punctuation">...</span>\n<span class="token key atrule">eureka</span><span class="token punctuation">:</span>\n  <span class="token key atrule">instance</span><span class="token punctuation">:</span>\n    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>spring.cloud.client.ip<span class="token punctuation">-</span>address<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></li></ul><p>『The End』</p>',47),g={render:function(n,s){const a=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.iD)(e.HY,null,[p,(0,e._)("p",null,[t,(0,e._)("a",l,[r,(0,e.Wm)(a)]),c]),o,(0,e._)("p",null,[u,(0,e._)("a",i,[k,(0,e.Wm)(a)]),m]),b],64)}}}}]);