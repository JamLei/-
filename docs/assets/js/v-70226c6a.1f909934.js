"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[1054],{37926:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-70226c6a",path:"/spring-boot/11-spring-task.html",title:"Spring Task",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"pom 包配置",slug:"pom-包配置",children:[]},{level:2,title:"启动类开启定时",slug:"启动类开启定时",children:[]},{level:2,title:"创建定时任务实现类",slug:"创建定时任务实现类",children:[{level:3,title:"定时任务 1:",slug:"定时任务-1",children:[]},{level:3,title:"定时任务 2:",slug:"定时任务-2",children:[]}]},{level:2,title:"参数说明",slug:"参数说明",children:[{level:3,title:"fixedRate 说明",slug:"fixedrate-说明",children:[]},{level:3,title:"cron 说明",slug:"cron-说明",children:[]}]},{level:2,title:"并行任务（了解、自学）",slug:"并行任务-了解、自学",children:[]}],filePathRelative:"spring-boot/11-spring-task.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},36275:(n,s,a)=>{a.r(s),a.d(s,{default:()=>t});const e=(0,a(66252).uE)('<h1 id="spring-task" tabindex="-1"><a class="header-anchor" href="#spring-task" aria-hidden="true">#</a> Spring Task</h1><p>在项目开发中，经常需要定时任务来帮助我们来做一些内容，比如定时派息、跑批对账、业务监控等。</p><p>实现定时任务有 3 种方式：</p><ul><li><p>java 自带的 API：<strong>java.util.Timer</strong> 类和 <strong>java.util.TimerTask</strong> 类；</p></li><li><p>Quartz 框架：开源 功能强大 使用起来稍显复杂；</p></li><li><p>Spring 3.0 以后自带了 task 调度工具，也称 Spring Task，它比 Quartz 更加的简单方便。</p></li></ul><h2 id="pom-包配置" tabindex="-1"><a class="header-anchor" href="#pom-包配置" aria-hidden="true">#</a> pom 包配置</h2><p>pom 包里面只需要引入 SpringBoot Starter 包即可，SpringBoot Starter 包中已经内置了定时的方法。</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="启动类开启定时" tabindex="-1"><a class="header-anchor" href="#启动类开启定时" aria-hidden="true">#</a> 启动类开启定时</h2><p>在启动类上面加上 <strong>@EnableScheduling</strong> 即可开启定时:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Spring</span> <span class="token class-name">BootApplication</span>\n<span class="token annotation punctuation">@EnableScheduling</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Application</span><span class="token punctuation">.</span><span class="token keyword">class</span>， args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="创建定时任务实现类" tabindex="-1"><a class="header-anchor" href="#创建定时任务实现类" aria-hidden="true">#</a> 创建定时任务实现类</h2><p>使用 SpringBoot 自带的定时非常的简单，只需要在方法上面添加 <strong>@Scheduled</strong> 注解即可。</p><h3 id="定时任务-1" tabindex="-1"><a class="header-anchor" href="#定时任务-1" aria-hidden="true">#</a> 定时任务 1:</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SchedulerTask</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> log <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">SchedulerTask</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>cron<span class="token operator">=</span><span class="token string">&quot;*/6 * * * * ?&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;this is scheduler task running &quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>count<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>设置 <em><code>process()</code></em> 每隔六秒执行一次，并统计执行的次数。</p><p>我们还有另外的一种方案来设置，固定时间周期执行方法。</p><h3 id="定时任务-2" tabindex="-1"><a class="header-anchor" href="#定时任务-2" aria-hidden="true">#</a> 定时任务 2:</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Scheduler2Task</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> log <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">Scheduler2Task</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">SimpleDateFormat</span> dateFormat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">&quot;HH:mm:ss&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>fixedRate <span class="token operator">=</span> <span class="token number">6000</span><span class="token punctuation">)</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reportCurrentTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;现在时间:&quot;</span> <span class="token operator">+</span> dateFormat<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>启动项目之后，就会在控制台看到打印的结果。</p><p>结果如下:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>INFO | [   scheduling-1] com.example.timingtask.Scheduler2Task    : 现在时间:20:12:02\nINFO | [   scheduling-1] com.example.timingtask.SchedulerTask     : this is scheduler task running 0\nINFO | [   scheduling-1] com.example.timingtask.Scheduler2Task    : 现在时间:20:12:08\nINFO | [   scheduling-1] com.example.timingtask.SchedulerTask     : this is scheduler task running 1\nINFO | [   scheduling-1] com.example.timingtask.Scheduler2Task    : 现在时间:20:12:14\nINFO | [   scheduling-1] com.example.timingtask.SchedulerTask     : this is scheduler task running 2\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>说明两个方法都按照固定 6 秒的频率来执行。</p><h2 id="参数说明" tabindex="-1"><a class="header-anchor" href="#参数说明" aria-hidden="true">#</a> 参数说明</h2><p><strong>@Scheduled</strong> 参数可以接受两种定时的设置，一种是我们常用的 <code>cron=&quot;*/6 * * * * ?&quot;</code>，一种是 <code>fixedRate = 6000</code>，两种都可表示固定周期执行定时任务。</p><h3 id="fixedrate-说明" tabindex="-1"><a class="header-anchor" href="#fixedrate-说明" aria-hidden="true">#</a> fixedRate 说明</h3><ul><li><strong>@Scheduled(fixedRate = 6000)</strong> : 上一次开始执行时间点之后 6 秒再执行。</li><li><strong>@Scheduled(fixedDelay = 6000)</strong> : 上一次执行完毕时间点之后 6 秒再执行。</li><li><strong>@Scheduled(initialDelay=1000, fixedRate=6000)</strong> : 第一次延迟 1 秒后执行，之后按 fixedRate 的规则每 6 秒执行一次。</li></ul><h3 id="cron-说明" tabindex="-1"><a class="header-anchor" href="#cron-说明" aria-hidden="true">#</a> cron 说明</h3><p>cron 一共有七位，最后一位是年，SpringBoot 定时方案中只需要设置六位即可:</p><ul><li>第一位，表示秒，取值 0 ~ 59;</li><li>第二位，表示分，取值 0 ~ 59;</li><li>第三位，表示小时，取值 0 ~ 23;</li><li>第四位，日期天/日，取值 1 ~ 31;</li><li>第五位，日期月份，取值 1 ~ 12;</li><li>第六位，星期，取值 1 ~ 7，星期一，星期二，...。注，不是第 1 周、第 2 周的意思，另外，1 表示星期天，2 表示星期一;</li><li>第七位，年份，可以留空，取值 1970 ~ 2099。</li></ul><p>cron 中，还有一些特殊的符号，含义如下:</p><ul><li><p><code>(*)</code> 星号</p><p>可以理解为每的意思，每秒、每分、每天、每月、每年 ... 。</p></li><li><p><code>(?)</code> 问号</p><p>问号只能出现在日期和星期这两个位置，表示这个位置的值不确定，每天 3 点执行，因此第六位星期的位置，是不需要关注的，就是不确定的值;同时，日期和星期是两个相互排斥的元素，通过问号来表明不指定值，比如 1 月 10 日是星期一，如果在星期的位置另指定星期二，就前后冲突矛矛盾了。</p></li><li><p><code>(-)</code> 减号</p><p>表达一个范围，如在小时字段中使用“10 - 12”，则表示从 10 到 12 点，即 10、11、12。</p></li><li><p><code>(,)</code> 逗号</p><p>表达一个列表值，如在星期字段中使用“1,2,4”，则表示星期一、星期二、星期四。</p></li><li><p><code>(/)</code> 斜杠</p><p>如 <code>x/y</code>，x 是开始值，y 是步长，比如在第一位(秒)，<code>0/15</code> 就是从 0 秒开始，每隔 15 秒执行一次，最后就是 0、15、30、45、60，另 <code>*/y</code>，等同于 <code>0/y</code> 。</p></li></ul><p>下面列举几个常用的例子子。</p><table><thead><tr><th style="text-align:left;">实例</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><code>0 0 3 * * ?</code></td><td style="text-align:left;">每天 3 点执行</td></tr><tr><td style="text-align:left;"><code>0 5 3 * * ?</code></td><td style="text-align:left;">每天 3 点 5 分执行</td></tr><tr><td style="text-align:left;"><code>0 5 3 ? * *</code></td><td style="text-align:left;">每天 3 点 5 分执行，与上面作用相同</td></tr><tr><td style="text-align:left;"><code>0 5/10 3 * * ?</code></td><td style="text-align:left;">每天 3 点的 5 分、15 分、25 分、35 分、45 分、55 分这几个时间点执行</td></tr><tr><td style="text-align:left;"><code>0 10 3 ? * 1</code></td><td style="text-align:left;">每周星期天，3 点 10 分执行，注，1 表示星期天</td></tr><tr><td style="text-align:left;"><code>0 10 3 ? * 1#3</code></td><td style="text-align:left;">每个月的第三个星期，星期天执行，# 号只能出现在星期的位置</td></tr></tbody></table><h2 id="并行任务-了解、自学" tabindex="-1"><a class="header-anchor" href="#并行任务-了解、自学" aria-hidden="true">#</a> 并行任务（了解、自学）</h2><p>之前的的定时任务都是串行执行的。所谓串行执行指的是只由一个线程来执行任务。除了这种方式 Spring Task 还支持并行执行任务，即由多个线程来执行不同的任务。</p><p>要实现这样的功能，你需要去进行额外的配置：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>\n<span class="token annotation punctuation">@Configuration</span>\n<span class="token annotation punctuation">@EnableScheduling</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TimingTaskConfig</span> <span class="token keyword">implements</span> <span class="token class-name">SchedulingConfigurer</span><span class="token punctuation">,</span> <span class="token class-name">AsyncConfigurer</span> <span class="token punctuation">{</span>\n\n    <span class="token comment">// 线程池线程数量</span>\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> corePoolSize <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@Bean</span>\n    <span class="token keyword">public</span> <span class="token class-name">ThreadPoolTaskScheduler</span> <span class="token function">taskScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">ThreadPoolTaskScheduler</span> scheduler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolTaskScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        scheduler<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 初始化线程池</span>\n        scheduler<span class="token punctuation">.</span><span class="token function">setPoolSize</span><span class="token punctuation">(</span>corePoolSize<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 线程池容量</span>\n        <span class="token keyword">return</span> scheduler<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureTasks</span><span class="token punctuation">(</span><span class="token class-name">ScheduledTaskRegistrar</span> taskRegistrar<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        taskRegistrar<span class="token punctuation">.</span><span class="token function">setTaskScheduler</span><span class="token punctuation">(</span><span class="token function">taskScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token class-name">Executor</span> <span class="token function">getAsyncExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token function">taskScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token class-name">AsyncUncaughtExceptionHandler</span> <span class="token function">getAsyncUncaughtExceptionHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><p>注意，这时 <strong><code>@EnableScheduling</code></strong> 注解标注在了这个配置类上，因此，Spring Boot 的入口类上就不再需要标注它了。（当然，你硬要把它标注在入口类上其实也可以）。</p><p>其它的相关代码无需修改，运行项目你会看到类似如下的日志输出：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>INFO | [taskScheduler-1] com.example.timingtask.Scheduler2Task    : 现在时间:20:08:57\nINFO | [taskScheduler-1] com.example.timingtask.SchedulerTask     : this is scheduler task running 0\nINFO | [taskScheduler-2] com.example.timingtask.Scheduler2Task    : 现在时间:20:09:03\nINFO | [taskScheduler-3] com.example.timingtask.SchedulerTask     : this is scheduler task running 1\nINFO | [taskScheduler-1] com.example.timingtask.Scheduler2Task    : 现在时间:20:09:09\nINFO | [taskScheduler-4] com.example.timingtask.SchedulerTask     : this is scheduler task running 2\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div>',40),t={render:function(n,s){return e}}}}]);