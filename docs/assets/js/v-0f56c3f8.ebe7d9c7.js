"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[6603],{85637:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-0f56c3f8",path:"/maven/006-%E4%BE%9D%E8%B5%96%E7%AE%A1%E7%90%86.html",title:"包的依赖管理",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"坐标和 mvnrepository 网站",slug:"坐标和-mvnrepository-网站",children:[]},{level:2,title:"依赖管理",slug:"依赖管理",children:[]},{level:2,title:"依赖范围",slug:"依赖范围",children:[]},{level:2,title:"依赖传递",slug:"依赖传递",children:[]},{level:2,title:"依赖冲突",slug:"依赖冲突",children:[]}],filePathRelative:"maven/006-依赖管理.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},91700:(n,s,a)=>{a.r(s),a.d(s,{default:()=>i});var t=a(66252);const e=(0,t.uE)('<h1 id="包的依赖管理" tabindex="-1"><a class="header-anchor" href="#包的依赖管理" aria-hidden="true">#</a> 包的依赖管理</h1><h2 id="坐标和-mvnrepository-网站" tabindex="-1"><a class="header-anchor" href="#坐标和-mvnrepository-网站" aria-hidden="true">#</a> 坐标和 mvnrepository 网站</h2><p>在 maven 中通过『<strong>坐标</strong>』概念来确定一个唯一确定的 jar 包。坐标的组成部分有：</p><table><thead><tr><th style="text-align:left;">元素</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>&lt;groupId&gt;</strong></td><td style="text-align:left;">定义当前 Maven 组织名称</td></tr><tr><td style="text-align:left;"><strong>&lt;artifactId&gt;</strong></td><td style="text-align:left;">定义实际项目名称</td></tr><tr><td style="text-align:left;"><strong>&lt;version&gt;</strong></td><td style="text-align:left;">定义当前项目的当前版本</td></tr></tbody></table><p>任意两个不同包，它们的这三个属性必定至少有一项是不同的。</p>',5),p=(0,t.Uk)("那么如何确定一个 java 包的坐标？通过 "),l={href:"https://mvnrepository.com",target:"_blank",rel:"noopener noreferrer"},o=(0,t.Uk)("https://mvnrepository.com"),c=(0,t.Uk)(" 。"),r=(0,t.uE)('<p><strong>mvnrepository</strong> 是一个与中央仓库对应的查询系统。在这里你可以查询你所需要的 java 包的坐标。</p><p>你只需要复制粘贴你所查到的 java 包的坐标 <strong>&lt;repository&gt;</strong> 片段即可。</p><h2 id="依赖管理" tabindex="-1"><a class="header-anchor" href="#依赖管理" aria-hidden="true">#</a> 依赖管理</h2><p>『<strong>依赖管理</strong>』就是对项目中 jar 包的管理。可以在 pom.xml 文件中定义 jar 包的坐标，管理依赖。</p><p>整体结构<small>（其它无关元素略）</small>：</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code>project \n└── dependencies\n    ├── dependency\n    ├── dependency\n    ├── ...\n    └── dependency\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>主要包含如下元素：</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>\n\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>slf4j-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.7.25<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>slf4j-simple<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.7.25<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span> ... <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\t\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span> ... <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\t\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span> ... <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\t\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>maven 项目会『<strong>引用</strong>』你本地仓库中的这些 java 包。如果你本地仓库中没有，那么 maven 会先从网络仓库中下载这些 java 包到你的本地仓库。</p><p>这些 java 库在本地仓库的存放的路径规则是：</p><pre><code>C:\\Users\\&lt;用户名&gt;\\.m2\\repository\\&lt;groupId&gt;\\&lt;artifactId&gt;\\&lt;version&gt;\n</code></pre><p>例如，上面的 <strong>slf4j-api</strong> 在本地仓库中的存放路径就是</p><pre><code>C:\\Users\\59960549\\.m2\\repository\\org\\slf4j\\slf4j-api\\1.7.25\n</code></pre><p>需要注意的是，maven 项目是在『<strong>引用</strong>』这些 java 库。<strong>在项目最终打包前，你的 maven 项目中并没有真正地『包含』这些 java 包</strong>，你会发现无论你『引用』多少 java 包，你的项目源码的文件夹大小实际上并没有增加<small>（其中只有你的项目源码）</small>。maven 就是通过这种方式来节约空间。</p><h2 id="依赖范围" tabindex="-1"><a class="header-anchor" href="#依赖范围" aria-hidden="true">#</a> 依赖范围</h2><table><thead><tr><th style="text-align:left;">依赖范围<br><small>（Scope）</small></th><th style="text-align:center;">对 main classpath 有效</th><th style="text-align:center;">对 test classpath 有效</th><th style="text-align:center;">打入包中</th><th style="text-align:left;">例子</th></tr></thead><tbody><tr><td style="text-align:left;">compile</td><td style="text-align:center;">Yes</td><td style="text-align:center;">Yes</td><td style="text-align:center;">Yes</td><td style="text-align:left;">log4j</td></tr><tr><td style="text-align:left;">test</td><td style="text-align:center;">-</td><td style="text-align:center;">Yes</td><td style="text-align:center;">-</td><td style="text-align:left;">junit</td></tr><tr><td style="text-align:left;">privided</td><td style="text-align:center;">Yes</td><td style="text-align:center;">Yes</td><td style="text-align:center;">-</td><td style="text-align:left;">servlet-api</td></tr><tr><td style="text-align:left;">runtime</td><td style="text-align:center;">-</td><td style="text-align:center;">-</td><td style="text-align:center;">Yes</td><td style="text-align:left;">jdbc 驱动实现类</td></tr></tbody></table><p><strong>compile</strong> 是 <strong>&lt;scope&gt;</strong> 的默认值。</p><h2 id="依赖传递" tabindex="-1"><a class="header-anchor" href="#依赖传递" aria-hidden="true">#</a> 依赖传递</h2><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>\n\n  <span class="token comment">&lt;!--\n  &lt;dependency&gt;\n    &lt;groupId&gt;org.slf4j&lt;/groupId&gt;\n    &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;\n    &lt;version&gt;1.7.25&lt;/version&gt;\n  &lt;/dependency&gt;\n  --&gt;</span>\n\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>slf4j-simple<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.7.25<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>前面的这个依赖可以将 <strong>slf4j-api</strong> 去掉，也依然可行。原因在于，虽然我们没有声明引用、使用 <strong>slf4j-api</strong>，但是我们声明要引用、使用的 <strong>slf4j-simple</strong> 它要使用 <strong>slf4j-api</strong> ，因此，maven 仍然还是会把 <strong>slf4j-api</strong> 纳入我们的项目中。</p><blockquote><p>我们如何知道 <strong>slf4j-simple</strong> 它会使用 <strong>slf4j-api</strong> ？有两种方式：</p><ol><li><p>在 <strong>mvnrepository.com</strong> 中查询 <strong>slf4j-simple</strong> 时，该网站上会列出它所依赖的其它的包<small>（如果有的话）</small>。</p></li><li><p>开发工具会有图形化界面让你能看到包的依赖关系，你可以直观地看到，<strong>slf4j-simple</strong> 依赖于 <strong>slf4j-api</strong> 。这样你可以对你的 <strong>repositories</strong> 进行优化。</p></li></ol></blockquote><h2 id="依赖冲突" tabindex="-1"><a class="header-anchor" href="#依赖冲突" aria-hidden="true">#</a> 依赖冲突</h2><p>依赖冲突指的是你的项目中『<strong>包含了同一个包的两个不同版本</strong>』。这种情况下通常会导致项目报错，或启动失败。</p><p>依赖冲突常见于两个场景：</p><ol><li><p>同一个项目的两个开发人员不约而同想到使用同一个 java 库，而互相不知道。从而导致项目的 pom 中引入了同一个包的两个不同版本。</p></li><li><p>项目依赖于 A 和 B 两个库，看似没有问题，但是 B 库本身又依赖于 A 库<small>（或者是，B 库依赖于 C 库，而 C 库依赖于 A 库）</small>。从而导致项目中最终还是包含了 A 库的两个不同版本。</p></li></ol><p>Maven 会自动解决依赖冲突问题，它基于两个原则来处理：</p><ol><li><p>路径最近者优先</p><p>项目 A 有如下的依赖关系：</p><p>A -&gt; B -&gt; C -&gt; X <small>（1.0）</small></p><p>A -&gt; D -&gt; X <small>（2.0）</small></p><p>maven 最终包含的会是 X 库的 2.0 版本。</p></li><li><p>路径相等，先声明者优先</p><p>项目 A 有如下的依赖关系：</p><p>A -&gt; B -&gt; Y<small>（1.0）</small></p><p>A -&gt; C -&gt; Y<small>（2.0）</small></p><p>若 pom 文件中 B 的依赖坐标先于 C 进行声明，则最终 Y 的版本为 1.0 。</p></li></ol><p>在开发工具中，可以有图形化界面让你只管地看到依赖关系，其中会将依赖冲突展示出来。<small>IDEA 图形化展示效果比 Eclipse 要更好。</small></p>',28),i={render:function(n,s){const a=(0,t.up)("OutboundLink");return(0,t.wg)(),(0,t.iD)(t.HY,null,[e,(0,t._)("p",null,[p,(0,t._)("a",l,[o,(0,t.Wm)(a)]),c]),r],64)}}}}]);