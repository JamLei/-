"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[6715],{16096:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-118ea434",path:"/ajax/02-JQuery.html",title:"AJAX 和 JQuery",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"使用 jQuery 实现 AJAX",slug:"使用-jquery-实现-ajax",children:[{level:3,title:"常见的四个工具方法",slug:"常见的四个工具方法",children:[]},{level:3,title:"核心方法：$.ajax()",slug:"核心方法-ajax",children:[]},{level:3,title:"$.get() 方法 和 $.post() 方法",slug:"get-方法-和-post-方法",children:[]}]},{level:2,title:"一个常见的碰巧能对的错误",slug:"一个常见的碰巧能对的错误",children:[]},{level:2,title:"ajax 方法的 error 参数",slug:"ajax-方法的-error-参数",children:[]}],filePathRelative:"ajax/02-JQuery.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},85735:(n,s,a)=>{a.r(s),a.d(s,{default:()=>e});const t=(0,a(66252).uE)('<h1 id="ajax-和-jquery" tabindex="-1"><a class="header-anchor" href="#ajax-和-jquery" aria-hidden="true">#</a> AJAX 和 JQuery</h1><h2 id="使用-jquery-实现-ajax" tabindex="-1"><a class="header-anchor" href="#使用-jquery-实现-ajax" aria-hidden="true">#</a> 使用 jQuery 实现 AJAX</h2><p>在 JavaScript 中直接使用 <strong>XMLHttpRequest</strong> 类实现 Ajax 技术仍显得十分繁琐，而 jQuery 吸引人的原因之一就是它提供了大量关于 Ajax 的工具方法。</p><p>由于各种浏览器对 <strong>XMLHttpRequest</strong> 对象的实现有些不同，所以要通过 JavaScript 来实现原生的 AJAX 功能需要编写大量的平台相关的判断处理代码来处理同一份代码的跨平台问题。这大大降低了开发效率和出错概率。而现今通用的解决方案是使用 jQuery 库来实现 AJAX 功能。jQuery 库封装了各个平台的 AJAX 功能，对外提供了统一的接口。</p><h3 id="常见的四个工具方法" tabindex="-1"><a class="header-anchor" href="#常见的四个工具方法" aria-hidden="true">#</a> 常见的四个工具方法</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> str <span class="token operator">=</span> $<span class="token punctuation">.</span><span class="token function">param</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 对象转请求参数字符串（query-string）</span>\n<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;#form_id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 表单数据转请求参数字符串</span>\n\n<span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 对象转 json 格式字符串（json-string）</span>\n\n<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>json_str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// json 格式字符串转对象</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ul><li><p><strong>query-string</strong><small>（请求参数字符串）</small>格式更常见，配合 content-type:appliction/x-www-form-urlencoded 使用。其格式形如：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>name=tom&amp;age=20&amp;email=123456@qq.com\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li><p><strong>json-string</strong> 格式较少见一些，通常是有些在 AJAX 请求中会见到，配合 content-type:application/json 使用。其格式形如：</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span><span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;tom, &quot;</span>age<span class="token string">&quot;:20, &quot;</span>email<span class="token string">&quot;: &quot;</span><span class="token number">123456</span>@qq.com&quot;<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li></ul><h3 id="核心方法-ajax" tabindex="-1"><a class="header-anchor" href="#核心方法-ajax" aria-hidden="true">#</a> 核心方法：$.ajax()</h3><p><strong>$.ajax()</strong> 方法是 jQuery 最底层的 AJAX 实现，也就是说 jQuery 的其他 AJAX 方法（例如：<strong>$.get()</strong> 和 <strong>$.post()</strong>）都是基于此方法实现的。使用的语法如下：</p><pre><code>$.ajax(options)\n</code></pre><p>该方法只有一个参数，但这个参数包含了 <strong>$.ajax()</strong> 方法所需要的请求设置以及回调函数等信息，参数以 key-value 的形式存在，所有参数都是 <strong>可选的</strong> 。</p><p>$.ajax() 参数很多，其中最常见的有：</p><table><thead><tr><th style="text-align:left;">参数名称</th><th style="text-align:left;">参数类型</th><th style="text-align:left;">参数说明</th></tr></thead><tbody><tr><td style="text-align:left;">url</td><td style="text-align:left;">string</td><td style="text-align:left;">默认值当前页地址，发送请求的地址</td></tr><tr><td style="text-align:left;">type</td><td style="text-align:left;">string</td><td style="text-align:left;">默认值为 <strong>get</strong>，表示请求方式。除了 <strong>post</strong> 外，还支持 <strong>put</strong> 和 <strong>delete</strong><small>（依赖于浏览器）</small></td></tr><tr><td style="text-align:left;">contentType</td><td style="text-align:left;">string</td><td style="text-align:left;">默认值为 <code>application/x-www-form-urlencode</code>。这个属性表示发送给服务器的内容的编码类型。默认值适用大多数情况。</td></tr><tr><td style="text-align:left;">data</td><td style="text-align:left;">string 或<br>对象</td><td style="text-align:left;">发送到服务器的请求参数。本质上 <code>$.ajax()</code> 需要的是字符串，如果你传入的是 Object，jQuery 会将它自动转换成 Query String 格式（<small><code>?aaa=bbb&amp;ccc=ddd</code> 形式</small>）。</td></tr><tr><td style="text-align:left;">dataType</td><td style="text-align:left;">String</td><td style="text-align:left;">预期服务器返回的数据类型。如果不指定，jQuery 会根据 HTTP 中的 MIME 信息进行推测。常见有：<code>xml</code>、<code>html</code>、<code>json</code>、<code>Text</code></td></tr><tr><td style="text-align:left;">success</td><td style="text-align:left;">function</td><td style="text-align:left;">请求成功<small>（响应状态码为 200）</small>后调用此函数。参数是由服务器返回的数据（具体数据类型与 dataType 有关）；描述状态的字符串</td></tr><tr><td style="text-align:left;">async</td><td style="text-align:left;">boolean</td><td style="text-align:left;">默认 <strong>true</strong>，表示异步请求。<br>设置为 false 则表示使用同步方式发起请求。</td></tr></tbody></table><p>$.ajax() 方法『<strong>有且仅有 2 种</strong>』标准使用形式：</p><ul><li><p>标准使用形式一（<small>Query String</small>）</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  url<span class="token operator">:</span> <span class="token string">&#39;请求路径&#39;</span><span class="token punctuation">,</span>\n  type<span class="token operator">:</span> <span class="token string">&quot;get or post&quot;</span><span class="token punctuation">,</span>\n  contentType<span class="token operator">:</span> <span class="token string">&#39;application/x-www-form-urlencoded&#39;</span><span class="token punctuation">,</span> \n  data<span class="token operator">:</span> <span class="token string">&#39;Query String 形式的请求参数字符串&#39;</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token operator">...</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>上述形式，有一种简写形式：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  url<span class="token operator">:</span> <span class="token string">&#39;请求路径&#39;</span><span class="token punctuation">,</span>\n  type<span class="token operator">:</span> <span class="token string">&quot;get or post&quot;</span><span class="token punctuation">,</span>\n  data<span class="token operator">:</span> 对象<span class="token punctuation">,</span>\n  <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token operator">...</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>这里 $.ajax 方法帮我们简化了 2 处地方：</p><ol><li><p>省略了 <strong>contentType</strong>，缺省时，它的默认值就是 <strong>application/x-www-form-urlencoded</strong></p></li><li><p>data 属性本来需要一个 Query String，我们传的是一个对象。$.ajax 方法内部会自己调用 $.param 方法将对象转换为 Query String 。</p></li></ol></li><li><p>标准使用形式二（<small>JSON String</small>）</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  url<span class="token operator">:</span> <span class="token string">&#39;请求路径&#39;</span><span class="token punctuation">,</span>\n  type<span class="token operator">:</span> <span class="token string">&quot;post&quot;</span><span class="token punctuation">,</span>\n  contentType<span class="token operator">:</span> <span class="token string">&#39;application/json&#39;</span><span class="token punctuation">,</span> \n  data<span class="token operator">:</span> <span class="token string">&#39;JSON String 形式的请求参数字符串&#39;</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token operator">...</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div></li></ul><p>除此之外，<code>$.ajax()</code> 方法，还可以设定 <strong>beforeSend</strong><small>（提交前回调）</small>、<strong>error</strong><small>（请求失败后回调）</small>、<strong>success</strong><small>（请求成功返回后回调）</small>以及 <strong>complete</strong><small>（请求完成回调，无论成功失败后 ）</small>回调函数。</p><p>其他参数：</p><table><thead><tr><th style="text-align:left;">参数名称</th><th style="text-align:left;">参数类型</th><th style="text-align:left;">参数说明</th></tr></thead><tbody><tr><td style="text-align:left;">beforeSend(XHR)</td><td style="text-align:left;">function</td><td style="text-align:left;">发送前回调函数。可以修改 xmlHttpRequest 对象。<br>如果返回false，则可以取消本次请求。<br> XMLHttpRequest 对象是该方法唯一参数</td></tr><tr><td style="text-align:left;">context</td><td style="text-align:left;">object</td><td style="text-align:left;">用于设置 AJAX 回调函数的上下文。也就是说，让回调函数内的 this 指向这个对象。<br>如果没有设置它，那么回调函数中的 this 指向的是本次 AJAX 请求时传递的 options 参数。</td></tr><tr><td style="text-align:left;">error</td><td style="text-align:left;">function</td><td style="text-align:left;">失败时调用此函数<br>有三个参数：XMLHttpRequest对象、错误信息、可选的异常对象<br></td></tr><tr><td style="text-align:left;">complete(XHR, TS)</td><td style="text-align:left;">function</td><td style="text-align:left;">请求完成后调用此函数（成功或失败都调用）。参数：：XMLHttpRequest对象 和 一个描述请求类型的字符串</td></tr><tr><td style="text-align:left;">timeout</td><td style="text-align:left;">number</td><td style="text-align:left;">设置请求超时时间（毫秒）</td></tr></tbody></table><h3 id="get-方法-和-post-方法" tabindex="-1"><a class="header-anchor" href="#get-方法-和-post-方法" aria-hidden="true">#</a> $.get() 方法 和 $.post() 方法</h3><p><strong>$.get()</strong> 和 <strong>$.post()</strong> 方法是对 $.ajax() 方法的包装，专门用于发送 GET 请求和 POST 请求。</p><p>具体细节略。<small>我个人还是比较偏好 <strong>$.ajax()</strong> 方法。</small></p><h2 id="一个常见的碰巧能对的错误" tabindex="-1"><a class="header-anchor" href="#一个常见的碰巧能对的错误" aria-hidden="true">#</a> 一个常见的碰巧能对的错误</h2><p>有初学者会将 AJAX 请求和 JSON 划上等号，认为从 JS 代码中向后台传送一个 JS 对象就是发出了 AJAX 请求，或者认为，发送 JS 对象是 AJAX 请求中最核心、最关键的一步。</p><p>基于上述<small>（错误的）</small>思路，他们会写出如下代码：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  url<span class="token operator">:</span> <span class="token string">&#39;...&#39;</span><span class="token punctuation">,</span>\n  type<span class="token operator">:</span> <span class="token string">&quot;post&quot;</span><span class="token punctuation">,</span>\n  data<span class="token operator">:</span> obj<span class="token punctuation">,</span>\n  dataType<span class="token operator">:</span> <span class="token string">&#39;json&#39;</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token operator">...</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>并且，由于上述代码是对的！通过上述代码，你确实是向后台发出了 AJAX 请求，因此，他们反过来越发认为自己的『思路』是完全正确的。</p><p><small>无论你清楚，还是不清楚：有意，还是无意，</small>上述代码实际上省略了一些东西，在省略了这些东西的情况下，$.ajax 方法会启用默认值。</p><p>如果将上述代码省略掉的部分不全，它的完整形式如下：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  url<span class="token operator">:</span> <span class="token string">&#39;...&#39;</span><span class="token punctuation">,</span>\n  type<span class="token operator">:</span> <span class="token string">&quot;post&quot;</span><span class="token punctuation">,</span>\n  contentType<span class="token operator">:</span> <span class="token string">&#39;application/x-www-form-urlencoded&#39;</span><span class="token punctuation">,</span> \n  data<span class="token operator">:</span> $<span class="token punctuation">.</span><span class="token function">param</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">,</span>\n  dataType<span class="token operator">:</span> <span class="token string">&#39;json&#39;</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token operator">...</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>上述代码向后台发出了 AJAX 请求，请求参数是 Query String 形式，而非初学者『心里以为』的 JSON 。</p><p>引起初学者误解的原因在于 2 个参数：<strong>data</strong> 和 <strong>dataType</strong> 。</p><ul><li><p><strong>data</strong> 属性：</p><p>$.ajax 方法的 data 属性需要的本质上是字符串！字符串！字符串！不是对象！不是对象！不是对象！</p><p>只不过，$.ajax 方法考虑到你的懒惰，决定帮你『转换』一下：将你传入的对象转换为 Query String 格式字符串，即，$.param 方法的逻辑。</p><p>只不过，初学者压根不知道 $.ajax 帮了我们一把，更不知道 $.ajax 方法帮我们把对象转换成了啥格式。就误以为 $.ajax 能向后台传个 JS 对象。</p></li><li><p><strong>dataType</strong> 属性：</p><p><strong>dataType</strong> 属性和 <strong>data</strong> 属性长得很像，常常『<strong>被误解用于</strong>』表明 <strong>data</strong> 属性的值的类型，再加上初学者满脑子都是『通过 data 属性向后台传 JS 对象』，所以，看见 <strong>dataType</strong> 属性的值是 <strong>json</strong> 时就特别亲切。<small>傻得可爱</small></p><p><strong>dateType</strong> 是你预期的服务器返回的数据格式/类型。理论上，它应该和服务器的响应的 content-type 是一致的。在 AJAX 请求中，它通常就是 <code>json</code> 。</p><p>为它赋值为 <code>json</code> 的作用是让 、$.ajax 方法『帮』我们后台响应给我们的 JSON 格式字符串转换为 JS 对象，方便你后续在 success 方法中操作。</p><p><strong>dataType</strong> 属性是和 AJAX 响应有关的属性，和请求过程无关！</p><p>另外，基于同样的思路，有人本来能『瞎猫碰死耗子』似得碰巧发出 AJAX 请求，但是基于同样的错误的思路，将 dataType 属性值赋值为 application/json，这样，就彻底不对了：$.ajax 方法总是进入 error 部分，无论如何，都不会走 success 。</p></li></ul><h2 id="ajax-方法的-error-参数" tabindex="-1"><a class="header-anchor" href="#ajax-方法的-error-参数" aria-hidden="true">#</a> ajax 方法的 error 参数</h2><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>提前说明，在有的 API 设计方案中，永远都不会进入 error 。所以，.ajax() 方法的 error fanction 总不会执行。</p></div><p>当 http 响应的状态码不是 <strong>200</strong> 的时候，就会执行 <code>error function</code> 。</p><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>一个常见的 Bug 是 <strong>data</strong> 属性值本应是 <strong><code>json</code></strong>，但是不小心错写成 <strong><code>applicaiton/json</code></strong> 。初学者大多都会误用 data 属性。</p><p>这种情况下，ajax 方法<strong>总是会</strong>进入 error 部分。因为你的预期的返回的数据类型（<em><code>application/json</code></em>）与实际类型（<em><code>json</code></em>）并不一致，也算是 error 。</p></div><p>一般 error 函数返回的参数有三个：<code>function(XMLHttpRequest, textStatus, errorThrown)</code>。我们关注的是第一个 <code>XMLHttpRequest</code> 。</p><p>从第一个参数 <code>XMLHttpRequest</code> 中我们可以获得服务端返回的错误相关的信息：</p><ul><li><p><code>XMLHttpRequest.status</code></p><p>返回的 HTTP 状态码，例如 <code>404</code>、<code>500</code> 等错误代码。</p></li><li><p><code>XMLHttpRequest.statusText</code></p><p>对应状态码的错误信息。比如 <code>404</code> 错误信息是 <code>not found</code>；<code>500</code> 是 <code>Internal Server Error</code> 。</p></li><li><p><code>XMLHttpRequest.responseText</code></p><p>服务器响应返回的文本信息，即，Response 的 body 的内容。</p></li></ul><p>『完』</p>',40),e={render:function(n,s){return t}}}}]);