"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[5158],{61029:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-6ac23ec7",path:"/spring-mvc/003-Controller.html",title:"Controller 的编写和配置",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"Controller 注解类型",slug:"controller-注解类型",children:[]},{level:2,title:"@RequestMapping 注解类型",slug:"requestmapping-注解类型",children:[]},{level:2,title:"编写请求方法",slug:"编写请求方法",children:[]},{level:2,title:"请求参数和路径变量",slug:"请求参数和路径变量",children:[]}],filePathRelative:"spring-mvc/003-Controller.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},5453:(n,s,a)=>{a.r(s),a.d(s,{default:()=>t});const p=(0,a(66252).uE)('<h1 id="controller-的编写和配置" tabindex="-1"><a class="header-anchor" href="#controller-的编写和配置" aria-hidden="true">#</a> Controller 的编写和配置</h1><p><strong>@Controller</strong> 注解和 <strong>@RequestMapping</strong> 注解是 Spring MVC 最重要的两个注解。</p><p>使用基于注解的控制器的优点如下：</p><ul><li><p>一个 Controller 类可以处理多个动作，而实现了一个 <strong>Controller</strong> 接口的控制器只能处理一个动作。</p></li><li><p>基于 Controller 注解的控制器的请求映射不需要写在配置文件中。使用 <strong>@RequestMapping</strong> 注解类型，可以对一个方法进行请求处理。</p></li></ul><h2 id="controller-注解类型" tabindex="-1"><a class="header-anchor" href="#controller-注解类型" aria-hidden="true">#</a> Controller 注解类型</h2><p>Spring 使用扫描机制来找到应用程序中所有基于注解的控制器类。为了保证 Spring 能找到你的控制器，必须完成两件事：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// ...</span>\n<span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token string">&quot;...&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringWebConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ol><li><p>自定义一个配置类，实现 <strong>WebMvcConfigurer</strong> 接口；</p></li><li><p>在配置类上标注，<strong>@ComponentScan</strong> 扫描你的 <strong>@Controller</strong> 所在的包。</p></li></ol><p>注意，不要让 Spring 扫描一个太广泛的包，这会包含无意义的行为。</p><h2 id="requestmapping-注解类型" tabindex="-1"><a class="header-anchor" href="#requestmapping-注解类型" aria-hidden="true">#</a> @RequestMapping 注解类型</h2><p><strong>@RequestMapping</strong> 注解类型的作用如同起名字所暗示：映射一个请求和一个方法。可以使用它注解一个方法或类。</p><p>被 <strong>@RequestMapping</strong> 注解的方法将成为一个 <strong>请求处理方法</strong> ，在接收到URL请求时被调用。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">&quot;/hello&quot;</span><span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token class-name">RequestMethod</span><span class="token punctuation">.</span>GET<span class="token punctuation">,</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span>POST<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token class-name">ModelAndView</span> <span class="token function">printHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Hello World&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">ModelAndView</span> mav <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    mav<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Hello Spring MVC Framework!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    mav<span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> mav<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p><strong>value</strong> 属性是 <strong>@RequestMapping</strong> 的默认属性，唯一时可省略属性名。</p><p><strong>method</strong> 属性用来指示该方法仅处理哪些 HTTP 方法。若 <strong>method</strong> 属性只有一个值时，则无须花括号。若没有指定 <strong>method</strong> 属性值，则请求方法可处理任意 HTTP 方法。</p><p>此外，如果用 <strong>@RequestMapping</strong> 注解一个控制器类，那么，所有的方法都将映射为『<strong>相对于</strong>』类级别的请求。</p><h2 id="编写请求方法" tabindex="-1"><a class="header-anchor" href="#编写请求方法" aria-hidden="true">#</a> 编写请求方法</h2><p>每个请求处理方法的参数和返回值『<strong>既灵活又严格</strong>』。</p><p>最为常见的参数类型有：</p><ul><li><p>HttpServletRequest、HttpServletResponse、HttpSession</p></li><li><p>Map、Model、ModelMap</p></li><li><p>表单对象（<small><strong>次常用</strong></small>）</p></li><li><p>带指定注解的参数（<small><strong>最常用</strong></small>）</p></li></ul><p>最为常见的返回值类型有：</p><ul><li><p>ModelAndView（<small><strong>最常用</strong></small>）</p></li><li><p>Model、View</p></li><li><p>String（<small><strong>次常用</strong></small>）</p></li><li><p><small>被当作 View 的模型对象的</small>任意类型</p></li></ul><hr><p>对于初学者而言，如果你觉得『参数类型和返回值类型过于灵活多样，以至于你无法确定你使用哪个种更合适』，那么你就使用 <strong>HttpServletRequest</strong>、<strong>HttpServletResponse</strong> 和 <strong>ModelAndView</strong> ，这是 100% 不会有问题的百搭组合。当然，使用过程中代码会略显罗嗦。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;...&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token class-name">ModelAndView</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="请求参数和路径变量" tabindex="-1"><a class="header-anchor" href="#请求参数和路径变量" aria-hidden="true">#</a> 请求参数和路径变量</h2><p>Spring MVC 提供了一个更简单的方法来获取 Get 请求参数：通过使用 <strong>@RequestParam</strong> 注解。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/hehe/{id}&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token class-name">ModelAndView</span> <span class="token function">printGoodbye</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">ModelAndView</span> mav <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    mav<span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> mav<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>此处需要注意的是，你的拦截规则是拦截所有请求，还是拦截特定后缀<small>（无法拦截并触发该方法的执行）</small>？！</p><p>『完』</p>',30),t={render:function(n,s){return p}}}}]);