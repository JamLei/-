"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[58],{8016:(i,l,t)=>{t.r(l),t.d(l,{data:()=>e});const e={key:"v-1b478c32",path:"/git/001-%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F.html",title:"版本控制系统",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[],filePathRelative:"git/001-版本控制系统.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},55595:(i,l,t)=>{t.r(l),t.d(l,{default:()=>p});const e=(0,t(66252).uE)('<h1 id="版本控制系统" tabindex="-1"><a class="header-anchor" href="#版本控制系统" aria-hidden="true">#</a> 版本控制系统</h1><p>版本管理系统是将『<strong>什么时候、谁、对什么文件做了怎样的修改</strong>』这样的信息以版本的形式保存并进行管理的系统。</p><p>简单来说版本控制系统会去记录它所管理的文件的『<strong>历史版本</strong>』。</p><p>Subversion<small>（2000）</small>和 Git<small>（2005）</small>是两个最常见的合并模式的版本管理系统。在 2014 年之前，使用 Subversion 的人和项目更多，2014 年 Git 的市场占有率首次超过 Subversion，成为主流。</p><hr><p>由多人修改而造成的冲突被称为 <strong>Conflict</strong> 。为了解决冲突问题，版本管理系统提供了两类机制：</p><ul><li><p>锁模式：锁定 &gt; 修改 &gt; 解锁模式</p></li><li><p>合并模式：复制 &gt; 修改 &gt; 合并模式</p></li></ul><p>版本管理系统的两大工作机制细则：</p><ul><li><p>锁模式的做法是：</p><ul><li><p>在某人编辑文件期间，将文件锁住，不允许其他人对此文件进行编辑。</p></li><li><p>优点是简单粗暴，易于理解操作。</p></li><li><p>缺点是无法多人同时并发开发，难以提升开发速度。</p></li><li><p>早期的版本管理系统主要采用这种方式。锁模式基本已经退出历史舞台。</p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/git/img/vcs_1.png" alt="图片"></p></li></ul></li><li><p>合并模式的做法是：</p><ul><li><p>开发者下载『代码的备份』进行编辑，然后再提交到代码库。提交时确认差异<small>（diff）</small>，如果存在差异，要先对差异进行合并，然后再提交。</p></li><li><p>优点是支持多人同时并发开发，提升开发速度。</p></li><li><p>缺点是相较于锁模式而言，引入了新的概念，增加了入门难度。</p></li><li><p>当前的版本管理系统都属于这种模式。</p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/git/img/vcs_2.png" alt="图片"></p></li></ul></li></ul>',9),p={render:function(i,l){return e}}}}]);