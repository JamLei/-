"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[4177],{52951:(t,e,l)=>{l.r(e),l.d(e,{data:()=>a});const a={key:"v-3e90be5a",path:"/java/04-%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6.html",title:"Java 集合底层原理剖析",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"Java 集合介绍",slug:"java-集合介绍",children:[]},{level:2,title:"List",slug:"list",children:[{level:3,title:"Vector",slug:"vector",children:[]},{level:3,title:"Stack",slug:"stack",children:[]},{level:3,title:"ArrayList",slug:"arraylist",children:[]},{level:3,title:"LinkedList",slug:"linkedlist",children:[]},{level:3,title:"CopyOnWriteArrayList",slug:"copyonwritearraylist",children:[]},{level:3,title:"ArrayList、LinkedList 和 Vector 三者的区别",slug:"arraylist、linkedlist-和-vector-三者的区别",children:[]}]},{level:2,title:"Map",slug:"map",children:[{level:3,title:"HashTable",slug:"hashtable",children:[]},{level:3,title:"HashMap",slug:"hashmap",children:[]},{level:3,title:"ConcurrentHashMap",slug:"concurrenthashmap",children:[]},{level:3,title:"HashMap、Hashtable、ConccurentHashMap 三者的区别",slug:"hashmap、hashtable、conccurenthashmap-三者的区别",children:[]},{level:3,title:"TreeMap",slug:"treemap",children:[]},{level:3,title:"LinkedHashMap",slug:"linkedhashmap",children:[]},{level:3,title:"HashMap 与 Hashtable 的区别",slug:"hashmap-与-hashtable-的区别",children:[]},{level:3,title:"HashMap 与 TreeMap 的区别",slug:"hashmap-与-treemap-的区别",children:[]}]},{level:2,title:"Set",slug:"set",children:[{level:3,title:"HashSet",slug:"hashset",children:[]},{level:3,title:"TreeSet",slug:"treeset",children:[]},{level:3,title:"LinkedHashSet",slug:"linkedhashset",children:[]},{level:3,title:"HashSet、TreeSet、LinkedHashSet 的区别",slug:"hashset、treeset、linkedhashset-的区别",children:[]},{level:3,title:"CopyOnWriteArraySet",slug:"copyonwritearrayset",children:[]}]},{level:2,title:"队列（Queue）",slug:"队列-queue",children:[{level:3,title:"非阻塞队列（普通队列）",slug:"非阻塞队列-普通队列",children:[]},{level:3,title:"阻塞队列",slug:"阻塞队列",children:[]},{level:3,title:"其它队列（优先级队列）",slug:"其它队列-优先级队列",children:[]}]}],filePathRelative:"java/04-集合框架.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},63072:(t,e,l)=>{l.r(e),l.d(e,{default:()=>s});const a=(0,l(66252).uE)('<h1 id="java-集合底层原理剖析" tabindex="-1"><a class="header-anchor" href="#java-集合底层原理剖析" aria-hidden="true">#</a> Java 集合底层原理剖析</h1><h2 id="java-集合介绍" tabindex="-1"><a class="header-anchor" href="#java-集合介绍" aria-hidden="true">#</a> Java 集合介绍</h2><p>Java 集合是一个存储相同类型数据的容器，类似数组，集合可以不指定长度，但是数组必须指定长度。集合类主要从 <strong>Collection</strong> 和 <strong>Map</strong> 两个根接口派生出来，比如常用的 ArrayList、LinkedList、HashMap、HashSet、ConcurrentHashMap 等等。</p><ul><li><p>Collection 根接口框架简化结构图<small>（线程不安全）</small>：</p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/java/img/collection-1.png" alt="collection-1"></p></li><li><p>Collection 根接口框架简化结构图<small>（线程安全）</small>：</p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/java/img/collection-2.png" alt="collection-2"></p></li><li><p>Map 根接口框架简化结构图（线程不安全）：</p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/java/img/map-1.png" alt="map-1"></p></li><li><p>Map 根接口框架简化结构图（线程安全）：</p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/java/img/map-2.png" alt="map-2"></p></li></ul><h2 id="list" tabindex="-1"><a class="header-anchor" href="#list" aria-hidden="true">#</a> List</h2><p>List 体系在 JDK 1.0 的时候就已经存在了。<small>作为它的兄弟，Set 接口反而是在 JDK 1.2 中才被补充进集合框架。</small></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Collection                   (jdk 1.0)\n└── List                     (jdk 1.0)\n    |── Vector / Stack       (jdk 1.0)\n    |── ArrayList            (jdk 1.2)\n    |── LinkedList           (jdk 1.2)\n    └── CopyOnWriteArrayList (jdk 1.5)\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="vector" tabindex="-1"><a class="header-anchor" href="#vector" aria-hidden="true">#</a> Vector</h3><pre><code>线程安全\n底层使用『动态数组』实现\n</code></pre><p><strong>Vector</strong> 是第一波<small>（JDK 1.0）</small>出现的 List 接口的实现类，这批实现类都是线程安全的。</p><blockquote><p>JDK 1.5 通过 J.U.C 对 JDK 1.0 的这波线程安全的实现类提出了大范围的替换。</p><p>在未来<small>（JDK 1.5 中）</small>，顶替 Vector 的就是 CopyOnWriteArrayList 。</p></blockquote><p>Vector 的底层是通过『<strong>动态数组</strong>』实现的。『动态数组』是指当数组容量不足以存放新的元素时，会创建新的数组，然后把原数组中的内容复制到新数组。</p><p><strong>特征</strong>：</p><ol><li>允许添加 null 值，且允许添加多个；</li><li>查询效率高、插入、删除效率低，因为需要移动元素；</li><li>默认的初始化大小为 10，默认扩容系数是 1。<small>如果扩容后还不够，则以实际需要扩容</small>；</li><li>线程安全。<small>带来的代价是，在单线程环境下白白付出性能损耗。</small></li></ol><p><strong>使用场景</strong>：多线程环境</p><h3 id="stack" tabindex="-1"><a class="header-anchor" href="#stack" aria-hidden="true">#</a> Stack</h3><pre><code>线程安全\nVector 的子类，底层使用『动态数组』实现\n</code></pre><p>Stack 和 Vector 一样，也是第一批<small>（JDK 1.0）</small>出现的 List 接口实现类，而且，它还是 Vector 的子类。</p><p>由于 Stack 是 Vector 的子类的关系，因此，显而易见，Stack 也是线程安全的，且底层也是使用『动态数组』实现的。</p><p>JDK 中 Stack 的类对应的是数据结构中的『栈』的概念，实现先入先出<small>（FIFO）</small>功能。</p><blockquote><p>在 Stack 不推荐使用之后，逻辑上，在 Java 集合框架中现在是没有现成的『栈』的。数据结构中的『队列』和『栈』，在 Java 集合框架中都是通过使用『<strong>双端队列</strong>』来实现功能。</p></blockquote><p><strong>实现原理</strong>：</p><ol><li>Stack 执行 push() 时，将数据推进栈，即把数据追加到数组的末尾。</li><li>Stack 执行 peek 时，取出栈顶数据，不删除此数据，即获取数组首个元素。</li><li>Stack 执行 pop 时，取出栈顶数据，在栈顶删除数据，即删除数组首个元素。</li><li>Stack 继承于 Vector，所以 Vector 拥有的属性和功能，Stack 都拥有，比如 add()、set() 等等。</li></ol><h3 id="arraylist" tabindex="-1"><a class="header-anchor" href="#arraylist" aria-hidden="true">#</a> ArrayList</h3><pre><code>线程不安全\n底层使用动态数组实现\n</code></pre><p>ArrayList 是第二波<small>（JDK 1.2）</small>出现的 List 接口的实现类。<small>这批接口主要都是线程不安全版的实现。</small></p><p>由于是基于『<strong>动态数组</strong>』实现的，所以，ArrayList <strong>随机访问效率高</strong>，随机插入、随机删除效率低。</p><blockquote><p>在 JDK 1.5 之前，ArrayList 对标的是 Vector，它俩一个是 List 的线程不安全实现，一个是线程安全实现。在 JDK 1.5 推出 J.U.C 之后，ArrayList 对标的就是 CopyOnWriteArrayList 。</p><p>另外，还可以使用 <code>Collections.synchronizedList(list)</code> 函数返回一个线程安全的 ArrayList 类。</p></blockquote><p><strong>特征</strong>：</p><ol><li>允许添加 null 值，且允许添加多个；</li><li>查询效率高、插入、删除效率低，因为大量 copy 原来元素；</li><li>线程不安全。</li></ol><p><strong>使用场景</strong>：</p><ol><li>需要快速随机访问元素</li><li>单线程环境</li></ol><p><strong>注意事项</strong>：</p><ol><li><code>new ArrayList()</code> 创建对象时，如果没有指定集合容量则初始化为 0；如果有指定，则按照指定的大小初始化；</li><li>扩容时，先将集合扩大 1.5 倍，如果还是不够，则根据实际长度来扩容，保证都能存储所有数据，比如 <code>addAll()</code> 场景。</li><li>如果新扩容后数组长度大于（Integer.MAX_VALUE-8），则抛出 OutOfMemoryError。</li></ol><h3 id="linkedlist" tabindex="-1"><a class="header-anchor" href="#linkedlist" aria-hidden="true">#</a> LinkedList</h3><pre><code>线程不安全\n底层使用『双向链表』实现\n</code></pre><p>LinkedList 和 ArrayList 是“双胞胎”，它和 ArrayList 都是同一波<small>（JDK 1.2）</small>出现的 List 接口的实现类。这波实现类都是线程不安全的。</p><p>它俩的区别仅在于底层用到的数据结构上。</p><p>另外，LinkedList 比 ArrayList 多实现了『别的』接口<small>（Deque 接口）</small>，因此，它的功能要比 ArrayList 要『多』。</p><p>因此，ArrayList 和 LinkedList 的使用上的定位有所不同：</p><ul><li>ArrayList 更像是一个纯 List；</li><li>LinkedList 更多的要扮演数据结构中的『队列』和『栈』的角色。</li></ul><p><strong>特征</strong>：</p><ol><li>允许添加 null 值，且允许添加多个；</li><li>插入和删除效率高，查询效率低；</li><li>顺序访问会非常高效，而随机访问效率<small>（比如 get 方法）</small>比较低；</li><li>因为还『多』实现了 Deque 接口，因此功能比兄弟 ArrayList 更多：能实现数据结构中的栈和队列的功能。</li><li>线程不安全。</li></ol><p><strong>使用场景</strong>：</p><ol><li>需要快速插入，删除元素按照顺序访问其中的元素</li><li>单线程环境</li></ol><h3 id="copyonwritearraylist" tabindex="-1"><a class="header-anchor" href="#copyonwritearraylist" aria-hidden="true">#</a> CopyOnWriteArrayList</h3><pre><code>线程安全\n底层使用『动态数组』实现\n</code></pre><p><strong>CopyOnWriteArrayList</strong> 是第三批<small>（JDK 1.5）</small>出现的 List 接口的实现类。这批实现类的主要目的是替换掉早期<small>（JDK 1.0）</small>的线程安全版的实现，以提供能好的并发性能。 所以，这批实现类都是线程安全的。</p><p>CopyOnWriteArrayList 要替换掉的对象就是 Vector 。</p><blockquote><p>另外，除了 CopyOnWriteArrayList 和 Vector 来获得线程安全版的 List之外，你还可以使用 <code>Collections.synchronizedList(List list)</code> 来获得线程安全版的 List 。</p></blockquote><p><strong>特征</strong>：</p><ol><li>线程安全；</li><li>读多写少，比如缓存；</li><li>不能保证实时一致性，只能保证最终一致性。</li></ol><p><strong>缺点</strong>：</p><ol><li>写操作，需要拷贝数组，比较消耗内存，如果原数组容量大的情况下，可能触发频繁的 Young GC 或者 Full GC；</li><li>不能用于实时读的场景，因为读取到数据可能是旧的，可以保证最终一致性。</li></ol><p><strong>实现原理</strong>：</p><ol><li>CopyOnWriteArrayList 写操作加了锁，不然多线程进行写操作时会复制多个副本；</li><li>写操作<small>（add、set、remove 等等）</small>时，把原数组拷贝一份出来，然后在新数组进行写操作，操作完后，再将原数组引用指向到新数组。</li><li>读操作没有加锁，所以可以实现并发读，但是可能读到旧的数据，比如正在执行读操作时，同时有多个写操作在进行，遇到这种场景时，就会都到旧数据。</li></ol><h3 id="arraylist、linkedlist-和-vector-三者的区别" tabindex="-1"><a class="header-anchor" href="#arraylist、linkedlist-和-vector-三者的区别" aria-hidden="true">#</a> ArrayList、LinkedList 和 Vector 三者的区别</h3><p>历史发展层面：</p><table><thead><tr><th style="text-align:left;">List 的实现</th><th style="text-align:left;">诞生</th></tr></thead><tbody><tr><td style="text-align:left;">Vector<small>（Stack）</small></td><td style="text-align:left;">JDK 1.0</td></tr><tr><td style="text-align:left;">ArrayList</td><td style="text-align:left;">JDK 1.2</td></tr><tr><td style="text-align:left;">LinkedList</td><td style="text-align:left;">JDK 1.2</td></tr></tbody></table><p>线程安全层面：</p><table><thead><tr><th style="text-align:left;">List 的实现</th><th style="text-align:left;">线程安全</th></tr></thead><tbody><tr><td style="text-align:left;">Vector<small>（Stack）</small></td><td style="text-align:left;">Y</td></tr><tr><td style="text-align:left;">ArrayList</td><td style="text-align:left;">N</td></tr><tr><td style="text-align:left;">LinkedList</td><td style="text-align:left;">N</td></tr></tbody></table><p>底层数据结构层面：</p><table><thead><tr><th style="text-align:left;">List 的实现</th><th style="text-align:left;">底层实现</th></tr></thead><tbody><tr><td style="text-align:left;">Vector<small>（Stack）</small></td><td style="text-align:left;">动态数组</td></tr><tr><td style="text-align:left;">ArrayList</td><td style="text-align:left;">动态数组</td></tr><tr><td style="text-align:left;">LinkedList</td><td style="text-align:left;">双向链表</td></tr></tbody></table><p>其它小区别：</p><ol><li>扩容问题：ArrayList 默认扩容 1.5 倍；Vector 默认扩容 1 倍；LinkedList 不存在扩容问题。</li><li>效率问题：由于底层数据结构原因，ArrayList、Vector 访问更快；LinkedList 增删更快。</li><li>内存开销问题：由于底层数据结构原因，ArrayList、Vector 内存内开销更小，但需要是连续内存空间；LinkedList 内存开销更大，但无需连续内存空间。</li></ol><h2 id="map" tabindex="-1"><a class="header-anchor" href="#map" aria-hidden="true">#</a> Map</h2><p>Map 体系在 JDK 1.0 的时候就已经存在了，在当时是集合框架的两条腿之一<small>（另一条腿是 List 体系，而 Set 体系在 JDK 1.2 才出现）</small>。</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Map                    (jdk 1.0)\n|── Hashtable          (jdk 1.0)\n|── TreeMap            (jdk 1.2)\n|── HashMap            (jdk 1.2)\n|   └── LinkedHashMap  (jdk 1.4)\n└── ConcurrentHashMap  (jdk 1.5)\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>Map 结构是以 key-value 键值对形式存储数据。</p><h3 id="hashtable" tabindex="-1"><a class="header-anchor" href="#hashtable" aria-hidden="true">#</a> HashTable</h3><pre><code>线程安全\n底层使用『数组+链表』实现\n</code></pre><p>Hashtable 是最早一批<small>（JDK 1.0）</small>出现的 Map 接口的实现类。这批实现类都是线程安全的。</p><blockquote><p>JDK 1.5 通过 J.U.C 对 JDK 1.0 的这波线程安全的实现类提出了大范围的替换。</p><p>在未来<small>（JDK 1.5 中）</small>，顶替 Hashtable 的就是 ConcurrentHashMap 。</p></blockquote><p>除了实现 Map 接口，Hashtable 还继承了 Dictionary 类。<small>这是它的兄弟姐妹们所没有的特征。</small></p><p>特征：</p><ul><li>key 和 value 都不允许为 null。<small>这一点更像是设计缺点，在后面出现的 Map 实现类中，对于这一点都做出了『修正』</small>；</li><li>Hashtable 默认的初始大小为 11，之后每次扩充为原来的 2 倍；</li><li>线程安全。</li></ul><h3 id="hashmap" tabindex="-1"><a class="header-anchor" href="#hashmap" aria-hidden="true">#</a> HashMap</h3><pre><code>线程不安全\n底层使用『数组+链表+红黑树』实现\n</code></pre><p>HashMap 是第二批<small>（JDK 1.2）</small>出现的 Map 接口的实现类。这波实现类出现的目的主要是为了填补集合框架中缺少非线程安全版的实现，因此这一批实现类主要都是线程不安全的。</p><p>另外，JDK 8 中对 HashMap 的底层实现做出了较大的变动<small>（升级）</small>，其中最大的改动就是引入了红黑树。当链表长度 <code>&gt;=8</code> 时，并且同时数组的长度 <code>&gt;=64</code> 时，链表就转换为红黑树，利用红黑树快速增删改查的特点提高 HashMap 的性能。</p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/java/img/HashMap.png" alt="HashMap"></p><p>HashMap 使用链地址法解决哈希冲突。</p><p><strong>特征</strong>：</p><ol><li><p>认为 <code>null</code> 是合法的 key 值；但是整个 Map 中 key 为 <code>null</code> 的键值对最多只能有一个。</p></li><li><p>认为 <code>null</code> 是合法的 value 值，且可以有多个键值对的 value 为 null 。</p></li><li><p>查询、插入、删除效率都高<small>（集成了多方特性）</small></p></li><li><p>线程不安全</p></li><li><p>用到了一个编程小技巧：用位运算（&amp;）来代替取模运算（%）</p><blockquote><p>当 b 的值为 2^n 时，<code>a % b</code> 和 <code>a ^ (b-1)</code> 的值相等。这样效率更高，并且可以解决负数问题<small>（负数模运算取余，余数应该始终为正数）</small>。</p></blockquote></li></ol><p><strong>使用场景</strong>：</p><ol><li>快速增删改查</li><li>随机存取</li><li>缓存</li></ol><h3 id="concurrenthashmap" tabindex="-1"><a class="header-anchor" href="#concurrenthashmap" aria-hidden="true">#</a> ConcurrentHashMap</h3><pre><code>线程安全\n底层使用『数组 + 链表 + 红黑树』实现\n</code></pre><p>ConcurrentHashMap 是第三批<small>（JDK 1.5）</small>添加到集合框架中的 Map 接口的实现。这批实现类出现的主要目的是为了替换之前<small>（JDK 1.0）</small>中的线程安全版的实现。因此，这批实现类主要都是线程安全的。</p><p>ConcurrentHashMap 要替换的就是 Hashtable 。</p><p>在 Java 8 版本中，ConcurrentHashMap 有比较大的变动<small>（更新升级）</small>，采用 CAS + Synchronized 实现锁操作，以确保线程安全。</p><p><strong>使用场景</strong>：并发、线程不安全场景</p><h3 id="hashmap、hashtable、conccurenthashmap-三者的区别" tabindex="-1"><a class="header-anchor" href="#hashmap、hashtable、conccurenthashmap-三者的区别" aria-hidden="true">#</a> HashMap、Hashtable、ConccurentHashMap 三者的区别</h3><p>历史发展层面：</p><table><thead><tr><th style="text-align:left;">List 的实现</th><th style="text-align:left;">诞生</th></tr></thead><tbody><tr><td style="text-align:left;">Hashtable</td><td style="text-align:left;">JDK 1.0</td></tr><tr><td style="text-align:left;">HashMap</td><td style="text-align:left;">JDK 1.2</td></tr><tr><td style="text-align:left;">ConccurentHashMap</td><td style="text-align:left;">JDK 1.5</td></tr></tbody></table><p>线程安全层面：</p><table><thead><tr><th style="text-align:left;">Map 的实现</th><th style="text-align:left;">线程安全</th></tr></thead><tbody><tr><td style="text-align:left;">Hashtable</td><td style="text-align:left;">线程安全<small>（Synchronized 实现）</small></td></tr><tr><td style="text-align:left;">HashMap</td><td style="text-align:left;">线程不安全</td></tr><tr><td style="text-align:left;">ConccurentHashMap</td><td style="text-align:left;">线程安全<small>（CAS + Synchronized 实现）</small></td></tr></tbody></table><p>底层数据结构层面：</p><table><thead><tr><th style="text-align:left;">List 的实现</th><th style="text-align:left;">底层实现</th></tr></thead><tbody><tr><td style="text-align:left;">Hashtable</td><td style="text-align:left;">数组 + 链表</td></tr><tr><td style="text-align:left;">HashMap</td><td style="text-align:left;">数组 + 链表 + 红黑树</td></tr><tr><td style="text-align:left;">ConccurentHashMap</td><td style="text-align:left;">数组 + 链表 + 红黑树</td></tr></tbody></table><p>其它小细节：</p><ul><li>最早出现的 Hashtable 和它的替代者 ConccurentHashMap 不允许 key 和 value 为 <code>null</code> ；HashMap 则可以，HashMap 允许 key 和 value 为 <code>null</code> 。</li></ul><h3 id="treemap" tabindex="-1"><a class="header-anchor" href="#treemap" aria-hidden="true">#</a> TreeMap</h3><pre><code>线程不安全\n底层使用『红黑树』实现\n</code></pre><p>TreeMap 和 HashMap 一起都是第二批<small>（JDK 1.2）</small>出现的 Map 接口的实现类。这批实现类的出现主要是为了填补集合框架体系中没有 Map 的线程不安全版的缺失。因此，它们都是线程不安全的。</p><p>TreeMap 除了实现了 Map 接口，它还实现了 SotredMap 接口，意味着可以排序，是一个有序的集合，你添加进 TreeMap 中的数据会被它自动排序。</p><p>底层数据结构是红黑树结构，TreeMap 中的每个元素都存放在红黑树的节点上，默认使用自然排序，也可以自定排序，线程不安全。</p><h3 id="linkedhashmap" tabindex="-1"><a class="header-anchor" href="#linkedhashmap" aria-hidden="true">#</a> LinkedHashMap</h3><pre><code>线程不安全\n底层使用『数组 + 链表 + 红黑树』实现\n</code></pre><p>LinkedHashMap 并不是在关键节点<small>（JDK 1.0、1.2 和 1.5）</small>添加进集合框架的，它是在 JDK 1.4 的时候添加进集合框架的。<small>看起来像个补丁。</small></p><p>LinkedHashMap 继承自 HashMap ，它在 HashMap 的基础上用链表额外去『串』起了所有的节点，这样就能记录下添加到 LinkeHashMap 中的数据的添加顺序，从而保证了迭代顺序和添加顺序的一致。</p><h3 id="hashmap-与-hashtable-的区别" tabindex="-1"><a class="header-anchor" href="#hashmap-与-hashtable-的区别" aria-hidden="true">#</a> HashMap 与 Hashtable 的区别</h3><p>历史发展层面：</p><table><thead><tr><th style="text-align:left;">Map 的实现</th><th style="text-align:left;">诞生</th></tr></thead><tbody><tr><td style="text-align:left;">HashTable</td><td style="text-align:left;">JDK 1.0</td></tr><tr><td style="text-align:left;">HashMap</td><td style="text-align:left;">JDK 1.2</td></tr></tbody></table><p>线程安全层面：</p><table><thead><tr><th style="text-align:left;">Map 的实现</th><th style="text-align:left;">线程安全</th></tr></thead><tbody><tr><td style="text-align:left;">HashTable</td><td style="text-align:left;">Yes</td></tr><tr><td style="text-align:left;">HashMap</td><td style="text-align:left;">No</td></tr></tbody></table><p>底层数据结构：</p><table><thead><tr><th style="text-align:left;">Map 的实现</th><th style="text-align:left;">底层实现</th></tr></thead><tbody><tr><td style="text-align:left;">Hashtable</td><td style="text-align:left;">数组 + 链表</td></tr><tr><td style="text-align:left;">HashMap</td><td style="text-align:left;">数组 + 链表 + 红黑树</td></tr></tbody></table><p>其它小细节：</p><ol><li>Hashtable 除了实现 Map 接口外，还继承了 Dictionary 类；HashMap 则没有。</li><li>Hashtable 认为 <code>null</code> 是非法 key；HashMap 则认为 null 作 key 合法。<small>不过，HashMap 只允许有一个 key 为 null 的键值对。</small></li><li>Hashtable 认为 <code>null</code> 是非法 value; HashMap 则认为 null 作 value 合法。</li><li><code>key.hashCode()</code> 算法中，Hashtable 用的 <code>%</code> 运算；HashMap 用上了一个编程小技巧，使用 <code>&amp;</code> 运算</li><li>两者初始容量不同，Hashtable 默认 11；HashMap 大一点，默认 16 。</li></ol><h3 id="hashmap-与-treemap-的区别" tabindex="-1"><a class="header-anchor" href="#hashmap-与-treemap-的区别" aria-hidden="true">#</a> HashMap 与 TreeMap 的区别</h3><p><strong>历史发展层面</strong>： 它俩都是在 JDK 1.2 引入到集合框架中的。</p><p><strong>线程安全层面</strong>：它俩都是线程不安全的。</p><p><strong>底层数据结构</strong>：</p><table><thead><tr><th style="text-align:left;">Map 的实现</th><th style="text-align:left;">底层实现</th></tr></thead><tbody><tr><td style="text-align:left;">HashMap</td><td style="text-align:left;">数组 + 链表 + 红黑树，无序</td></tr><tr><td style="text-align:left;">TreeMap</td><td style="text-align:left;">红黑树，有序</td></tr></tbody></table><p><strong>其它小细节</strong>：</p><ul><li><p>HashMap 认为 null-key 合法；TreeMap 则认为 null-key 非法。</p></li><li><p>HashMap 效率略高；TreeMap 效率略低。</p></li></ul><h2 id="set" tabindex="-1"><a class="header-anchor" href="#set" aria-hidden="true">#</a> Set</h2><p>整个 Set 体系是在第二波<small>（JDK 1.2）</small>才被添加进集合框架中的，看起来，它好似 List 的兄弟，但是实际上，它出现地要比 List<small>（和 Map）</small>晚。</p><p>由于在集合框架的第一波<small>（JDK 1.0）</small>中并没有 Set 体系，因此 Set 体系在线程安全的实现上，就没有想 List 和 Map 一样『走弯路』：</p><ul><li><p>JDK 1.2 中引入是 Set 的线程不安全实现；</p></li><li><p>在 JDK 1.5<small>（J.U.C）</small>中引入的是 Set 的线程安全实现。</p></li></ul><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Set                     (jdk 1.2)\n|── TreeSet             (jdk 1.2)\n|── HashSet             (jdk 1.2)\n|   └── LinkedHashSet   (jdk 1.4)\n└── CopyOnWriteArraySet (jdk 1.5)\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>一个既有意思又重要的现象：虽然 Set 看起来和 List 更亲<small>（都是 Collection 接口的子接口）</small>，但是 Set 的各种实现类底层却是『<strong>利用 Map</strong>』实现的自己的功能。</p><h3 id="hashset" tabindex="-1"><a class="header-anchor" href="#hashset" aria-hidden="true">#</a> HashSet</h3><pre><code>线程不安全\n底层用 HashMap 实现。根本结构是数组+链表+红黑树。\n</code></pre><p>HashSet 是用来存储没有重复元素的集合类，并且是无序的。<small>或者说，你可以添加重复元素，但是从第二次添加开始，你加了也白加。</small></p><p>由于 HashSet 底层利用的是 HashMap 实现，因此你添加到 HashSet 中的值，都被它添加到一个 HashMap 中作了 key：</p><ul><li>由于 HashMap 的 key 不能重复，所以 HashSet 中的值自然也就是不能重复的；</li><li>由于 HashMap 允许 null-key，所以 HashSet 中也可以添加一个 null 。</li></ul><p><strong>使用场景</strong>：去重、不要求顺序</p><h3 id="treeset" tabindex="-1"><a class="header-anchor" href="#treeset" aria-hidden="true">#</a> TreeSet</h3><pre><code>线程不安全\n底层使用 TreeMap 实现，因此根本结构是『红黑树』。\n</code></pre><p>TreeSet 除了实现 Set 接口，它还实现了 SortedSet 接口，意味着可以排序，它是一个有序并且没有重复的集合类。<small>TreeMap 是有序的，因此 TreeSet 自然也就是有序的。</small></p><p>由于 TreeSet 底层利用的是 TreeMap 实现，因此你添加到 TreeSet 中的值，都被它添加到一个 TreeMap 中作了 key：</p><ul><li><p>TreeMap 是内部有序的，TreeSet 自然也就是内部有序的；</p></li><li><p>TreeMap 不允许添加 null-key，TreeSet 自然也就不允许添加 null 值。</p></li></ul><p>TreeSet 支持两种排序方式：自然排序<small>（默认）</small>和自定义排序。</p><p><strong>使用场景</strong>：去重、要求排序</p><h3 id="linkedhashset" tabindex="-1"><a class="header-anchor" href="#linkedhashset" aria-hidden="true">#</a> LinkedHashSet</h3><pre><code>线程不安全\nHashSet 的子类，底层利用了 LinkedHashMap，因此根本结构是『数组+链表+红黑树』。\n</code></pre><p>由于 LinkedHashSet 底层利用了 LinkedHashMap，因此：</p><ul><li>LinkedHashMap 是 JDK 1.4 中出现的；LinkedHashSet 自然也是 JDK 1.4 才出现的；</li><li>LinkedHashMap 能记录元素的添加次序，LinkedHashSet 自然也就能记录 元素的添加次序。</li></ul><p><strong>使用场景</strong>：去重、需要保证插入或者访问顺序</p><h3 id="hashset、treeset、linkedhashset-的区别" tabindex="-1"><a class="header-anchor" href="#hashset、treeset、linkedhashset-的区别" aria-hidden="true">#</a> HashSet、TreeSet、LinkedHashSet 的区别</h3><p><strong>历史发展层面</strong>：</p><table><thead><tr><th style="text-align:left;">Set 的实现</th><th style="text-align:left;">诞生</th></tr></thead><tbody><tr><td style="text-align:left;">HashSet</td><td style="text-align:left;">JDK 1.2</td></tr><tr><td style="text-align:left;">TreeSet</td><td style="text-align:left;">JDK 1.2</td></tr><tr><td style="text-align:left;">LinkedHashSet</td><td style="text-align:left;">JDK 1.4</td></tr></tbody></table><p><strong>线程安全层面</strong>：他们三个都是线程不安全的。</p><p>底层数据结构：</p><table><thead><tr><th style="text-align:left;">Set 的实现</th><th style="text-align:left;">底层实现</th></tr></thead><tbody><tr><td style="text-align:left;">HashSet</td><td style="text-align:left;">利用了 HashMap，去重</td></tr><tr><td style="text-align:left;">TreeSet</td><td style="text-align:left;">利用了 TreeMap，去重 + 内部有序</td></tr><tr><td style="text-align:left;">LinkedHashSet</td><td style="text-align:left;">利用了 LinkedHashMap，去重 + 外部有序</td></tr></tbody></table><h3 id="copyonwritearrayset" tabindex="-1"><a class="header-anchor" href="#copyonwritearrayset" aria-hidden="true">#</a> CopyOnWriteArraySet</h3><pre><code>线程安全\n底层利用的是 CopyOnWriteArrayList \n</code></pre><p>CopyOnWriteArraySet 是 JDK 1.5<small>（J.U.C）</small>引入的 Set 接口的线程安全实现。</p><p><strong>特征</strong>：线程安全读多写少，比如缓存不能存储重复元素。</p><h2 id="队列-queue" tabindex="-1"><a class="header-anchor" href="#队列-queue" aria-hidden="true">#</a> 队列（Queue）</h2><p>Queue 体系比较『新』。<strong>Queue</strong> 接口在 JDK 1.5 才引入到 JDK 集合框架体系，它的子接口 <strong>Deque</strong> 接口在 JDK 1.6 的时候才补充进 JDK 。</p><p>Deque 继承自 Queue ，是一个既可以在头部操作元素，又可以为尾部操作元素，俗称为双端队列。</p><blockquote><p>在数据结构领域，Queue 是一个先入先出<small>（FIFO）</small>的集合。</p></blockquote><p>在集合框架中它分为 3 大类：</p><ul><li><p>非阻塞队列：普通队列<small>（Queue、Deque）</small></p></li><li><p>阻塞队列<small>（BlockingQueue）</small></p></li><li><p>其它队列：主要是优先级队列 <small>（PriorityQueue）</small></p></li></ul><p><strong>其它队列<small>（主要是优先级队列）</small></strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Collection\n└── Queue\n    |── PriorityQueue\n    └── PriorityBlockingQueue\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="非阻塞队列-普通队列" tabindex="-1"><a class="header-anchor" href="#非阻塞队列-普通队列" aria-hidden="true">#</a> 非阻塞队列<small>（普通队列）</small></h3><p>非阻塞队列<small>（普通队列）</small>主要指的是 Queue 接口<small>（JDK 1.5）</small>和 Deque 接口<small>（JDK 1.6）</small>的直接实现类。</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Collection\n└── Queue\n    |── ConcurrentLinkedQueue       基于链表，线程安全\n    └── Deque \n        |── ArrayDeque              基于动态数组，线程不安全\n        |── LinkedList              基于链表，线程不安全\n        └── ConcurrentLinkedDeque   基于链表，线程安全\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><strong>Queue 接口定义<small>（引入）</small>的方法包括：</strong></p><table><thead><tr><th style="text-align:left;"></th><th style="text-align:left;">Throws exception</th><th style="text-align:left;">Returns special value</th></tr></thead><tbody><tr><td style="text-align:left;">Insert</td><td style="text-align:left;">add(e)</td><td style="text-align:left;">offer(e)</td></tr><tr><td style="text-align:left;">Remove</td><td style="text-align:left;">remove()</td><td style="text-align:left;">poll()</td></tr><tr><td style="text-align:left;">Examine</td><td style="text-align:left;">element()</td><td style="text-align:left;">peek()</td></tr></tbody></table><p><strong>Deque 接口定义<small>（引入）</small>的方法包括：</strong></p><table><thead><tr><th style="text-align:left;"></th><th style="text-align:left;">Throws exception</th><th style="text-align:left;">Special value</th><th style="text-align:left;">Throws exception</th><th style="text-align:left;">Special value</th></tr></thead><tbody><tr><td style="text-align:left;">Insert</td><td style="text-align:left;">addFirst(e)</td><td style="text-align:left;">offerFirst(e)</td><td style="text-align:left;">addLast(e)</td><td style="text-align:left;">offerLast(e)</td></tr><tr><td style="text-align:left;">Remove</td><td style="text-align:left;">removeFirst()</td><td style="text-align:left;">pollFirst()</td><td style="text-align:left;">removeLast()</td><td style="text-align:left;">pollLast()</td></tr><tr><td style="text-align:left;">Examine</td><td style="text-align:left;">getFirst()</td><td style="text-align:left;">peekFirst()</td><td style="text-align:left;">getLast()</td><td style="text-align:left;">peekLast()</td></tr></tbody></table><p>在引入 Deque 接口之后，JDK 很是器重它，一方面 Deque 的功能涵盖了 Queue 的功能，另一方面，数据结构中的『栈』和『队列』都可以通过 Deque 统一实现。</p><p><strong>Queue VS Deque：</strong></p><table><thead><tr><th style="text-align:left;">Queue Method</th><th style="text-align:left;">Equivalent Deque Method</th></tr></thead><tbody><tr><td style="text-align:left;">add(e)</td><td style="text-align:left;">addLast(e)</td></tr><tr><td style="text-align:left;">offer(e)</td><td style="text-align:left;">offerLast(e)</td></tr><tr><td style="text-align:left;">remove()</td><td style="text-align:left;">removeFirst()</td></tr><tr><td style="text-align:left;">poll()</td><td style="text-align:left;">pollFirst()</td></tr><tr><td style="text-align:left;">element()</td><td style="text-align:left;">getFirst()</td></tr><tr><td style="text-align:left;">peek()</td><td style="text-align:left;">peekFirst()</td></tr></tbody></table><p><strong>Stack VS Deque：</strong></p><table><thead><tr><th style="text-align:left;">Stack Method</th><th style="text-align:left;">Equivalent Deque Method</th></tr></thead><tbody><tr><td style="text-align:left;">push(e)</td><td style="text-align:left;">addFirst(e)</td></tr><tr><td style="text-align:left;">pop()</td><td style="text-align:left;">removeFirst()</td></tr><tr><td style="text-align:left;">peek()</td><td style="text-align:left;">peekFirst()</td></tr></tbody></table><h3 id="阻塞队列" tabindex="-1"><a class="header-anchor" href="#阻塞队列" aria-hidden="true">#</a> 阻塞队列</h3><p>阻塞队列在队列功能的基础上提供了『阻塞当前线程』的能力：在空队列获取元素时、或者在已存满队列存储元素时，都会被阻塞当前线程。<strong>阻塞队列全部都是线程安全的。</strong></p><p><strong>阻塞队列体系</strong>：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Collection\n└── Queue\n    |── BlockingQueue \n    |   |── LinkedBlockingQueue     基于链表\n    |   |── ArrayBlockingQueue      基于动态数组\n    |   └── SynchronousQueue        基于 CAS 的阻塞队列。                     |\n    └── Deque\n        └── BlockingDeque\n            └── LinkedBlockingDeque 基于链表，双端队列\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>BlockingQueue 接口引入了一套新的 API，它和 Queue 的那套 API 是独立的，互不影响，不要调用错了。</p><table><thead><tr><th style="text-align:left;"></th><th style="text-align:left;">Throws exception</th><th style="text-align:left;">Special value</th><th style="text-align:left;">Blocks</th><th style="text-align:left;">Times out</th></tr></thead><tbody><tr><td style="text-align:left;">Insert</td><td style="text-align:left;">add(e)</td><td style="text-align:left;">offer(e)</td><td style="text-align:left;">put(e)</td><td style="text-align:left;">offer(e, time, unit)</td></tr><tr><td style="text-align:left;">Remove</td><td style="text-align:left;">remove()</td><td style="text-align:left;">poll()</td><td style="text-align:left;">take()</td><td style="text-align:left;">poll(time, unit)</td></tr><tr><td style="text-align:left;">Examine</td><td style="text-align:left;">element()</td><td style="text-align:left;">peek()</td><td style="text-align:left;">not applicable</td><td style="text-align:left;">not applicable</td></tr></tbody></table><h3 id="其它队列-优先级队列" tabindex="-1"><a class="header-anchor" href="#其它队列-优先级队列" aria-hidden="true">#</a> 其它队列（优先级队列）</h3><p>PriorityQueue 是基于最小二叉堆实现的数据结构。内部以自然顺序排序。</p><p>常见的 PriorityQueue 是线程非安全的，PriorityBlockingQueue 是线程安全的。它俩底层数据结构是一样的。</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Collection\n└── Queue\n    |── PriorityQueue\n    └── BlockingQueue\n        └── PriorityBlockingQueue\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>',190),s={render:function(t,e){return a}}}}]);