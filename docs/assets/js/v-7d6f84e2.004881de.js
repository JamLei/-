"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[9888],{91582:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-7d6f84e2",path:"/maven/Gradle-01.html",title:"Gradle",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"Gradle 的下载",slug:"gradle-的下载",children:[]},{level:2,title:"Gradle 配置",slug:"gradle-配置",children:[]},{level:2,title:"Gradle 构建系统的基本概念",slug:"gradle-构建系统的基本概念",children:[]},{level:2,title:"Gradle 构建系统的组成",slug:"gradle-构建系统的组成",children:[]},{level:2,title:"Hello World",slug:"hello-world",children:[]},{level:2,title:"Task 之间的依赖关系",slug:"task-之间的依赖关系",children:[]},{level:2,title:"Gradle 插件的概念",slug:"gradle-插件的概念",children:[]},{level:2,title:"外部依赖",slug:"外部依赖",children:[]},{level:2,title:"项目依赖",slug:"项目依赖",children:[]}],filePathRelative:"maven/Gradle-01.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},94830:(n,s,a)=>{a.r(s),a.d(s,{default:()=>X});var e=a(66252);const l=(0,e.uE)('<h1 id="gradle" tabindex="-1"><a class="header-anchor" href="#gradle" aria-hidden="true">#</a> Gradle</h1><p>Gradle 是一种依赖管理工具<small>（和 Ant、Maven 是同一类工具）</small>，基于 Groovy 语言，面向 Java 应用为主，它抛弃了基于 XML 的各种繁琐配置，取而代之的是一种基于 Groovy 的内部『<strong>领域特定语言</strong> <small>DSL</small>』。它提供灵活的通用构建工具，同时完美兼容Maven 仓库。</p><blockquote><p>Gradle 作为第三代项目构建技术、工具，它的“名场面”是 Android 使用它<small>（替代了 Maven）</small>作为项目构建工具。</p></blockquote><h2 id="gradle-的下载" tabindex="-1"><a class="header-anchor" href="#gradle-的下载" aria-hidden="true">#</a> Gradle 的下载</h2>',4),r=(0,e.Uk)("在官网 "),p={href:"https://gradle.org/",target:"_blank",rel:"noopener noreferrer"},t=(0,e.Uk)("https://gradle.org/"),o=(0,e.Uk)(" 可以下载 gradle 的各个版本。现列举如下："),i=(0,e._)("thead",null,[(0,e._)("tr",null,[(0,e._)("th",{style:{"text-align":"left"}},"版本"),(0,e._)("th",{style:{"text-align":"center"}},"binary-only")])],-1),c=(0,e._)("td",{style:{"text-align":"left"}},"v6.7.1",-1),d={style:{"text-align":"center"}},u={href:"https://downloads.gradle-dn.com/distributions/gradle-6.7.1-bin.zip",target:"_blank",rel:"noopener noreferrer"},g=(0,e.Uk)("下载"),b=(0,e._)("td",{style:{"text-align":"left"}},"v6.7",-1),m={style:{"text-align":"center"}},k={href:"https://downloads.gradle-dn.com/distributions/gradle-6.7-bin.zip",target:"_blank",rel:"noopener noreferrer"},v=(0,e.Uk)("下载"),h=(0,e._)("td",{style:{"text-align":"left"}},"v6.6.1",-1),y={style:{"text-align":"center"}},x={href:"https://downloads.gradle-dn.com/distributions/gradle-6.6.1-bin.zip",target:"_blank",rel:"noopener noreferrer"},_=(0,e.Uk)("下载"),f=(0,e._)("td",{style:{"text-align":"left"}},"v6.6",-1),G={style:{"text-align":"center"}},j={href:"https://downloads.gradle-dn.com/distributions/gradle-6.6-bin.zip",target:"_blank",rel:"noopener noreferrer"},w=(0,e.Uk)("下载"),H=(0,e._)("td",{style:{"text-align":"left"}},"v6.5.1",-1),L={style:{"text-align":"center"}},q={href:"https://downloads.gradle-dn.com/distributions/gradle-6.5.1-bin.zip",target:"_blank",rel:"noopener noreferrer"},W=(0,e.Uk)("下载"),U=(0,e._)("td",{style:{"text-align":"left"}},"v6.5",-1),z={style:{"text-align":"center"}},C={href:"https://downloads.gradle-dn.com/distributions/gradle-6.5-bin.zip",target:"_blank",rel:"noopener noreferrer"},F=(0,e.Uk)("下载"),M=(0,e._)("td",{style:{"text-align":"left"}},"v6.4.1",-1),T={style:{"text-align":"center"}},P={href:"https://downloads.gradle-dn.com/distributions/gradle-6.4.1-bin.zip",target:"_blank",rel:"noopener noreferrer"},O=(0,e.Uk)("下载"),A=(0,e._)("td",{style:{"text-align":"left"}},"v6.4",-1),D={style:{"text-align":"center"}},E={href:"https://downloads.gradle-dn.com/distributions/gradle-6.4-bin.zip",target:"_blank",rel:"noopener noreferrer"},I=(0,e.Uk)("下载"),R=(0,e._)("td",{style:{"text-align":"left"}},"v6.3",-1),J={style:{"text-align":"center"}},B={href:"https://downloads.gradle-dn.com/distributions/gradle-6.3-bin.zip",target:"_blank",rel:"noopener noreferrer"},N=(0,e.Uk)("下载"),S=(0,e.uE)('<p>下载后，按惯例，我们将 gradle 解压到 <em>D:\\ProgramFiles</em> 目录下。</p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/maven/img/gradle-00.png" alt="gradle-00"></p><h2 id="gradle-配置" tabindex="-1"><a class="header-anchor" href="#gradle-配置" aria-hidden="true">#</a> Gradle 配置</h2><p>添加 Gradle 环境变量<small>（目的是未来可以在命令行中使用 gradle 命令）</small>。</p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/maven/img/gradle-01.png" alt="gradle-01"></p><p>在系统变量中新建变量 GRADLE_HOME，变量值为 gradle 的安装目录，并在 Path 变量中添加一项值：</p><pre><code>%GRADLE_HOME%\\bin\n</code></pre><p><img src="https://hemiao3000.gitee.io/java-note-img/images/maven/img/gradle-02.png" alt="gradle-02"></p><p>配置完成后打开 cmd 窗口，输入：</p><pre><code>gradle -version\n</code></pre><p>若出现版本信息则表示环境配置成功：</p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/maven/img/gradle-03.png" alt="gradle-03"></p><h2 id="gradle-构建系统的基本概念" tabindex="-1"><a class="header-anchor" href="#gradle-构建系统的基本概念" aria-hidden="true">#</a> Gradle 构建系统的基本概念</h2><p>『<strong>项目</strong>』<small>（Project）</small>和『<strong>任务</strong>』<small>（tasks）</small>，Gradle 里的任何东西都是基于这两个基础概念。</p><ul><li><p><strong>项目</strong> 通常是指我们的构建产物，比如 .jar包。<small>当然它还可以是一个 <strong>行为</strong> ，例如：将应用程序部署到生产环境。</small></p></li><li><p><strong>任务</strong> 是指不可分的最小工作单元，执行构建工作，比如 compile 项目或 run 测试代码。</p></li><li><p>每一个构建<small>（build）</small>都是由一个或多个 project 构成的，每一个 project 是由一个或多个 tasks 构成的，一个 task 是指不可分的最小工作单元。</p></li></ul><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Build\n│── Project 1\n│   ├── Task a\n│   ├── Task b\n│   ├── ... \n│   └── Task n\n│── Project 2\n│── ...\n└── Project n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="gradle-构建系统的组成" tabindex="-1"><a class="header-anchor" href="#gradle-构建系统的组成" aria-hidden="true">#</a> Gradle 构建系统的组成</h2><p>任何一个构建系统都是由多个构建文件组成：</p><ul><li><p>Ant 需要你提供一个名为 build.xmlM 的文件；</p></li><li><p>Maven 需要你提供一个名为 pom.xml 的文件；</p></li><li><p>C 语言的 Make 需要你提供一个名为 makefile 的文件。</p></li></ul><p>这些文件<small>（构建脚本）</small>定义了一系列的规则来指定项目编译流程。</p><p>Gradle 的构建系统需要你提供 2 个必要文件和 1 个非必要文件：</p><ul><li><p>build.gradle 必需</p><p>构建脚本。这个脚本定义了一个模块和编译用的 tasks，它一般是放在项目的模块中，也可以放在项目的根目录用来作为编译结构全局设置。</p></li><li><p>settings.gradle 必需</p><p>它描述了哪一个模块需要参与构建。如果是多模块的构建，那么必须在多模块结构的根目录中加入这个设置文件。</p></li><li><p>gradle.properties 非必需</p><p>用来配置构建属性。</p></li></ul><h2 id="hello-world" tabindex="-1"><a class="header-anchor" href="#hello-world" aria-hidden="true">#</a> Hello World</h2><p>Gradle 是基于 Groovy 语言的构建系统，所以在构建脚本中可以使用 Groovy 语言来执行一些任务。</p><p>下面编写一个简单的 <em><strong>build.gradle</strong></em> 文件，定义一个 <em><strong>task</strong></em> 来打印 hello world，如下所示：</p><div class="language-groovy ext-groovy line-numbers-mode"><pre class="language-groovy"><code>task hello <span class="token punctuation">{</span>    <span class="token comment">// 先定义一个 hello 的 task</span>\n    doLast <span class="token punctuation">{</span>    <span class="token comment">// 实现 doLast 方法。这个名字不能随便乱叫的。</span>\n        println <span class="token string">&#39;Hello world!&#39;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>然后在终端中运行 <code>gradle hello</code> 命令来执行这个 task，就会看到以下输入内容：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token operator">&gt;</span> gradle hello\n\n// 输出结果：\n<span class="token operator">&gt;</span> Task :hello\nHello world<span class="token operator">!</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><strong>doLast</strong> 是 gradle 提供访问 task 任务的一个 API ，类似的 API 还有 <strong>doFirst</strong> 。</p><p>当一个 task 被执行的时候，<strong>doFirst</strong> 和 <strong>doLast</strong> 会在 task 本身被执行之后执行。并且，doFirst 要限于 doLast 执行，例如：</p><div class="language-groovy ext-groovy line-numbers-mode"><pre class="language-groovy"><code>task hello <span class="token punctuation">{</span>    <span class="token comment">// hello 这个 task 本身要执行的逻辑</span>\n    println <span class="token string">&#39;Hello World&#39;</span>\n<span class="token punctuation">}</span>\n\nhello<span class="token punctuation">.</span>doFirst <span class="token punctuation">{</span>\n    println <span class="token string">&#39;Hello First 1&#39;</span>\n<span class="token punctuation">}</span>\n\nhello<span class="token punctuation">.</span>doFirst <span class="token punctuation">{</span>\n    println <span class="token string">&#39;Hello First 2&#39;</span>\n<span class="token punctuation">}</span>\n\nhello<span class="token punctuation">.</span>doLast <span class="token punctuation">{</span>\n    println <span class="token string">&#39;Hello Last 1&#39;</span>\n<span class="token punctuation">}</span>\n\nhello<span class="token punctuation">.</span>doLast <span class="token punctuation">{</span>    \n    println <span class="token string">&#39;Hello Last 2&#39;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>输入如下所示：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token operator">&gt;</span> gradle hello\n\n// 输出结果\n<span class="token operator">&gt;</span> Task :hello\nHello First <span class="token number">2</span>\nHello First <span class="token number">1</span>\nHello Last <span class="token number">1</span>\nHello Last <span class="token number">2</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="task-之间的依赖关系" tabindex="-1"><a class="header-anchor" href="#task-之间的依赖关系" aria-hidden="true">#</a> Task 之间的依赖关系</h2><p>在 Gradle 中各个 task 并不是孤立的，它们可以是相互依赖的。要让一个 task 依赖另外一个task，只需要在 task 定义时加入 <code>dependsOn:</code> 说明即可，<strong>被依赖的 task 会优先依赖者被执行</strong>，例如：</p><ul><li><p>示例一：</p><div class="language-groovy ext-groovy line-numbers-mode"><pre class="language-groovy"><code>task hello <span class="token punctuation">{</span>\n    println <span class="token string">&#39;Hello&#39;</span>\n<span class="token punctuation">}</span>\n\ntask <span class="token function">world</span><span class="token punctuation">(</span>dependsOn<span class="token punctuation">:</span> hello<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    println <span class="token string gstring">&quot;world&quot;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>执行结果：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>gradle world\n\n<span class="token operator">&gt;</span> Configure project <span class="token builtin class-name">:</span>\nHello\nworld\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li><li><p>示例二：</p><div class="language-groovy ext-groovy line-numbers-mode"><pre class="language-groovy"><code>task hello <span class="token punctuation">{</span>\n    doLast <span class="token punctuation">{</span>\n        println <span class="token string">&#39;Hello&#39;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\ntask <span class="token function">world</span><span class="token punctuation">(</span>dependsOn<span class="token punctuation">:</span> hello<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    doLast <span class="token punctuation">{</span>\n        println <span class="token string gstring">&quot;world&quot;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>结果：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>gradle world\n\n&gt; Task :hello\nHello\n\n&gt; Task :world\nworld\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></li></ul><h2 id="gradle-插件的概念" tabindex="-1"><a class="header-anchor" href="#gradle-插件的概念" aria-hidden="true">#</a> Gradle 插件的概念</h2><p>和 Maven 一样，Gradle 的所有的特性都由 Gradle 插件提供的<small>（这些插件无非就是『官方插件』和『第三方插件』的区别）</small>。</p><p>每当你使用了一个插件，这个插件会将许多 task 自动的加入到你项目里。</p><p>Gradle 本身提供了一系列的标准插件<small>（即官方插件）</small>，对于官方插件，无需多余配置只需要在你的 <em><strong>build.gradle</strong></em> 文件中的 plugins 中加入插件的 ID，例如：</p><div class="language-groovy ext-groovy line-numbers-mode"><pre class="language-groovy"><code>plugins <span class="token punctuation">{</span>\n    id <span class="token string">&#39;java&#39;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>还有一种“老式”的写法：</p><div class="language-groovy ext-groovy line-numbers-mode"><pre class="language-groovy"><code>apply plugin<span class="token punctuation">:</span> <span class="token string">&#39;java&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><blockquote><p>当然，这两种写法不仅仅是新写法、老写法的问题，它们还是有一些细节上的区别的，这里，我们暂不深究。</p></blockquote><p>常见的 Gradle 的 task ：</p><ul><li><p>gradle build: 编译整个项目，它会执行代码编译、代码检测和单元测试等</p></li><li><p>gradle assemble: 编译并打包你的代码, 但是并不运行代码检测和单元测试</p></li><li><p>gradle clean: 删除 build 生成的目录和所有生成的文件</p></li><li><p>gradle check: 编译并测试你的代码。其它的插件会加入更多的检查步骤，如使用 checkstyle、pmd、findbugs 等。</p></li></ul><blockquote><p>Gradle 中的 task 等价于 maven 中的『命令』。</p></blockquote><h2 id="外部依赖" tabindex="-1"><a class="header-anchor" href="#外部依赖" aria-hidden="true">#</a> 外部依赖</h2><p>通常, 一个 Java 项目将有许多外部的依赖, 既指向外部的 .jar 文件. 为了在项目里引用这些 .jar 文件, 你需要告诉 Gradle 去哪里找它们。在 Gradle 中, .jar 文件位于一个在线的中央仓库中，这里的仓库类似于 maven 的仓库。</p><p>首先，指定 maven 的仓库地址：</p><div class="language-groovy ext-groovy line-numbers-mode"><pre class="language-groovy"><code>repositories <span class="token punctuation">{</span>\n    <span class="token function">mavenCentral</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>由于 gradle 完全兼容 maven 的中央仓库，上述的配置的作用显而易见：从 maven 中央仓库下载 .jar 包。</p><div class="language-groovy ext-groovy line-numbers-mode"><pre class="language-groovy"><code>dependencies <span class="token punctuation">{</span>\n  implementation <span class="token string">&#39;org.slf4j:slf4j-api:1.7.25&#39;</span>\n  runtimeOnly <span class="token string">&#39;mysql:mysql-connector-java&#39;</span>\n  providedCompile <span class="token string">&#39;javax.servlet:javax.servlet-api:4.0.1&#39;</span>\n  testCompile <span class="token string">&#39;junit:junit:4.12&#39;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><blockquote><p>老式的写法并非如此，此处不展示。</p></blockquote><ul><li><p>implementation: 等同于 maven 中的 compile 依赖</p></li><li><p>runtimeOnly: 等同于 maven 中的 runtime 依赖</p></li><li><p>providedCompile: 等同于 maven 中的 provided 依赖</p></li><li><p>testCompile: 等同于 maven 中的 test 依赖</p></li></ul><h2 id="项目依赖" tabindex="-1"><a class="header-anchor" href="#项目依赖" aria-hidden="true">#</a> 项目依赖</h2><p>往往一个完整的项目由多个子项目构成。在 maven 中，这就是『多模块』项目。</p><p>在 gradle 中，使用文件 *<strong>settings.gradle</strong> 定义当前项目的子项目。默认情况下，每个子项目的名称对应着当前操作系统目录下的一个子目录。</p><div class="language-groovy ext-groovy line-numbers-mode"><pre class="language-groovy"><code>include <span class="token string">&#39;gradle-example-1&#39;</span>\ninclude <span class="token string">&#39;gradle-example-2&#39;</span>\ninclude <span class="token string">&#39;gradle-example-3&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>可以可以简写成：</p><div class="language-groovy ext-groovy line-numbers-mode"><pre class="language-groovy"><code>include <span class="token string">&#39;gradle-example-1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;gradle-example-2&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;gradle-example-3&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>如果子项目之间有依赖关系，那么，可以写成：</p><div class="language-groovy ext-groovy line-numbers-mode"><pre class="language-groovy"><code>dependencies <span class="token punctuation">{</span>\n    <span class="token function">implementation</span><span class="token punctuation">(</span><span class="token function">project</span><span class="token punctuation">(</span><span class="token string">&#39;:gradle-example-1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">...</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>',63),X={render:function(n,s){const a=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.iD)(e.HY,null,[l,(0,e._)("p",null,[r,(0,e._)("a",p,[t,(0,e.Wm)(a)]),o]),(0,e._)("table",null,[i,(0,e._)("tbody",null,[(0,e._)("tr",null,[c,(0,e._)("td",d,[(0,e._)("a",u,[g,(0,e.Wm)(a)])])]),(0,e._)("tr",null,[b,(0,e._)("td",m,[(0,e._)("a",k,[v,(0,e.Wm)(a)])])]),(0,e._)("tr",null,[h,(0,e._)("td",y,[(0,e._)("a",x,[_,(0,e.Wm)(a)])])]),(0,e._)("tr",null,[f,(0,e._)("td",G,[(0,e._)("a",j,[w,(0,e.Wm)(a)])])]),(0,e._)("tr",null,[H,(0,e._)("td",L,[(0,e._)("a",q,[W,(0,e.Wm)(a)])])]),(0,e._)("tr",null,[U,(0,e._)("td",z,[(0,e._)("a",C,[F,(0,e.Wm)(a)])])]),(0,e._)("tr",null,[M,(0,e._)("td",T,[(0,e._)("a",P,[O,(0,e.Wm)(a)])])]),(0,e._)("tr",null,[A,(0,e._)("td",D,[(0,e._)("a",E,[I,(0,e.Wm)(a)])])]),(0,e._)("tr",null,[R,(0,e._)("td",J,[(0,e._)("a",B,[N,(0,e.Wm)(a)])])])])]),S],64)}}}}]);