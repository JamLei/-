"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[2711],{52629:(e,i,a)=>{a.r(i),a.d(i,{data:()=>r});const r={key:"v-461f101d",path:"/interview-questions/08-rabbitmq.html",title:"RabbitMQ 面试题",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:3,title:"1. 消息队列的应用场景有哪些？",slug:"_1-消息队列的应用场景有哪些",children:[]},{level:3,title:"2.RabbitMQ 有哪些优点？",slug:"_2-rabbitmq-有哪些优点",children:[]},{level:3,title:"3.RabbitMQ 有哪些重要的角色？",slug:"_3-rabbitmq-有哪些重要的角色",children:[]},{level:3,title:"4.RabbitMQ 有哪些重要的组件？它们有什么作用？",slug:"_4-rabbitmq-有哪些重要的组件-它们有什么作用",children:[]},{level:3,title:"5.什么是消息持久化？",slug:"_5-什么是消息持久化",children:[]},{level:3,title:"6.RabbitMQ 要实现消息持久化，需要满足哪些条件？",slug:"_6-rabbitmq-要实现消息持久化-需要满足哪些条件",children:[]},{level:3,title:"7.消息持久化有哪些缺点？如何缓解？",slug:"_7-消息持久化有哪些缺点-如何缓解",children:[]},{level:3,title:"10.RabbitMQ 交换器类型有哪些？",slug:"_10-rabbitmq-交换器类型有哪些",children:[]},{level:3,title:"11.RabbitMQ 如何确保每个消息能被消费？",slug:"_11-rabbitmq-如何确保每个消息能被消费",children:[]},{level:3,title:"12.RabbitMQ 接收到消息之后必须消费吗？",slug:"_12-rabbitmq-接收到消息之后必须消费吗",children:[]},{level:3,title:"13.topic 模式下发布了一个路由键为“com.mq.rabbit.error”的消息，请问以下不能接收到消息的是？",slug:"_13-topic-模式下发布了一个路由键为-com-mq-rabbit-error-的消息-请问以下不能接收到消息的是",children:[]},{level:3,title:"14.以下可以获取历史消息的是？",slug:"_14-以下可以获取历史消息的是",children:[]}],filePathRelative:"interview-questions/08-rabbitmq.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},49312:(e,i,a)=>{a.r(i),a.d(i,{default:()=>t});const r=(0,a(66252).uE)('<h1 id="rabbitmq-面试题" tabindex="-1"><a class="header-anchor" href="#rabbitmq-面试题" aria-hidden="true">#</a> RabbitMQ 面试题</h1><h3 id="_1-消息队列的应用场景有哪些" tabindex="-1"><a class="header-anchor" href="#_1-消息队列的应用场景有哪些" aria-hidden="true">#</a> 1. 消息队列的应用场景有哪些？</h3><p>答：消息队列的应用场景如下：</p><ul><li><p><strong>应用解耦</strong>，比如，用户下单后，订单系统需要通知库存系统，假如库存系统无法访问，则订单减库存将失败，从而导致订单失败。订单系统与库存系统耦合，这个时候如果使用消息队列，可以返回给用户成功，先把消息持久化，等库存系统恢复后，就可以正常消费减去库存了。</p></li><li><p>削峰填谷，比如，秒杀活动，一般会因为流量过大，从而导致流量暴增，应用挂掉，这个时候加上消息队列，服务器接收到用户的请求后，首先写入消息队列，假如消息队列长度超过最大数量，则直接抛弃用户请求或跳转到错误页面。</p></li><li><p>日志系统，比如，客户端负责将日志采集，然后定时写入消息队列，消息队列再统一将日志数据存储和转发。</p></li></ul><h3 id="_2-rabbitmq-有哪些优点" tabindex="-1"><a class="header-anchor" href="#_2-rabbitmq-有哪些优点" aria-hidden="true">#</a> 2.RabbitMQ 有哪些优点？</h3><p>答：RabbitMQ 的优点如下：</p><ul><li><p>可靠性，RabbitMQ 的持久化支持，保证了消息的稳定性；</p></li><li><p>高并发，RabbitMQ 使用了 Erlang 开发语言，Erlang 是为电话交换机开发的语言，天生自带高并发光环和高可用特性；</p></li><li><p>集群部署简单，正是因为 Erlang 使得 RabbitMQ 集群部署变的非常简单；</p></li><li><p>社区活跃度高，因为 RabbitMQ 应用比较广泛，所以社区的活跃度也很高；</p></li><li><p>解决问题成本低，因为资料比较多，所以解决问题的成本也很低；</p></li><li><p>支持多种语言，主流的编程语言都支持，如 Java、.NET、PHP、Python、JavaScript、Ruby、Go 等；</p></li><li><p>插件多方便使用，如网页控制台消息管理插件、消息延迟插件等。</p></li></ul><h3 id="_3-rabbitmq-有哪些重要的角色" tabindex="-1"><a class="header-anchor" href="#_3-rabbitmq-有哪些重要的角色" aria-hidden="true">#</a> 3.RabbitMQ 有哪些重要的角色？</h3><p>答：RabbitMQ 包含以下三个重要的角色：</p><ul><li><p>生产者：消息的创建者，负责创建和推送数据到消息服务器；</p></li><li><p>消费者：消息的接收方，用于处理数据和确认消息；</p></li><li><p>代理：就是 RabbitMQ 本身，用于扮演“快递”的角色，本身不生产消息，只是扮演“快递”的角色。</p></li></ul><h3 id="_4-rabbitmq-有哪些重要的组件-它们有什么作用" tabindex="-1"><a class="header-anchor" href="#_4-rabbitmq-有哪些重要的组件-它们有什么作用" aria-hidden="true">#</a> 4.RabbitMQ 有哪些重要的组件？它们有什么作用？</h3><p>答：RabbitMQ 包含的重要组件有：ConnectionFactory（连接管理器）、Channel（信道）、Exchange（交换器）、Queue（队列）、RoutingKey（路由键）、BindingKey（绑定键） 等重要的组件，它们的作用如下：</p><ul><li><p>ConnectionFactory（连接管理器）：应用程序与 RabbitMQ 之间建立连接的管理器，程序代码中使用；</p></li><li><p>Channel（信道）：消息推送使用的通道；</p></li><li><p>Exchange（交换器）：用于接受、分配消息；</p></li><li><p>Queue（队列）：用于存储生产者的消息；</p></li><li><p>RoutingKey（路由键）：用于把生成者的数据分配到交换器上；</p></li><li><p>BindingKey（绑定键）：用于把交换器的消息绑定到队列上。</p></li></ul><h3 id="_5-什么是消息持久化" tabindex="-1"><a class="header-anchor" href="#_5-什么是消息持久化" aria-hidden="true">#</a> 5.什么是消息持久化？</h3><p>答：消息持久化是把消息保存到物理介质上，以防止消息的丢失。</p><h3 id="_6-rabbitmq-要实现消息持久化-需要满足哪些条件" tabindex="-1"><a class="header-anchor" href="#_6-rabbitmq-要实现消息持久化-需要满足哪些条件" aria-hidden="true">#</a> 6.RabbitMQ 要实现消息持久化，需要满足哪些条件？</h3><p>答：RabbitMQ 要实现消息持久化，必须满足以下 4 个条件：</p><ul><li><p>投递消息的时候 <strong>durable</strong> 设置为 <code>true</code> ，消息持久化，代码：channel.queueDeclare(x, true, false, false, null)，参数2 设置为 <code>true</code> 持久化；</p></li><li><p>设置投递模式 deliveryMode 设置为 2（持久），代码：channel.basicPublish(x, x, MessageProperties.PERSISTENT TEXT PLAIN,x)，参数3 设置为存储纯文本到磁盘；</p></li><li><p>消息已经到达持久化交换器上；</p></li><li><p>消息已经到达持久化的队列。</p></li></ul><h3 id="_7-消息持久化有哪些缺点-如何缓解" tabindex="-1"><a class="header-anchor" href="#_7-消息持久化有哪些缺点-如何缓解" aria-hidden="true">#</a> 7.消息持久化有哪些缺点？如何缓解？</h3><p>答：消息持久化的缺点是很消耗性能，因为要写入硬盘要比写入内存性能较低很多，从而降低了服务器的吞吐量。可使用固态硬盘来提高读写速度，以达到缓解消息持久化的缺点。</p><h3 id="_10-rabbitmq-交换器类型有哪些" tabindex="-1"><a class="header-anchor" href="#_10-rabbitmq-交换器类型有哪些" aria-hidden="true">#</a> 10.RabbitMQ 交换器类型有哪些？</h3><p>答：RabbitMQ 消费类型也就是交换器（Exchange）类型有以下四种：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code> direct：轮询方式\nheaders：轮询方式，允许使用 header 而非路由键匹配消息，性能差，几乎不用\n fanout：广播方式，发送给所有订阅者\n  topic：匹配模式，允许使用正则表达式匹配消息\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>RabbitMQ 默认的是 <strong>direct</strong> 方式。</p><h3 id="_11-rabbitmq-如何确保每个消息能被消费" tabindex="-1"><a class="header-anchor" href="#_11-rabbitmq-如何确保每个消息能被消费" aria-hidden="true">#</a> 11.RabbitMQ 如何确保每个消息能被消费？</h3><p>答：RabbitMQ 使用 ack 消息确认的方式保证每个消息都能被消费，开发者可根据自己的实际业务，选择 channel.basicAck() 方法手动确认消息被消费。</p><h3 id="_12-rabbitmq-接收到消息之后必须消费吗" tabindex="-1"><a class="header-anchor" href="#_12-rabbitmq-接收到消息之后必须消费吗" aria-hidden="true">#</a> 12.RabbitMQ 接收到消息之后必须消费吗？</h3><p>答：RabbitMQ 接收到消息之后可以不消费，在消息确认消费之前，可以做以下两件事：</p><ul><li>拒绝消息消费，使用 channel.basicReject(消息编号, true) 方法，消息会被分配给其他订阅者；</li><li>设置为死信队列，死信队列是用于专门存放被拒绝的消息队列。</li></ul><h3 id="_13-topic-模式下发布了一个路由键为-com-mq-rabbit-error-的消息-请问以下不能接收到消息的是" tabindex="-1"><a class="header-anchor" href="#_13-topic-模式下发布了一个路由键为-com-mq-rabbit-error-的消息-请问以下不能接收到消息的是" aria-hidden="true">#</a> 13.topic 模式下发布了一个路由键为“com.mq.rabbit.error”的消息，请问以下不能接收到消息的是？</h3><p>A：cn.mq.rabbit.* B：#.error C：cn.mq.* D：cn.mq.#</p><p>答：C</p><p><code>*</code> 用于匹配一个分段（用 <code>.</code> 分割）的内容，<code>#</code> 用于匹配 0 和多个字符。</p><h3 id="_14-以下可以获取历史消息的是" tabindex="-1"><a class="header-anchor" href="#_14-以下可以获取历史消息的是" aria-hidden="true">#</a> 14.以下可以获取历史消息的是？</h3><p>A：topic 交换器 B：fanout 交换器 C：direct 交换器 D：以上都不是</p><p>答：C</p><p>fanout 和 topic 都是广播形式的，因此无法获取历史消息，而 direct 可以。</p>',37),t={render:function(e,i){return r}}}}]);