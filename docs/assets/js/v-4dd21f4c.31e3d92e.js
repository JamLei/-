"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[394],{11105:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-4dd21f4c",path:"/utility/guava/04-%E8%BD%AC%E6%8D%A2.html",title:"字符串、数组、集合的相互转换",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"Array -> List",slug:"array-list",children:[]},{level:2,title:"Array -> String",slug:"array-string",children:[]},{level:2,title:"List -> Array",slug:"list-array",children:[]},{level:2,title:"List -> String",slug:"list-string",children:[]},{level:2,title:"String -> Array",slug:"string-array",children:[]},{level:2,title:"String -> List",slug:"string-list",children:[]}],filePathRelative:"utility/guava/04-转换.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},97864:(n,s,a)=>{a.r(s),a.d(s,{default:()=>p});const t=(0,a(66252).uE)('<h1 id="字符串、数组、集合的相互转换" tabindex="-1"><a class="header-anchor" href="#字符串、数组、集合的相互转换" aria-hidden="true">#</a> 字符串、数组、集合的相互转换</h1><h2 id="array-list" tabindex="-1"><a class="header-anchor" href="#array-list" aria-hidden="true">#</a> <em>Array</em> -&gt; <em>List</em></h2><p>基本上数据类型数组的工具类中都有一个 <em><code>asList()</code></em> 方法，用于将基本类型数组转换成其包装类的集合。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token class-name">Ints</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><blockquote><p>注意，ObjectArrays 中并没有这个方法。</p></blockquote><h2 id="array-string" tabindex="-1"><a class="header-anchor" href="#array-string" aria-hidden="true">#</a> <em>Array</em> -&gt; <em>String</em></h2><p>Guava 也没有提供直接的方法将 <strong>基本类型数组转换字符串</strong>，因为 JDK 中通过 Arrays 已经提供了这种方法：*`Arrays.toString ( ) 。</p><p>另外，对于对象（的引用）的数组，可以通过 Guava 的 Joiiner 进行拼接：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token class-name">Joiner</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;, &quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="list-array" tabindex="-1"><a class="header-anchor" href="#list-array" aria-hidden="true">#</a> <em>List</em> -&gt; <em>Array</em></h2><p>Guava 没有提供这种工具方法。</p><blockquote><p>其实，Guava 的作者们非常不建议使用对象的数组<small>（<em><strong>Object []</strong></em>）</small>，他们认为对象的容器最好是集合，而非数组。</p></blockquote><p>这种情况下只能自己手写代码进行转换：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> list <span class="token operator">=</span> <span class="token class-name">Lists</span><span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token class-name">Array</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> length <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>\n    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="list-string" tabindex="-1"><a class="header-anchor" href="#list-string" aria-hidden="true">#</a> <em>List</em> -&gt; <em>String</em></h2><p>通过 Guava 的 <em><strong>Joinner</strong></em> 可以将集合拼接成字符串：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token class-name">Joiner</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;, &quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>另外，和 Splitter 一样，Joinner 的高级功能也支持拼接 Map：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">String</span> string <span class="token operator">=</span> <span class="token class-name">Joiner</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">withKeyValueSeparator</span><span class="token punctuation">(</span><span class="token string">&quot;=&quot;</span><span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="string-array" tabindex="-1"><a class="header-anchor" href="#string-array" aria-hidden="true">#</a> <em>String</em> -&gt; <em>Array</em></h2><p>Guava 中没有直接的方法将字符串拆分成字符串数组。</p><h2 id="string-list" tabindex="-1"><a class="header-anchor" href="#string-list" aria-hidden="true">#</a> <em>String</em> -&gt; <em>List</em></h2><p>实际上 Guava 中通过 <em><strong>Splitter</strong></em> 拆分字符串时，返回结果就是一个 String 的集合<small>：<em>Iterable</em> 或 <em>List</em> 。</small></p><p>另外，在 <em><strong>Splitter</strong></em> 的高级拆分功能中，开可以支持将特定格式的字符串拆成一个 Map ：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">String</span> toSplitString <span class="token operator">=</span> <span class="token string">&quot;a=b;c=d;e=f&quot;</span><span class="token punctuation">;</span>\n\n<span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> kvs <span class="token operator">=</span> <span class="token class-name">Splitter</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;;&quot;</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">withKeyValueSeparator</span><span class="token punctuation">(</span><span class="token string">&#39;=&#39;</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>toSplitString<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>',25),p={render:function(n,s){return t}}}}]);