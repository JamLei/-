"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[3972],{38682:(t,e,a)=>{a.r(e),a.d(e,{data:()=>s});const s={key:"v-f79b9328",path:"/js/JS-01-%E5%9F%BA%E7%A1%80.html",title:"JavaScript 编程基础",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"1. 基础知识",slug:"_1-基础知识",children:[]},{level:2,title:"2. 值和变量",slug:"_2-值和变量",children:[]},{level:2,title:"3. 定义变量",slug:"_3-定义变量",children:[]},{level:2,title:"4. 运算符",slug:"_4-运算符",children:[]},{level:2,title:"5. 分支与循环",slug:"_5-分支与循环",children:[]},{level:2,title:"6. 数组",slug:"_6-数组",children:[]},{level:2,title:"7. 函数",slug:"_7-函数",children:[]},{level:2,title:"8. 变量的作用域",slug:"_8-变量的作用域",children:[]}],filePathRelative:"js/JS-01-基础.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},57515:(t,e,a)=>{a.r(e),a.d(e,{default:()=>n});const s=(0,a(66252).uE)('<h1 id="javascript-编程基础" tabindex="-1"><a class="header-anchor" href="#javascript-编程基础" aria-hidden="true">#</a> JavaScript 编程基础</h1><h2 id="_1-基础知识" tabindex="-1"><a class="header-anchor" href="#_1-基础知识" aria-hidden="true">#</a> 1. 基础知识</h2><p>JavaScript 是一种可以用来给网页增加交互性的编程语言。</p><p>JavaScript 脚本也是一种程序，它们包含在</p><blockquote><ul><li>HTML 页面内部（原先编写脚本的方式），或者</li><li>驻留在外部文件中（现在的首选方法）。</li></ul></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">&quot;text/javascript&quot;</span> src<span class="token operator">=</span><span class="token string">&quot;js/hello.js&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">&quot;text/javascript&quot;</span><span class="token operator">&gt;</span>\n    xxx<span class="token punctuation">;</span>\n    xxx<span class="token punctuation">;</span>\n    xxx<span class="token punctuation">;</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>在 HTML 页面上，因为脚本文本包围在 <code>&lt;script&gt;</code> 标签中，所以它不会显示在用户的屏幕上，而 Web 浏览器知道应该运行 JavaScript 程序。</p><p>&lt;script&gt; 标签常常放在 HTML 页面的 &lt;head&gt; 部分中。<small>但是如果愿意，也可以将脚本放在 &lt;body&gt; 部分中。</small></p><h2 id="_2-值和变量" tabindex="-1"><a class="header-anchor" href="#_2-值和变量" aria-hidden="true">#</a> 2. 值和变量</h2><p>值类型:</p><table><thead><tr><th style="text-align:left;">类 型</th><th style="text-align:left;">描 述</th></tr></thead><tbody><tr><td style="text-align:left;">数字</td><td style="text-align:left;">任何数字值</td></tr><tr><td style="text-align:left;">字符串</td><td style="text-align:left;">引号中的字符</td></tr><tr><td style="text-align:left;">布尔值（Boolean）</td><td style="text-align:left;">true 或 false</td></tr><tr><td style="text-align:left;">空值（null）</td><td style="text-align:left;">空且无含义</td></tr><tr><td style="text-align:left;">对象</td><td style="text-align:left;">与对象相关联的任何值</td></tr><tr><td style="text-align:left;">函数</td><td style="text-align:left;">函数返回的值</td></tr></tbody></table><p>typeof 操作符是用来检测变量的数据类型。对于值或变量使用 typeof 操作符会返回如下字符串：</p><table><thead><tr><th style="text-align:left;">类型字符串</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">&#39;undefined&#39;</td><td style="text-align:left;">未定义。表示该变量从未被赋过值。</td></tr><tr><td style="text-align:left;">&#39;boolean&#39;</td><td style="text-align:left;">布尔值</td></tr><tr><td style="text-align:left;">&#39;string&#39;</td><td style="text-align:left;">字符串</td></tr><tr><td style="text-align:left;">&#39;number&#39;</td><td style="text-align:left;">数值</td></tr><tr><td style="text-align:left;">&#39;object&#39;</td><td style="text-align:left;">表示对象，或 null。注意，如果变量的值为 null，此处也是返回 object，表示空对象。</td></tr><tr><td style="text-align:left;">&#39;function&#39;</td><td style="text-align:left;">函数。函数是对象的一种，但又是极特殊的一种。</td></tr></tbody></table><h2 id="_3-定义变量" tabindex="-1"><a class="header-anchor" href="#_3-定义变量" aria-hidden="true">#</a> 3. 定义变量</h2><p>要在 JavaScript 中定义变量，需要使用 var 关键字，然后为变量指定一个名字。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> str1<span class="token punctuation">;</span>\n<span class="token keyword">var</span> str2 <span class="token operator">=</span> <span class="token string">&quot;hello world&quot;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>JavaScript 是区分大小写的。这意味着 <code>HELLO</code> 、<code>hello</code>、<code>Hello</code> 并不相同，</p><p>作为动态语言，JavaScript 中变量的类型随着其所存储的数据的类型而变化。</p><p>JS中的 <strong>基本数据类型</strong> 只有三种：<strong>数字</strong>、<strong>字符串</strong> 和 <strong>布尔值</strong> 。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> tmp1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> tmp2 <span class="token operator">=</span> <span class="token string">&quot;hello world&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> tmp3 <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><code>注意</code>：</p><ul><li><p>JS 不区分 <strong>整数</strong> 和 <strong>浮点数</strong> 。</p></li><li><p>JS 中也没有 <strong>字符</strong> 类型。</p></li></ul><p>JavaScript 中数组变量的声明不需要 <code>[]</code> 符号，仍然是 <code>var 变量名;</code> 的形式，不过初始化还是 <code> = [xxx, xxx, xxx]</code> 的形式。</p><p>JavaScript 中多出一个 <em><code>undefined</code></em> 关键字，如果对一个变量从未赋过值，那么该变量的类型就是 <em><code>undefined</code></em> 类型。</p><p>JS 中多出一个判断运算符 <em><code>===</code></em>，它被称为【严格判等运算符】。还是因为变量类型的原因，JS 中允许出现两个变量 “类型不一样，但值一样” 的情况。而严格判等运算符要求两个变量类型和值都必须一样。</p><p><code>注意</code> undefined 是派生自 null 的，因此 JavaScript 中对它们的相等性测试（==）会返回 true。常用的比较“套路”是结合 typeof 比较：<em><code>alert(typeof xx == typeof yy)</code></em></p><h2 id="_4-运算符" tabindex="-1"><a class="header-anchor" href="#_4-运算符" aria-hidden="true">#</a> 4. 运算符</h2><p>略</p><h2 id="_5-分支与循环" tabindex="-1"><a class="header-anchor" href="#_5-分支与循环" aria-hidden="true">#</a> 5. 分支与循环</h2><p>略</p><h2 id="_6-数组" tabindex="-1"><a class="header-anchor" href="#_6-数组" aria-hidden="true">#</a> 6. 数组</h2><p>本质上，JavaScript 没有所谓的【数组】，JavaScript 中的数组实际上就是一个对象。</p><p>每个数组都有一个 <em><code>length</code></em> 属性。和其他语言不一样，JavaScript 数组的 <em><code>length</code></em> 是没有上界的。</p><p>如果使用大于或等于 <em><code>length</code></em> 的数组作为下标，那么 <em><code>length</code></em> 将增大来容纳新元素。</p><p>你可以直接设置 <em><code>length</code></em> 的值。设置为更大的值时，系统无须给数组分配更多的空间。设置为更小的值时，所有下标大于或等于 <em><code>length</code></em> 的属性都被删除。</p><p><em><code>length</code></em> 属性的值是数组最大下标加 1 。它不一定等于数组里元素的个数。</p><p>数组更多的内置方法参见官方 API 文档。</p><h2 id="_7-函数" tabindex="-1"><a class="header-anchor" href="#_7-函数" aria-hidden="true">#</a> 7. 函数</h2><p>函数的定义包括：<em><code>function</code></em> 关键字、描述函数用途的名字、包含在 () 中的 0 个和多个参数的列表，以及由一条或多条代码语句组成的块。</p><p>JavaScript 中函数和方法的声明不需要声明函数/方法返回值类型，形参中的 <code>var</code> 关键字也可以省略。</p><p>JavaScript 中函数/方法是“一等公民”可以对变量赋值，自然也可以作为参数和返回值。</p><p>没有名字的函数被称为匿名函数，常用于对变量的赋值。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="_8-变量的作用域" tabindex="-1"><a class="header-anchor" href="#_8-变量的作用域" aria-hidden="true">#</a> 8. 变量的作用域</h2><p>略</p>',46),n={render:function(t,e){return s}}}}]);