"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[2964],{51981:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-24f9d0e0",path:"/utility/spring-utils/01-top4.html",title:"Spring 中最常用的四个工具类",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"写在前面的话",slug:"写在前面的话",children:[]},{level:2,title:"ObjectUtils",slug:"objectutils",children:[{level:3,title:"获取对象基本信息",slug:"获取对象基本信息",children:[]},{level:3,title:"判断工具",slug:"判断工具",children:[]},{level:3,title:"用 NullSafe 替代 Object 原生方法",slug:"用-nullsafe-替代-object-原生方法",children:[]},{level:3,title:"其他工具",slug:"其他工具",children:[]}]},{level:2,title:"StringUtils",slug:"stringutils",children:[{level:3,title:"判断 String",slug:"判断-string",children:[]},{level:3,title:"操作 String[]",slug:"操作-string",children:[]},{level:3,title:"字符串与容器的互转",slug:"字符串与容器的互转",children:[]},{level:3,title:"操作 String",slug:"操作-string-1",children:[]},{level:3,title:"截取 String",slug:"截取-string",children:[]},{level:3,title:"文件路径字符串操作",slug:"文件路径字符串操作",children:[]},{level:3,title:"其他",slug:"其他",children:[]}]},{level:2,title:"CollectionUtils",slug:"collectionutils",children:[{level:3,title:"判断工具",slug:"判断工具-1",children:[]},{level:3,title:"向集合中添加",slug:"向集合中添加",children:[]},{level:3,title:"在集合中查找",slug:"在集合中查找",children:[]},{level:3,title:"MultiMap 相关",slug:"multimap-相关",children:[]},{level:3,title:"其他",slug:"其他-1",children:[]}]},{level:2,title:"Assert",slug:"assert",children:[]},{level:2,title:"附：TimeZone String",slug:"附-timezone-string",children:[]}],filePathRelative:"utility/spring-utils/01-top4.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},64660:(n,s,a)=>{a.r(s),a.d(s,{default:()=>e});const t=(0,a(66252).uE)('<h1 id="spring-中最常用的四个工具类" tabindex="-1"><a class="header-anchor" href="#spring-中最常用的四个工具类" aria-hidden="true">#</a> Spring 中最常用的四个工具类</h1><ul><li>ObjectUtils</li><li>StringUtils</li><li>CollectionUtils</li><li>Assert</li></ul><p>以下方法皆为 <code>static</code> 方法，故不再显示 <code>static</code> 关键字。</p><h2 id="写在前面的话" tabindex="-1"><a class="header-anchor" href="#写在前面的话" aria-hidden="true">#</a> 写在前面的话</h2><p>有观点认为，对于工具类的使用最好是使用专门的工具包<small>（例如，apache 的 commons 工具箱或者 google 的 guava 库之类）</small>。</p><p>有些框架或者库会有自带的工具类，例如上面这四个<small>（还有其他)</small>。这些工具类很有可能是框架或库的作者在编码过程中为简化某些重复性编码工作而编写的，也许它们最初的目标和使用场景仅限于解决这些特定场景下的特定问题。</p><p>其作者可能并未对更多的使用场景作足够的测试。简单而言，这些工具类是否具有普适性，有待于验证。<small>当然，理论上来说，这些工具类的代码质量也不可能很糟糕 。</small></p><p>所以，如果你的项目直接<small>（或间接）</small>引入了专门的工具包，那么，<strong>优先使用这些专业工具包</strong>。其次，才是考虑使用框架『赠送』的工具类。</p><p>除非是一些极简的情况，很显然这些『赠送』的工具类足以应付时<small>（为此专门引入专业工具包似乎不值得）</small>，才优先考虑使用『赠送』的工具类。</p><h2 id="objectutils" tabindex="-1"><a class="header-anchor" href="#objectutils" aria-hidden="true">#</a> ObjectUtils</h2><p><em>org.springframework.util.ObjectUtils</em> 有很多处理 null object 的方法。如：</p><ul><li>nullSafeHashCode</li><li>nullSafeEquals</li><li>isArray</li><li>containsElement</li><li>addObjectToArray</li></ul><h3 id="获取对象基本信息" tabindex="-1"><a class="header-anchor" href="#获取对象基本信息" aria-hidden="true">#</a> 获取对象基本信息</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// 获取对象的类名。参数为 null 时，返回字符串：&quot;null&quot; 。</span>\n<span class="token class-name">String</span> <span class="token function">nullSafeClassName</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span>\n\n<span class="token comment">// 获取对象 HashCode（十六进制形式字符串）。参数为 null 时，返回 0 。</span>\n<span class="token class-name">String</span> <span class="token function">getIdentityHexString</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span>\n\n<span class="token comment">// 获取对象的类名和 HashCode。 参数为 null 时，返回字符串：&quot;&quot; 。</span>\n<span class="token class-name">String</span> <span class="token function">identityToString</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span>\n\n<span class="token comment">// 相当于 toString()方法，但参数为 null 时，返回字符串：&quot;&quot;</span>\n<span class="token class-name">String</span> <span class="token function">getDisplayString</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span>\n\n<span class="token comment">// 被废弃。建议使用 jdk8 原生 hashCode 方法。</span>\n<span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> bool<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="判断工具" tabindex="-1"><a class="header-anchor" href="#判断工具" aria-hidden="true">#</a> 判断工具</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// 判断数组是否为空。</span>\n<span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span>\n\n<span class="token comment">// 判断参数对象是否是数组。</span>\n<span class="token keyword">boolean</span> <span class="token function">isArray</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span>\n\n<span class="token comment">// 判断数组中是否包含指定元素。</span>\n<span class="token keyword">boolean</span> <span class="token function">containsElement</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">,</span> <span class="token class-name">Object</span> element<span class="token punctuation">)</span>\n\n\n<span class="token comment">/*\n判断参数对象是否为空，判断标准为：\n    Optional: considered empty if Optional.empty()\n       Array: considered empty if its length is zero\nCharSequence: considered empty if its length is zero\n  Collection: delegates to Collection.isEmpty()\n         Map: delegates to Map.isEmpty()\n */</span>\n<span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h3 id="用-nullsafe-替代-object-原生方法" tabindex="-1"><a class="header-anchor" href="#用-nullsafe-替代-object-原生方法" aria-hidden="true">#</a> 用 NullSafe 替代 Object 原生方法</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// 相等，或同为 null时，返回 true</span>\n<span class="token keyword">boolean</span> <span class="token function">nullSafeEquals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o1<span class="token punctuation">,</span> <span class="token class-name">Object</span> o2<span class="token punctuation">)</span>\n\n<span class="token comment">// 参数为 null 时，返回 0</span>\n<span class="token keyword">int</span> <span class="token function">nullSafeHashCode</span><span class="token punctuation">(</span><span class="token class-name">Object</span> object<span class="token punctuation">)</span>\n\n<span class="token comment">// 参数为 null 时，返回字符串：&quot;null&quot;</span>\n<span class="token class-name">String</span> <span class="token function">nullSafeToString</span><span class="token punctuation">(</span><span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="其他工具" tabindex="-1"><a class="header-anchor" href="#其他工具" aria-hidden="true">#</a> 其他工具</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// 向参数数组的末尾追加新元素，并返回一个新数组。</span>\n<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">A</span><span class="token punctuation">,</span> <span class="token class-name">O</span> <span class="token keyword">extends</span> <span class="token class-name">A</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">A</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">addObjectToArray</span><span class="token punctuation">(</span><span class="token class-name">A</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">,</span> <span class="token class-name">O</span> obj<span class="token punctuation">)</span>\n\n<span class="token comment">// 原生基础类型数组 --&gt; 包装类数组</span>\n<span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">toObjectArray</span><span class="token punctuation">(</span><span class="token class-name">Object</span> source<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="stringutils" tabindex="-1"><a class="header-anchor" href="#stringutils" aria-hidden="true">#</a> StringUtils</h2><p>StringUtils 来自 <em>org.springframework.util</em> 包</p><h3 id="判断-string" tabindex="-1"><a class="header-anchor" href="#判断-string" aria-hidden="true">#</a> 判断 String</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// 判断字符串是否为 null，或 &quot;&quot;。注意，包含空白符的字符串为非空。</span>\n<span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token class-name">Object</span> str<span class="token punctuation">)</span>\n\n<span class="token comment">// 判断字符串是否是以指定内容结束。忽略大小写。</span>\n<span class="token keyword">boolean</span> <span class="token function">endsWithIgnoreCase</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span> <span class="token class-name">String</span> suffix<span class="token punctuation">)</span>\n\n<span class="token comment">// 判断字符串是否已指定内容开头。忽略大小写。</span>\n<span class="token keyword">boolean</span> <span class="token function">startsWithIgnoreCase</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span> <span class="token class-name">String</span> prefix<span class="token punctuation">)</span> \n\n<span class="token comment">// 是否包含空白符</span>\n<span class="token keyword">boolean</span> <span class="token function">containsWhitespace</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span>\n\n<span class="token comment">// 判断字符串非空且长度不为 0，即，Not Empty 。</span>\n<span class="token keyword">boolean</span> <span class="token function">hasLength</span><span class="token punctuation">(</span><span class="token class-name">CharSequence</span> str<span class="token punctuation">)</span>\n\n<span class="token comment">// 判断字符串是否包含实际内容，即非仅包含空白符，也就是 Not Blank 。</span>\n<span class="token keyword">boolean</span> <span class="token function">hasText</span><span class="token punctuation">(</span><span class="token class-name">CharSequence</span> str<span class="token punctuation">)</span>\n\n<span class="token comment">// 判断字符串指定索引处是否包含一个子串。</span>\n<span class="token keyword">boolean</span> <span class="token function">substringMatch</span><span class="token punctuation">(</span><span class="token class-name">CharSequence</span> str<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">CharSequence</span> substring<span class="token punctuation">)</span>\n\n<span class="token comment">// 计算一个字符串中指定子串的出现次数。</span>\n<span class="token keyword">int</span> <span class="token function">countOccurrencesOf</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span> <span class="token class-name">String</span> sub<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h3 id="操作-string" tabindex="-1"><a class="header-anchor" href="#操作-string" aria-hidden="true">#</a> 操作 String[]</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// 向参数字符串数组的末尾添加新的字符串，并返回新数组。</span>\n<span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">addStringToArray</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">,</span> <span class="token class-name">String</span> str<span class="token punctuation">)</span> \n\n<span class="token comment">// 将两个字符串数组合并成一个字符串数组。其中重复的元素会出现两次。</span>\n<span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">concatenateStringArrays</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array1<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array2<span class="token punctuation">)</span> \n\n<span class="token comment">// 被废弃，建议通过 LinkedHashSet 手动合并两个字符串。</span>\n<span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">mergeStringArrays</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array1<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array2<span class="token punctuation">)</span> \n\n<span class="token comment">// 从给定的字符串数组中，移除重复的字符串，并返回新字符串数组。</span>\n<span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">removeDuplicateStrings</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span>\n\n<span class="token comment">// 对给定字符串数组进行排序，并返回排序后的新数组。</span>\n<span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">sortStringArray</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span> \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="字符串与容器的互转" tabindex="-1"><a class="header-anchor" href="#字符串与容器的互转" aria-hidden="true">#</a> 字符串与容器的互转</h3><p><strong>容器 to 字符串</strong></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>\n<span class="token comment">// 拼接数组，生成字符串。以 “,” 作为分隔符。</span>\n<span class="token class-name">String</span> <span class="token function">arrayToCommaDelimitedString</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span>\n\n<span class="token comment">// 拼接数组，生成字符串。以第二个参数（delim）作为分隔符。</span>\n<span class="token class-name">String</span> <span class="token function">arrayToDelimitedString</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token class-name">String</span> delim<span class="token punctuation">)</span>\n\n<span class="token comment">// 拼接集合，生成字符串。以 “,” 作为分隔符。</span>\n<span class="token class-name">String</span> <span class="token function">collectionToCommaDelimitedString</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> coll<span class="token punctuation">)</span> \n\n<span class="token comment">// 拼接集合，生成字符串。以参数 delim 作为分隔符。</span>\n<span class="token class-name">String</span> <span class="token function">collectionToDelimitedString</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> coll<span class="token punctuation">,</span> <span class="token class-name">String</span> delim<span class="token punctuation">)</span> \n\n<span class="token comment">// 拼接集合，生成字符串。以参数 delim 作为分隔符。每个组成部分还可以加上指定的前缀（prefix）和后缀（suffix）。</span>\n<span class="token class-name">String</span> <span class="token function">collectionToDelimitedString</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> coll<span class="token punctuation">,</span> <span class="token class-name">String</span> delim<span class="token punctuation">,</span> <span class="token class-name">String</span> prefix<span class="token punctuation">,</span> <span class="token class-name">String</span> suffix<span class="token punctuation">)</span> \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p><strong>字符串 to 容器</strong></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// 切分字符串，生成数组。以指定分隔符切分成字符串。</span>\n<span class="token comment">// 注意，和下面的方法不同，这个方法最多只会把字符串切分成两份。即，返回值数组的 length 最大为 2 。</span>\n<span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">split</span><span class="token punctuation">(</span><span class="token class-name">String</span> toSplit<span class="token punctuation">,</span> <span class="token class-name">String</span> delimiter<span class="token punctuation">)</span>\n\n<span class="token comment">// 切分字符串，生成数组。以指定分隔符切分成字符串。分隔符可以指定多个。</span>\n<span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">tokenizeToStringArray</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span> <span class="token class-name">String</span> delimiters<span class="token punctuation">)</span>\n\n<span class="token comment">// 切分字符串，生成数组。以 “,” 作为分隔符</span>\n<span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">commaDelimitedListToStringArray</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span>\n\n<span class="token comment">// 切分字符串，生成数组。以指定分隔符（delimiter）进行切割</span>\n<span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">delimitedListToStringArray</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span> <span class="token class-name">String</span> delimiter<span class="token punctuation">)</span>\n\n<span class="token comment">// 切分字符串，生成数组。以指定分隔符（delimiter）进行切割，并且在切出的部分中删除指定字符（可以使多个）</span>\n<span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">delimitedListToStringArray</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span> <span class="token class-name">String</span> delimiter<span class="token punctuation">,</span> <span class="token class-name">String</span> charsToDelete<span class="token punctuation">)</span> \n\n<span class="token comment">// 切分字符串，生成 Set。以 “,” 作为分隔符</span>\n<span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">commaDelimitedListToSet</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>其他转换</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// 将字符串集合转变为字符串数组。</span>\n<span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">toStringArray</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> collection<span class="token punctuation">)</span> \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="操作-string-1" tabindex="-1"><a class="header-anchor" href="#操作-string-1" aria-hidden="true">#</a> 操作 String</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// 查找并替换指定子串</span>\n<span class="token class-name">String</span> <span class="token function">replace</span><span class="token punctuation">(</span><span class="token class-name">String</span> inString<span class="token punctuation">,</span> <span class="token class-name">String</span> oldPattern<span class="token punctuation">,</span> <span class="token class-name">String</span> newPattern<span class="token punctuation">)</span>\n\n<span class="token comment">// 去除尾部的特定字符。</span>\n<span class="token class-name">String</span> <span class="token function">trimTrailingCharacter</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span> <span class="token keyword">char</span> trailingCharacter<span class="token punctuation">)</span> \n\n<span class="token comment">// 去除头部的特定字符。</span>\n<span class="token class-name">String</span> <span class="token function">trimLeadingCharacter</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span> <span class="token keyword">char</span> leadingCharacter<span class="token punctuation">)</span>\n\n<span class="token comment">// 去除头部的空白符。</span>\n<span class="token class-name">String</span> <span class="token function">trimLeadingWhitespace</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span>\n\n<span class="token comment">// 去除头部的空白符。</span>\n<span class="token class-name">String</span> <span class="token function">trimTrailingWhitespace</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span>\n\n<span class="token comment">// 去除头部和尾部的空白符。</span>\n<span class="token class-name">String</span> <span class="token function">trimWhitespace</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span>\n\n<span class="token comment">// 删除开头、结尾和中间的空白符。</span>\n<span class="token class-name">String</span> <span class="token function">trimAllWhitespace</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span>\n\n<span class="token comment">// 删除指定子串</span>\n<span class="token class-name">String</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token class-name">String</span> inString<span class="token punctuation">,</span> <span class="token class-name">String</span> pattern<span class="token punctuation">)</span>\n\n<span class="token comment">// 删除指定字符（可以是多个）</span>\n<span class="token class-name">String</span> <span class="token function">deleteAny</span><span class="token punctuation">(</span><span class="token class-name">String</span> inString<span class="token punctuation">,</span> <span class="token class-name">String</span> charsToDelete<span class="token punctuation">)</span>\n\n<span class="token comment">// 对数组的每一项执行 trim() 方法。</span>\n<span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">trimArrayElements</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span>\n\n<span class="token comment">// 将 URL 字符串进行解码</span>\n<span class="token class-name">String</span> <span class="token function">uriDecode</span><span class="token punctuation">(</span><span class="token class-name">String</span> source<span class="token punctuation">,</span> <span class="token class-name">Charset</span> charset<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><h3 id="截取-string" tabindex="-1"><a class="header-anchor" href="#截取-string" aria-hidden="true">#</a> 截取 String</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// 以 “.” 作为分隔符，获取其最后一部分。</span>\n<span class="token class-name">String</span> <span class="token function">unqualify</span><span class="token punctuation">(</span><span class="token class-name">String</span> qualifiedName<span class="token punctuation">)</span>\n\n<span class="token comment">// 以指定字符作为分隔符，获取其最后一部分。</span>\n<span class="token class-name">String</span> <span class="token function">unqualify</span><span class="token punctuation">(</span><span class="token class-name">String</span> qualifiedName<span class="token punctuation">,</span> <span class="token keyword">char</span> separator<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="文件路径字符串操作" tabindex="-1"><a class="header-anchor" href="#文件路径字符串操作" aria-hidden="true">#</a> 文件路径字符串操作</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// 解析路径字符串，优化其中的 “..” 。</span>\n<span class="token class-name">String</span> <span class="token function">cleanPath</span><span class="token punctuation">(</span><span class="token class-name">String</span> path<span class="token punctuation">)</span>\n\n<span class="token comment">// 解析路径字符串，解析出文件名部分。</span>\n<span class="token class-name">String</span> <span class="token function">getFilename</span><span class="token punctuation">(</span><span class="token class-name">String</span> path<span class="token punctuation">)</span>\n\n<span class="token comment">// 解析路径字符串，解析出文件后缀名。</span>\n<span class="token class-name">String</span> <span class="token function">getFilenameExtension</span><span class="token punctuation">(</span><span class="token class-name">String</span> path<span class="token punctuation">)</span>\n\n<span class="token comment">// 比较两个两个字符串，判断是否是同一个路径。会自动处理路径中的 “..” 。</span>\n<span class="token keyword">boolean</span> <span class="token function">pathEquals</span><span class="token punctuation">(</span><span class="token class-name">String</span> path1<span class="token punctuation">,</span> <span class="token class-name">String</span> path2<span class="token punctuation">)</span>\n\n<span class="token comment">// 删除文件路径名中的后缀部分。</span>\n<span class="token class-name">String</span> <span class="token function">stripFilenameExtension</span><span class="token punctuation">(</span><span class="token class-name">String</span> path<span class="token punctuation">)</span> \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="其他" tabindex="-1"><a class="header-anchor" href="#其他" aria-hidden="true">#</a> 其他</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// 将字符串数组中的每一项，按照指定分隔符进行切分，并生成 Properties 对象。</span>\n<span class="token comment">// 字符串数组的内容类似于：new String[]{&quot;key1,value1&quot;, &quot;key2,value2&quot;, &quot;key3,value3&quot;}</span>\n<span class="token class-name">Properties</span> <span class="token function">splitArrayElementsIntoProperties</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">,</span> <span class="token class-name">String</span> delimiter<span class="token punctuation">)</span>\n\n<span class="token class-name">Properties</span> <span class="token function">splitArrayElementsIntoProperties</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">,</span> <span class="token class-name">String</span> delimiter<span class="token punctuation">,</span> <span class="token class-name">String</span> charsToDelete<span class="token punctuation">)</span>\n\n<span class="token comment">// 通过解析时区字符串生成时区对象。</span>\n<span class="token comment">// 常见 TimeZone 字符串见最后。</span>\n<span class="token class-name">TimeZone</span> <span class="token function">parseTimeZoneString</span><span class="token punctuation">(</span><span class="token class-name">String</span> timeZoneString<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="collectionutils" tabindex="-1"><a class="header-anchor" href="#collectionutils" aria-hidden="true">#</a> CollectionUtils</h2><p>CollectionUtils 类来自 <em>org.springframework.util</em> 包，它用于处理集合的工具。</p><h3 id="判断工具-1" tabindex="-1"><a class="header-anchor" href="#判断工具-1" aria-hidden="true">#</a> 判断工具</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// 判断 List/Set 是否为空。</span>\n<span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> collection<span class="token punctuation">)</span>\n\n<span class="token comment">// 判断 Map 是否为空。</span>\n<span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> map<span class="token punctuation">)</span>\n\n<span class="token comment">// 判断 List/Set 中是否包含某个对象。</span>\n<span class="token keyword">boolean</span> <span class="token function">containsInstance</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> collection<span class="token punctuation">,</span> <span class="token class-name">Object</span> element<span class="token punctuation">)</span>\n\n<span class="token comment">// 以迭代器的方式，判断 List/Set 中是否包含某个对象。</span>\n<span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span><span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> iterator<span class="token punctuation">,</span> <span class="token class-name">Object</span> element<span class="token punctuation">)</span>\n\n<span class="token comment">// 判断 List/Set 是否包含某些对象中的任意一个。</span>\n<span class="token keyword">boolean</span> <span class="token function">containsAny</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> candidates<span class="token punctuation">)</span>\n\n<span class="token comment">// 判断 List/Set 中的每个元素是否唯一。即 List/Set 中不存在重复元素。</span>\n<span class="token keyword">boolean</span> <span class="token function">hasUniqueObject</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> collection<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h3 id="向集合中添加" tabindex="-1"><a class="header-anchor" href="#向集合中添加" aria-hidden="true">#</a> 向集合中添加</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// 将 Array 中的元素都添加到 List/Set 中。</span>\n<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">mergeArrayIntoCollection</span><span class="token punctuation">(</span><span class="token class-name">Object</span> array<span class="token punctuation">,</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> collection<span class="token punctuation">)</span>  \n\n<span class="token comment">// 将 Properties 中的键值对都添加到 Map 中。</span>\n<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">mergePropertiesIntoMap</span><span class="token punctuation">(</span><span class="token class-name">Properties</span> props<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> map<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="在集合中查找" tabindex="-1"><a class="header-anchor" href="#在集合中查找" aria-hidden="true">#</a> 在集合中查找</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// 返回 List 中最后一个元素。</span>\n<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">lastElement</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">)</span>  \n\n<span class="token comment">// 返回 Set 中最后一个元素。</span>\n<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">lastElement</span><span class="token punctuation">(</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> set<span class="token punctuation">)</span> \n\n<span class="token comment">// 返回参数 candidates 中第一个存在于参数 source 中的元素。</span>\n<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">E</span> <span class="token function">findFirstMatch</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> source<span class="token punctuation">,</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> candidates<span class="token punctuation">)</span>\n\n<span class="token comment">// 返回 List/Set 中指定类型的元素。</span>\n<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">findValueOfType</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> collection<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> type<span class="token punctuation">)</span>\n\n<span class="token comment">// 返回 List/Set 中指定类型的元素。如果第一种类型未找到，则查找第二种类型，以此类推。</span>\n<span class="token class-name">Object</span> <span class="token function">findValueOfType</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> collection<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> types<span class="token punctuation">)</span>\n\n<span class="token comment">// 返回 List/Set 中元素的类型</span>\n<span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">findCommonElementType</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> collection<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h3 id="multimap-相关" tabindex="-1"><a class="header-anchor" href="#multimap-相关" aria-hidden="true">#</a> MultiMap 相关</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// 将一个 Map&lt;K, List&lt;V&gt;&gt; 对象转换成一个 MultiValueMap&lt;K, V&gt; 对象。</span>\n<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">MultiValueMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">toMultiValueMap</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> map<span class="token punctuation">)</span> \n\n<span class="token comment">// 返回 MultiValueMap 对象的一个不可变视图。</span>\n<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">MultiValueMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">unmodifiableMultiValueMap</span><span class="token punctuation">(</span><span class="token class-name">MultiValueMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">K</span><span class="token punctuation">,</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> map<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="其他-1" tabindex="-1"><a class="header-anchor" href="#其他-1" aria-hidden="true">#</a> 其他</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// 将 Array 转换成 List 。</span>\n<span class="token class-name">List</span> <span class="token function">arrayToList</span><span class="token punctuation">(</span><span class="token class-name">Object</span> source<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="assert" tabindex="-1"><a class="header-anchor" href="#assert" aria-hidden="true">#</a> Assert</h2><p>Assert 断言工具类，通常用于数据合法性检查，在 JAVA 编程中，通常会编写如下代码：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> name<span class="token punctuation">.</span><span class="token function">equls</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  \n    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;参数错误!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  \n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>在所有方法中都使用手工检测合法性的方式并不是太好，因为这样影响了代码的可读性，若使用 Assert 工具类上面的代码可以简化为：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">&quot;参数错误!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>这样可以大大增强代码的可读性。</p><blockquote><p><small>断言相当于一个『拦路虎』，断言中的条件成立，程序才能继续『往下走』，否则，就抛出异常，返回。</small></p></blockquote><p>Assert 类中的常用断言方法：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// 要求参数 object 必须为非空（Not Null），否则抛出异常，不予『放行』。</span>\n<span class="token comment">// 参数 message 参数用于定制异常信息。</span>\n<span class="token keyword">void</span> <span class="token function">notNull</span><span class="token punctuation">(</span><span class="token class-name">Object</span> object<span class="token punctuation">,</span> <span class="token class-name">String</span> message<span class="token punctuation">)</span>\n\n<span class="token comment">// 要求参数必须空（Null），否则抛出异常，不予『放行』。</span>\n<span class="token comment">// 和 notNull() 方法断言规则相反</span>\n<span class="token keyword">void</span> <span class="token function">isNull</span><span class="token punctuation">(</span><span class="token class-name">Object</span> object<span class="token punctuation">,</span> <span class="token class-name">String</span> message<span class="token punctuation">)</span>\n\n<span class="token comment">// 要求参数必须为真（True），否则抛出异常，不予『放行』。</span>\n<span class="token keyword">void</span> <span class="token function">isTrue</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> expression<span class="token punctuation">,</span> <span class="token class-name">String</span> message<span class="token punctuation">)</span>\n\n<span class="token comment">// 要求参数（List/Set）必须非空（Not Empty），否则抛出异常，不予『放行』。</span>\n<span class="token keyword">void</span> <span class="token function">notEmpty</span><span class="token punctuation">(</span><span class="token class-name">Collection</span> collection<span class="token punctuation">,</span> <span class="token class-name">String</span> message<span class="token punctuation">)</span>\n\n<span class="token comment">// 要求参数（String）必须有长度（即，Not Empty），否则抛出异常，不予『放行』。</span>\n<span class="token keyword">void</span> <span class="token function">hasLength</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">,</span> <span class="token class-name">String</span> message<span class="token punctuation">)</span>\n\n<span class="token comment">// 要求参数（String）必须有内容（即，Not Blank），否则抛出异常，不予『放行』。</span>\n<span class="token keyword">void</span> <span class="token function">hasText</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">,</span> <span class="token class-name">String</span> message<span class="token punctuation">)</span>\n\n<span class="token comment">// 要求参数是指定类型的实例，否则抛出异常，不予『放行』。</span>\n<span class="token keyword">void</span> <span class="token function">isInstanceOf</span><span class="token punctuation">(</span><span class="token class-name">Class</span> type<span class="token punctuation">,</span> <span class="token class-name">Object</span> obj<span class="token punctuation">,</span> <span class="token class-name">String</span> message<span class="token punctuation">)</span>\n\n<span class="token comment">// 要求参数 `subType` 必须是参数 superType 的子类或实现类，否则抛出异常，不予『放行』。</span>\n<span class="token keyword">void</span> <span class="token function">isAssignable</span><span class="token punctuation">(</span><span class="token class-name">Class</span> superType<span class="token punctuation">,</span> <span class="token class-name">Class</span> subType<span class="token punctuation">,</span> <span class="token class-name">String</span> message<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><h2 id="附-timezone-string" tabindex="-1"><a class="header-anchor" href="#附-timezone-string" aria-hidden="true">#</a> 附：TimeZone String</h2><table><thead><tr><th style="text-align:right;">TimeZone</th><th style="text-align:left;">地点</th></tr></thead><tbody><tr><td style="text-align:right;">&quot;Asia/Shanghai&quot;</td><td style="text-align:left;">中国标准时间 (北京)</td></tr><tr><td style="text-align:right;">&quot;Asia/Hong_Kong&quot;</td><td style="text-align:left;">香港时间 (香港)</td></tr><tr><td style="text-align:right;">&quot;Asia/Taipei&quot;</td><td style="text-align:left;">台北时间 (台北)</td></tr><tr><td style="text-align:right;">&quot;Asia/Seoul&quot;</td><td style="text-align:left;">首尔</td></tr><tr><td style="text-align:right;">&quot;Asia/Tokyo&quot;</td><td style="text-align:left;">日本时间 (东京)</td></tr><tr><td style="text-align:right;">&quot;America/New_York&quot;</td><td style="text-align:left;">美国东部时间 (纽约)</td></tr><tr><td style="text-align:right;">&quot;America/Denver&quot;</td><td style="text-align:left;">美国山区时间 (丹佛)</td></tr><tr><td style="text-align:right;">&quot;America/Costa_Rica&quot;</td><td style="text-align:left;">美国中部时间 (哥斯达黎加)</td></tr><tr><td style="text-align:right;">&quot;America/Chicago&quot;</td><td style="text-align:left;">美国中部时间 (芝加哥)</td></tr><tr><td style="text-align:right;">&quot;America/Mexico_City&quot;</td><td style="text-align:left;">美国中部时间 (墨西哥城)</td></tr><tr><td style="text-align:right;">&quot;America/Regina&quot;</td><td style="text-align:left;">美国中部时间 (里贾纳)</td></tr><tr><td style="text-align:right;">&quot;America/Los_Angeles&quot;</td><td style="text-align:left;">美国太平洋时间 (洛杉矶)</td></tr><tr><td style="text-align:right;">&quot;Pacific/Majuro&quot;</td><td style="text-align:left;">马朱罗</td></tr><tr><td style="text-align:right;">&quot;Pacific/Midway&quot;</td><td style="text-align:left;">中途岛</td></tr><tr><td style="text-align:right;">&quot;Pacific/Honolulu&quot;</td><td style="text-align:left;">檀香山</td></tr><tr><td style="text-align:right;">&quot;America/Anchorage&quot;</td><td style="text-align:left;">安克雷奇</td></tr><tr><td style="text-align:right;">&quot;America/Tijuana&quot;</td><td style="text-align:left;">美国太平洋时间 (提华纳)</td></tr><tr><td style="text-align:right;">&quot;America/Phoenix&quot;</td><td style="text-align:left;">美国山区时间 (凤凰城)</td></tr><tr><td style="text-align:right;">&quot;America/Chihuahua&quot;</td><td style="text-align:left;">奇瓦瓦</td></tr><tr><td style="text-align:right;">&quot;America/Bogota&quot;</td><td style="text-align:left;">哥伦比亚时间 (波哥大)</td></tr><tr><td style="text-align:right;">&quot;America/Caracas&quot;</td><td style="text-align:left;">委内瑞拉时间 (加拉加斯)</td></tr><tr><td style="text-align:right;">&quot;America/Barbados&quot;</td><td style="text-align:left;">大西洋时间 (巴巴多斯)</td></tr><tr><td style="text-align:right;">&quot;America/Manaus&quot;</td><td style="text-align:left;">亚马逊标准时间 (马瑙斯)</td></tr><tr><td style="text-align:right;">&quot;America/St_Johns&quot;</td><td style="text-align:left;">纽芬兰时间 (圣约翰)</td></tr><tr><td style="text-align:right;">&quot;America/Santiago&quot;</td><td style="text-align:left;">圣地亚哥</td></tr><tr><td style="text-align:right;">&quot;America/Argentina/Buenos_Aires&quot;</td><td style="text-align:left;">布宜诺斯艾利斯</td></tr><tr><td style="text-align:right;">&quot;America/Godthab&quot;</td><td style="text-align:left;">戈特霍布</td></tr><tr><td style="text-align:right;">&quot;America/Montevideo&quot;</td><td style="text-align:left;">乌拉圭时间 (蒙得维的亚)</td></tr><tr><td style="text-align:right;">&quot;America/Sao_Paulo&quot;</td><td style="text-align:left;">圣保罗</td></tr><tr><td style="text-align:right;">&quot;Atlantic/South_Georgia&quot;</td><td style="text-align:left;">南乔治亚</td></tr><tr><td style="text-align:right;">&quot;Atlantic/Azores&quot;</td><td style="text-align:left;">亚述尔群岛</td></tr><tr><td style="text-align:right;">&quot;Atlantic/Cape_Verde&quot;</td><td style="text-align:left;">佛得角</td></tr><tr><td style="text-align:right;">&quot;Africa/Casablanca&quot;</td><td style="text-align:left;">卡萨布兰卡</td></tr><tr><td style="text-align:right;">&quot;Europe/London&quot;</td><td style="text-align:left;">格林尼治标准时间 (伦敦)</td></tr><tr><td style="text-align:right;">&quot;Europe/Amsterdam&quot;</td><td style="text-align:left;">中欧标准时间 (阿姆斯特丹)</td></tr><tr><td style="text-align:right;">&quot;Europe/Belgrade&quot;</td><td style="text-align:left;">中欧标准时间 (贝尔格莱德)</td></tr><tr><td style="text-align:right;">&quot;Europe/Brussels&quot;</td><td style="text-align:left;">中欧标准时间 (布鲁塞尔)</td></tr><tr><td style="text-align:right;">&quot;Europe/Sarajevo&quot;</td><td style="text-align:left;">中欧标准时间 (萨拉热窝)</td></tr><tr><td style="text-align:right;">&quot;Africa/Brazzaville&quot;</td><td style="text-align:left;">西部非洲标准时间 (布拉扎维)</td></tr><tr><td style="text-align:right;">&quot;Africa/Windhoek&quot;</td><td style="text-align:left;">温得和克</td></tr><tr><td style="text-align:right;">&quot;Asia/Amman&quot;</td><td style="text-align:left;">东欧标准时间 (安曼)</td></tr><tr><td style="text-align:right;">&quot;Europe/Athens&quot;</td><td style="text-align:left;">东欧标准时间 (雅典)</td></tr><tr><td style="text-align:right;">&quot;Asia/Beirut&quot;</td><td style="text-align:left;">东欧标准时间 (贝鲁特)</td></tr><tr><td style="text-align:right;">&quot;Africa/Cairo&quot;</td><td style="text-align:left;">东欧标准时间 (开罗)</td></tr><tr><td style="text-align:right;">&quot;Europe/Helsinki&quot;</td><td style="text-align:left;">东欧标准时间 (赫尔辛基)</td></tr><tr><td style="text-align:right;">&quot;Asia/Jerusalem&quot;</td><td style="text-align:left;">以色列时间 (耶路撒冷)</td></tr><tr><td style="text-align:right;">&quot;Africa/Harare&quot;</td><td style="text-align:left;">中部非洲标准时间 (哈拉雷)</td></tr><tr><td style="text-align:right;">&quot;Europe/Minsk&quot;</td><td style="text-align:left;">明斯克</td></tr><tr><td style="text-align:right;">&quot;Asia/Baghdad&quot;</td><td style="text-align:left;">巴格达</td></tr><tr><td style="text-align:right;">&quot;Europe/Moscow&quot;</td><td style="text-align:left;">莫斯科</td></tr><tr><td style="text-align:right;">&quot;Asia/Kuwait&quot;</td><td style="text-align:left;">科威特</td></tr><tr><td style="text-align:right;">&quot;Africa/Nairobi&quot;</td><td style="text-align:left;">东部非洲标准时间 (内罗毕)</td></tr><tr><td style="text-align:right;">&quot;Asia/Tehran&quot;</td><td style="text-align:left;">伊朗标准时间 (德黑兰)</td></tr><tr><td style="text-align:right;">&quot;Asia/Baku&quot;</td><td style="text-align:left;">巴库</td></tr><tr><td style="text-align:right;">&quot;Asia/Tbilisi&quot;</td><td style="text-align:left;">第比利斯</td></tr><tr><td style="text-align:right;">&quot;Asia/Yerevan&quot;</td><td style="text-align:left;">埃里温</td></tr><tr><td style="text-align:right;">&quot;Asia/Dubai&quot;</td><td style="text-align:left;">迪拜</td></tr><tr><td style="text-align:right;">&quot;Asia/Kabul&quot;</td><td style="text-align:left;">阿富汗时间 (喀布尔)</td></tr><tr><td style="text-align:right;">&quot;Asia/Karachi&quot;</td><td style="text-align:left;">卡拉奇</td></tr><tr><td style="text-align:right;">&quot;Asia/Oral&quot;</td><td style="text-align:left;">乌拉尔</td></tr><tr><td style="text-align:right;">&quot;Asia/Yekaterinburg&quot;</td><td style="text-align:left;">叶卡捷林堡</td></tr><tr><td style="text-align:right;">&quot;Asia/Calcutta&quot;</td><td style="text-align:left;">加尔各答</td></tr><tr><td style="text-align:right;">&quot;Asia/Colombo&quot;</td><td style="text-align:left;">科伦坡</td></tr><tr><td style="text-align:right;">&quot;Asia/Katmandu&quot;</td><td style="text-align:left;">尼泊尔时间 (加德满都)</td></tr><tr><td style="text-align:right;">&quot;Asia/Almaty&quot;</td><td style="text-align:left;">阿拉木图</td></tr><tr><td style="text-align:right;">&quot;Asia/Rangoon&quot;</td><td style="text-align:left;">缅甸时间 (仰光)</td></tr><tr><td style="text-align:right;">&quot;Asia/Krasnoyarsk&quot;</td><td style="text-align:left;">克拉斯诺亚尔斯克</td></tr><tr><td style="text-align:right;">&quot;Asia/Bangkok&quot;</td><td style="text-align:left;">曼谷</td></tr><tr><td style="text-align:right;">&quot;Asia/Irkutsk&quot;</td><td style="text-align:left;">伊尔库茨克时间 (伊尔库茨克)</td></tr><tr><td style="text-align:right;">&quot;Asia/Kuala_Lumpur&quot;</td><td style="text-align:left;">吉隆坡</td></tr><tr><td style="text-align:right;">&quot;Australia/Perth&quot;</td><td style="text-align:left;">佩思</td></tr><tr><td style="text-align:right;">&quot;Asia/Yakutsk&quot;</td><td style="text-align:left;">雅库茨克时间 (雅库茨克)</td></tr><tr><td style="text-align:right;">&quot;Australia/Darwin&quot;</td><td style="text-align:left;">达尔文</td></tr><tr><td style="text-align:right;">&quot;Australia/Brisbane&quot;</td><td style="text-align:left;">布里斯班</td></tr><tr><td style="text-align:right;">&quot;Asia/Vladivostok&quot;</td><td style="text-align:left;">海参崴时间 (符拉迪沃斯托克)</td></tr><tr><td style="text-align:right;">&quot;Pacific/Guam&quot;</td><td style="text-align:left;">关岛</td></tr><tr><td style="text-align:right;">&quot;Australia/Adelaide&quot;</td><td style="text-align:left;">阿德莱德</td></tr><tr><td style="text-align:right;">&quot;Australia/Hobart&quot;</td><td style="text-align:left;">霍巴特</td></tr><tr><td style="text-align:right;">&quot;Australia/Sydney&quot;</td><td style="text-align:left;">悉尼</td></tr><tr><td style="text-align:right;">&quot;Asia/Magadan&quot;</td><td style="text-align:left;">马加丹时间 (马加丹)</td></tr><tr><td style="text-align:right;">&quot;Pacific/Auckland&quot;</td><td style="text-align:left;">奥克兰</td></tr><tr><td style="text-align:right;">&quot;Pacific/Fiji&quot;</td><td style="text-align:left;">斐济</td></tr><tr><td style="text-align:right;">&quot;Pacific/Tongatapu&quot;</td><td style="text-align:left;">东加塔布</td></tr></tbody></table>',64),e={render:function(n,s){return t}}}}]);