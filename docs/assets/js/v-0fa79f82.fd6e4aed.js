"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[5761],{10107:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-0fa79f82",path:"/java-thread/net-01-base.html",title:"Java 网络编程",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"Socket 基本概念",slug:"socket-基本概念",children:[]},{level:2,title:"IP 地址和端口号",slug:"ip-地址和端口号",children:[]},{level:2,title:"客户端 Socket",slug:"客户端-socket",children:[]},{level:2,title:"使用 ServerSocket",slug:"使用-serversocket",children:[]},{level:2,title:"UDP 编程",slug:"udp-编程",children:[]}],filePathRelative:"java-thread/net-01-base.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},31903:(n,s,a)=>{a.r(s),a.d(s,{default:()=>t});const p=(0,a(66252).uE)('<h1 id="java-网络编程" tabindex="-1"><a class="header-anchor" href="#java-网络编程" aria-hidden="true">#</a> Java 网络编程</h1><h2 id="socket-基本概念" tabindex="-1"><a class="header-anchor" href="#socket-基本概念" aria-hidden="true">#</a> Socket 基本概念</h2><p>Socket 允许程序员将网络看作是一个可以读写的字节流。Socket 对程序员隐藏了网络的底层细节。</p><p>Socket 是两台主机之间的的一个连接，它可以完成 7 个基本操作：</p><ul><li>连接远程机器</li><li>发送数据</li><li>接收数据</li><li>关闭连接</li><li>绑定端口</li><li>监听连接请求</li><li>在绑定端口上接受来自远程机器的连接</li></ul><p>Java 的 Socket 提供了前 4 个操作的方法，它的子类 <strong>ServerSocket</strong> 在它基础上提供了后 3 个操作的方法。</p><h2 id="ip-地址和端口号" tabindex="-1"><a class="header-anchor" href="#ip-地址和端口号" aria-hidden="true">#</a> IP 地址和端口号</h2><p>Java 使用 <strong>InetAddress</strong> 类<small>（及其子类 <strong>Inet4Address</strong>、<strong>Inet6Address</strong>）</small>封装了 IP 地址的概念。<strong>InetAddress</strong> 类没有对外可用的构造方法，要实例化 <strong>InetAddress</strong><small>（及其子类）</small>对象需要使用其下某个静态工厂方法。常见的有：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">InetAddress</span> <span class="token function">getLocalHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">InetAddress</span> <span class="token function">getByName</span><span class="token punctuation">(</span><span class="token class-name">String</span> host<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>SocketAddress</strong> 类<small>（及其子类 <strong>InetSocketAddress</strong>）</small>封装了『<strong>IP地址</strong>』和『<strong>端口号</strong>』的概念。其常见构造方法有：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token class-name">String</span> hostname<span class="token punctuation">,</span> <span class="token keyword">int</span> port<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="客户端-socket" tabindex="-1"><a class="header-anchor" href="#客户端-socket" aria-hidden="true">#</a> 客户端 Socket</h2><h4 id="构造和连接-socket" tabindex="-1"><a class="header-anchor" href="#构造和连接-socket" aria-hidden="true">#</a> 构造和连接 Socket</h4><p><strong>java.net.Socket</strong> 类是 Java 完成客户端 Socket 操作的基础类。其他任何可以建立 TCP 连接的类最终都是在调用这个类。</p><p>每个 Socket 的构造方法指定要连接的主机<small>（host）</small>和端口<small>（port）</small>。主机可以指定为 InetAddress 或 String 。远程端口指定为 1 到 65535 之间的 int 值<small>（其中 1024 以下端口基本以被占用完）</small>。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span><span class="token class-name">String</span> host<span class="token punctuation">,</span> <span class="token keyword">int</span> port<span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span><span class="token class-name">InetAddress</span> address<span class="token punctuation">,</span> <span class="token keyword">int</span> port<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>host 参数是 String 类型，其内容可以是一个主机的域名，或主机的 ip 地址。</p><p>以上两个构造方法不仅是创建 Socket 对象，还会尝试连接远程主机的 Socket 。所以可以用这个对象确定是否与某个端口建立连接。</p><p>上述两个方法并未明确指明本机使用端口号，此时，将由系统随机分配一个可用端口号。以下两个方法在实现相同功能的同时，要求明确指明要使用的本地端口号。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span><span class="token class-name">String</span> host<span class="token punctuation">,</span> <span class="token keyword">int</span> port<span class="token punctuation">,</span> <span class="token class-name">InetAddress</span> localAddr<span class="token punctuation">,</span> <span class="token keyword">int</span> localPort<span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span><span class="token class-name">InetAddress</span> address<span class="token punctuation">,</span> <span class="token keyword">int</span> port<span class="token punctuation">,</span> <span class="token class-name">InetAddress</span> localAddr<span class="token punctuation">,</span> <span class="token keyword">int</span> localPort<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>前两个参数指明远程主机地址和端口，后两个参数指明本地主机地址和端口。</p><p>如果本地端口参数传 0 ，则表明由系统自动分配可用端口。</p><p>上述四个方法在创建 Socket 的同时，都会尝试建立一个与远程主机的网络连接。有时你可能想分解这两个操作。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token class-name">SocketAddress</span> endpoint<span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token class-name">SocketAddress</span> endpoint<span class="token punctuation">,</span> <span class="token keyword">int</span> timeout<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>timeout 参数表示请求建立连接的最长等待时间，单位为毫秒。0 表示无限等待。</p><p>分解创建-连接这两个操作的好处在于：<strong>在创建之后，连接之前可以对 Socket 进行设置</strong> <small>（后续讲解）</small>。</p><h4 id="收发数据-读写数据" tabindex="-1"><a class="header-anchor" href="#收发数据-读写数据" aria-hidden="true">#</a> 收发数据（读写数据）</h4><p>Socket 对底层网络操作的封装体现在，你可以像读写文件一样来实现收发数据。关键在于通过 Socket 对象获得输入输出流。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">InputStream</span> <span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token class-name">OutputStream</span> <span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>getInputStream()</strong> 方法和 <strong>getOutputStream()</strong> 方法返回的是字节流，如果有需要，可以将字节流包装成字符流，这样就可以<em><strong>以字符为单位</strong></em> 读写数据信息。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> in<span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span><span class="token class-name">OutputStream</span> out<span class="token punctuation">)</span>\n\n<span class="token keyword">public</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> in<span class="token punctuation">,</span> <span class="token class-name">String</span> charsetName<span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span><span class="token class-name">OutputStream</span> out<span class="token punctuation">,</span> <span class="token class-name">String</span> charsetName<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><code>补充</code>：如果为了考虑进一步提高读写效率，可以将字符流再一次包装成缓冲流。</p><h2 id="使用-serversocket" tabindex="-1"><a class="header-anchor" href="#使用-serversocket" aria-hidden="true">#</a> 使用 ServerSocket</h2><ol><li><p>使用一个 <strong>ServerSocket</strong> 的构造器在一个特定端口创建一个新的 <strong>ServerSocket</strong> 。</p></li><li><p><strong>ServerSocket#accept</strong> 方法监听这个端口，等待客户端的连接。<strong>accept</strong> 方法会一直阻塞，直到一个客户端尝试建立连接，此时 <strong>accept</strong> 方法将返回一个连接客户端和服务器的 <strong>Socket</strong> 对象。</p></li><li><p>根据服务器的类型，会调用 <strong>Socket#getInputStream</strong> 方法或 <strong>Socket#getOutputStream</strong> 方法，或者这两个方法都调用，以获得与客户端通信的输入和输出流。</p></li><li><p>服务端与客户端持续通信，直到关闭连接。</p></li></ol><h2 id="udp-编程" tabindex="-1"><a class="header-anchor" href="#udp-编程" aria-hidden="true">#</a> UDP 编程</h2><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">udpClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">DatagramSocket</span> socket <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">try</span> <span class="token punctuation">{</span>\n        socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramSocket</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">InetAddress</span> serverAddress <span class="token operator">=</span> <span class="token class-name">InetAddress</span><span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span><span class="token string">&quot;127.0.0.1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">DatagramPacket</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramPacket</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> serverAddress<span class="token punctuation">,</span> <span class="token number">9527</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">DatagramPacket</span> response <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramPacket</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        socket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        socket<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> response<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> \n    <span class="token keyword">finally</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>socket <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>socket<span class="token punctuation">.</span><span class="token function">isClosed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n            socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">udpServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n    <span class="token class-name">SimpleDateFormat</span> dateFormat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">String</span> dateStr <span class="token operator">=</span> dateFormat<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">try</span> <span class="token punctuation">{</span>\n        <span class="token class-name">DatagramSocket</span> socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramSocket</span><span class="token punctuation">(</span><span class="token number">9527</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">DatagramPacket</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramPacket</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        socket<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> dateStr<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">DatagramPacket</span> response \n            <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramPacket</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> data<span class="token punctuation">.</span>length<span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        request<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        socket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div>',37),t={render:function(n,s){return p}}}}]);