"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[2749],{95974:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-06ba3738",path:"/junit/JUnit-99-spring-test-junit4.html",title:"Spring 整合 JUnit4",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"基本使用",slug:"基本使用",children:[]},{level:2,title:"spring-test 利用事务避免污染数据库",slug:"spring-test-利用事务避免污染数据库",children:[]}],filePathRelative:"junit/JUnit-99-spring-test-junit4.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},74816:(n,s,a)=>{a.r(s),a.d(s,{default:()=>p});const t=(0,a(66252).uE)('<h1 id="spring-整合-junit4" tabindex="-1"><a class="header-anchor" href="#spring-整合-junit4" aria-hidden="true">#</a> Spring 整合 JUnit4</h1><h2 id="基本使用" tabindex="-1"><a class="header-anchor" href="#基本使用" aria-hidden="true">#</a> 基本使用</h2><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>spring-text 并不是一个【新】的测试框架！它和 JUnit 的关系类似于 slf4j 和 logback，我们是直接使用 spring-text，间接使用 JUnit，在整个测试工作中真正【干活】的仍然是 Junit 。</p><p>之所以这么【绕】一下再使用 Junit 是因为我们直接使用 Junit 的话，我们至少有两件事情是需要亲自去干：</p><ol><li><p>手动加载 <code>.xml</code> 配置文件，构建 Spring IoC 容器。</p></li><li><p>手动向 Spring【要】Spring IoC 容器中的单例对象。</p></li></ol><p>例如：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test1</span> <span class="token punctuation">{</span>\n\n  <span class="token annotation punctuation">@Test</span>\n  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">&quot;demo1.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">DataSource</span> ds <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">DataSource</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    ds<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>如果我们是直接使用 spring-text，而间接使用 JUnit，那么至少上述两件事情我们就不用【手动】处理了。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringJUnit4ClassRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>       <span class="token comment">// ①</span>\n<span class="token annotation punctuation">@ContextConfiguration</span><span class="token punctuation">(</span><span class="token string">&quot;classpath:demo1.xml&quot;</span><span class="token punctuation">)</span>  <span class="token comment">// ②</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test2</span> <span class="token punctuation">{</span>\n\n  <span class="token annotation punctuation">@Autowired</span> <span class="token comment">// ③</span>\n  <span class="token keyword">private</span> <span class="token class-name">DataSource</span> ds<span class="token punctuation">;</span>\n\n  <span class="token annotation punctuation">@Test</span>\n  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>\n    ds<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>上述 spring-test 代码有 3 处注解：</p><ol><li><p><em><strong><code>@RunWith</code></strong></em> 指定使用 SpringJunit 的测试运行器，也就是【真正】干活的那个测试框架。<small>上例中指定为 JUnit，如果有特殊需要和偏好，你也可以指定为别的测试框架，例如 TestNG 。</small></p></li><li><p><em><strong><code>@ContextConfiguration</code></strong></em> 注解指定测试用的 Spring 配置文件的位置。根据你的配置，spring-test 会去加载该文件构建 IoC 容器。</p></li><li><p><em><strong><code>@Autowired</code></strong></em> 任何 Spring IoC 容器中有的，你所需要的对象，你都可以要求 spring-test 注入到你的测试类的属性中。</p></li></ol><blockquote><p>注意，在 Maven 项目中，spring-test 代码加载的是 test 配套的资源文件，即，<code>项目 &gt; src &gt; test &gt; resources</code> 下的配置文件。</p></blockquote><h2 id="spring-test-利用事务避免污染数据库" tabindex="-1"><a class="header-anchor" href="#spring-test-利用事务避免污染数据库" aria-hidden="true">#</a> spring-test 利用事务避免污染数据库</h2><p>如果涉及测试增删改的 DAO 方法，或者是测试涉及这些 DAO 的 Service 方法，每一个 Test 方法执行结束后都会对数据库造成影响，从而极大可能影响后续 Test 方法的执行。<small>（因为对于第二个 Test 方法而言，数据库环境发生了变化，初始条件可能就已经不满足了）</small>。</p><p>为此，spring-test 利用事务的回滚可以在 Test 方法执行结束后，撤销 Test 方法对数据库造成的影响。注意，你的 spring 配置文件中，必须有相关的事务<small>（spring-tx）</small>配置部分。即，必须引入 <code>spring-service.xml</code> 配置文件</p><ul><li><p><code>@Transactional</code>：表示启用事务。</p></li><li><p><code>@Rollback</code>：表示本方法执行结束后事务回滚。</p></li></ul><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token annotation punctuation">@Transactional</span>\n<span class="token annotation punctuation">@Rollback</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Department</span> dept <span class="token operator">=</span> departmentDao<span class="token punctuation">.</span><span class="token function">selectByPrimaryKey</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> dept<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    dept<span class="token punctuation">.</span><span class="token function">setDname</span><span class="token punctuation">(</span>dept<span class="token punctuation">.</span><span class="token function">getDname</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    departmentDao<span class="token punctuation">.</span><span class="token function">updateByPrimaryKey</span><span class="token punctuation">(</span>dept<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    dept <span class="token operator">=</span> departmentDao<span class="token punctuation">.</span><span class="token function">selectByPrimaryKey</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> dept<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p><code>@Transactional</code> 和 <code>@Rollback</code> 还可以直接标注在类上，相当于对测试类下的所有的测试方法进行了统一设置。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringJUnit4ClassRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@ContextConfiguration</span><span class="token punctuation">(</span>locations <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token string">&quot;classpath:spring/spring-dao.xml&quot;</span><span class="token punctuation">,</span> \n    <span class="token string">&quot;classpath:spring/spring-service.xml&quot;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@Transactional</span>\n<span class="token annotation punctuation">@Rollback</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppTest</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p><code>@Transactional</code> 和 <code>@Rollback</code> 不仅对 Dao 测试的回滚有效，对 Service 方法的测试，甚至是 Web 方法的测试也都有效。</p><br><hr><br><p>初始化数据库可以借助于 <code>spring-dao.xml</code> 中 <code>&lt;jdbc:initialize-database&gt;</code> 配置：</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">jdbc:</span>initialize-database</span> <span class="token attr-name">data-source</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dataSource<span class="token punctuation">&quot;</span></span>  <span class="token attr-name">ignore-failures</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>DROPS<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>  \n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">jdbc:</span>script</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>classpath:sql/schema.sql<span class="token punctuation">&quot;</span></span> <span class="token attr-name">encoding</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>  \n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">jdbc:</span>script</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>classpath:sql/import-data.sql<span class="token punctuation">&quot;</span></span> <span class="token attr-name">encoding</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>  \n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">jdbc:</span>initialize-database</span><span class="token punctuation">&gt;</span></span>  \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><code>jdbc:initialize-database</code> 这个标签的作用是在工程启动时，去执行一些 sql，也就是初始化数据库。比如向数据库中建立一些表及插入一些初始数据等。这些 sql 的路径需要在其子标签 <code>jdbc:script</code> 中去指定。</p><blockquote><p><small>在这里，我们通过 jdbc:initialize-database 去初始化 H2 数据库，在测试代码期间，我们又通过 spring-tx 的回滚机制，确保各个测试方法不会对数据库中的数据造成实质性的修改，从而保证测试环境的干净。</small></p></blockquote><p><strong><code>jdbc:initialize-database</code> 标签</strong></p><table><thead><tr><th style="text-align:left;">属性</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><code>dataSource</code></td><td style="text-align:left;">引一个配置好的数据库连接池</td></tr><tr><td style="text-align:left;"><code>ignore-failures=&quot;NONE&quot;</code></td><td style="text-align:left;">不忽略任何错误，有错即终止执行</td></tr><tr><td style="text-align:left;"><code>ignore-failures=&quot;DROPS&quot;</code></td><td style="text-align:left;">忽略因表不存在而导致的删表错误</td></tr><tr><td style="text-align:left;"><code>ignore-failures=&quot;ALL&quot;</code></td><td style="text-align:left;">忽略任何错误</td></tr></tbody></table>',30),p={render:function(n,s){return t}}}}]);