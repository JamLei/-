"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[3987],{1096:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-00cc1311",path:"/utility/spring-utils/99-Eventbus%E5%BC%82%E6%AD%A52.html",title:"",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[],filePathRelative:"utility/spring-utils/99-Eventbus异步2.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},67621:(n,s,a)=>{a.r(s),a.d(s,{default:()=>t});const p=(0,a(66252).uE)('<p>异步事件</p><p>在此前的实现方式都是同步的，虽然解藕，但对性能没有多大提升。异步事件就不一样了，有时使用就是为了不拖累主流程。</p><p>要达到异步，使用 2 个注解</p><ol><li><p>在入口<small>（或配置类）</small>上使用 <strong>@EnableAsync</strong></p></li><li><p>在监听方法上加上 <strong>@Async</strong></p></li></ol><p>异步线程</p><p>使用异步，那必然是需要线程池的。到此没有配置线程池，因此需要关注一下默认的线程池是什么样的</p><p>对于 spring boot的异步实现原理在AsyncExecutionAspectSupport类中，实现方法：</p><p>获取 Executor</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token class-name">AsyncTaskExecutor</span> <span class="token function">determineAsyncExecutor</span><span class="token punctuation">(</span><span class="token class-name">Method</span> method<span class="token punctuation">)</span> <span class="token punctuation">{</span>        \n    <span class="token class-name">AsyncTaskExecutor</span> executor <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>executors<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>        \n    <span class="token keyword">if</span> <span class="token punctuation">(</span>executor <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            \n        <span class="token class-name">Executor</span> targetExecutor<span class="token punctuation">;</span>            \n        <span class="token class-name">String</span> qualifier <span class="token operator">=</span> <span class="token function">getExecutorQualifier</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>            \n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasLength</span><span class="token punctuation">(</span>qualifier<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                \n            targetExecutor <span class="token operator">=</span> <span class="token function">findQualifiedExecutor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory<span class="token punctuation">,</span> qualifier<span class="token punctuation">)</span><span class="token punctuation">;</span>            \n        <span class="token punctuation">}</span>            \n        <span class="token keyword">else</span> <span class="token punctuation">{</span>                \n            targetExecutor <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>defaultExecutor<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            \n        <span class="token punctuation">}</span>            \n        \n        <span class="token keyword">if</span> <span class="token punctuation">(</span>targetExecutor <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                \n            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            \n        <span class="token punctuation">}</span>            \n        \n        executor <span class="token operator">=</span> <span class="token punctuation">(</span>targetExecutor <span class="token keyword">instanceof</span> <span class="token class-name">AsyncListenableTaskExecutor</span> \n                <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token class-name">AsyncListenableTaskExecutor</span><span class="token punctuation">)</span> targetExecutor \n                <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">TaskExecutorAdapter</span><span class="token punctuation">(</span>targetExecutor<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            \n        <span class="token keyword">this</span><span class="token punctuation">.</span>executors<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> executor<span class="token punctuation">)</span><span class="token punctuation">;</span>        \n    <span class="token punctuation">}</span>        \n    <span class="token keyword">return</span> executor<span class="token punctuation">;</span>    \n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p>没有配置 qualifier，取默认线程池</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token class-name">Executor</span> <span class="token function">getDefaultExecutor</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">BeanFactory</span> beanFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>    \n    <span class="token keyword">if</span> <span class="token punctuation">(</span>beanFactory <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">try</span> <span class="token punctuation">{</span>            \n            <span class="token comment">// Search for TaskExecutor bean... not plain Executor since that would            </span>\n            <span class="token comment">// match with ScheduledExecutorService as well, which is unusable for            </span>\n            <span class="token comment">// our purposes here. TaskExecutor is more clearly designed for it.            </span>\n            <span class="token keyword">return</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">TaskExecutor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        \n        <span class="token punctuation">}</span>        \n        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoUniqueBeanDefinitionException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            \n            logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;Could not find unique TaskExecutor bean&quot;</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>            \n            <span class="token keyword">try</span> <span class="token punctuation">{</span>                \n                <span class="token keyword">return</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>DEFAULT_TASK_EXECUTOR_BEAN_NAME<span class="token punctuation">,</span> <span class="token class-name">Executor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            \n            <span class="token punctuation">}</span>\n            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchBeanDefinitionException</span> ex2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                \n                <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isInfoEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    \n                    logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;More than one TaskExecutor bean found within the context, and none is named &quot;</span> <span class="token operator">+</span>                            <span class="token string">&quot;&#39;taskExecutor&#39;. Mark one of them as primary or name it &#39;taskExecutor&#39; (possibly &quot;</span> <span class="token operator">+</span>                            <span class="token string">&quot;as an alias) in order to use it for async processing: &quot;</span> <span class="token operator">+</span> ex<span class="token punctuation">.</span><span class="token function">getBeanNamesFound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                \n                <span class="token punctuation">}</span>            \n            <span class="token punctuation">}</span>        \n        <span class="token punctuation">}</span>        \n        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchBeanDefinitionException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            \n            logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;Could not find default TaskExecutor bean&quot;</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>            \n            <span class="token keyword">try</span> <span class="token punctuation">{</span>                \n                <span class="token keyword">return</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>DEFAULT_TASK_EXECUTOR_BEAN_NAME<span class="token punctuation">,</span> <span class="token class-name">Executor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            \n            <span class="token punctuation">}</span>            \n            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchBeanDefinitionException</span> ex2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                \n                logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;No task executor bean found for async processing: &quot;</span> <span class="token operator">+</span>                        <span class="token string">&quot;no bean of type TaskExecutor and no bean named &#39;taskExecutor&#39; either&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            \n            <span class="token punctuation">}</span>            \n            <span class="token comment">// Giving up -&gt; either using local default executor or none at all...        </span>\n        <span class="token punctuation">}</span>    \n    <span class="token punctuation">}</span>    \n    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><p>在 TaskExecutionAutoConfiguration 中有默认的线程池配置了</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Lazy</span>    \n<span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token punctuation">{</span> \n    APPLICATION_TASK_EXECUTOR_BEAN_NAME<span class="token punctuation">,</span>            \n    <span class="token class-name">AsyncAnnotationBeanPostProcessor</span><span class="token punctuation">.</span>DEFAULT_TASK_EXECUTOR_BEAN_NAME \n<span class="token punctuation">}</span><span class="token punctuation">)</span>    \n<span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span><span class="token class-name">Executor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    \n<span class="token keyword">public</span> <span class="token class-name">ThreadPoolTaskExecutor</span> <span class="token function">applicationTaskExecutor</span><span class="token punctuation">(</span><span class="token class-name">TaskExecutorBuilder</span> builder<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>springboot1</p><p>在springboot1版本中，其实没有默认线程池的，在springboot2之后才有，可以看release-notes</p><p>Task Execution Spring Boot now provides auto-configuration for ThreadPoolTaskExecutor. If you are using @EnableAsync, your custom TaskExecutor can be removed in favor of customizations available from the spring.task.execution namespace. Custom ThreadPoolTaskExecutor can be easily created using TaskExecutorBuilder.</p><p>那么在springboot1中默认使用了哪个线程池呢？</p><p>在 AsyncExecutionInterceptor 中</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>\n<span class="token annotation punctuation">@Nullable</span>\n<span class="token keyword">protected</span> <span class="token class-name">Executor</span> <span class="token function">getDefaultExecutor</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">BeanFactory</span> beanFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>    \n    <span class="token class-name">Executor</span> defaultExecutor <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getDefaultExecutor</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>    \n    <span class="token keyword">return</span> <span class="token punctuation">(</span>defaultExecutor <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> defaultExecutor <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">SimpleAsyncTaskExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>可以看出如果没有配置线程池，就是 SimpleAsyncTaskExecutor</p><p>这个类注释讲得很清楚</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token punctuation">{</span><span class="token annotation punctuation">@link</span> <span class="token class-name">TaskExecutor</span><span class="token punctuation">}</span> implementation that fires up a <span class="token keyword">new</span> <span class="token class-name">Thread</span> <span class="token keyword">for</span> each task<span class="token punctuation">,</span>executing it asynchronously<span class="token punctuation">.</span>\n\n<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doExecute</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> task<span class="token punctuation">)</span> <span class="token punctuation">{</span>    \n    <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>threadFactory <span class="token operator">!=</span> <span class="token keyword">null</span> \n            <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>threadFactory<span class="token punctuation">.</span><span class="token function">newThread</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span> \n            <span class="token operator">:</span> <span class="token function">createThread</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    \n    thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>有任务时，就是新建线程</p>',23),t={render:function(n,s){return p}}}}]);