"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[8688],{112:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-f6418524",path:"/utility/apache-commons/03-commons-io.html",title:"Commons IO",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"写在前面的话",slug:"写在前面的话",children:[]},{level:2,title:"IOUtils 类",slug:"ioutils-类",children:[]},{level:2,title:"FileUtils 类",slug:"fileutils-类",children:[]},{level:2,title:"FilenameUtils 类",slug:"filenameutils-类",children:[]}],filePathRelative:"utility/apache-commons/03-commons-io.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},25693:(n,s,a)=>{a.r(s),a.d(s,{default:()=>t});const p=(0,a(66252).uE)('<h1 id="commons-io" tabindex="-1"><a class="header-anchor" href="#commons-io" aria-hidden="true">#</a> Commons IO</h1><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>commons-io<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>commons-io<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.8.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="写在前面的话" tabindex="-1"><a class="header-anchor" href="#写在前面的话" aria-hidden="true">#</a> 写在前面的话</h2><p>commons-io 是 Java 文件 IO『第一库』是公认的，它的功能和代码质量都是极佳的，它好到没有人想到再写一个竞品与之竞争，这么干完全是费力不讨好的做法。</p><h2 id="ioutils-类" tabindex="-1"><a class="header-anchor" href="#ioutils-类" aria-hidden="true">#</a> IOUtils 类</h2><p>IOUtils 主要操作 IO 流进行文件的读写操作。</p><p>IOUtils 常用方法如下：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// “安静地”关闭流对象。2.6 被废弃，建议使用 try-with-resource</span>\n<span class="token keyword">void</span> <span class="token function">closeQuietly</span><span class="token punctuation">(</span><span class="token class-name">Closeable</span> closeable<span class="token punctuation">)</span> \n\n<span class="token comment">// 从输入流中读取数据</span>\n<span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> input<span class="token punctuation">,</span> <span class="token class-name">Charset</span> encoding<span class="token punctuation">)</span> \n<span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> input<span class="token punctuation">,</span> <span class="token class-name">String</span> encoding<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// 从输入流 拷贝至 输出流</span>\n<span class="token keyword">int</span> <span class="token function">copy</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> input<span class="token punctuation">,</span> <span class="token class-name">OutputStream</span> output<span class="token punctuation">)</span>\n<span class="token keyword">void</span> <span class="token function">copy</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> input<span class="token punctuation">,</span> <span class="token class-name">Writer</span> output<span class="token punctuation">,</span> <span class="token class-name">Charset</span> inputEncoding<span class="token punctuation">)</span>\n<span class="token keyword">void</span> <span class="token function">copy</span><span class="token punctuation">(</span><span class="token class-name">Reader</span> input<span class="token punctuation">,</span> <span class="token class-name">OutputStream</span> output<span class="token punctuation">,</span> <span class="token class-name">String</span> outputEncoding<span class="token punctuation">)</span>\n<span class="token keyword">void</span> <span class="token function">copy</span><span class="token punctuation">(</span><span class="token class-name">Reader</span> input<span class="token punctuation">,</span> <span class="token class-name">OutputStream</span> output<span class="token punctuation">,</span> <span class="token class-name">Charset</span> outputEncoding<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// 从 输入流 中读取字节</span>\n<span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> input<span class="token punctuation">)</span>\n<span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> input<span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">)</span>\n<span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> input<span class="token punctuation">,</span> <span class="token keyword">long</span> size<span class="token punctuation">)</span>\n<span class="token comment">// 2.5 中被废弃，使用下个方法替代</span>\n<span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token class-name">Reader</span> input<span class="token punctuation">)</span> \n<span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token class-name">Reader</span> input<span class="token punctuation">,</span> <span class="token class-name">Charset</span> encoding<span class="token punctuation">)</span>\n<span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token class-name">Reader</span> input<span class="token punctuation">,</span> <span class="token class-name">String</span> encoding<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// write()</span>\n<span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">,</span> <span class="token class-name">OutputStream</span> output<span class="token punctuation">)</span>\n<span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">,</span> <span class="token class-name">OutputStream</span> output<span class="token punctuation">,</span> <span class="token class-name">Charset</span> encoding<span class="token punctuation">)</span>\n<span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">,</span> <span class="token class-name">OutputStream</span> output<span class="token punctuation">,</span> <span class="token class-name">String</span> encoding<span class="token punctuation">)</span>\n\n<span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">,</span> <span class="token class-name">Writer</span> output<span class="token punctuation">)</span>\n<span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">,</span> <span class="token class-name">Writer</span> output<span class="token punctuation">,</span> <span class="token class-name">Charset</span> encoding<span class="token punctuation">)</span>\n<span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">,</span> <span class="token class-name">Writer</span> output<span class="token punctuation">,</span> <span class="token class-name">String</span> encoding<span class="token punctuation">)</span>\n\n<span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">CharSequence</span> data<span class="token punctuation">,</span> <span class="token class-name">Writer</span> output<span class="token punctuation">)</span>\n<span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">CharSequence</span> data<span class="token punctuation">,</span> <span class="token class-name">OutputStream</span> output<span class="token punctuation">,</span> <span class="token class-name">Charset</span> encoding<span class="token punctuation">)</span>\n<span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">CharSequence</span> data<span class="token punctuation">,</span> <span class="token class-name">OutputStream</span> output<span class="token punctuation">,</span> <span class="token class-name">String</span> encoding<span class="token punctuation">)</span>\n\n<span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">String</span> data<span class="token punctuation">,</span> <span class="token class-name">Writer</span> output<span class="token punctuation">)</span>\n<span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">String</span> data<span class="token punctuation">,</span> <span class="token class-name">OutputStream</span> output<span class="token punctuation">,</span> <span class="token class-name">Charset</span> encoding<span class="token punctuation">)</span>\n<span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">String</span> data<span class="token punctuation">,</span> <span class="token class-name">OutputStream</span> output<span class="token punctuation">,</span> <span class="token class-name">String</span> encoding<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// 生成 InputStream 对象，并写入参数内容</span>\n<span class="token class-name">InputStream</span> <span class="token function">toInputStream</span><span class="token punctuation">(</span><span class="token class-name">CharSequence</span> input<span class="token punctuation">,</span> <span class="token class-name">Charset</span> encoding<span class="token punctuation">)</span>  \n<span class="token class-name">InputStream</span> <span class="token function">toInputStream</span><span class="token punctuation">(</span><span class="token class-name">CharSequence</span> input<span class="token punctuation">,</span> <span class="token class-name">String</span> encoding<span class="token punctuation">)</span>\n\n<span class="token class-name">InputStream</span> <span class="token function">toInputStream</span><span class="token punctuation">(</span><span class="token class-name">String</span> input<span class="token punctuation">,</span> <span class="token class-name">Charset</span> encoding<span class="token punctuation">)</span>\n<span class="token class-name">InputStream</span> <span class="token function">toInputStream</span><span class="token punctuation">(</span><span class="token class-name">String</span> input<span class="token punctuation">,</span> <span class="token class-name">String</span> encoding<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">readLines</span><span class="token punctuation">(</span><span class="token class-name">Reader</span> input<span class="token punctuation">)</span>   <span class="token comment">// 按行读入内容。</span>\n<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">readLines</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> input<span class="token punctuation">,</span> <span class="token class-name">Charset</span> encoding<span class="token punctuation">)</span>\n<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">readLines</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> input<span class="token punctuation">,</span> <span class="token class-name">String</span> encoding<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">long</span> <span class="token function">copyLarge</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> input<span class="token punctuation">,</span> <span class="token class-name">OutputStream</span> output<span class="token punctuation">)</span> <span class="token comment">// 用于超过 2 GB 的数据拷贝</span>\n<span class="token keyword">long</span> <span class="token function">copyLarge</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> input<span class="token punctuation">,</span> <span class="token class-name">OutputStream</span> output<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer<span class="token punctuation">)</span>\n<span class="token keyword">long</span> <span class="token function">copyLarge</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> input<span class="token punctuation">,</span> <span class="token class-name">OutputStream</span> output<span class="token punctuation">,</span> <span class="token keyword">long</span> inputOffset<span class="token punctuation">,</span> <span class="token keyword">long</span> length<span class="token punctuation">)</span>\n<span class="token keyword">long</span> <span class="token function">copyLarge</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> input<span class="token punctuation">,</span> <span class="token class-name">OutputStream</span> output<span class="token punctuation">,</span> <span class="token keyword">long</span> inputOffset<span class="token punctuation">,</span> <span class="token keyword">long</span> length<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer<span class="token punctuation">)</span>\n\n<span class="token keyword">long</span> <span class="token function">copyLarge</span><span class="token punctuation">(</span><span class="token class-name">Reader</span> input<span class="token punctuation">,</span> <span class="token class-name">Writer</span> output<span class="token punctuation">)</span>\n<span class="token keyword">long</span> <span class="token function">copyLarge</span><span class="token punctuation">(</span><span class="token class-name">Reader</span> input<span class="token punctuation">,</span> <span class="token class-name">Writer</span> output<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer<span class="token punctuation">)</span>\n<span class="token keyword">long</span> <span class="token function">copyLarge</span><span class="token punctuation">(</span><span class="token class-name">Reader</span> input<span class="token punctuation">,</span> <span class="token class-name">Writer</span> output<span class="token punctuation">,</span> <span class="token keyword">long</span> inputOffset<span class="token punctuation">,</span> <span class="token keyword">long</span> length<span class="token punctuation">)</span>\n<span class="token keyword">long</span> <span class="token function">copyLarge</span><span class="token punctuation">(</span><span class="token class-name">Reader</span> input<span class="token punctuation">,</span> <span class="token class-name">Writer</span> output<span class="token punctuation">,</span> <span class="token keyword">long</span> inputOffset<span class="token punctuation">,</span> <span class="token keyword">long</span> length<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">LineIterator</span> <span class="token function">lineIterator</span><span class="token punctuation">(</span><span class="token class-name">Reader</span> reader<span class="token punctuation">)</span> <span class="token comment">// 生成 Iterator 迭代器。可逐行读取文件内容。</span>\n<span class="token class-name">LineIterator</span> <span class="token function">lineIterator</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> input<span class="token punctuation">,</span> <span class="token class-name">String</span> encoding<span class="token punctuation">)</span>\n<span class="token class-name">LineIterator</span> <span class="token function">lineIterator</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> input<span class="token punctuation">,</span> <span class="token class-name">Charset</span> encoding<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">readFully</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> input<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer<span class="token punctuation">)</span> <span class="token comment">// 读取指定数量的内容，或失败。</span>\n<span class="token keyword">void</span> <span class="token function">readFully</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> input<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer<span class="token punctuation">,</span> <span class="token keyword">int</span> offset<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span>\n\n<span class="token keyword">void</span> <span class="token function">readFully</span><span class="token punctuation">(</span><span class="token class-name">Reader</span> input<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer<span class="token punctuation">)</span>\n<span class="token keyword">void</span> <span class="token function">readFully</span><span class="token punctuation">(</span><span class="token class-name">Reader</span> input<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer<span class="token punctuation">,</span> <span class="token keyword">int</span> offset<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span>\n\n<span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">readFully</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> input<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="fileutils-类" tabindex="-1"><a class="header-anchor" href="#fileutils-类" aria-hidden="true">#</a> FileUtils 类</h2><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// 递归地删除文件/文件夹</span>\n<span class="token keyword">void</span> <span class="token function">deleteDirectory</span><span class="token punctuation">(</span><span class="token class-name">File</span> directory<span class="token punctuation">)</span> \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// 将文件中的内容读入字符串</span>\n<span class="token class-name">String</span> <span class="token function">readFileToString</span><span class="token punctuation">(</span><span class="token class-name">File</span> file<span class="token punctuation">,</span> <span class="token class-name">Charset</span> encoding<span class="token punctuation">)</span> \n<span class="token class-name">String</span> <span class="token function">readFileToString</span><span class="token punctuation">(</span><span class="token class-name">File</span> file<span class="token punctuation">,</span> <span class="token class-name">String</span> encoding<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// 删除一个文件。无论如何不会抛出异常。</span>\n<span class="token keyword">boolean</span> <span class="token function">deleteQuietly</span><span class="token punctuation">(</span><span class="token class-name">File</span> file<span class="token punctuation">)</span> \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">copyFile</span><span class="token punctuation">(</span><span class="token class-name">File</span> srcFile<span class="token punctuation">,</span> <span class="token class-name">File</span> destFile<span class="token punctuation">)</span> <span class="token comment">// 拷贝文件，保留源文件的日期</span>\n<span class="token keyword">void</span> <span class="token function">copyFile</span><span class="token punctuation">(</span><span class="token class-name">File</span> srcFile<span class="token punctuation">,</span> <span class="token class-name">File</span> destFile<span class="token punctuation">,</span> <span class="token keyword">boolean</span> preserveFileDate<span class="token punctuation">)</span> <span class="token comment">// 是否保留文件日期取决于第三个参数</span>\n<span class="token keyword">long</span> <span class="token function">copyFile</span><span class="token punctuation">(</span><span class="token class-name">File</span> input<span class="token punctuation">,</span> <span class="token class-name">OutputStream</span> output<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">writeStringToFile</span><span class="token punctuation">(</span><span class="token class-name">File</span> file<span class="token punctuation">,</span> <span class="token class-name">String</span> data<span class="token punctuation">,</span> <span class="token class-name">Charset</span> encoding<span class="token punctuation">)</span> <span class="token comment">// 向文件中写入字符串。若文件不存在，则创建文件。</span>\n<span class="token keyword">void</span> <span class="token function">writeStringToFile</span><span class="token punctuation">(</span><span class="token class-name">File</span> file<span class="token punctuation">,</span> <span class="token class-name">String</span> data<span class="token punctuation">,</span> <span class="token class-name">Charset</span> encoding<span class="token punctuation">,</span> <span class="token keyword">boolean</span> append<span class="token punctuation">)</span>\n<span class="token keyword">void</span> <span class="token function">writeStringToFile</span><span class="token punctuation">(</span><span class="token class-name">File</span> file<span class="token punctuation">,</span> <span class="token class-name">String</span> data<span class="token punctuation">,</span> <span class="token class-name">String</span> encoding<span class="token punctuation">)</span>\n<span class="token keyword">void</span> <span class="token function">writeStringToFile</span><span class="token punctuation">(</span><span class="token class-name">File</span> file<span class="token punctuation">,</span> <span class="token class-name">String</span> data<span class="token punctuation">,</span> <span class="token class-name">String</span> encoding<span class="token punctuation">,</span> <span class="token keyword">boolean</span> append<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">forceMkdir</span><span class="token punctuation">(</span><span class="token class-name">File</span> directory<span class="token punctuation">)</span> <span class="token comment">// 创建文件夹</span>\n<span class="token keyword">void</span> <span class="token function">forceMkdirParent</span><span class="token punctuation">(</span><span class="token class-name">File</span> file<span class="token punctuation">)</span> <span class="token comment">// 创建文件夹，及其父文件夹。</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">File</span> file<span class="token punctuation">,</span> <span class="token class-name">CharSequence</span> data<span class="token punctuation">,</span> <span class="token class-name">Charset</span> encoding<span class="token punctuation">)</span>\n<span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">File</span> file<span class="token punctuation">,</span> <span class="token class-name">CharSequence</span> data<span class="token punctuation">,</span> <span class="token class-name">String</span> encoding<span class="token punctuation">)</span>\n<span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">File</span> file<span class="token punctuation">,</span> <span class="token class-name">CharSequence</span> data<span class="token punctuation">,</span> <span class="token class-name">Charset</span> encoding<span class="token punctuation">,</span> <span class="token keyword">boolean</span> append<span class="token punctuation">)</span>\n<span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">File</span> file<span class="token punctuation">,</span> <span class="token class-name">CharSequence</span> data<span class="token punctuation">,</span> <span class="token class-name">String</span> encoding<span class="token punctuation">,</span> <span class="token keyword">boolean</span> append<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">File</span><span class="token punctuation">&gt;</span></span> <span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token class-name">File</span> directory<span class="token punctuation">,</span> <span class="token class-name">IOFileFilter</span> fileFilter<span class="token punctuation">,</span> <span class="token class-name">IOFileFilter</span> dirFilter<span class="token punctuation">)</span>\n<span class="token comment">// Finds files within a given directory (and optionally its subdirectories).</span>\n<span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">File</span><span class="token punctuation">&gt;</span></span> <span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token class-name">File</span> directory<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> extensions<span class="token punctuation">,</span> <span class="token keyword">boolean</span> recursive<span class="token punctuation">)</span>\n<span class="token comment">// Finds files within a given directory (and optionally its subdirectories) which match an array of extensions.</span>\n<span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">File</span><span class="token punctuation">&gt;</span></span> <span class="token function">listFilesAndDirs</span><span class="token punctuation">(</span><span class="token class-name">File</span> directory<span class="token punctuation">,</span> <span class="token class-name">IOFileFilter</span> fileFilter<span class="token punctuation">,</span> <span class="token class-name">IOFileFilter</span> dirFilter<span class="token punctuation">)</span>\n<span class="token comment">// Finds files within a given directory (and optionally its subdirectories).</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">copyDirectory</span><span class="token punctuation">(</span><span class="token class-name">File</span> srcDir<span class="token punctuation">,</span> <span class="token class-name">File</span> destDir<span class="token punctuation">)</span> <span class="token comment">// Copies a whole directory to a new location preserving the file dates.</span>\n<span class="token keyword">void</span> <span class="token function">copyDirectory</span><span class="token punctuation">(</span><span class="token class-name">File</span> srcDir<span class="token punctuation">,</span> <span class="token class-name">File</span> destDir<span class="token punctuation">,</span> <span class="token keyword">boolean</span> preserveFileDate<span class="token punctuation">)</span> <span class="token comment">// Copies a whole directory to a new location.</span>\n<span class="token keyword">void</span> <span class="token function">copyDirectory</span><span class="token punctuation">(</span><span class="token class-name">File</span> srcDir<span class="token punctuation">,</span> <span class="token class-name">File</span> destDir<span class="token punctuation">,</span> <span class="token class-name">FileFilter</span> filter<span class="token punctuation">)</span> <span class="token comment">// Copies a filtered directory to a new location preserving the file dates.</span>\n<span class="token keyword">void</span> <span class="token function">copyDirectory</span><span class="token punctuation">(</span><span class="token class-name">File</span> srcDir<span class="token punctuation">,</span> <span class="token class-name">File</span> destDir<span class="token punctuation">,</span> <span class="token class-name">FileFilter</span> filter<span class="token punctuation">,</span> <span class="token keyword">boolean</span> preserveFileDate<span class="token punctuation">)</span> <span class="token comment">// Copies a filtered directory to a new location.</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">forceDelete</span><span class="token punctuation">(</span><span class="token class-name">File</span> file<span class="token punctuation">)</span> <span class="token comment">// Deletes a file.</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="filenameutils-类" tabindex="-1"><a class="header-anchor" href="#filenameutils-类" aria-hidden="true">#</a> FilenameUtils 类</h2><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">String</span> <span class="token function">getExtension</span><span class="token punctuation">(</span><span class="token class-name">String</span> filename<span class="token punctuation">)</span> <span class="token comment">// Gets the extension of a filename.</span>\n<span class="token class-name">String</span> <span class="token function">getBaseName</span><span class="token punctuation">(</span><span class="token class-name">String</span> filename<span class="token punctuation">)</span> <span class="token comment">// Gets the base name, minus the full path and extension, from a full filename.</span>\n<span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token class-name">String</span> filename<span class="token punctuation">)</span> <span class="token comment">// Gets the name minus the path from a full filename.</span>\n<span class="token class-name">String</span> <span class="token function">concat</span><span class="token punctuation">(</span><span class="token class-name">String</span> basePath<span class="token punctuation">,</span> <span class="token class-name">String</span> fullFilenameToAdd<span class="token punctuation">)</span> <span class="token comment">// Concatenates a filename to a base path using normal command line style rules.</span>\n<span class="token class-name">String</span> <span class="token function">removeExtension</span><span class="token punctuation">(</span><span class="token class-name">String</span> filename<span class="token punctuation">)</span> <span class="token comment">// Removes the extension from a filename.</span>\n<span class="token class-name">String</span> <span class="token function">normalize</span><span class="token punctuation">(</span><span class="token class-name">String</span> filename<span class="token punctuation">)</span> <span class="token comment">// Normalizes a path, removing double and single dot path steps.</span>\n<span class="token keyword">boolean</span> <span class="token function">wildcardMatch</span><span class="token punctuation">(</span><span class="token class-name">String</span> filename<span class="token punctuation">,</span> <span class="token class-name">String</span> wildcardMatcher<span class="token punctuation">)</span> <span class="token comment">// Checks a filename to see if it matches the specified wildcard matcher, always testing case-sensitive.</span>\n<span class="token class-name">String</span> <span class="token function">separatorsToUnix</span><span class="token punctuation">(</span><span class="token class-name">String</span> path<span class="token punctuation">)</span> <span class="token comment">// Converts all separators to the Unix separator of forward slash.</span>\n<span class="token class-name">String</span> <span class="token function">getFullPath</span><span class="token punctuation">(</span><span class="token class-name">String</span> filename<span class="token punctuation">)</span> <span class="token comment">// Gets the full path from a full filename, which is the prefix + path.</span>\n<span class="token keyword">boolean</span> <span class="token function">isExtension</span><span class="token punctuation">(</span><span class="token class-name">String</span> filename<span class="token punctuation">,</span> <span class="token class-name">String</span> extension<span class="token punctuation">)</span> <span class="token comment">//Checks whether the extension of the filename is that specified.</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div>',29),t={render:function(n,s){return p}}}}]);