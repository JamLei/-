"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[1007],{19873:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-3fc43f48",path:"/utility/3rd/08-nimbus-jose-jwt.html",title:"操作 JWT：nimbus-jose-jwt 库",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"相关概念",slug:"相关概念",children:[]},{level:2,title:"核心 API 介绍",slug:"核心-api-介绍",children:[]},{level:2,title:"官网的 HS256  示例",slug:"官网的-hs256-示例",children:[]},{level:2,title:"在 Payload 中存对象",slug:"在-payload-中存对象",children:[]}],filePathRelative:"utility/3rd/08-nimbus-jose-jwt.md",git:{updatedTime:1629826614e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},29077:(n,s,a)=>{a.r(s),a.d(s,{default:()=>u});var p=a(66252);const e=(0,p._)("h1",{id:"操作-jwt-nimbus-jose-jwt-库",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#操作-jwt-nimbus-jose-jwt-库","aria-hidden":"true"},"#"),(0,p.Uk)(" 操作 JWT：nimbus-jose-jwt 库")],-1),t=(0,p._)("p",null,[(0,p.Uk)("nimbus-jose-jwt、jose4j、java-jwt 和 jjwt 是几个 Java 中常见的操作 JWT 的库。就使用细节而言，nimbus-jos-jwt"),(0,p._)("small",null,"（和jose4j）"),(0,p.Uk)("要好于 java-jwt 和 jjwt 。")],-1),o={href:"https://connect2id.com/products/nimbus-jose-jwt",target:"_blank",rel:"noopener noreferrer"},c=(0,p.Uk)("nimbus-jose-jwt 官网"),l=(0,p.uE)('<div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.nimbusds<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>nimbus-jose-jwt<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>9.11.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="相关概念" tabindex="-1"><a class="header-anchor" href="#相关概念" aria-hidden="true">#</a> 相关概念</h2><p>这里我们需要了解下 JWT、JWS、JWE 三者之间的关系：</p><ul><li><p>JWT<small>（JSON Web Token）</small>指的是一种规范，这种规范允许我们使用 JWT在两个组织之间传递安全可靠的信息。</p></li><li><p><strong>JWS</strong><small>（JSON Web Signature）</small>和 JWE<small>（JSON Web Encryption）</small>是 JWT 规范的两种不同实现，我们平时最常使用的实现就是 JWS 。</p></li></ul><p>它们之间的关系类似于接口与实现类之间的关系。由于，我们使用的是 JWS ，所以，后续内容中，就直接列举 JWS 相关类，不再细分 JWS 和 JWE 了。</p><p>另外，还有一对可能会涉及的概念：对称加密和非对称加密：</p><ul><li><p>『<strong>对称加密</strong>』指的是使用相同的秘钥来进行加密和解密，如果你的秘钥不想暴露给解密方，考虑使用非对称加密。</p></li><li><p>『<strong>非对称加密</strong>』指的是使用公钥和私钥来进行加密解密操作。对于加密操作，公钥负责加密，私钥负责解密，对于签名操作，私钥负责签名，公钥负责验证。非对称加密在 JWT 中的使用显然属于签名操作。</p></li></ul><p>nimbus-jose-jwt 支持的算法都在它的 <strong>JWSAlgorithm</strong> 和 JWEAlgorithm 类中有定义。</p><p>例如：<code>JWSAlgorithm algorithm = JWSAlgorithm.HS256</code></p><h2 id="核心-api-介绍" tabindex="-1"><a class="header-anchor" href="#核心-api-介绍" aria-hidden="true">#</a> 核心 API 介绍</h2><p>在 nimbus-jose-jwt 中，使用 Header 类代表 JWT 的头部，使用 <strong>Payload</strong> 类的代表 JWT 的荷载部分，</p><p>不过，Header 类是一个抽象类，我们使用的是它的子类 <strong>JWSHeader</strong> 。</p><ul><li><p>创建头部对象</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">JWSHeader</span> jwsHeader <span class="token operator">=</span> \n      <span class="token keyword">new</span> <span class="token class-name">JWSHeader<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span>algorithm<span class="token punctuation">)</span>       <span class="token comment">// 加密算法</span>\n                   <span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token class-name">JOSEObjectType</span><span class="token punctuation">.</span>JWT<span class="token punctuation">)</span> <span class="token comment">// 静态常量</span>\n                   <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><p>创建荷载部对象</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Payload</span> payload <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Payload</span><span class="token punctuation">(</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这里还可以传 JSON 串，或 Map 。</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li></ul><p>签名部分没有专门的类表示，只有通用类 <strong>Base64URL</strong> 。JWSHeader 对象和 Payload 对象都能『求得』它们对应得 Base64URL 形式：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>header<span class="token punctuation">.</span><span class="token function">getParsedBase64URL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\npayload<span class="token punctuation">.</span><span class="token function">toBase64URL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>在 nimbus-jose-jwt 中，签名算法由 JWSAlgorithm 表示。</p><p>在创建 JWSHeader 对象时就需要指定签名算法，因为在标准中，头部需要保存签名算法名字。</p><p>用头部和荷载部分，再加上指定的签名算法和密钥来生成签名部分的过程，在 nimbus-jose-jwt 中被称为『<strong>签名</strong>（sign）』。</p><p>nimbus-jose-jwt 专门提供了一个签名器 JWSSigner，用来参与到签名过程中。密钥就是在创建签名器的时候指定的：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">JWSSigner</span> jwsSigner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MACSigner</span><span class="token punctuation">(</span>secret<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>最终，整个 JWT 由 <strong>JWSObject</strong> 对象表示：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">JWSObject</span> jwsObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JWSObject</span><span class="token punctuation">(</span>jwsHeader<span class="token punctuation">,</span> payload<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 进行签名（根据前两部分生成第三部分）</span>\njwsObject<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span>jwsSigner<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>在 nimbus-jose-jwt 中 JWSObject 是有状态的：未签名、已签名和签名中。很显然，在执行外 <code>.sign()</code> 方法之后，JWSObject 对象就变成了已签名状态。</p><p>当然，我们最终『要』的是 JWT 字符串，而不是对象，这里接着对代表 JWT 的 JWSObject 对象调用 <code>.serialize()</code> 方法即可：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">String</span> token <span class="token operator">=</span> jwsObject<span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>反向的解密和验证过程核心 API 就 2 个：JWSObject 的静态方法 <strong>parse</strong> 方法和验证其 JWSVerifier 对象。</p><p><code>JWSObject.parse()</code> 方法是上面的 serialize 方法的反向操作，它可以通过一个 JWT 串生成 JWSObject 。有了 JWObject 之后，你就可以获得 header 和 payload 部分了。</p><p>如果你想直接验证 JWSObject 对象的合法性，你需要创建一个 <strong>JWSVerifier</strong> 对象。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">JWSVerifier</span> jwsVerifier <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MACVerifier</span><span class="token punctuation">(</span>secret<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>然后直接调用 jwsObject 对象的 <strong>verify</strong> 方法：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>jwsObject<span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>jwsVerifier<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;token 签名不合法！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="官网的-hs256-示例" tabindex="-1"><a class="header-anchor" href="#官网的-hs256-示例" aria-hidden="true">#</a> 官网的 HS256 示例</h2><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>security<span class="token punctuation">.</span></span><span class="token class-name">SecureRandom</span><span class="token punctuation">;</span>\n\n<span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>nimbusds<span class="token punctuation">.</span>jose<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>nimbusds<span class="token punctuation">.</span>jose<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span>\n\n\n<span class="token comment">// Generate random 256-bit (32-byte) shared secret</span>\n<span class="token class-name">SecureRandom</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SecureRandom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sharedSecret <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\nrandom<span class="token punctuation">.</span><span class="token function">nextBytes</span><span class="token punctuation">(</span>sharedSecret<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Create HMAC signer</span>\n<span class="token class-name">JWSSigner</span> signer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MACSigner</span><span class="token punctuation">(</span>sharedSecret<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Prepare JWS object with &quot;Hello, world!&quot; payload</span>\n<span class="token class-name">JWSObject</span> jwsObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JWSObject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JWSHeader</span><span class="token punctuation">(</span><span class="token class-name">JWSAlgorithm</span><span class="token punctuation">.</span>HS256<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Payload</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, world!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Apply the HMAC</span>\njwsObject<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span>signer<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// To serialize to compact form, produces something like</span>\n<span class="token comment">// eyJhbGciOiJIUzI1NiJ9.SGVsbG8sIHdvcmxkIQ.onO9Ihudz3WkiauDO2Uhyuz0Y18UASXlSc1eS0NkWyA</span>\n<span class="token class-name">String</span> s <span class="token operator">=</span> jwsObject<span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// To parse the JWS and verify it, e.g. on client-side</span>\njwsObject <span class="token operator">=</span> <span class="token class-name">JWSObject</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name">JWSVerifier</span> verifier <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MACVerifier</span><span class="token punctuation">(</span>sharedSecret<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">assertTrue</span><span class="token punctuation">(</span>jwsObject<span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>verifier<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">&quot;Hello, world!&quot;</span><span class="token punctuation">,</span> jwsObject<span class="token punctuation">.</span><span class="token function">getPayload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><h2 id="在-payload-中存对象" tabindex="-1"><a class="header-anchor" href="#在-payload-中存对象" aria-hidden="true">#</a> 在 Payload 中存对象</h2><p>在上例<small>（和官方示例中）</small>payload 中存放的是简单的字符串，其实，更方便更有使用价值的是存入一个 json 串。所以，我们可以自定义专本用于存入 payload 中的 javabean，例如：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>\n<span class="token annotation punctuation">@NoArgsConstructor</span>\n<span class="token annotation punctuation">@AllArgsConstructor</span>\n<span class="token annotation punctuation">@Builder</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Claims</span> <span class="token punctuation">{</span>\n\n    <span class="token comment">// &quot;主题&quot;</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> sub<span class="token punctuation">;</span>\n\n    <span class="token comment">// &quot;签发时间&quot;</span>\n    <span class="token keyword">private</span> <span class="token class-name">Long</span> iat<span class="token punctuation">;</span>\n\n    <span class="token comment">// 过期时间</span>\n    <span class="token keyword">private</span> <span class="token class-name">Long</span> exp<span class="token punctuation">;</span>\n\n    <span class="token comment">// JWT的ID</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> jti<span class="token punctuation">;</span>\n\n    <span class="token comment">// &quot;用户名称&quot;</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>\n\n    <span class="token comment">// &quot;用户拥有的权限&quot;</span>\n    <span class="token comment">//private List&lt;String&gt; authorities;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p>这样在创建 Payload 时，需要多一步转换操作：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">ObjectMapper</span> mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 这里使用的是 Jackson 库</span>\n<span class="token comment">// 将负载信息封装到Payload中</span>\n<span class="token class-name">Payload</span> payload <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Payload</span><span class="token punctuation">(</span>mapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>claims<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>反向的取出内容时，也是一样的道理。</p>',39),u={render:function(n,s){const a=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.iD)(p.HY,null,[e,t,(0,p._)("p",null,[(0,p._)("a",o,[c,(0,p.Wm)(a)])]),l],64)}}}}]);