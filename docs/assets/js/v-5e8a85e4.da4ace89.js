"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[8998],{48749:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-5e8a85e4",path:"/spring-cloud/07-spring-cloud-config.html",title:"配置中心：Spring Cloud Config",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"1. Config Server 本地存储配置文件",slug:"_1-config-server-本地存储配置文件",children:[]},{level:2,title:"2. 简单的 Config Client",slug:"_2-简单的-config-client",children:[]},{level:2,title:"3. Git 服务器",slug:"_3-git-服务器",children:[]},{level:2,title:"4. Config Server 和 Git 远程仓库",slug:"_4-config-server-和-git-远程仓库",children:[]},{level:2,title:"5. 访问 Git Config Server 的 Config Client",slug:"_5-访问-git-config-server-的-config-client",children:[]},{level:2,title:"6. 刷新配置（了解、自学）",slug:"_6-刷新配置-了解、自学",children:[]},{level:2,title:"7. 结合 Eureka 使用 Spring Cloud Config",slug:"_7-结合-eureka-使用-spring-cloud-config",children:[]}],filePathRelative:"spring-cloud/07-spring-cloud-config.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},45747:(n,s,a)=>{a.r(s),a.d(s,{default:()=>S});var e=a(66252);const p=(0,e.uE)('<h1 id="配置中心-spring-cloud-config" tabindex="-1"><a class="header-anchor" href="#配置中心-spring-cloud-config" aria-hidden="true">#</a> 配置中心：Spring Cloud Config</h1><p>在实际使用场景中，集群中会存在多个微服务，而每个服务又有可能存在多个实例。如果每一个微服务都是靠自己的 <strong>application.properties</strong> 或 <strong>application.yml</strong> 进行配置，那么整个项目的配置就会繁琐为混乱。例如：</p><p>多个 Service Producer 使用的是用一个数据库。理论上，可以在各个项目中配置数据库连接相关配置。但是，如果一旦有变动，如数据库所在主机的 IP 变动了，那么你需要改很多处地方，而且还必须确保无一遗漏。</p><p>因此 Spring Cloud 为我们集成了『<strong>配置中心</strong>』：<strong>spring-cloud-config</strong> 组件。</p><p>Spring Cloud Config 是一个高可用的分布式配置中心，专门用于管理系统的所有配置，也就是我们将所有配置文件放到统一的地方进行管理。</p><ul><li><p><strong>Config Server</strong>：负责向各个子系统提供配置信息；</p></li><li><p><strong>Config Client</strong>：各个子系统。各个项目各自从 <strong>Config Server</strong> 去『拉取』属于自己的配置信息。</p><p><strong>注意</strong>：和 Eureka Client 拉取注册表不一样，各个子系统『拉取自己的配置』只拉取一次，一旦拉取成功后这些配置信息就缓存在了各个子系统的本地。</p></li></ul><h2 id="_1-config-server-本地存储配置文件" tabindex="-1"><a class="header-anchor" href="#_1-config-server-本地存储配置文件" aria-hidden="true">#</a> 1. Config Server 本地存储配置文件</h2><p>最简单的注册中心的配置管理方式是各个微服务的相关配置以 .properties 或 .yml 配置文件的形式存储在 Config Server 的磁盘上。</p><ol><li><p>加依赖</p><p>在 spring starter 中引入：<em>Spring Web</em> 和 <strong>Config Server</strong> 。</p><p>这个扮演 <strong>Config Server</strong> 角色的 Spring Boot 项目负责在它的本地维护一批配置文件。</p></li><li><p>加注解</p><p>在启动类上加入 <strong>@EnableConfigServer</strong> 注解，标识本项目的『身份』是 Config Server，并激活相关配置。</p></li><li><p>加配置</p><p>编写 Config Server 的 <strong>application.yml</strong> 配置文件，并写入如下内容：</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">server</span><span class="token punctuation">:</span>\n  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">3301</span>\n<span class="token key atrule">spring</span><span class="token punctuation">:</span>\n  <span class="token key atrule">application</span><span class="token punctuation">:</span>\n    <span class="token key atrule">name</span><span class="token punctuation">:</span> config<span class="token punctuation">-</span>server\n  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>\n    <span class="token key atrule">config</span><span class="token punctuation">:</span>\n      <span class="token key atrule">server</span><span class="token punctuation">:</span>\n        <span class="token key atrule">native</span><span class="token punctuation">:</span>\n          <span class="token key atrule">search-locations</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>/xxx\n  <span class="token key atrule">profiles</span><span class="token punctuation">:</span>\n    <span class="token key atrule">active</span><span class="token punctuation">:</span> native\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>在 Config Server 项目的 classpath<small>（resources）</small>下，创建 <code>xxx</code> 文件夹，并在下面创建一个名为 <code>xxx-service-dev.yml</code> 的配置文件。这个配置文件的文件名有 2 处需要我们注意的：<code>xxx-sesrvice</code> 和 <code>dev</code>，后面我们会用到它们两个。</p></li></ol><p>以特定规则的 URI 访问 Config Server，可以看到它对外『暴露』出来的配置信息：</p><pre><code>/&lt;子系统-application-name&gt;/&lt;profile-name&gt;\n</code></pre><p>你所看到的 JSON 内容中就会有 application-name-profile.yml 配置文件中的配置信息。</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n    <span class="token property">&quot;name&quot;</span><span class="token operator">:</span><span class="token string">&quot;xxx-service&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;profiles&quot;</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">&quot;dev&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;label&quot;</span><span class="token operator">:</span><span class="token null keyword">null</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;version&quot;</span><span class="token operator">:</span><span class="token string">&quot;bcbf31dfa30218c9282f6d5eca23364188b803cf&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;state&quot;</span><span class="token operator">:</span><span class="token null keyword">null</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;propertySources&quot;</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">{</span>\n        <span class="token property">&quot;name&quot;</span><span class="token operator">:</span><span class="token string">&quot;https://gitee.com/hemiao3020/config-only-a-demo.git/config/config-single-client-dev.yml&quot;</span><span class="token punctuation">,</span>\n        <span class="token property">&quot;source&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>\n            <span class="token property">&quot;logging.level.root&quot;</span><span class="token operator">:</span> <span class="token string">&quot;WARN&quot;</span><span class="token punctuation">,</span>\n            ...\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="_2-简单的-config-client" tabindex="-1"><a class="header-anchor" href="#_2-简单的-config-client" aria-hidden="true">#</a> 2. 简单的 Config Client</h2><ol><li><p>加依赖</p><p>在 Spring Initializer 中引入：<em>Spring Web</em> 和 <strong>Config Client</strong> 。</p><p>这里注意的有 2 点：</p><ol><li><p>如果是在 Initializer 界面上选择，<strong>不要错选成了 Config Client (PCF)</strong> 。</p></li><li><p>如果是手写 pom 中的依赖，Config Client 引入的依赖『<strong>不是想当然的 spring-cloud-config-client</strong>』 。</p></li></ol></li><li><p>加配置</p><p>Config Client 是要去『<strong>连接</strong>』Config Server，从中去取属于自己<small>（指定）</small>的配置项。因此，与连接相关的配置，必须要写在 Config Client 的 <strong>bootstrap</strong> 配置文件中。</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>\n  <span class="token key atrule">application</span><span class="token punctuation">:</span>\n    <span class="token key atrule">name</span><span class="token punctuation">:</span> xxx<span class="token punctuation">-</span>service\n  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>\n    <span class="token key atrule">config</span><span class="token punctuation">:</span>\n      <span class="token key atrule">uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span><span class="token number">3301</span>\n      <span class="token key atrule">profile</span><span class="token punctuation">:</span> dev\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></li></ol>',15),t=(0,e.Uk)("毫无疑问，它所取到的配置，就是 "),l={href:"http://127.0.0.1:3301/xxx-service/dev",target:"_blank",rel:"noopener noreferrer"},o=(0,e._)("em",null,"http://127.0.0.1:3301/xxx-service/dev",-1),r=(0,e.Uk)(" 中所记录的。"),i=(0,e._)("h2",{id:"_3-git-服务器",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#_3-git-服务器","aria-hidden":"true"},"#"),(0,e.Uk)(" 3. Git 服务器")],-1),c=(0,e._)("p",null,"Config Server 还支持将配置文件存储与 Git Server 和 SVN Server 上。",-1),u=(0,e._)("p",null,"当然这就是 Config Server 和 Git Server、SVN Server 之间的事情，和 Config Client 无关。Config Client 并不关系 Config Server 上的配置信息来源于哪里。",-1),g=(0,e._)("p",null,[(0,e._)("img",{src:"https://hemiao3000.gitee.io/java-note-img/images/spring-cloud/img/config-01.png",alt:""})],-1),k=(0,e._)("blockquote",null,[(0,e._)("p",null,"由于 github 网速较慢，因此，这里使用的是 gitee 。不过，实际中可能会是使用 gitlab、gogs、gitea 等搭建局域网的 Git 服务器。")],-1),b=(0,e.Uk)("创建的仓库地址为："),m={href:"https://gitee.com/hemiao3000/config-only-a-demo.git",target:"_blank",rel:"noopener noreferrer"},d=(0,e.Uk)("配置中心仓库"),v=(0,e.uE)('<p>目录结构如下：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>仓库\n│── config\n│   │── xxx-service-dev.yml\n│   │── xxx-service-test.yml\n│   │── xxx-service-prod.yml\n│   │── xxx-service-test.yml\n│   │── yyy-service-dev.yml\n│   │── yyy-service-test.yml\n│   └── yyy-service-prod.yml\n│── 其他文件...\n└── 其它目录...\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>很显然，上面的 <code>xxx-service</code> 和 <code>yyy-service</code> 是两个子系统的 application name 。</p><p>以最常见的日志格式为例，这些配置文件中的内容，可以是日志的级别和格式设置：</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">logging</span><span class="token punctuation">:</span>\n  <span class="token key atrule">level</span><span class="token punctuation">:</span>\n    <span class="token key atrule">root</span><span class="token punctuation">:</span> WARN\n    <span class="token key atrule">com.woniu</span><span class="token punctuation">:</span> DEBUG\n    <span class="token key atrule">com.example</span><span class="token punctuation">:</span> DEBUG\n  <span class="token key atrule">pattern</span><span class="token punctuation">:</span>\n    <span class="token key atrule">console</span><span class="token punctuation">:</span> &quot;$<span class="token punctuation">{</span>CONSOLE_LOG_PATTERN<span class="token punctuation">:</span>\\\n      <span class="token directive important">%clr(${LOG_LEVEL_PATTERN:%5p}) \\</span>\n      <span class="token directive important">%clr(|){faint} \\</span>\n      <span class="token directive important">%clr(%-40.40logger{39}){cyan} \\</span>\n      <span class="token directive important">%clr(:){faint} \\</span>\n      <span class="token directive important">%m%n${LOG_EXCEPTION_CONVERSION_WORD:%wEx}}&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>配置文件的内容大致如下，用于区分，略有不同。</p><p><strong>注意</strong>：并非必须是 <strong>.yml</strong> 文件，配置文件格式为 <strong>.properties</strong> 文件也行。</p><h2 id="_4-config-server-和-git-远程仓库" tabindex="-1"><a class="header-anchor" href="#_4-config-server-和-git-远程仓库" aria-hidden="true">#</a> 4. Config Server 和 Git 远程仓库</h2><p>现在扮演 <strong>Config Server</strong> 角色的 spring-boot 项目就要负责连接到 Git 中央仓库，并从中下载所有子项目的配置项。</p><p>因此，显而易见，Config Server 要配置连接 Git 中央仓库的一些必要属性：</p><p>编写 <code>application.yml</code> 配置文件，并写入如下内容：</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">server</span><span class="token punctuation">:</span>\n  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">3301</span>\n<span class="token key atrule">spring</span><span class="token punctuation">:</span>\n  <span class="token key atrule">application</span><span class="token punctuation">:</span>\n    <span class="token key atrule">name</span><span class="token punctuation">:</span> config<span class="token punctuation">-</span>server\n  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>\n    <span class="token key atrule">config</span><span class="token punctuation">:</span>\n      <span class="token key atrule">server</span><span class="token punctuation">:</span>\n        <span class="token key atrule">git</span><span class="token punctuation">:</span>\n          <span class="token key atrule">uri</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//gitee.com/woniuwh/woniu<span class="token punctuation">-</span>config.git\n          <span class="token key atrule">username</span><span class="token punctuation">:</span> woniuwh\n          <span class="token key atrule">password</span><span class="token punctuation">:</span> 123456abc\n          <span class="token key atrule">default-label</span><span class="token punctuation">:</span> master\n          <span class="token key atrule">search-paths</span><span class="token punctuation">:</span> config\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>上面的配置所表达的意思是： 以 <code>&lt;username&gt;</code> 和 <code>&lt;password&gt;</code> 登录到 Git 仓库，，从 <code>&lt;uri&gt;</code> 下载一个 Git 版本库。并且，从它的 <code>&lt;default-label&gt;</code> 分支下的 <code>&lt;search-paths&gt;</code> 目录下找配置文件，并加载它们所记录的配置项。</p><p>这里需要说明 2 点：</p><ol><li><p><strong>default-label</strong> 配置的作用</p><p>由于 Git 仓库是有『<strong>分支</strong>』的概念，因此，逻辑上 xxx 文件在 Git 仓库中是可能有多份的。所以，这里要指定分支。</p></li><li><p><strong>search-paths</strong> 配置的作用</p><p>Config Server 不强求这个 Git 仓库是专用于它的，也就是说，Git 仓库中可以有其它的、和 Config Server 功能不相关的其它文件夹和文件。因此，你要明确指出 Git 仓库中的哪个文件夹是用于 Config Server 的。</p></li></ol><p>在 Config Server 项目的启动类上加入 <strong>@EnableConfigServer</strong> 注解，标识本项目的『<strong>身份</strong>』是 Config Server，并激活相关配置 。</p><p>现在以特定规则的 URI 访问 Config Server 项目，可以看到它从 Git 中央仓库拉下来的各个子系统的配置项：</p><pre><code>/&lt;子系统-application-name&gt;/&lt;profile-name&gt;[/{分支-name}]\n</code></pre><p>其中 <strong>分支-name</strong> 不是必须的，默认是 <strong>master</strong> 分支。</p><p>例如：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>http://127.0.0.1:3301/xxx-service/dev\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>这意味着你要向 Config Server 查看 <strong>config-single-client</strong> 子系统的 <strong>dev</strong> 环境的配置。</p><p>在 <strong>propertySources</strong> &gt; <strong>source</strong> 下就是对应的配置文件的内容。</p><blockquote><p>实际上除了上述规则，URL 还可以使用如下规则：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>/{application}-{profile}.yml\n/{application}-{profile}.properties\n/{label}/{application}-{profile}.yml\n/{label}/{application}-{profile}.properties\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></blockquote><h2 id="_5-访问-git-config-server-的-config-client" tabindex="-1"><a class="header-anchor" href="#_5-访问-git-config-server-的-config-client" aria-hidden="true">#</a> 5. 访问 Git Config Server 的 Config Client</h2><p>Config Client 是要去『<strong>连接</strong>』Config Server，从中去取属于 Config Client 自己的配置项。</p><p>与连接相关的配置，必须要写在 Config Client 的 <strong>bootstrap</strong> 配置文件中。</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>\n  <span class="token key atrule">application</span><span class="token punctuation">:</span>\n    <span class="token key atrule">name</span><span class="token punctuation">:</span> config<span class="token punctuation">-</span>single<span class="token punctuation">-</span>client\n  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>\n    <span class="token key atrule">config</span><span class="token punctuation">:</span>\n      <span class="token key atrule">uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span><span class="token number">3301</span>\n      <span class="token key atrule">label</span><span class="token punctuation">:</span> master\n      <span class="token key atrule">profile</span><span class="token punctuation">:</span> dev\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><pre><code>/&lt;子系统-application-name&gt;/&lt;profile-name&gt;[/{分支-name}]\n</code></pre>',29),f=(0,e.Uk)("毫无疑问，它所取到的配置，就是 "),y={href:"http://127.0.0.1:3301/config-single-client/dev/master",target:"_blank",rel:"noopener noreferrer"},C=(0,e._)("em",null,"http://127.0.0.1:3301/config-single-client/dev/master",-1),h=(0,e.Uk)(" 中所记录的。"),x=(0,e.uE)('<hr><p>另外，Config Client 可以将 <strong>bootstrap.yml</strong> 写成如下形式，方便未来切换配置：</p><blockquote><p>在 yml 文件中，以 <strong>---</strong> 作为配置段的开始的标识。</p></blockquote><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>\n  <span class="token key atrule">profiles</span><span class="token punctuation">:</span>\n    <span class="token key atrule">active</span><span class="token punctuation">:</span> dev\n\n<span class="token punctuation">---</span>\n<span class="token key atrule">spring</span><span class="token punctuation">:</span>\n  <span class="token key atrule">profiles</span><span class="token punctuation">:</span> prod\n  <span class="token key atrule">application</span><span class="token punctuation">:</span>\n    <span class="token key atrule">name</span><span class="token punctuation">:</span> config<span class="token punctuation">-</span>single<span class="token punctuation">-</span>client\n  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>\n    <span class="token key atrule">config</span><span class="token punctuation">:</span>\n      <span class="token key atrule">uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span><span class="token number">3301</span>\n      <span class="token key atrule">label</span><span class="token punctuation">:</span> master\n      <span class="token key atrule">profile</span><span class="token punctuation">:</span> prod\n\n<span class="token punctuation">---</span>\n<span class="token key atrule">spring</span><span class="token punctuation">:</span>\n  <span class="token key atrule">profiles</span><span class="token punctuation">:</span> dev\n  <span class="token key atrule">application</span><span class="token punctuation">:</span>\n    <span class="token key atrule">name</span><span class="token punctuation">:</span> config<span class="token punctuation">-</span>single<span class="token punctuation">-</span>client\n  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>\n    <span class="token key atrule">config</span><span class="token punctuation">:</span>\n      <span class="token key atrule">uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span><span class="token number">3301</span>\n      <span class="token key atrule">label</span><span class="token punctuation">:</span> master\n      <span class="token key atrule">profile</span><span class="token punctuation">:</span> dev\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p>在 Config Client 中可以通过属性注入来验证是否获取到了配置项的值。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;${spring.datasource.driver-class-name}&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">private</span> <span class="token class-name">String</span> driverClassName<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><hr><p>另外，你还可以在 <strong>application.yml</strong> 的配置文件中编写同名配置，这样，当 Config Client 无法访问 Config Server 时，就会以 <strong>application.yml</strong> 中的配置项的值为准。</p><h2 id="_6-刷新配置-了解、自学" tabindex="-1"><a class="header-anchor" href="#_6-刷新配置-了解、自学" aria-hidden="true">#</a> 6. 刷新配置（了解、自学）</h2><p>Spring Cloud Config 在项目启动时加载配置内容这一机制，导致了它存在一个缺陷：修改配置文件内容后，不会自动刷新。</p><p>例如我们上面的项目，当服务已经启动的时候，去修改 gitee 上的配置文件内容，这时候，再次刷新页面，对不起，还是旧的配置内容，新内容不会主动刷新过来。</p><p>但是，总不能每次修改了配置后重启服务吧。因此 Spring Config 提供了一个刷新机制，但是需要我们主动触发。那就是 <strong>@RefreshScope</strong> 注解并结合 <em>spring-boot-actuator</em> 。</p><ol><li>在 config client 端配置中增加 actuator 配置。</li></ol><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>application.properties</p><div class="language-properties ext-properties line-numbers-mode"><pre class="language-properties"><code><span class="token attr-name">management.endpoints.web.exposure.include</span><span class="token punctuation">=</span><span class="token attr-value">*</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>这里开放了 config client 端的 actuator 的所有端点/功能，不过实际上我们要用到的仅仅是 <em>/actuator/refresh</em> 。</p><ol start="2"><li>在 config client 端的类上增加 <strong>@RefreshScope</strong> 注解，我们是 controller 中使用配置，所以加在 controller 中。</li></ol><p>再次说明，以上都是在 config client 端做的修改。与 config server 无关。</p><p>之后，重启 client 端，重启后，我们修改 gitee 上的配置文件内容，并提交更改，<strong>再次刷新页面，没有反应</strong> 。</p><p>接下来，我们发送 <strong>POST</strong> 请求到 <code>http://localhost:3302/actuator/refresh</code> 这个接口。<small>用 postman 之类的工具即可</small>。</p><p>此接口就是用来触发加载新配置的，返回内容如下:</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">[</span>\n    <span class="token string">&quot;config.client.version&quot;</span><span class="token punctuation">,</span>\n    <span class="token string">&quot;&lt;变动过的配置项名&gt;&quot;</span>\n<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="_7-结合-eureka-使用-spring-cloud-config" tabindex="-1"><a class="header-anchor" href="#_7-结合-eureka-使用-spring-cloud-config" aria-hidden="true">#</a> 7. 结合 Eureka 使用 Spring Cloud Config</h2><p>我们可以将 Config Server 注册到 Eureka Server 注册中心，这样，各个 Config Client 就可以自己去 注册中心『<strong>获取</strong>』到 Config Server 的访问方式，而不用它们自己去记忆、配置。</p><p>注意，这里有两种关系：</p><ul><li><p>Eureka Server 和 Eureka Client；</p></li><li><p>Config Server 和 Config Client。</p></li></ul><p>Config Server 在 Eureka 关系中是 Eureka Client 。</p><ul><li><p>Config Server</p><ol><li><p>添加 Eurek Client 依赖；</p></li><li><p>添加连接到 Eureka Server 的配置；</p></li><li><p>留意 Config Server 的 application name，未来，Config Client 就是通过这个 name 来获取 Config Server 的访问方式。</p></li></ol></li><li><p>Config Client</p><ol><li><p>添加 Eurek Client 依赖;</p></li><li><p>添加连接到 Eureka Server 的配置；</p></li><li><p>注意，这里使用的是 <strong>@EnableDiscoveryClient</strong> 注解，不是 <em>@EnableEurekaClient</em> 。<small>它们两者的功能是独立的，不冲突。</small></p></li><li><p>用新的配置项替换到 <strong>spring.cloud.config.uri</strong> 配置项：</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>\n  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>\n    <span class="token key atrule">config</span><span class="token punctuation">:</span>\n      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>\n        <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>\n        <span class="token key atrule">service-id</span><span class="token punctuation">:</span> git<span class="token punctuation">-</span>config<span class="token punctuation">-</span>server\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></li></ol></li></ul>',29),S={render:function(n,s){const a=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.iD)(e.HY,null,[p,(0,e._)("p",null,[t,(0,e._)("a",l,[o,(0,e.Wm)(a)]),r]),i,c,u,g,k,(0,e._)("p",null,[b,(0,e._)("a",m,[d,(0,e.Wm)(a)])]),v,(0,e._)("p",null,[f,(0,e._)("a",y,[C,(0,e.Wm)(a)]),h]),x],64)}}}}]);