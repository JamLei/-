"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[9581],{52093:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-2450e0bc",path:"/spring-cloud/04-spring-cloud-openfeign.html",title:"声明式 RESTful 客户端：OpenFeign",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"1. 什么是 OpenFeign",slug:"_1-什么是-openfeign",children:[]},{level:2,title:"2. Feign 的入门案例",slug:"_2-feign-的入门案例",children:[{level:3,title:"添加测试代码 {docsify-ignore}",slug:"添加测试代码-docsify-ignore",children:[]}]},{level:2,title:"3. OpenFeign 的配置",slug:"_3-openfeign-的配置",children:[{level:3,title:"3.1 超时和超时重试",slug:"_3-1-超时和超时重试",children:[]},{level:3,title:"3.2 如何替换底层 HTTP 实现",slug:"_3-2-如何替换底层-http-实现",children:[]},{level:3,title:"3.3 日志配置（了解）",slug:"_3-3-日志配置-了解",children:[]}]}],filePathRelative:"spring-cloud/04-spring-cloud-openfeign.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},59819:(n,s,a)=>{a.r(s),a.d(s,{default:()=>d});var e=a(66252);const p=(0,e.uE)('<h1 id="声明式-restful-客户端-openfeign" tabindex="-1"><a class="header-anchor" href="#声明式-restful-客户端-openfeign" aria-hidden="true">#</a> 声明式 RESTful 客户端：OpenFeign</h1><p>OpenFeign 实对 RestTemplate 发起 HTTP 请求的进一步包装和简化，并且还囊括、整合了 Ribbon 。</p><h2 id="_1-什么是-openfeign" tabindex="-1"><a class="header-anchor" href="#_1-什么是-openfeign" aria-hidden="true">#</a> 1. 什么是 OpenFeign</h2><p>即便是使用了 RestTemplate 简化了代码，但是我们仍面对一个明显的缺点：</p><p>我们<small>（程序员）</small>仍能感觉到，甚至参与到了一个 HTTP 请求与响应的收发过程中。这种『感觉』和『<strong>调用</strong>』相去甚远。</p><p>对此，Netflix 提供了 <strong>Feign</strong>，并在 2016.7 月的最后一个版本 <code>8.18.0</code> 之后，将其捐赠给 spring cloud 社区，并更名为 <strong>OpenFeign</strong> 。OpenFeign 的第一个版本就是 <code>9.0.0</code> 。</p><p>OpenFeign 会完全代理 HTTP 的请求，在使用过程中我们只需要依赖注入 Bean，然后调用对应的方法传递参数即可。这对程序员而言屏蔽了 HTTP 的请求响应过程，让代码更趋近于『<strong>调用</strong>』的形式。</p><blockquote><p>当然，OpenFeign 的作用并不单这一点。当前，我们仅涉及到这点，更多内容后续继续讲解。</p></blockquote><h2 id="_2-feign-的入门案例" tabindex="-1"><a class="header-anchor" href="#_2-feign-的入门案例" aria-hidden="true">#</a> 2. Feign 的入门案例</h2><p>在创建一个 Spring Boot Mave 项目，命名为 eureka-client-consumer-feign<small>（或其他）</small>，在 Spring Initializer 中引入依赖：</p><ul><li><p>在 Initializer 的搜索框内搜索 <strong>Eureka Client</strong> 和 <strong>OpenFeign</strong> 。 或</p></li><li><p>在 <strong>Spring Cloud Discovery</strong> 下选择 <strong>Eureka Discovery Client</strong> ；在 <strong>Spring Cloud Routing</strong> 下选择 <strong>OpenFeign</strong> 。</p></li></ul><p>注意事项</p><ul><li><p>pom 中实际引入的核心依赖是</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-cloud-starter-openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li></ul><p>为项目添加配置：</p><ul><li><p><strong>application.yaml</strong> ：</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">server</span><span class="token punctuation">:</span>\n  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">9527</span>\n<span class="token key atrule">spring</span><span class="token punctuation">:</span>\n  <span class="token key atrule">application</span><span class="token punctuation">:</span>\n    <span class="token key atrule">name</span><span class="token punctuation">:</span> eureka<span class="token punctuation">-</span>client<span class="token punctuation">-</span>consumer<span class="token punctuation">-</span>feign\n<span class="token key atrule">eureka</span><span class="token punctuation">:</span>\n  <span class="token key atrule">client</span><span class="token punctuation">:</span>\n    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>\n      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span>8761/eureka\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div></li></ul><p>最后创建一个启动类 FeignApplication：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>\n<span class="token annotation punctuation">@EnableEurekaClient</span>\n<span class="token annotation punctuation">@EnableFeignClients</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token string">&quot;...&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 看这里，看这里，看这里</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EurekaFeignApplication</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">EurekaFeignApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>我们可以看到启动类增加了一个新的注解: <strong>@EnableFeignClients</strong> ，如果我们要使用 OpenFeign ，必须要在启动类加入这个注解，以开启 OpenFeign 。</p><p>这样，我们的 Feign 就已经集成完成了，那么如何通过 Feign 去调用之前我们写的 HTTP 接口呢？</p><p>和 MyBatis 类似：</p><p>首先创建一个接口 ApiService<small>（名字任意）</small>，并且通过注解配置要调用的服务地址:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;eureka-client-producer&quot;</span><span class="token punctuation">)</span>  <span class="token comment">// 看这里，看这里，看这里</span>\n<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ApiService</span> <span class="token punctuation">{</span>\n  <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/hello&quot;</span><span class="token punctuation">)</span>\n  <span class="token class-name">String</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><strong>@FeignClient</strong> 注解的 <strong>name</strong> 属性的值是服务提供者在 Eureka Server 上所注册的名字<small>（也就是在 Eureka Server 上看到的那一串全大写的字符串）</small>，通常也就是服务提供者的 <strong>spring.application.name</strong> 。</p><p>一个服务只能被一个类绑定。</p><p>一个服务只能被一个类绑定。</p><p>一个服务只能被一个类绑定，不能让多个类绑定同一个远程服务，否则，会在启动项目是出现『<strong>已绑定</strong>』异常。</p><p>然后在 OpenFeign 里面通过单元测试来查看效果。</p><h3 id="添加测试代码-docsify-ignore" tabindex="-1"><a class="header-anchor" href="#添加测试代码-docsify-ignore" aria-hidden="true">#</a> 添加测试代码 {docsify-ignore}</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringJUnit4ClassRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@SpringBootTest</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApiServiceTest</span> <span class="token punctuation">{</span>\n\n  <span class="token annotation punctuation">@Autowired</span>\n  <span class="token keyword">private</span> <span class="token class-name">ApiService</span> apiService<span class="token punctuation">;</span>\n\n  <span class="token annotation punctuation">@Test</span>\n  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">try</span> <span class="token punctuation">{</span>\n      log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> apiService<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token string">&quot;tom&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><blockquote><p>最后在强调一次，OpenFeign 的能力包括但不仅包括这个。</p></blockquote><h2 id="_3-openfeign-的配置" tabindex="-1"><a class="header-anchor" href="#_3-openfeign-的配置" aria-hidden="true">#</a> 3. OpenFeign 的配置</h2><h3 id="_3-1-超时和超时重试" tabindex="-1"><a class="header-anchor" href="#_3-1-超时和超时重试" aria-hidden="true">#</a> 3.1 超时和超时重试</h3><p>OpenFeign 本身也具备重试能力，在早期的 Spring Cloud 中，OpenFeign 使用的是 feign.Retryer.Default#Default() ，重试 5 次。但 OpenFeign 整合了 Ribbon ，Ribbon 也有重试的能力，此时，就可能会导致行为的混乱。<small>（总重试次数 = OpenFeign 重试次数 x Ribbon 的重试次数，这是一个笛卡尔积。）</small></p>',33),t=(0,e.Uk)("后来 Spring Cloud 意识到了此问题，因此做了改进"),l=(0,e.Uk)("（"),o={href:"https://github.com/spring-cloud/spring-cloud-netflix/issues/467",target:"_blank",rel:"noopener noreferrer"},c=(0,e.Uk)("issues 467"),i=(0,e.Uk)("）"),u=(0,e.Uk)("，将 OpenFeign 的重试改为 feign.Retryer#NEVER_RETRY ，即，"),r=(0,e._)("strong",null,"默认关闭",-1),k=(0,e.Uk)(" 。"),g=(0,e.uE)('<p>所以，OpenFeign 对外表现出的超时和重试的行为，实际上是 Ribbon 的超时和超时重试行为。我们在项目中进行的配置，也都是配置 Ribbon 的超时和超时重试。</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token comment"># 全局配置</span>\n<span class="token key atrule">ribbon</span><span class="token punctuation">:</span>\n  <span class="token key atrule">readTimeout</span><span class="token punctuation">:</span> <span class="token number">1000</span>     <span class="token comment"># 请求处理的超时时间</span>\n  <span class="token key atrule">MaxAutoRetries</span><span class="token punctuation">:</span> <span class="token number">5</span>     <span class="token comment"># 最大重试次数</span>\n  <span class="token key atrule">MaxAutoRetriesNextServer</span><span class="token punctuation">:</span> <span class="token number">1</span>   <span class="token comment"># 切换实例的重试次数</span>\n  <span class="token comment"># 对所有请求开启重试，而非 get 请求。一般不会开启这个功能。</span>\n  <span class="token comment"># okToRetryOnAllOperations: true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>整个 OpenFeign<small>（实际上是 Ribbon）</small>的最大重试次数为：</p><pre><code>(1 + MaxAutoRetries) x (1 + MaxAutoRetriesNextServer)\n</code></pre><p>这里需要注意的是『重试』次数是不包含『本身那一次』的。</p><p>故意加大被调服务的返回响应时长，你会看到主调服务中打印类似如下消息：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>feign.RetryableException: Read timed out executing GET http://SERVICE-PRODUCER/demo?username=tom&amp;password=123\n\n\tat feign.FeignException.errorExecuting(FeignException.java:249)\n\tat feign.SynchronousMethodHandler.executeAndDecode(SynchronousMethodHandler.java:129)\n\tat feign.SynchronousMethodHandler.invoke(SynchronousMethodHandler.java:89)\n  ...\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>另外，在被调服务方，你会发现上述配置会导致被调服务收到 12 次请求：</p><pre><code>请求次数 = (1 + 5) x (1 + 1)\n</code></pre><p>你也可以指定对某个特定服务的超时和超时重试：</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token comment"># 针对 SERVICE-PRODUCER 的设置</span>\n<span class="token key atrule">SERVICE-PRODUCER</span><span class="token punctuation">:</span>\n  <span class="token key atrule">ribbon</span><span class="token punctuation">:</span>\n    <span class="token key atrule">readTimeout</span><span class="token punctuation">:</span> <span class="token number">3000</span>\n    <span class="token key atrule">MaxAutoRetries</span><span class="token punctuation">:</span> <span class="token number">2</span>\n    <span class="token key atrule">MaxAutoRetriesNextServer</span><span class="token punctuation">:</span> <span class="token number">0</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="_3-2-如何替换底层-http-实现" tabindex="-1"><a class="header-anchor" href="#_3-2-如何替换底层-http-实现" aria-hidden="true">#</a> 3.2 如何替换底层 HTTP 实现</h3><blockquote><p>本质上是 OpenFeign 所使用的 RestTemplate 替换底层 HTTP 实现。</p></blockquote><ul><li><p>替换成 HTTPClient</p><p>将 OpenFeign 的底层 HTTP 客户端替换成 HTTPClient 需要 2 步:</p><ol><li><p>引入依赖：</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.github.openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>feign-httpclient<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><p>在配置文件中启用它：</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">feign</span><span class="token punctuation">:</span>\n  <span class="token key atrule">httpclient</span><span class="token punctuation">:</span>\n    <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 激活 httpclient 的使用</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li></ol></li><li><p>替换成 OkHttp</p><p>将 OpenFeign 的底层 HTTP 客户端替换成 OkHttp 需要 2 步:</p><ol><li><p>引入依赖：</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>io.github.openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>feign-okhttp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><p>在配置文件中启用它：</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">feign</span><span class="token punctuation">:</span>\n  <span class="token key atrule">httpclient</span><span class="token punctuation">:</span>\n    <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token comment"># 关闭 httpclient 的使用</span>\n  <span class="token key atrule">okhttp</span><span class="token punctuation">:</span>\n    <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>   <span class="token comment"># 激活 okhttp 的使用</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li></ol></li></ul><h3 id="_3-3-日志配置-了解" tabindex="-1"><a class="header-anchor" href="#_3-3-日志配置-了解" aria-hidden="true">#</a> 3.3 日志配置（了解）</h3><p>SpringCloudFeign 为每一个 FeignClient 都提供了一个 feign.Logger 实例。可以根据 <strong>logging.level.&lt;FeignClient&gt;</strong> 参数配置格式来开启 Feign 客户端的 DEBUG 日志，其中 <strong>&lt;FeignClient&gt;</strong> 部分为 Feign 客户端定义接口的完整路径。如：</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">logging</span><span class="token punctuation">:</span>\n  <span class="token key atrule">level</span><span class="token punctuation">:</span>\n    <span class="token key atrule">com.woniu.service.feign</span><span class="token punctuation">:</span> DEBUG\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>然后再在配置类<small>（比如主程序入口类）</small>中加入 Looger.Level 的 Bean：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>\n<span class="token keyword">public</span> <span class="token class-name">Logger<span class="token punctuation">.</span>Level</span> <span class="token function">feignLoggerLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span>  <span class="token class-name">Logger<span class="token punctuation">.</span>Level</span><span class="token punctuation">.</span>FULL<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><table><thead><tr><th style="text-align:left;">级别</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">NONE</td><td style="text-align:left;">不输出任何日志</td></tr><tr><td style="text-align:left;">BASIC</td><td style="text-align:left;">只输出 Http 方法名称、请求 URL、返回状态码和执行时间</td></tr><tr><td style="text-align:left;">HEADERS</td><td style="text-align:left;">输出 Http 方法名称、请求 URL、返回状态码和执行时间 和 Header 信息</td></tr><tr><td style="text-align:left;">FULL</td><td style="text-align:left;">记录 Request 和 Response 的 Header，Body 和一些请求元数据</td></tr></tbody></table>',20),d={render:function(n,s){const a=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.iD)(e.HY,null,[p,(0,e._)("p",null,[t,(0,e._)("small",null,[l,(0,e._)("a",o,[c,(0,e.Wm)(a)]),i]),u,r,k]),g],64)}}}}]);