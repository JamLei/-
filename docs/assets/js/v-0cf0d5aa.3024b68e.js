"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[9376],{25014:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-0cf0d5aa",path:"/other/06-%E8%B7%A8%E5%9F%9F%E4%B8%8ECORS.html",title:"跨域与CORS",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"1. 跨域问题、同源请求和跨域请求",slug:"_1-跨域问题、同源请求和跨域请求",children:[]},{level:2,title:"2. CORS 之前的跨域问题的解决办法",slug:"_2-cors-之前的跨域问题的解决办法",children:[]},{level:2,title:"3. 现行的标准的方案：CORS",slug:"_3-现行的标准的方案-cors",children:[]},{level:2,title:"4. Spring Boot 对 CORS 的支持",slug:"_4-spring-boot-对-cors-的支持",children:[{level:3,title:"4.1 环境准备",slug:"_4-1-环境准备",children:[]},{level:3,title:"4.2 CORS 配置方案一：@CrossOrigin 注解",slug:"_4-2-cors-配置方案一-crossorigin-注解",children:[]},{level:3,title:"4.3 方案二：全局 CORS 配置",slug:"_4-3-方案二-全局-cors-配置",children:[]}]}],filePathRelative:"other/06-跨域与CORS.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},38447:(n,s,a)=>{a.r(s),a.d(s,{default:()=>p});const t=(0,a(66252).uE)('<h1 id="跨域与cors" tabindex="-1"><a class="header-anchor" href="#跨域与cors" aria-hidden="true">#</a> 跨域与CORS</h1><h2 id="_1-跨域问题、同源请求和跨域请求" tabindex="-1"><a class="header-anchor" href="#_1-跨域问题、同源请求和跨域请求" aria-hidden="true">#</a> 1. 跨域问题、同源请求和跨域请求</h2><p>简单来说，就是前台调用后台接口的时候，由于『<strong>浏览器</strong>』的同源策略<small>（Same-origin Policy）</small>过于严格，如果这个接口不是同一个域的，就会产生跨域问题。</p><p>所谓同源是指：域名、协议、端口相同。</p><p>如果发出去的请求不是本域的『<strong>协议</strong>、<strong>域名</strong>、<strong>端口</strong>』，任何一个不一样，浏览器就认为是跨域的。</p><table><thead><tr><th style="text-align:left;">URL</th><th style="text-align:left;">说明</th><th style="text-align:left;">是否跨域</th></tr></thead><tbody><tr><td style="text-align:left;">http://www.a.com/a.js <br> http://www.a.com/b.js</td><td style="text-align:left;">同一域名</td><td style="text-align:left;">没有跨域</td></tr><tr><td style="text-align:left;">http://www.a.com/a/a.js <br> http://www.a.com/b/b.js</td><td style="text-align:left;">同一域名下的不同文件夹</td><td style="text-align:left;">没有跨域</td></tr><tr><td style="text-align:left;">http://www.a.com/a.js <br> http://www.a.com<code>:8080</code>/b.js</td><td style="text-align:left;">端口不同</td><td style="text-align:left;">跨域</td></tr><tr><td style="text-align:left;"><code>http:</code>//www.a.com/a.js <br> <code>https:</code>//www.a.com/b.js</td><td style="text-align:left;">协议不同</td><td style="text-align:left;">跨域</td></tr><tr><td style="text-align:left;">http://<code>www.a.com</code>/a.js <br> http://<code>70.32.97.74</code>/b.js</td><td style="text-align:left;">域名和域名的 IP</td><td style="text-align:left;">跨域</td></tr><tr><td style="text-align:left;">http://<code>www</code>.a.com/a.js <br> http://<code>xxx</code>.a.com/a.js <br> http://<code>yyy</code>.a.com/b.js</td><td style="text-align:left;">二级域名不同</td><td style="text-align:left;">跨域（此时，cookie 也不会共享）</td></tr><tr><td style="text-align:left;">http://<code>www.a.com</code>/a.js <br> http://<code>www.b.com</code>/b.js</td><td style="text-align:left;">域名不同</td><td style="text-align:left;">跨域</td></tr></tbody></table><p>需要注意的是：发送的是 XHR<small>（XMLHTTPRequest）</small>请求才会产生跨域问题。如果发出去的请求不是 XHR 请求的话，即使跨域，浏览器也不会报错。</p><h2 id="_2-cors-之前的跨域问题的解决办法" tabindex="-1"><a class="header-anchor" href="#_2-cors-之前的跨域问题的解决办法" aria-hidden="true">#</a> 2. CORS 之前的跨域问题的解决办法</h2><ul><li><h3>方案一：关闭浏览器的跨域限制功能</h3><p>这是最简单粗暴，也是最不可能采用的方案。</p></li><li><h3>方案二：JSONP（JSON with Padding）</h3><p>JSONP 方案是一个早期方案，也是一个非标准方案。不建议使用。</p><p>它的解题思路是，既然只有发送的是 XHR（XMLHTTPRequest）请求才会有可能产生跨域问题<small>（请求被浏览器拦截/阻止）</small>，那么我们就想办法『<strong>把 XHR 请求改为非 XHR 请求</strong>』。只要不是 XHR 请求，浏览器就不会报跨域预警，就会放行请求。</p><p>由于该方案是一个早期的非标准方案，且存在若干缺点，因此慢慢被后续的 <em><strong>CORS</strong></em> 所取代。此处不作讲解。</p></li></ul><h2 id="_3-现行的标准的方案-cors" tabindex="-1"><a class="header-anchor" href="#_3-现行的标准的方案-cors" aria-hidden="true">#</a> 3. 现行的标准的方案：CORS</h2><p>CORS<small>（Cross-origin resource sharing，跨域资源共享）</small>是一个 W3C 标准，定义了在必须访问跨域资源时，浏览器与服务器应该如何沟通。</p><p>简单来说，就是浏览器『一刀切式地阻止一切跨域请求』过于的粗暴，因此，CORS 的方案就是『<strong>让服务器决定是否响应这个跨域请求</strong>』。服务器不响应，浏览器就阻止显示响应结果；服务器愿意响应，浏览器就放行，展示响应结果。</p><blockquote><p>整个 CORS 通信过程，都是浏览器自动完成<small>（基本上目前所有的浏览器都实现了 CORS 标准）</small>，不需要用户参与。对于开发者来说，CORS 通信与同源的 AJAX 通信没有差别，代码完全一样。浏览器一旦发现 AJAX 请求跨源，就会自动添加一些附加的头信息，有时还会多出一次附加的请求，但整个过程用户不会有感觉。</p></blockquote><p>浏览器首先会发起一个请求方法为 <em><strong>OPTIONS</strong></em> 的『<strong>预检请求</strong>』，用于询问/确认浏服务器是否允许跨域请求，只有在得到服务器的许可后才会发出实际请求。</p><h2 id="_4-spring-boot-对-cors-的支持" tabindex="-1"><a class="header-anchor" href="#_4-spring-boot-对-cors-的支持" aria-hidden="true">#</a> 4. Spring Boot 对 CORS 的支持</h2><h3 id="_4-1-环境准备" tabindex="-1"><a class="header-anchor" href="#_4-1-环境准备" aria-hidden="true">#</a> 4.1 环境准备</h3><p>首先是支持 RESTful 的 Controller，这里就不使用数据库了，简单一点。</p><ul><li><p>UserController</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>\n\n  <span class="token doc-comment comment">/**\n   * 查询用户列表\n   */</span>\n  <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/users&quot;</span><span class="token punctuation">)</span>\n  <span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">getUserList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> userList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    userList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;tommy&quot;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    userList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;jerry&quot;</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;result&quot;</span><span class="token punctuation">,</span> userList<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;status&quot;</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">return</span> <span class="token class-name">ResponseEntity</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div></li><li><p>User</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>\n  <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>\n  <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>\n  <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>\n\n  <span class="token comment">// getter / setter</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></li><li><p>页面</p><p>不是使用 IDEA 的用户，自己找个 tomcat 启动 test.html 页面，修改端口为其他，然后启动 springboot 。</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span> \n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span> \n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span> \n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span> \n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://cdn.bootcss.com/jquery/2.1.0/jquery.min.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span> \n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/javascript<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n      <span class="token keyword">function</span> <span class="token function">crosRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n          url<span class="token operator">:</span><span class="token string">&#39;http://localhost:8080/users&#39;</span><span class="token punctuation">,</span>\n          type<span class="token operator">:</span> <span class="token string">&#39;get&#39;</span><span class="token punctuation">,</span>\n          dataType<span class="token operator">:</span> <span class="token string">&#39;json&#39;</span><span class="token punctuation">,</span>\n          <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span> \n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span> \n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span> \n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value javascript language-javascript"><span class="token function">crosRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>请求跨域资源<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span> \n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span> \n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div></li></ul><h3 id="_4-2-cors-配置方案一-crossorigin-注解" tabindex="-1"><a class="header-anchor" href="#_4-2-cors-配置方案一-crossorigin-注解" aria-hidden="true">#</a> 4.2 CORS 配置方案一：@CrossOrigin 注解</h3><p>在请求处理方法，或者是在 Controller 类上标注 <strong><code>@CrossOrigin</code></strong> 注解，表示本方法，或本类中的所有方法接收来自【远方】的跨域请求。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@CrossOrigin</span>\n<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/users&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">getUserList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><strong><code>@CrossOrigin</code></strong> 注解的属性的默认值是：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>&quot;Access-Control-Allow-Origin&quot; : &quot;*&quot;\n&quot;Access-Control-Allow-Methods&quot; : &quot;GET,POST,PUT,OPTIONS&quot;\n&quot;Access-Control-Allow-Credentials&quot; : &quot;true&quot;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>如果有需要的话，你可以通过注解的属性进行手动指定。例如：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@CrossOrigin</span><span class="token punctuation">(</span>\n    origins <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">&quot;http://domain.com&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;http://domain2.com&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;http://localhost:63342&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> \n    methods <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span>GET<span class="token punctuation">,</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span>POST <span class="token punctuation">}</span><span class="token punctuation">,</span> \n    allowCredentials <span class="token operator">=</span> <span class="token string">&quot;true&quot;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="_4-3-方案二-全局-cors-配置" tabindex="-1"><a class="header-anchor" href="#_4-3-方案二-全局-cors-配置" aria-hidden="true">#</a> 4.3 方案二：全局 CORS 配置</h3><p>如果使用的是 Java 代码配置，那么可以在配置类中进行统一配置。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span> \n<span class="token keyword">public</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token function">corsConfigurer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">WebMvcConfigurer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addCorsMappings</span><span class="token punctuation">(</span><span class="token class-name">CorsRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      registry<span class="token punctuation">.</span><span class="token function">addMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/**&quot;</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">allowedOrigins</span><span class="token punctuation">(</span><span class="token string">&quot;http://domain.com&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;http://domain2.com&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;http://localhost:63342&quot;</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">allowedMethods</span><span class="token punctuation">(</span><span class="token string">&quot;GET&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;POST&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;DELETE&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;PUT&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;OPTIONS&quot;</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">allowCredentials</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>『完』</p>',29),p={render:function(n,s){return t}}}}]);