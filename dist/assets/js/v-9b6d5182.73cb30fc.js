"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[6673],{53897:(n,a,s)=>{s.r(a),s.d(a,{data:()=>p});const p={key:"v-9b6d5182",path:"/spring/01-IoC.html",title:"Spring IoC 基础",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"代码配置和 xml 配置",slug:"代码配置和-xml-配置",children:[]},{level:2,title:"实例化 Spring IoC 容器",slug:"实例化-spring-ioc-容器",children:[]},{level:2,title:"Spring 通过 Java 代码配置 Java Bean",slug:"spring-通过-java-代码配置-java-bean",children:[{level:3,title:"创建对象的 3 种方式",slug:"创建对象的-3-种方式",children:[]},{level:3,title:"Java Bean 的属性的赋值",slug:"java-bean-的属性的赋值",children:[]},{level:3,title:"引用类型的属性的赋值",slug:"引用类型的属性的赋值",children:[]},{level:3,title:"循环引用",slug:"循环引用",children:[]}]},{level:2,title:"简化配置",slug:"简化配置",children:[{level:3,title:"@Component 注解",slug:"component-注解",children:[]},{level:3,title:"@Configuration 注解",slug:"configuration-注解",children:[]},{level:3,title:"@Value 注解和 @PropertySource 注解",slug:"value-注解和-propertysource-注解",children:[]},{level:3,title:"@Autowired 注解",slug:"autowired-注解",children:[]},{level:3,title:"@Qualifier 注解",slug:"qualifier-注解",children:[]}]},{level:2,title:"@Component 的无参构造和有参构造",slug:"component-的无参构造和有参构造",children:[]},{level:2,title:"JSR-250 的 @Resource",slug:"jsr-250-的-resource",children:[]},{level:2,title:"三种注入方式的使用技巧",slug:"三种注入方式的使用技巧",children:[]}],filePathRelative:"spring/01-IoC.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},89554:(n,a,s)=>{s.r(a),s.d(a,{default:()=>t});const p=(0,s(66252).uE)('<h1 id="spring-ioc-基础" tabindex="-1"><a class="header-anchor" href="#spring-ioc-基础" aria-hidden="true">#</a> Spring IoC 基础</h1><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- 5.1.17.RELEASE --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="代码配置和-xml-配置" tabindex="-1"><a class="header-anchor" href="#代码配置和-xml-配置" aria-hidden="true">#</a> 代码配置和 xml 配置</h2><ul><li><p>Spring 从 <strong>2.x</strong> 开始，提供注解，用以简化 XML 配置文件配置</p></li><li><p>Spring 从 <strong>3.x</strong> 开始，基于注解功能，『<strong>提供</strong>』了全新的配置方式：Java 代码配置方式。</p></li><li><p>到 <strong>4.x</strong> 时代，Spring 官方『<strong>推荐</strong>』使用 Java 代码配置，以完全替代 XML 配置，实现零配置文件。</p></li><li><p>到了 <strong>Spring Boot</strong> 时代，Spring 官方甚至直接『<strong>要求</strong>』使用 Spring 的代码配置方式进行配置。</p></li></ul><p>实际上无论是从实际使用的灵活性、方便性，还是从官方的态度，都应该优先使用 Java 代码配置方式。</p><h2 id="实例化-spring-ioc-容器" tabindex="-1"><a class="header-anchor" href="#实例化-spring-ioc-容器" aria-hidden="true">#</a> 实例化 Spring IoC 容器</h2><p>Spring 核心容器的理论很简单：<strong>Spring 核心容器就是一个超级大工厂，所有的单例对象都由它创建并管理</strong> 。</p><p>你必须创建、实例化 Spring IoC 容器，读取其配置文件来创建 Bean 实例。然后你可以从 Spring IoC 容器中得到可用的 Bean 实例。</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>BeanFactory  “老祖宗”接口\n└── ApplicationContext  最常用接口\n    └── AbstractApplicationContext  接口的抽象实现类\n        ├── ClassPathXmlApplicationContext  具体实现类之一\n        └── AnnotationConfigApplicationContext  具体实现类之二\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Spring IoC 容器主要是基于 <strong>BeanFactory</strong> 和 <strong>ApplicationContext</strong> 两个接口：</p><ul><li><p><strong>BeanFactory</strong> 是 Spring IoC 容器的顶层接口，它是整个 Spring IoC 容器体系的“老祖宗”。</p><p>“老祖宗”接口中定义了我们未来最常用、最关注的方法：<strong>getBean</strong> 方法。</p></li><li><p><strong>ApplicationContext</strong> 是最常用接口。</p></li><li><p><strong>ClassPathXmlApplicationContext</strong> 是 <em>ApplicationContext</em> 的实现类之一。顾名思义，它从 classpath 中加载一个或多个 <em>.xml</em> 配置文件，构建一个应用程序上下文。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">&quot;aaa.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">&quot;bbb.xml&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ccc.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><p><strong>AnnotationConfigApplicationContext</strong> 也是 <em>ApplicationContext</em> 的实现类之二。不过它需要的是一个配置类或多个配置类，而非配置文件。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">Xxx</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">ApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">Yyy</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Zzz</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li></ul><p>在获得『<strong>应用程序上下文</strong>』<small>（也就是 IoC 容器）</small>后，你只需要调用 <strong>getBean</strong> 方法并传入唯一的 Bean ID 和 Bean 的 Class 对象，就可以获得容器中的 Bean 。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// 大多数情况下 id 非必须</span>\n<span class="token class-name">Human</span> tom <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">&quot;tom&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Human</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 或者</span>\n<span class="token class-name">Human</span> tom <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">Human</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><blockquote><p>使用 Java 代码进行 Java Bean 的配置远比使用 XML 配置文件进行要简单很多，因为进行配置的『思维模式』发生了变化：</p><ul><li><p>使用 XML 进行配置，你要面面俱到地『告知』Spring 你要如何如何地去创建、初始化一个 Bean 。</p></li><li><p>使用 Java 代码进行配置，你只需要提供一个方法，你自己全权<small>（程序员）</small>负责方法的具体实现，并在方法的最后返回一个 Java Bean， <strong>Spring 不关心你的方法的实现内容和细节，它只保证未来调用你所写的方法，且只调用一次</strong> 。</p></li></ul><p>在这种思路下，XML 配置的『<strong>很多情况</strong>』在 Java 代码中就被统一成了『<strong>一种情况</strong>』，因此变得更简洁。</p></blockquote><h2 id="spring-通过-java-代码配置-java-bean" tabindex="-1"><a class="header-anchor" href="#spring-通过-java-代码配置-java-bean" aria-hidden="true">#</a> Spring 通过 Java 代码配置 Java Bean</h2><p>通过 Java 代码配置 Java Bean 的整体流程如下：</p><ol><li><p>准备好一个配置类<small>（XxxConfig）</small>。其中写一个或多个方法，每个方法负责返回你的项目中的<small>（逻辑上的）</small>单例对象。</p><p><small>至于你的项目中是有多少个单例对象，那就需要你自己去分析、去设计。</small></p><p>例如：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XxxConfig</span> <span class="token punctuation">{</span>\n  \n    <span class="token annotation punctuation">@Bean</span>\n    <span class="token keyword">public</span> <span class="token class-name">DataSource</span> <span class="token function">dataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n        <span class="token class-name">DruidDataSource</span> dataSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DruidDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        dataSource<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span><span class="token string">&quot;jdbc:mysql://127.0.0.1:3306/scott?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        dataSource<span class="token punctuation">.</span><span class="token function">setDriverClassName</span><span class="token punctuation">(</span><span class="token string">&quot;com.mysql.cj.jdbc.Driver&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        dataSource<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">&quot;root&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        dataSource<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">&quot;123456&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">return</span> dataSource<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div></li><li><p>创建 <strong>AnnotationConfigApplicationContext</strong> 对象<small>（它就是我们口头所说的 Spring IoC 容器）</small>，并将上述的配置类作为参数传递给它。</p><p>在背后发生了这样的一件事情：Spring IoC 容器会去调用，你上述的配置类中的标注了 <strong>@Bean</strong> 的方法。它只调用一次，并将这些方法的返回值<small>（各个对象的引用）</small>保存起来。</p><p><small>毫无疑问，这个对象必定就是单例的。</small></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">AnnotationConfigApplicationContext</span> context <span class="token operator">=</span> \n    <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">YyyConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><p>根据我们自己的需要，你可以向 Spring IoC 容器要（ <code>context.getBean(XXX.class)</code> ）上述的配置类中的这么些个单例对象。</p><p><small>在获得这些单例对象之后，你要干什么，就是你自己的事情了。</small></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">DataSource</span> ds <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">DataSource</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">Connection</span> connection <span class="token operator">=</span> ds<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li></ol><h3 id="创建对象的-3-种方式" tabindex="-1"><a class="header-anchor" href="#创建对象的-3-种方式" aria-hidden="true">#</a> 创建对象的 3 种方式</h3><blockquote><p>再次强调，以何种方式创建对象<small>（包括如何赋值，赋什么值）</small>这是程序员自己考虑的事情，Spring IoC 并不关心。它只关心、关注你所提供的方法的返回值<small>（对象）</small>。</p></blockquote><p>创建 Bean ，常见的方式常见 3 种：</p><table><thead><tr><th style="text-align:center;">#</th><th style="text-align:left;">方式</th></tr></thead><tbody><tr><td style="text-align:center;">1</td><td style="text-align:left;">类自身的构造方法</td></tr><tr><td style="text-align:center;">2</td><td style="text-align:left;">工厂类提供的工厂方法</td></tr><tr><td style="text-align:center;">3</td><td style="text-align:left;">工厂对象提供的工厂方法</td></tr></tbody></table><p>在 Spring 的代码配置中，你自己决定使用何种方式创建对象并返回：</p><ul><li><p>通过类自身的构造方法</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>\n<span class="token keyword">public</span> <span class="token class-name">DataSource</span> <span class="token function">dataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n    <span class="token class-name">DruidDataSource</span> dataSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DruidDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    dataSource<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span><span class="token string">&quot;jdbc:mysql://127.0.0.1:3306/scott?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    dataSource<span class="token punctuation">.</span><span class="token function">setDriverClassName</span><span class="token punctuation">(</span><span class="token string">&quot;com.mysql.cj.jdbc.Driver&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    dataSource<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">&quot;root&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    dataSource<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">&quot;123456&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">return</span> dataSource<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div></li><li><p>工厂类提供的工厂方法</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>\n<span class="token keyword">public</span> <span class="token class-name">DataSource</span> <span class="token function">dataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">&quot;driver&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;com.mysql.cj.jdbc.Driver&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">&quot;url&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;jdbc:mysql://127.0.0.1:3306/scott?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;root&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">&quot;password&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;123456&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">DataSource</span> dataSource <span class="token operator">=</span> <span class="token class-name">DruidDataSourceFactory</span><span class="token punctuation">.</span><span class="token function">createDataSource</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">return</span> dataSource<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div></li><li><p>工厂对象提供的工厂方法</p><p>略。</p></li></ul><h3 id="java-bean-的属性的赋值" tabindex="-1"><a class="header-anchor" href="#java-bean-的属性的赋值" aria-hidden="true">#</a> Java Bean 的属性的赋值</h3><p>在 Java 代码配置中，和『<strong>如何创建对象是程序员的“家务事”，Spring 并不关心</strong>』一样，『<strong>以何种方式<small>（有参构造 or Setter）</small>为对象的属性赋值，以及赋何值也是程序员的“家务事”</strong>』，Spring 也不关心。</p><p>上述 <strong>@Bean</strong> 方法所返回的 Java Bean，对 Spring 而言，其属性有值，就有值，没有值，就没有值；是这个值，就是这个值，是那个值就是那个值。</p><blockquote><p>在 XML 方式的配置中，为 Java Bean 赋初值的配置要啰嗦的多得多。</p></blockquote><h3 id="引用类型的属性的赋值" tabindex="-1"><a class="header-anchor" href="#引用类型的属性的赋值" aria-hidden="true">#</a> 引用类型的属性的赋值</h3><p>大多数情况下，在 Java 代码的配置中，为对象的属性赋值都比较直接。但是在 Spring 的容器中，Java Bean 可能会存在引用。</p><p>即，一个 Spring 容器中的 Java Bean 的某个属性的值是容器中的另一个 Java Bean 的引用。</p><p>在 Java 代码配置中，有多<small>（3）</small>种方式来配置 Java Bean 的引用关系，这里推荐使『<strong>通过参数表示引用关系</strong>』：</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.zaxxer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>HikariCP<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${hikaricp.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!-- 3.2.0 --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>\n<span class="token keyword">public</span> <span class="token class-name">HikariConfig</span> <span class="token function">hikariConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">HikariConfig</span> config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HikariConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    config<span class="token punctuation">.</span><span class="token function">setDriverClassName</span><span class="token punctuation">(</span><span class="token string">&quot;com.mysql.cj.jdbc.Driver&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    config<span class="token punctuation">.</span><span class="token function">setJdbcUrl</span><span class="token punctuation">(</span><span class="token string">&quot;jdbc:mysql://127.0.0.1:3306/scott?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    config<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">&quot;root&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    config<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">&quot;123456&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">return</span> config<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token annotation punctuation">@Bean</span>\n<span class="token keyword">public</span> <span class="token class-name">DataSource</span> <span class="token function">dataSource</span><span class="token punctuation">(</span><span class="token class-name">HikariConfig</span> config<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">DataSource</span> dataSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HikariDataSource</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> dataSource<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h3 id="循环引用" tabindex="-1"><a class="header-anchor" href="#循环引用" aria-hidden="true">#</a> 循环引用</h3><p>如果 Spring 容器中的两个对象，相互引用，那么会遇到循环引用问题：</p><ul><li><p>类定义：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Husband</span> <span class="token punctuation">{</span>\n  <span class="token keyword">private</span> <span class="token class-name">Wife</span> wife<span class="token punctuation">;</span>\n  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> \n<span class="token punctuation">}</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Wife</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token class-name">Husband</span> husband<span class="token punctuation">;</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div></li><li><p>常规配置：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>\n<span class="token keyword">public</span> <span class="token class-name">Husband</span> <span class="token function">husband</span><span class="token punctuation">(</span><span class="token class-name">Wife</span> wife<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>\n\n<span class="token annotation punctuation">@Bean</span>\n<span class="token keyword">public</span> <span class="token class-name">Wife</span> <span class="token function">wife</span><span class="token punctuation">(</span><span class="token class-name">Husband</span> husband<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li></ul><p>解决这个问题的办法是对两个 Bean 中的其中一个使用 <strong>@Lazy</strong> 注解：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>\n<span class="token keyword">public</span> <span class="token class-name">Husband</span> <span class="token function">husband</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Lazy</span> <span class="token class-name">Wife</span> wife<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>\n\n<span class="token annotation punctuation">@Bean</span>\n<span class="token keyword">public</span> <span class="token class-name">Wife</span> <span class="token function">wife</span><span class="token punctuation">(</span><span class="token class-name">Husband</span> husband<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>通过 <strong>@Lazy</strong> 注解，Spring 生成并返回了一个 Wife 的代理对象，因此给 Husband 注入的 Wife 并非真实对象，而是其代理，从而顺利完成了 Husband 实例的构造<small>（而不是报错）</small>；而 Wife 依赖的 Husband 是直注入完整的 Husband 对象本身。因此，这里通过 <strong>@Lazy</strong> 巧妙地避开了循环依赖的发生。</p><h2 id="简化配置" tabindex="-1"><a class="header-anchor" href="#简化配置" aria-hidden="true">#</a> 简化配置</h2><p>如果我们的项目中有几十个 Java Bean 要配置，那么就需要我们去编写几十个 <strong>@Bean</strong> 方法。很显然，这是很麻烦的事情。</p><p>为此，Spring 提供了几个注解来简化我们的配置。</p><h3 id="component-注解" tabindex="-1"><a class="header-anchor" href="#component-注解" aria-hidden="true">#</a> @Component 注解</h3><p><strong>@Component</strong> 注解用于标注于 Bean 的类上。凡是被标注了该注解的类<small>（只要在扫描路径下）</small>都会被 Spring 创建。</p><p><em>@Component</em> 注解有唯一的属性 <strong>value</strong> 属性。它用来为 Bean 命名。</p><p><strong>@Component</strong> 注解有三个语义化的子注解：</p><table><thead><tr><th style="text-align:left;">语义化子注解</th><th style="text-align:left;">用处</th></tr></thead><tbody><tr><td style="text-align:left;"><strong>@Repository</strong></td><td style="text-align:left;">用于持久层</td></tr><tr><td style="text-align:left;"><strong>@Service</strong></td><td style="text-align:left;">用于业务层</td></tr><tr><td style="text-align:left;"><strong>@Controller</strong></td><td style="text-align:left;">用于 Web 层</td></tr></tbody></table><p><strong>@Component</strong> 注解要结合 <strong>@ComponentScan</strong> 注解使用：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token string">&quot;com.example&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApplicationConfig</span> <span class="token punctuation">{</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="configuration-注解" tabindex="-1"><a class="header-anchor" href="#configuration-注解" aria-hidden="true">#</a> @Configuration 注解</h3><p><strong>@Configuration</strong> 专用于标注于我们的配置类<small>（XxxConfig）</small>上。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">YyyConfig</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>它有 2 个作用：</p><ul><li><p>逻辑上，它可以用来标识『这个类是个配置类』。</p></li><li><p>它会导致 Spring IoC 容器将这个配置类的对象，打入到 Spring IoC 容器的管理范畴内。</p><p>简单来说，这样一来 Spring IoC 容器中会『多』出来一个单例对象：YyyConfig 对象。</p></li></ul><h3 id="value-注解和-propertysource-注解" tabindex="-1"><a class="header-anchor" href="#value-注解和-propertysource-注解" aria-hidden="true">#</a> @Value 注解和 @PropertySource 注解</h3><p><strong>@Value</strong> 注解用于标注于『<strong>简单类型</strong>』属性上。凡是被标注了该注解的属性都会被 Spring 注入值<small>（赋值）</small>。</p><p><strong>@Value</strong> 注解有唯一的属性 <strong>value</strong> 属性。它用来为简单属性指定值。</p><hr><p><strong>@PropertySource</strong> 可以配合 <strong>@Value</strong> 来简化对简单类型的属性的赋值。</p><p><strong>@PropertySource</strong> 除了可以直接用在 <strong>@Component</strong> 上，也可以用在配置类上。</p><ul><li><p>jdbc.properties</p><div class="language-properties ext-properties line-numbers-mode"><pre class="language-properties"><code><span class="token attr-name">xxx.yyy.zzz.driver-class-name</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.cj.jdbc.Driver</span>\n<span class="token attr-name">xxx.yyy.zzz.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://127.0.0.1:3306/scott\\\n  ?useUnicode=true\\\n  &amp;characterEncoding=utf-8\\\n  &amp;useSSL=false\\\n  &amp;serverTimezone=UTC</span>\n<span class="token attr-name">xxx.yyy.zzz.username</span><span class="token punctuation">=</span><span class="token attr-value">root</span>\n<span class="token attr-name">xxx.yyy.zzz.password</span><span class="token punctuation">=</span><span class="token attr-value">123456</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>注意，这里有个和本知识点无关的小细节：需要有前缀，否则会因为命名冲突导致问题。<small>因为， <em>driver-class-name</em> 、<em>url</em> 、<em>username</em> 、<em>password</em> 这些单词太常见了。</small></p></li><li><p>Java Bean</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span><span class="token string">&quot;classpath:jdbc.properties&quot;</span><span class="token punctuation">)</span>   <span class="token comment">// 看这里，看这里，看这里</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ZzzConfig</span><span class="token punctuation">{</span>\n\n    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;${xxx.yyy.zzz.driver-class-name}&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> driver<span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;${xxx.yyy.zzz.url}&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> url<span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;${xxx.yyy.zzz.username}&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;${xxx.yyy.zzz.password}&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>\n\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div></li></ul><h3 id="autowired-注解" tabindex="-1"><a class="header-anchor" href="#autowired-注解" aria-hidden="true">#</a> @Autowired 注解</h3><p><strong>@Autowired</strong> 注解用于标注于『<strong>引用类型</strong>』属性上。凡是被标注了该注解的属性都会被 Spring 以『<strong>类型</strong>』为依据注入另一个 Bean 的引用。</p><p><strong>@Autowired</strong> 注解有唯一的属性 <strong>required</strong> 属性<small>（默认值为 <code>true</code>）</small>。它用来指示该对该属性的注入是否为必须<small>（默认为 <code>必须</code>）</small>，即，在 Spring IoC 容器中没有发现符合类型的其它 Bean 时，会抛出异常。</p><h3 id="qualifier-注解" tabindex="-1"><a class="header-anchor" href="#qualifier-注解" aria-hidden="true">#</a> @Qualifier 注解</h3><p><strong>@Qualifier</strong> 注解需要结合 <strong>@Autowired</strong> 注解使用。它用于标注于引用类型属性上。凡是被标注了该注解的属性都会被 Spring 以『<strong>名字</strong>』为依据注入另一个 Bean 的引用。</p><p><strong>@Qualifier</strong> 注解有唯一的属性 <strong>value</strong> 属性。它用于指示需要注入的另一个 Bean 的名字。</p><blockquote><p>一个小细节：包扫描的 Bean 会早于配置的 bean 先创建。</p></blockquote><h2 id="component-的无参构造和有参构造" tabindex="-1"><a class="header-anchor" href="#component-的无参构造和有参构造" aria-hidden="true">#</a> @Component 的无参构造和有参构造</h2><p>如果你使用了 <strong>@Component</strong> 的 Java Bean 中有无参的构造器，或包括无参构造器在内的多个构造器，那么：</p><p>Spring 是使用你的『<strong>无参构造器</strong>』来创建对象，<small>（此时对象的各个属性还没有值）</small>，然后再通过『<strong>反射</strong>』对各个属性赋值。</p><p>如果你的类的构造器『<strong>只有有参构造器</strong>』，而没有无参的构造器，那么，Spring 会调用你有参的构造器去创建这个对象，并同时完成对其属性的赋值。此后，Spring 不再另外对你的属性赋值。</p><p>Spring 官方推荐使用有参构造器创建并初始化对象。<small>如果遇到循环依赖问题，使用前面所说的 <strong>@Lazy</strong> 解决。</small></p><h2 id="jsr-250-的-resource" tabindex="-1"><a class="header-anchor" href="#jsr-250-的-resource" aria-hidden="true">#</a> JSR-250 的 @Resource</h2><p>Spring 不但支持自己定义的 <strong>@Autowired</strong> 注解，还支持几个由 <strong>JSR-250</strong> 规范定义的注解，它们分别是 <strong>@Resource</strong>、@PostConstruct 以及 @PreDestroy 。</p><p>简单来说， <strong>@Resource</strong> 一个人就能实现 <code>@Autowired</code> 和 <code>@Autowired + @Qualifier</code> 两种功能。</p><p><strong>@Resource</strong> 有两个重要属性：<strong>name</strong> 和 <strong>type</strong>：</p><ul><li><p><strong>name</strong> 属性解析为 JavaBean 的名字</p></li><li><p><strong>type</strong> 属性则解析为 JavaBean 的类型</p></li></ul><p>因此， <strong>name</strong> 属性和 <strong>type</strong> 属性两者同时出现，或同时不出现，亦或者出现一个，就意味着不同的『<strong>注入规则</strong>』，也就分成了 4 种不同情况：</p><ol><li><p>如果同时指定了 <code>name</code> 和 <code>type</code> ，则从 IoC 容器中查找同时匹配这两个条件的 Bean 进行装配，找不到则抛出异常。</p><p>注意，type 和 name 两个条件是『<strong>且</strong>』的关系。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// Spring 在 IoC 容器中查找类型是 DaoDao，且名字是 catDao 的 JavaBean </span>\n<span class="token comment">// 来为 animalDao 属性赋值。</span>\n<span class="token annotation punctuation">@Resource</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">DogDao</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string">&quot;catDao&quot;</span><span class="token punctuation">)</span> \n<span class="token keyword">private</span> <span class="token class-name">AnimalDao</span> animalDao<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><p>如果只指定了 <code>name</code> ，则从 IoC 容器中查找 name 匹配的 Bean 进行装配，找不到则抛出异常。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// Spring 在 IoC 容器中查找名字是 catDao 的 JavaBean </span>\n<span class="token comment">// 来为 animalDao 属性赋值。</span>\n<span class="token annotation punctuation">@Resource</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;catDao&quot;</span><span class="token punctuation">)</span> \n<span class="token keyword">private</span> <span class="token class-name">AnimalDao</span> animalDao<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><p>如果只指定了 <code>type</code> ，则从 IoC 容器中查找 <em>type</em> 匹配的 Bean 进行装配，找不到或者找到多个，都会抛出异常。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// Spring 在 IoC 容器中查找类型是 DogDao 的 JavaBean 来为 animalDao 属性赋值。</span>\n<span class="token annotation punctuation">@Resource</span><span class="token punctuation">(</span>type <span class="token operator">=</span> <span class="token class-name">DogDao</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>\n<span class="token keyword">private</span> <span class="token class-name">AnimalDao</span> animalDao<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p>如果既没有指定 <em>name</em> ，又没有指定 <em>type</em> ，则先以 <em>name</em> 为依据在 IoC 容器中查找，如果没有找到，再以 <em>type</em> 为依据在 IoC 容器中查找。</p><p>这种情况下，类型和名字不是『且』的关系，而是『<strong>或</strong>』的关系。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// Spring IoC 先在容器中查找名字为 animalDao 的 JavaBean 来为 animalDao 属性赋值。</span>\n<span class="token comment">// 如果没有找到，Spring IoC 再在容器中查找类型为 AnimalDao 的 JavaBean 来为 animal 属性赋值。</span>\n<span class="token annotation punctuation">@Resource</span>\n<span class="token keyword">private</span> <span class="token class-name">AnimalDao</span> animalDao<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li></ol><h2 id="三种注入方式的使用技巧" tabindex="-1"><a class="header-anchor" href="#三种注入方式的使用技巧" aria-hidden="true">#</a> 三种注入方式的使用技巧</h2><p>『基于字段的依赖注入』方式有很多缺点，我们应当避免使用基于字段的依赖注入。</p><p>推荐的方法是使用『基于构造函数的依赖注入』方式和『基于 setter 方法的依赖注入』方式。</p><ul><li><p>对于『<strong>必需的</strong>』依赖项，建议使用基于构造函数的注入，以使它们成为不可变的，并防止它们为 null 。</p></li><li><p>对于『<strong>可选的</strong>』依赖项，建议使用基于 Setter 方法的注入。</p></li></ul>',84),t={render:function(n,a){return p}}}}]);