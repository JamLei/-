"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[5749],{4580:(l,a,e)=>{e.r(a),e.d(a,{data:()=>i});const i={key:"v-8ad339ee",path:"/jvm/04-%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%86%85%E5%AD%98%E6%B6%88%E8%80%97.html",title:"Java 中对象占多大内存",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[],filePathRelative:"jvm/04-对象的内存消耗.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},1332:(l,a,e)=>{e.r(a),e.d(a,{default:()=>t});const i=(0,e(66252).uE)('<h1 id="java-中对象占多大内存" tabindex="-1"><a class="header-anchor" href="#java-中对象占多大内存" aria-hidden="true">#</a> Java 中对象占多大内存</h1><p>一个对象在堆内存中占多少内存空间，因 JDK 是 64 位还是 32 位有所区别，但是总体规则是相似的：</p><ul><li>32 位 JDK <ul><li>8 字节的头部信息；</li><li>byte、boolean 占 1 字节；</li><li>char、short 占 2 字节；</li><li>int、float 占 4 字节；</li><li>long、double 占 8 字节；</li><li>引用占 4 字节；</li><li>整体对齐到 4 字节的倍数。</li></ul></li><li>64 位 JDK <ul><li>12 字节的头部信息；</li><li>基本数据类型占字节数与 32 位一样；</li><li>引用在占 8 字节<small>（开启【引用压缩】功能后，占 4 字节）</small>；</li><li>整体对齐到 8 字节的倍数。</li></ul></li></ul><blockquote><p><small>JVM 在为对象分配内存时，会调整对象中的属性的先后顺序，以压缩内存空间。即，属性在内存中的先后顺序，不一定是你在 Java 类中定义的顺序。这是一种优化。这里不展开讲解。</small></p></blockquote>',4),t={render:function(l,a){return i}}}}]);