"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[2945],{77907:(n,e,s)=>{s.r(e),s.d(e,{data:()=>a});const a={key:"v-0c9624c0",path:"/git/Git-99-cherry-pick.html",title:"git cherry-pick 的使用",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"概述",slug:"概述",children:[]},{level:2,title:"git cherry-pick <commit-id>",slug:"git-cherry-pick-commit-id",children:[]},{level:2,title:"git cherry-pick -n",slug:"git-cherry-pick-n",children:[]},{level:2,title:"git cherry-pick -e",slug:"git-cherry-pick-e",children:[]},{level:2,title:"git cherry-pick –continue, –abort，–quit",slug:"git-cherry-pick-–continue-–abort-–quit",children:[]},{level:2,title:"git cherry-pick <branchname>",slug:"git-cherry-pick-branchname",children:[]},{level:2,title:"常见问题",slug:"常见问题",children:[{level:3,title:"The previous cherry-pick is now empty, possibly due to conflict resolution.",slug:"the-previous-cherry-pick-is-now-empty-possibly-due-to-conflict-resolution",children:[]},{level:3,title:"fatal: You are in the middle of a cherry-pick – cannot amend.",slug:"fatal-you-are-in-the-middle-of-a-cherry-pick-–-cannot-amend",children:[]}]}],filePathRelative:"git/Git-99-cherry-pick.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},58059:(n,e,s)=>{s.r(e),s.d(e,{default:()=>c});const a=(0,s(66252).uE)('<h1 id="git-cherry-pick-的使用" tabindex="-1"><a class="header-anchor" href="#git-cherry-pick-的使用" aria-hidden="true">#</a> git cherry-pick 的使用</h1><h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述" aria-hidden="true">#</a> 概述</h2><p><code>git cherry-pick</code> 可以理解为「<strong>挑拣</strong>」提交，它会获取某一个分支的单笔提交，并作为一个新的提交引入到你当前分支上。 当我们需要在本地合入其他分支的提交时，如果我们不想对整个分支进行合并，而是只想将某一次提交合入到本地当前分支上，那么就要使用 git cherry-pick 了。</p><p>用法：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> cherry-pick <span class="token punctuation">[</span><span class="token operator">&lt;</span>options<span class="token operator">&gt;</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>commit-ish<span class="token operator">&gt;</span><span class="token punctuation">..</span>.\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>常用 options :</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>--quit                退出当前的 chery-pick 序列\n--continue            继续当前的 chery-pick 序列\n--abort               取消当前的 chery-pick 序列，恢复当前分支\n--no-commit, -n       不自动提交\n--edit, -e            编辑提交信息\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="git-cherry-pick-commit-id" tabindex="-1"><a class="header-anchor" href="#git-cherry-pick-commit-id" aria-hidden="true">#</a> git cherry-pick &lt;commit-id&gt;</h2><p>在本地仓库中，有两个分支: branch1 和 branch2，我们先来查看各个分支的提交：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># 切换到 branch2 分支</span>\n$ <span class="token function">git</span> checkout branch2\n$ Switched to branch <span class="token string">&#39;branch2&#39;</span>\n<span class="token comment"># 查看最近三次提交</span>\n\n$ <span class="token function">git</span> log --oneline -3\n23d9422 <span class="token punctuation">[</span>Description<span class="token punctuation">]</span>:branch2 commit <span class="token number">3</span>\n2555c6e <span class="token punctuation">[</span>Description<span class="token punctuation">]</span>:branch2 commit <span class="token number">2</span>\nb82ba0f <span class="token punctuation">[</span>Description<span class="token punctuation">]</span>:branch2 commit <span class="token number">1</span>\n\n<span class="token comment"># 切换到 branch1 分支</span>\n$ <span class="token function">git</span> checkout branch1\nSwitched to branch <span class="token string">&#39;branch1&#39;</span>\n\n<span class="token comment"># 查看最近三次提交</span>\n$ <span class="token function">git</span> log --oneline -3\n20fe2f9 commit second\nc51adbe commit first\nae2bd14 commit 3th\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>现在，我想要将 branch2 分支上的第一次提交内容合入到 branch1 分支上，则可以使用 <code>git cherry-pick</code> 命令：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ <span class="token function">git</span> cherry-pick 2555c6e\nerror: could not apply 2555c6e<span class="token punctuation">..</span>. <span class="token punctuation">[</span>Description<span class="token punctuation">]</span>:branch2 commit <span class="token number">2</span>\nhint: after resolving the conflicts, mark the corrected paths\nhint: with <span class="token string">&#39;git add &lt;paths&gt;&#39;</span> or <span class="token string">&#39;git rm &lt;paths&gt;&#39;</span>\nhint: and commit the result with <span class="token string">&#39;git commit&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>当 cherry-pick 时，没有成功自动提交，这说明存在冲突，因此首先需要解决冲突,解决冲突后需要 <code>git commit</code> 手动进行提交：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ <span class="token function">git</span> commit \n<span class="token punctuation">[</span>branch1 790f431<span class="token punctuation">]</span> <span class="token punctuation">[</span>Description<span class="token punctuation">]</span>:branch2 commit <span class="token number">2</span>\n Date: Fri Jul <span class="token number">13</span> <span class="token number">18</span>:36:44 <span class="token number">2018</span> +0800\n <span class="token number">1</span> <span class="token function">file</span> changed, <span class="token number">1</span> insertion<span class="token punctuation">(</span>+<span class="token punctuation">)</span>\n create mode <span class="token number">100644</span> only-for-branch2.txt\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>或者 <code>git add .</code> 后直接使用 <code>git cherry-pick --continue</code> 继续。 现在查看提交信息：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ <span class="token function">git</span> log --oneline -3\n790f431 <span class="token punctuation">[</span>Description<span class="token punctuation">]</span>:branch2 commit <span class="token number">2</span>\n20fe2f9 commit second\nc51adbe commit first\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>branch2 分支上的第二次提交成功合入到了 branch1 分支上。</p><p>以上就是 <code>git cherry-pick</code> 的基本用法，如果没有出现冲突，该命令将自动提交。</p><h2 id="git-cherry-pick-n" tabindex="-1"><a class="header-anchor" href="#git-cherry-pick-n" aria-hidden="true">#</a> git cherry-pick -n</h2><p>如果不想 <code>git cherry-pick</code> 自动进行提交，则加参数 <code>-n</code> 即可。比如将 branch2 分支上的第三次提交内容合入到 branch1 分支上：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>$ git cherry-pick 23d9422\n[branch1 2c67715] [Description]:branch2 commit 3\n Date: Fri Jul 13 18:37:05 2018 +0800\n 1 file changed, 1 insertion(+)\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>查看提交 log,它自动合入了branch1分支：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>$ git log --oneline -3\n2c67715 [Description]:branch2 commit 3\nf8bc5db [Description]:branch2 commit 2\n20fe2f9 commit second\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>如果不想进行自动合入，则使用 <code>git cherry-pick -n</code>：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code># 回退上次提交，再此进行cherry-pick\n$ git reset --hard HEAD~\nHEAD is now at f8bc5db [Description]:branch2 commit 2\n$ git cherry-pick -n 23d9422\n$ git status\nOn branch branch1\nChanges to be committed:\n  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)\n\n    modified:   only-for-branch2.txt\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>这时通过 <code>git status</code> 查看，发现已将 branch2 的提交获取但是没有合入。</p><h2 id="git-cherry-pick-e" tabindex="-1"><a class="header-anchor" href="#git-cherry-pick-e" aria-hidden="true">#</a> git cherry-pick -e</h2><p>如果想要在 cherr-pick 后重新编辑提交信息，则使用 <code>git cherry-pick -e</code> 命令，比如我们还是要将 branch2 分支上的第三次提交内容合入到 branch1 分支上，但是需要修改提交信息：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>$ git cherry-pick -e 23d9422\n\n[Description]:branch2 commit 3\n#\n# It looks like you may be committing a cherry-pick.\n# If this is not correct, please remove the file\n#       .git/CHERRY_PICK_HEAD\n# and try again.\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="git-cherry-pick-–continue-–abort-–quit" tabindex="-1"><a class="header-anchor" href="#git-cherry-pick-–continue-–abort-–quit" aria-hidden="true">#</a> git cherry-pick –continue, –abort，–quit</h2><p>当使用 <code>git cherry-pick</code> 发生冲突后,将会出现如下信息：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>$ git cherry-pick 23d9422\nerror: could not apply 23d9422... [Description]:branch2 commit 3\nhint: after resolving the conflicts, mark the corrected paths\nhint: with &#39;git add &lt;paths&gt;&#39; or &#39;git rm &lt;paths&gt;&#39;\nhint: and commit the result with &#39;git commit&#39;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>这时如果要继续 cherry-pick，则首先需要解决冲突，通过 <code>git add .</code> 将文件标记为已解决，然后可以使用 <code>git cherry-pick --continue</code> 命令，继续进行 cherry-pick 操作。</p><p>如果要中断这次 cherry-pick，则使用 <code>git cherry-pick --quit</code>，这种情况下当前分支中未冲突的内容状态将为 modified，</p><p>如果要取消这次 cherry-pick，则使用 <code>git cherry-pick --abort</code>，这种情况下当前分支恢复到 cherry-pick 前的状态，没有改变。</p><h2 id="git-cherry-pick-branchname" tabindex="-1"><a class="header-anchor" href="#git-cherry-pick-branchname" aria-hidden="true">#</a> git cherry-pick &lt;branchname&gt;</h2><p>如果在 git cherry-pick 后加一个分支名，则表示将该分支顶端提交进 cherry-pick，如：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>$ git cherry-pick master\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li>git cherry-pick ..&lt; branchname &gt;</li><li>git cherry-pick ^HEAD &lt; branchname &gt;</li></ul><p>以上两个命令作用相同，表示应用所有提交引入的更改，这些提交是 branchname 的祖先但不是 HEAD 的祖先，比如，现在我的仓库中有三个分支，其提交历史如下图：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>               C&lt;---D&lt;---E  branch2\n              /\nmaster   A&lt;---B  \n              \\\n               F&lt;---G&lt;---H  branch3\n                         |\n                         HEAD\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>如果我使用 <code>git cherry-pick ..branch2</code> 或者 <code>git cherry-pick ^HEAD branch2</code>，那么会将属于 branch2 的祖先但不属于 branch3 的祖先的所有提交引入到当前分支 branch3 上，并生成新的提交，执行命令如下:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>$ git cherry-pick ..branch2\n[branch3 c95d8b0] [Description]:branch2  add only-for-branch2\n Date: Fri Jul 13 20:34:40 2018 +0800\n 1 file changed, 0 insertions(+), 0 deletions(-)\n create mode 100644 only-for-branch2\n[branch3 7199a67] [Description]:branch2 modify for only-for-branch2--1\n Date: Fri Jul 13 20:38:35 2018 +0800\n 1 file changed, 1 insertion(+)\n[branch3 eb8ab62] [Description]:branch2 modify for only-for-branch2--2\n Date: Fri Jul 13 20:39:09 2018 +0800\n 1 file changed, 1 insertion(+)\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>执行后的提交历史如下：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>               C&lt;---D&lt;---E  branch2\n              /\nmaster   A&lt;---B  \n              \\\n               F&lt;---G&lt;---H&lt;---C&#39;&lt;---D&#39;&lt;---E&#39;  branch3\n                                          |\n                                         HEAD\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="常见问题" tabindex="-1"><a class="header-anchor" href="#常见问题" aria-hidden="true">#</a> 常见问题</h2><h3 id="the-previous-cherry-pick-is-now-empty-possibly-due-to-conflict-resolution" tabindex="-1"><a class="header-anchor" href="#the-previous-cherry-pick-is-now-empty-possibly-due-to-conflict-resolution" aria-hidden="true">#</a> The previous cherry-pick is now empty, possibly due to conflict resolution.</h3><p>原因:</p><p>在 cherry-pick 时出现冲突，解决冲突后本地分支中内容和 cherry-pick 之前相比没有改变，因此当在以后的步骤中继续 <code>git cherry-pick</code> 或执行其他命令时，由于此时还处于上次 cherry-pick，都会提示该信息，表示可能是由于解决冲突造成上一次 cherry-pick内容是空的。</p><p>解决方案:</p><p>方案一： 执行 <code>git cherry-pick --abort</code> 取消上次操作。 方案二： 执行 <code>git commit --allow-empty</code>，表示允许空提交。</p><h3 id="fatal-you-are-in-the-middle-of-a-cherry-pick-–-cannot-amend" tabindex="-1"><a class="header-anchor" href="#fatal-you-are-in-the-middle-of-a-cherry-pick-–-cannot-amend" aria-hidden="true">#</a> fatal: You are in the middle of a cherry-pick – cannot amend.</h3><p>原因:</p><p>在 cherry-pick 时出现冲突，没有解决冲突就执行 <code>git commit --amend</code> 命令，从而会提示该信息。</p><p>解决方案:</p><p>首先在 <code>git commit --amend</code> 之前解决冲突，并完成这次 cherry-pick:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>$ git add .\n$ git cherry-pick --continue\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',57),c={render:function(n,e){return a}}}}]);