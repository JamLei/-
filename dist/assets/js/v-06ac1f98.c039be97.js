"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[6321],{66736:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-06ac1f98",path:"/nginx/01-%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB.html",title:"基于 Nignx 的前后端分离",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"反向代理服务器",slug:"反向代理服务器",children:[{level:3,title:"概念",slug:"概念",children:[]},{level:3,title:"基于 Nginx 的动静分离方案",slug:"基于-nginx-的动静分离方案",children:[]},{level:3,title:"基于 Nginx 的前后端分离",slug:"基于-nginx-的前后端分离",children:[]},{level:3,title:"实现原理",slug:"实现原理",children:[]}]},{level:2,title:"Nginx 代理配置",slug:"nginx-代理配置",children:[]},{level:2,title:"Nginx 用于动静分离（了解）",slug:"nginx-用于动静分离-了解",children:[{level:3,title:"Spring Boot 项目的内容和配置",slug:"spring-boot-项目的内容和配置",children:[]},{level:3,title:"Nginx 配置",slug:"nginx-配置",children:[]}]},{level:2,title:"前后端分离及跨域问题",slug:"前后端分离及跨域问题",children:[]}],filePathRelative:"nginx/01-前后端分离.md",git:{updatedTime:null,contributors:[]}}},55478:(n,s,a)=>{a.r(s),a.d(s,{default:()=>t});const p=(0,a(66252).uE)('<h1 id="基于-nignx-的前后端分离" tabindex="-1"><a class="header-anchor" href="#基于-nignx-的前后端分离" aria-hidden="true">#</a> 基于 Nignx 的前后端分离</h1><h2 id="反向代理服务器" tabindex="-1"><a class="header-anchor" href="#反向代理服务器" aria-hidden="true">#</a> 反向代理服务器</h2><h3 id="概念" tabindex="-1"><a class="header-anchor" href="#概念" aria-hidden="true">#</a> 概念</h3><p>由于请求的方向是从客户端发往服务端，因此 <code>客户端 -&gt; 服务端</code> 这个方向是『正向』。</p><p>所谓『反向代理服务器』指的就是：Nginx『站』在服务端的角度，分担了服务端的负担，增强了服务端的能力。</p><blockquote><p>在这种情况下，在客户端看来，<code>Nginx</code> + <code>服务端</code> 整体扮演了一个更大意义上的服务端的概念。</p></blockquote><p><img src="https://hemiao3000.gitee.io/java-note-img/images/nginx/img/nginx-01.png" alt="nginx-01"></p><h3 id="基于-nginx-的动静分离方案" tabindex="-1"><a class="header-anchor" href="#基于-nginx-的动静分离方案" aria-hidden="true">#</a> 基于 Nginx 的动静分离方案</h3><p>对 Nginx 的最简单的使用是将它用作静态资源服务器。</p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/nginx/img/nginx-02.png" alt="nginx-02"></p><p>在这种方案种，将 <code>.html</code>、<code>.css</code>、<code>.js</code>、<code>.png</code> 等静态资源放置在 Nginx 服务器上。</p><p>将对静态资源的访问流量就分流到了 Nginx 服务器上，从而减轻 Servlet 容器的访问压力。</p><h3 id="基于-nginx-的前后端分离" tabindex="-1"><a class="header-anchor" href="#基于-nginx-的前后端分离" aria-hidden="true">#</a> 基于 Nginx 的前后端分离</h3><p>随着前端单页应用技术的发展，『前端』从简单的『前端页面』演进成了『前端项目』。</p><p>这种情况下，在动静分离方案的基础上进一步延伸出了『更激进』的方案：前后端分离。</p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/nginx/img/nginx-03.png" alt="nginx-03"></p><h3 id="实现原理" tabindex="-1"><a class="header-anchor" href="#实现原理" aria-hidden="true">#</a> 实现原理</h3><p>要实现前后端分离<small>（涵盖动静分离）</small>，这里需要 Nginx 能提供一种能力：请求转发。</p><p>在整个过程中，所有的请求首先都是『交到了 Nginx 手里』，有一部分 请求是 Nginx 自己能响应的，它就响应了；而另一部分请求则是被 Nginx 转给了 SpringBoot，而等到 Nginx 获得到 SpringBoot 的 JSON 的返回之后，Nginx 再将响应数据回复给客户端。</p><h2 id="nginx-代理配置" tabindex="-1"><a class="header-anchor" href="#nginx-代理配置" aria-hidden="true">#</a> Nginx 代理配置</h2><blockquote><p>所谓『代理』指的就是 Nginx『帮』真正的服务端所接收的请求，那么也就意味着这样的请求，Nginx 最终需要再交给真正的服务端去处理。</p></blockquote><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>http {\n    ...\n    server {\n        listen       80;\n        server_name  localhost;\n        ...\n        location /api { # 看这里，看这里，看这里\n            proxy_pass http://127.0.0.1:8080/api;\n        }\n        ...\n    }\n    ...\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>这里的关键配置在于 <strong>proxy_pass</strong> 。</p><ol><li><p>客户端所有以 <code>http://localhost:80</code> 开始的 URL 都会访问到 Nginx 。</p><p>这和我们使用 Tomcat 时类似。 例如：</p><p>当你访问 <code>http://localhost:80/department/main.html</code> 时，这代表着你向 Nginx 请求一个 html 页面，<small>（结合其它相关配置）</small>如果 Nginx 服务器上有的话，它会将这个 html 页面回复给你。</p></li><li><p>客户端所有发往 Nginx 的请求中，URI 以 <code>/api</code> 开头的请求都是 Nginx『帮』别人收的。</p><p>所有 URI 以 <code>/api</code>开头的请求都会被 Nginx 转给 <code>http://127.0.0.1:8080/api</code> 地址并等待它的回复。</p><p>例如，你所发出的 <code>http://localhost:80/api/departments/9527</code>，会被 Nginx 发往 <code>http://127.0.0.1:8080/api/departments/9527</code> 。</p></li></ol><p><strong>Nginx 的转发配置规则</strong></p><ol><li><p>无论如何配置你配置 <code>proxy_pass</code> 的内容最后一定会『完全地』包含在转发、去往的路径中。</p></li><li><p>转发的规则和 <code>proxy_pass</code> 减去 <code>http://ip:port</code> 之后还有没与内容有关。最少的『<strong>有内容</strong>』的情况是仅有一个 <code>/</code> 。</p><ul><li><p>如果『有内容』（哪怕只有一个 <code>/</code>），转发路径是 <code>proxy_pass</code> + (<code>path</code> - <code>location</code>)</p></li><li><p>如果『没内容』，转发路径就是 <code>proxy_pass</code> + <code>path</code></p></li></ul></li><li><p>location 是否以 <code>/</code> 结尾问题不大，因为 Nginx 会认为 <code>/</code> 本身就是 location 的内容本身（的一部分）。</p></li></ol><p>一个完整的 http 配置片段<small>（其中绝大多数内容都是默认配置）</small>：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>error_log  logs/error.log  info;    # 打开错误日志的 INFO 级别，方便观察错误信息。\n...\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n    sendfile        on;\n    keepalive_timeout  65;  # TCP 连接存活 65 秒\n    server {\n        # Nginx 监听 localhost:80 端口\n        listen       80;\n        server_name  localhost;\n\n        # 访问 URI 根路径时，返回 Nginx 根目录下的 html 目录下的 index.html 或 index.htm\n        location / {\n            root   html;\n            index  index.html index.htm;\n        }\n\n        # URI 路径以 /api 开头的将转交给『别人』处理\n        location /api {\n            proxy_pass http://localhost:8080/api;\n        }\n\n        # 出现 500、502、503、504 错误时，返回 Nginx 根目录下的 html 目录下的 50x.html 。\n        error_page   500 502 503 504  /50x.html;    \n        location = /50x.html {\n            root   html;\n        }\n    }\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><h2 id="nginx-用于动静分离-了解" tabindex="-1"><a class="header-anchor" href="#nginx-用于动静分离-了解" aria-hidden="true">#</a> Nginx 用于动静分离（了解）</h2><p>为了显示明显的效果，准备两台独立的服务器：</p><ul><li><p>Spring Boot<small>（Thymeleaf）</small>服务器。IP 地址为 <code>81.68.200.174</code> 。</p></li><li><p>在本机<small>（127.0.0.1）</small>上运行 Nginx 。</p></li></ul><h3 id="spring-boot-项目的内容和配置" tabindex="-1"><a class="header-anchor" href="#spring-boot-项目的内容和配置" aria-hidden="true">#</a> Spring Boot 项目的内容和配置</h3><p>SpringBoot 项目中提供动态的 thymeleaf 页面<small>（这是动态页面，位于 template 目录下）</small>：</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.thymeleaf.org<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/js/jquery-1.11.3.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/javascript<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n    <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;h2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">&#39;hello world&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>${message}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Hello World<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>thymeleaf 页面引用并使用了 jQuery，但是我们将项目中的 <code>static</code> 目录整体删除。即，Spring Boot 项目中并没有 <code>jquery-1.11.3.js</code> 文件。</p><p>Spring Boot 项目代码：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/api/welcome-page&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">welcome</span><span class="token punctuation">(</span><span class="token class-name">Model</span> model<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;message&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;http://www.baidu.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token string">&quot;welcome&quot;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><blockquote><p>直接运行并访问该 Spring Boot 项目，毫无疑问，你看不要页面上的 hello world 。</p></blockquote><h3 id="nginx-配置" tabindex="-1"><a class="header-anchor" href="#nginx-配置" aria-hidden="true">#</a> Nginx 配置</h3><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>location .*\\.js$ {\n    root    html/js;\n    expires      30d;\n}\n\nlocation /api {\n    proxy_pass http://81.68.200.174:8080/api;\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>Nginx 的配置主要就是两个：</p><ol><li><p>拦截以 <code>.js</code> 作为后缀的请求，并到指定的目录下查找、返回 <code>.js</code> 文件。</p></li><li><p>将接收到的以 <code>/api</code> 开始的请求，转向到 <code>81.68.200.174:8080</code> 。</p></li></ol><p>配置正确的情况下，通过 <code>http://127.0.0.1/api/welcome-page</code> 向 Nginx 发出请求，你看到页面，并且能够看到页面上的 <code>hello world</code> 。</p><h2 id="前后端分离及跨域问题" tabindex="-1"><a class="header-anchor" href="#前后端分离及跨域问题" aria-hidden="true">#</a> 前后端分离及跨域问题</h2><blockquote><p>动静分离再『向前多走一步』，就是前后端分离。上例中的 Spring Boot 不提供任何动态页面、资源，只提供 JSON 格式数据。</p></blockquote><p>将上例的 index.html 改造成如下形似：</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./js/jquery-1.11.3.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/javascript<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  url<span class="token operator">:</span> <span class="token string">&#39;http://localhost:80/api/hello&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 注意这里的 URL</span>\n  type<span class="token operator">:</span> <span class="token string">&quot;POST&quot;</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">result</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;h2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token string">&quot;跨域访问成功:&quot;</span> <span class="token operator">+</span> result<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">error</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&quot;h2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token string">&quot;跨域失败!!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>再在 nginx 的 proxy_pass 配置成它所代理的 SpringBoot 的真实访问路径。例如：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>location <span class="token operator">/</span>api <span class="token punctuation">{</span>\n    proxy_pass http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">8080</span><span class="token operator">/</span>api<span class="token punctuation">;</span>\n    # proxy_set_header Host $http_host<span class="token punctuation">;</span>\n    # proxy_set_header <span class="token constant">X</span><span class="token operator">-</span>Real<span class="token operator">-</span><span class="token constant">IP</span> $remote_addr<span class="token punctuation">;</span>\n    # proxy_set_header <span class="token constant">X</span><span class="token operator">-</span>Forwarded<span class="token operator">-</span>For $proxy_add_x_forwarded_for<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>简单起见，我们这里的 Spring Boot 就运行在本地，并占用 8080 端口。</p><p>在结合上述的配置，意味着我们在页面发起的 <code>http://127.0.0.1:80/api/hello</code> 的请求，被 Nginx 接收后，Nginx 会『帮』我们去访问 <code>http://127.0.0.1:8080</code> 的 <code>/api/hello</code>，并将结果再返回给客户端了浏览器。</p><p>在这个过程中，客户端浏览器始终面对的都是 Nginx，因此，请求页面的 <code>index.html</code> 和 AJAX 请求 <code>/api/hello</code> 都是发往了同一个服务器，自然就没有跨域问题。</p>',52),t={render:function(n,s){return p}}}}]);