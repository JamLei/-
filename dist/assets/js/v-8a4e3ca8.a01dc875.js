"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[4610],{20601:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-8a4e3ca8",path:"/spring-mvc/304-%E9%80%82%E9%85%8D%E5%99%A8.html",title:"Spring MVC 中的适配器模式",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"为什么不直接调用？",slug:"为什么不直接调用",children:[]},{level:2,title:"解决方案一：统一 Controller",slug:"解决方案一-统一-controller",children:[]},{level:2,title:"解决方案二：使用适配器模式",slug:"解决方案二-使用适配器模式",children:[]},{level:2,title:"DispatcherServlet 对 Adpater 的使用",slug:"dispatcherservlet-对-adpater-的使用",children:[]}],filePathRelative:"spring-mvc/304-适配器.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},33569:(n,s,a)=>{a.r(s),a.d(s,{default:()=>e});const p=(0,a(66252).uE)('<h1 id="spring-mvc-中的适配器模式" tabindex="-1"><a class="header-anchor" href="#spring-mvc-中的适配器模式" aria-hidden="true">#</a> Spring MVC 中的适配器模式</h1><h2 id="为什么不直接调用" tabindex="-1"><a class="header-anchor" href="#为什么不直接调用" aria-hidden="true">#</a> 为什么不直接调用？</h2><p><em>DispatcherServlet</em> 为什么不直接调用 <em>Controller</em> ，而是通过 <strong>Adapter</strong> 来『<strong>间接</strong>』调用 <em>Controller</em> ?</p><p>原因在于：<strong>Spring MVC 现在对于 Controller 并没有『统一』的要求</strong> 。</p><p>Spring MVC <strong>不强求</strong> Controller 必须继承某个类，或实现某个接口。这样就导致，各个 Controller 中的『<strong>请求处理方法</strong>』的『样子长的并不一样』，这样，<em>DispatcherServlet</em> 在做请求的分发时，无法写出一致性代码，只能『具体情况具体分析』，例如：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// 假设 HandlerMapping 直接返回的就是 Controller 。</span>\n<span class="token class-name">Handler</span> handler <span class="token operator">=</span> handlerMapping<span class="token punctuation">.</span><span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">if</span> <span class="token punctuation">(</span>handler <span class="token keyword">instanceof</span> <span class="token class-name">AHandler</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  \n   <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">AHandler</span><span class="token punctuation">)</span>handler<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">xxx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span> \n<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>handler <span class="token keyword">instanceof</span> <span class="token class-name">BHandler</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n   <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">BHandler</span><span class="token punctuation">)</span>handler<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">yyy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span> \n<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>handler <span class="token keyword">instanceof</span> <span class="token class-name">CHandler</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n   <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">CHandler</span><span class="token punctuation">)</span>handler<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">zzz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span> \n<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  \n   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  \n<span class="token punctuation">}</span>  \n<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>更要命的是，当你去自定义一个 Controller 之后，<strong>你需要去改 Spring MVC 的 <em>DispatcherServlet</em> 的源码！！！</strong> 去多加一个 <code>else if (...) { ... }</code> 。</p><p>很显然，这么干是不可能的。</p><blockquote><p>这违反了设计模式中的开闭原则：对扩展开放，对修改关闭。</p></blockquote><h2 id="解决方案一-统一-controller" tabindex="-1"><a class="header-anchor" href="#解决方案一-统一-controller" aria-hidden="true">#</a> 解决方案一：统一 Controller</h2><p>上述问题的最简单直接的解决方案，就如同 Servlet API 一样，定义处一套统一的接口，要求 Spring MVC 框架的使用在在自定义 Controller 时，必须实现这个接口。这样就约定了每种 Controller 都有一种统一的使用方式。</p><p>早期的 Spring MVC 就是这么干的，当然，现在你也可以按照这种方式来使用 Spring MVC 框架。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token keyword">implements</span> <span class="token class-name">Controller</span> <span class="token punctuation">{</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token class-name">ModelAndView</span> <span class="token function">handleRequest</span><span class="token punctuation">(</span>\n            <span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> \n            <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> \n            <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n\n        <span class="token keyword">return</span> mav<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>这样，DispacherServlet 中的代码就能简化成如下这样：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// 假设 HandlerMapping 直接返回的就是 Controller 。</span>\n<span class="token class-name">Handler</span> handler <span class="token operator">=</span> handlerMapping<span class="token punctuation">.</span><span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nhandler<span class="token punctuation">.</span><span class="token function">handleRequest</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>这么干的缺点在于使用时不灵活，Spring MVC 框架的使用者受限于 <strong>Controller</strong> 接口，必须把代码写成『这种样子』。</p><p>因此，Spring MVC 并没有采取这种解决办法，而是采用的下面这种方案。</p><h2 id="解决方案二-使用适配器模式" tabindex="-1"><a class="header-anchor" href="#解决方案二-使用适配器模式" aria-hidden="true">#</a> 解决方案二：使用适配器模式</h2><p>使用适配器模式的好处在于，Controller 可以『放飞自我』，Spring MVC 的使用者可以不受 Controller 接口的限制，以更方便的方式来编写自定义的 Controller 类。</p><p>DispacherServlet 如何调用 Controller 的问题，就由适配器来解决。</p><p>使用 Adapter 模式有 2 点需要注意的：</p><ol><li><p>Adapter 和 Controller 总是成对出现的。也就是说，Controller 的作者写 Controller 时『放飞自我』的代价就是，他要『多』写个 Adapter 。<small>当然，由于 Adapter 可能会具有通用性，因此，Controller 类和 Adapter 类的数量关系也不至于是 1 : 1 的关系。</small></p></li><li><p>Controller 的编写虽然可以『放飞自我』，但是 Adapter 的编写则是有要求的。</p></li></ol><blockquote><p>以下代码是伪代码，大家重点体会 Adapter 的用法和使用场景。</p></blockquote><p>Spring MVC 会给出 Adapter 的接口要求：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">HandlerAdapter</span> <span class="token punctuation">{</span>  \n    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">supports</span><span class="token punctuation">(</span><span class="token class-name">Object</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>  \n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">Object</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>  \n<span class="token punctuation">}</span>  \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li><p><strong>.supports</strong> 方法的作用在于表示本 Adapter 支持调用哪个/哪些 Controller 。</p></li><li><p><strong>.handle</strong> 方法的作用是 DispatcherServlet 和 Controller 之间的调用的『桥梁』。</p></li></ul><p>Controller 的作者基于 Adapter 接口就可以写出与上面三个 Controller 配套的用于自家 Controller 的 Adapater：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// 适用于 AController 的 Adapter</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AHandlerAdapter</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerAdapter</span> <span class="token punctuation">{</span>  \n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">Object</span> handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>  \n        <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">AController</span><span class="token punctuation">)</span>handler<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">xxx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  \n    <span class="token punctuation">}</span>  \n  \n    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">supports</span><span class="token punctuation">(</span><span class="token class-name">Object</span> handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>  \n        <span class="token keyword">return</span> <span class="token punctuation">(</span>handler <span class="token keyword">instanceof</span> <span class="token class-name">AController</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  \n    <span class="token punctuation">}</span>  \n<span class="token punctuation">}</span>  \n  \n<span class="token comment">// 适用于 BController 的 Adapter</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BHandlerAdapter</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerAdapter</span> <span class="token punctuation">{</span>  \n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">Object</span> handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>  \n        <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">BController</span><span class="token punctuation">)</span>handler<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">yyy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  \n    <span class="token punctuation">}</span>  \n  \n    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">supports</span><span class="token punctuation">(</span><span class="token class-name">Object</span> handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>  \n        <span class="token keyword">return</span> <span class="token punctuation">(</span>handler <span class="token keyword">instanceof</span> <span class="token class-name">BController</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  \n    <span class="token punctuation">}</span>  \n<span class="token punctuation">}</span>  \n  \n<span class="token comment">// 适用于 CController 的 Adapter</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CHandlerAdapter</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerAdapter</span> <span class="token punctuation">{</span>  \n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">Object</span> handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>  \n        <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">CController</span><span class="token punctuation">)</span>handler<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">zzz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  \n    <span class="token punctuation">}</span>  \n\n    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">supports</span><span class="token punctuation">(</span><span class="token class-name">Object</span> handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>  \n        <span class="token keyword">return</span> <span class="token punctuation">(</span>handler <span class="token keyword">instanceof</span> <span class="token class-name">CController</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  \n    <span class="token punctuation">}</span>  \n  \n<span class="token punctuation">}</span>  \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><p>这样依赖，虽然 AController、BController 和 CController 的请求处理方法【长得不一样】，但是它们各自的 Adapter【长得一样】。</p><p>这样一来，DispacherServlet 向 HandlerMapping 要到的是 Adapter ，那么它就可以用一种统一的方式调用 Adapter，而各个 Adapter 再去调用各自适配的 Controller 。</p><h2 id="dispatcherservlet-对-adpater-的使用" tabindex="-1"><a class="header-anchor" href="#dispatcherservlet-对-adpater-的使用" aria-hidden="true">#</a> DispatcherServlet 对 Adpater 的使用</h2><p>模拟 DispatcherServlet</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DispatchServlet</span> <span class="token punctuation">{</span>  \n      \n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HandlerAdapter</span><span class="token punctuation">&gt;</span></span> handlerAdapters <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HandlerAdapter</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   \n      \n    <span class="token keyword">public</span> <span class="token class-name">DispatchServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  \n        handlerAdapters<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AHandlerAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  \n        handlerAdapters<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BHandlerAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  \n        handlerAdapters<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CHandlerAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  \n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doDispatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  \n          \n        <span class="token class-name">AController</span> controller <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  \n<span class="token comment">//      BController controller = new BController();  </span>\n<span class="token comment">//      CController controller = new CController();  </span>\n\n        <span class="token comment">//得到对应适配器  </span>\n        <span class="token class-name">HandlerAdapter</span> adapter <span class="token operator">=</span> <span class="token function">getHandler</span><span class="token punctuation">(</span>controller<span class="token punctuation">)</span><span class="token punctuation">;</span>  \n        <span class="token comment">//通过适配器执行对应的controller对应方法  </span>\n        adapter<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span>controller<span class="token punctuation">)</span><span class="token punctuation">;</span>  \n    <span class="token punctuation">}</span>  \n\n    <span class="token keyword">public</span> <span class="token class-name">HandlerAdapter</span> <span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token class-name">Controller</span> controller<span class="token punctuation">)</span><span class="token punctuation">{</span>  \n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">HandlerAdapter</span> adapter<span class="token operator">:</span> handlerAdapters<span class="token punctuation">)</span> <span class="token punctuation">{</span>  \n            <span class="token keyword">if</span> <span class="token punctuation">(</span>adapter<span class="token punctuation">.</span><span class="token function">supports</span><span class="token punctuation">(</span>controller<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  \n                <span class="token keyword">return</span> adapter<span class="token punctuation">;</span>  \n            <span class="token punctuation">}</span>  \n        <span class="token punctuation">}</span>\n\n        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  \n    <span class="token punctuation">}</span>  \n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">new</span> <span class="token class-name">DispatchServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doDispatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  \n    <span class="token punctuation">}</span>  \n      \n<span class="token punctuation">}</span>  \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br></div></div>',33),e={render:function(n,s){return p}}}}]);