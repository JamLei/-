"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[3174],{546:(s,n,a)=>{a.r(n),a.d(n,{data:()=>e});const e={key:"v-32fad149",path:"/mysql/03-%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5.html",title:"查询语句",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"Select 语句",slug:"select-语句",children:[{level:3,title:"检索单独的列",slug:"检索单独的列",children:[]},{level:3,title:"检索多列",slug:"检索多列",children:[]},{level:3,title:"检索所有列",slug:"检索所有列",children:[]},{level:3,title:"使用完全限定的表名",slug:"使用完全限定的表名",children:[]}]},{level:2,title:"对检索的数据进行排序",slug:"对检索的数据进行排序",children:[{level:3,title:"对数据进行排序",slug:"对数据进行排序",children:[]},{level:3,title:"按多个列进行排序",slug:"按多个列进行排序",children:[]},{level:3,title:"指定排序方向",slug:"指定排序方向",children:[]}]},{level:2,title:"过滤数据",slug:"过滤数据",children:[]},{level:2,title:"高级数据过滤",slug:"高级数据过滤",children:[]},{level:2,title:"模糊查询",slug:"模糊查询",children:[]},{level:2,title:"聚合函数",slug:"聚合函数",children:[{level:3,title:"AVG 函数",slug:"avg-函数",children:[]},{level:3,title:"COUNT 函数",slug:"count-函数",children:[]},{level:3,title:"MAX 函数",slug:"max-函数",children:[]},{level:3,title:"MIN 函数",slug:"min-函数",children:[]},{level:3,title:"SUM 函数",slug:"sum-函数",children:[]}]},{level:2,title:"分组查询和 Having 子句",slug:"分组查询和-having-子句",children:[{level:3,title:"分组查询",slug:"分组查询",children:[]},{level:3,title:"HAVING 子句",slug:"having-子句",children:[]}]},{level:2,title:"使用子查询",slug:"使用子查询",children:[]},{level:2,title:"表之间的关系",slug:"表之间的关系",children:[{level:3,title:"一对多/多对一（使用最为广泛）",slug:"一对多-多对一-使用最为广泛",children:[]},{level:3,title:"多对多（双向的一对多关系）",slug:"多对多-双向的一对多关系",children:[]},{level:3,title:"一对一（使用相对较少）",slug:"一对一-使用相对较少",children:[]}]},{level:2,title:"10. 关联查询 SQL 语句",slug:"_10-关联查询-sql-语句",children:[]},{level:2,title:"11. 外连接",slug:"_11-外连接",children:[]},{level:2,title:"12. 自连接",slug:"_12-自连接",children:[]}],filePathRelative:"mysql/03-查询语句.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},71148:(s,n,a)=>{a.r(n),a.d(n,{default:()=>t});const e=(0,a(66252).uE)('<h1 id="查询语句" tabindex="-1"><a class="header-anchor" href="#查询语句" aria-hidden="true">#</a> 查询语句</h1><p>你可能使用得最频繁的 SQL 语句是 <strong>SELECT</strong> 语句，其用途是从一个或多个表中检索信息。</p><p><strong>增删改查</strong> 四大操作中，<strong>查</strong> 操作与 <strong>增删改</strong> 操作的总和的比为 7:1 到 9:1 之间。</p><p>SELECT 操作属于 <strong>DML</strong> 和 <strong>DQL</strong> 两大类语句中的 DQL 。</p><p>要使用 <strong>SELECT</strong> 检索表中的数据，至少必须指定两组信息：</p><ul><li>你想得到什么</li><li>你想从哪里得到它</li></ul><h2 id="select-语句" tabindex="-1"><a class="header-anchor" href="#select-语句" aria-hidden="true">#</a> Select 语句</h2><h3 id="检索单独的列" tabindex="-1"><a class="header-anchor" href="#检索单独的列" aria-hidden="true">#</a> 检索单独的列</h3><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">&lt;</span>列名<span class="token operator">&gt;</span> <span class="token keyword">FROM</span> <span class="token operator">&lt;</span>表名<span class="token operator">&gt;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>SELECT 语句从 <code>指定表</code> 中检索单个 <code>指定列</code> 的数据。</p><ul><li><p>想要的 <strong>列名称</strong> 紧接 <strong>SELECT</strong> 关键字之后指定 。</p></li><li><p><strong>FROM</strong> 关键字指定要从中检索数据的 <strong>表名称</strong> 。</p></li></ul><p>查询出来的数据没有进行过滤，也没有进行排序。</p><p>注意，必须用分号（<em><code>;</code></em>）作为 SQL 语句的结束标记。</p><p>SQL 语句不区分大小写，因此 <em><code>SELECT</code></em> 等同于 <em><code>select</code></em>，也等同于 <em><code>Select</code></em>。但是，约定俗成的习惯是：</p><ul><li><p>所有 SQL 关键字使用全大写字母；</p></li><li><p>列名和表名使用全小写字母</p></li></ul><h3 id="检索多列" tabindex="-1"><a class="header-anchor" href="#检索多列" aria-hidden="true">#</a> 检索多列</h3><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">&lt;</span>列名<span class="token number">1</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>列名<span class="token number">2</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">FROM</span> <span class="token operator">&lt;</span>表名<span class="token operator">&gt;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>从表中检索多列，可以使用相同的 SELECT 语句。唯一的区别是：必须在 SELECT 关键字后面指定多个列名称，并且用逗号（<strong><code>,</code></strong>）把每个列隔开。</p><p>注意，最后一个列名称后面不需要逗号。</p><h3 id="检索所有列" tabindex="-1"><a class="header-anchor" href="#检索所有列" aria-hidden="true">#</a> 检索所有列</h3><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token operator">&lt;</span>表名<span class="token operator">&gt;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>除了指定单列和多列以外，还可以使用 SELECT 语句请求所有列，而不必单独列出它们。</p><p>这是通过使用星号（<strong><code>*</code></strong>）通配符替代实际的列名做到的。</p><p>不过，一般来说，在实际工作中最好不要使用 <strong><code>*</code></strong> 通配符，除非是确实需要表中的每一列。因为检索不必要的列通常会降低检索效率。</p><h3 id="使用完全限定的表名" tabindex="-1"><a class="header-anchor" href="#使用完全限定的表名" aria-hidden="true">#</a> 使用完全限定的表名</h3><p>表的完全限定名：<code>库名.表名</code></p><p>列的完全限定名：<code>表名.列名</code></p><h2 id="对检索的数据进行排序" tabindex="-1"><a class="header-anchor" href="#对检索的数据进行排序" aria-hidden="true">#</a> 对检索的数据进行排序</h2><h3 id="对数据进行排序" tabindex="-1"><a class="header-anchor" href="#对数据进行排序" aria-hidden="true">#</a> 对数据进行排序</h3><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token operator">&lt;</span>表名<span class="token operator">&gt;</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token operator">&lt;</span>列名<span class="token operator">&gt;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>如果不进行排序，那么数据是以它们加到表中的顺序排列显示。</p><p>如果需要显示地对检索出的数据进行排序，可以使用 <strong><code>ORDER BY</code></strong> 子句。</p><p><strong>ORDER BY</strong> 用于获取一列或多列的名称，并通过它们对数据进行排序。</p><h3 id="按多个列进行排序" tabindex="-1"><a class="header-anchor" href="#按多个列进行排序" aria-hidden="true">#</a> 按多个列进行排序</h3><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token operator">&lt;</span>表名<span class="token operator">&gt;</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token operator">&lt;</span>列名<span class="token number">1</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>列名<span class="token number">2</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>要按多个列进行排序，可以简单地指定列名，并用逗号隔开它们。</p><p>在以第一个列进行排序出现相等情况是，会以第二列为条件对相关行再进行排序，并以此类推。</p><h3 id="指定排序方向" tabindex="-1"><a class="header-anchor" href="#指定排序方向" aria-hidden="true">#</a> 指定排序方向</h3><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token operator">&lt;</span>表名<span class="token operator">&gt;</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token operator">&lt;</span>列名<span class="token operator">&gt;</span> <span class="token keyword">DESC</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><blockquote><p>默认情况下，排序是以自然顺序进行。数字以从小到大，字母以字典顺序</p></blockquote><p>要按降序排序，必须指定关键字 <strong>DESC</strong> 。</p><p>注意，<strong>DESC</strong> 关键字只对直接位于它之前的列名起作用。如果想要在多个列上以降序排序，就要确保没个列都具有它自己的 DESC 关键字。</p><p>升序的关键字是 <strong>ASC</strong>，不过，在实际中通常不使用它。</p><h2 id="过滤数据" tabindex="-1"><a class="header-anchor" href="#过滤数据" aria-hidden="true">#</a> 过滤数据</h2><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token operator">&lt;</span>表名<span class="token operator">&gt;</span> <span class="token keyword">WHERE</span> <span class="token operator">&lt;</span>过滤条件<span class="token operator">&gt;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>只检索想要的特定的数据，这需要指定 <strong>搜索条件</strong>，也称为 <strong>过滤条件</strong>。</p><p>WHERE 子句的运算符</p><table><thead><tr><th style="text-align:center;">运算符</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:center;"><code>=</code></td><td style="text-align:left;">相等性</td></tr><tr><td style="text-align:center;"><code>!=</code></td><td style="text-align:left;">不等性</td></tr><tr><td style="text-align:center;"><code>&lt;&gt;</code></td><td style="text-align:left;">不等性</td></tr><tr><td style="text-align:center;"><code>&lt;</code></td><td style="text-align:left;">小于</td></tr><tr><td style="text-align:center;"><code>&lt;=</code></td><td style="text-align:left;">小于或等于</td></tr><tr><td style="text-align:center;"><code>&gt;</code></td><td style="text-align:left;">大于</td></tr><tr><td style="text-align:center;"><code>&gt;=</code></td><td style="text-align:left;">大于或等于</td></tr><tr><td style="text-align:center;"><code>BETWEEN...AND...</code></td><td style="text-align:left;">在两个指定值之间</td></tr></tbody></table><hr><p>当在 <strong>WHERE</strong> 条件中使用日期概念时，可以书写成字符串形式（即使用单引号引住），但是该字符串必须合法特定的格式：<strong><code>&#39;yyyy-MM-dd&#39;</code></strong> 。</p><p>表示日期概念的字符串可以进行大小判断。</p><hr><p>在创建表时，标设计者可以指定单独的列中是否允许为空，即不包含任何值。</p><p>当某一列没有包含任何值时，则称之为 <strong>NULL</strong> 。</p><p>注意，没有值（No Value），并不是 0、空字符串 或者 空白字符串 。</p><p>SELECT 语句具有一个特殊的 WHERE 子句判断：<strong><code>IS NULL</code></strong>。可以使用它检索具有 NULL 值得列：</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">&lt;</span>列名<span class="token operator">&gt;</span> <span class="token keyword">FROM</span> <span class="token operator">&lt;</span>表名<span class="token operator">&gt;</span> <span class="token keyword">WHERE</span> <span class="token operator">&lt;</span>列名<span class="token operator">&gt;</span> <span class="token operator">IS</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>于此同时，还有 <strong><code>IS NOT NULL</code></strong> 判断：检索非空。</p><h2 id="高级数据过滤" tabindex="-1"><a class="header-anchor" href="#高级数据过滤" aria-hidden="true">#</a> 高级数据过滤</h2><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token operator">&lt;</span>表名<span class="token operator">&gt;</span> <span class="token keyword">WHERE</span> <span class="token operator">&lt;</span>过滤条件<span class="token number">1</span><span class="token operator">&gt;</span> <span class="token operator">AND</span> <span class="token operator">&lt;</span>过滤条件<span class="token number">2</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>\n<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token operator">&lt;</span>表名<span class="token operator">&gt;</span> <span class="token keyword">WHERE</span> <span class="token operator">&lt;</span>过滤条件<span class="token number">1</span><span class="token operator">&gt;</span> <span class="token operator">OR</span> <span class="token operator">&lt;</span>过滤条件<span class="token number">2</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>除了用单个条件过滤数据，为了对过滤进行更大程度的控制，MySQL 允许指定多个 WHERE 子句。</p><p>可以用两种方式使用这些子句：作为 <strong>AND</strong> 子句，或者，作为 <strong>OR</strong> 子句。</p><p><strong>AND</strong> 运算符相当于在给 <strong>WHERE</strong> 子句 <strong>追加条件</strong> 。</p><p><strong>OR</strong> 运算符指示检索与任意一个条件匹配的行。</p><hr><p>和编程有类似的情况，AND 和 OR 的优先级并非同级。AND 的优先级要高于 OR 。</p><p>SQL 将在 OR 运算符之前处理 AND 运算符。所以，请多考虑使用圆括号（<code>()</code>）。</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp <span class="token keyword">where</span> deptno <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">or</span> deptno <span class="token operator">=</span> <span class="token number">20</span> <span class="token operator">and</span> sal <span class="token operator">&gt;</span> <span class="token number">2000</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><hr><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token operator">&lt;</span>表名<span class="token operator">&gt;</span> <span class="token keyword">WHERE</span> <span class="token operator">&lt;</span>列名<span class="token operator">&gt;</span> <span class="token operator">IN</span> <span class="token punctuation">(</span> <span class="token operator">&lt;</span>值<span class="token number">1</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>值<span class="token number">2</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>在某些场合下，<strong>IN</strong> 运算符可以替代 <strong>OR</strong> 运算符，来指定可能匹配的任何条件的范围。</p><p>IN 运算符有以下优点：</p><blockquote><ul><li>IN 运算符语法要清晰得多，并且更容易读取。</li><li>IN 运算符比 OR 运算符执行速度更快。</li><li>IN 的最大的优点是：IN 运算符可以包含另一条 SELECT 语句，从而构建更加灵活的 WHERE 子句。</li></ul></blockquote><hr><p>WHERE 子句的 NOT 运算符只有一种功能：否定气候出现的任何条件。</p><p>最常见的 NOT 出现的场景有：</p><blockquote><ul><li>IS NOT NULL</li><li>NOT IN</li></ul></blockquote><h2 id="模糊查询" tabindex="-1"><a class="header-anchor" href="#模糊查询" aria-hidden="true">#</a> 模糊查询</h2><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token operator">&lt;</span>表名<span class="token operator">&gt;</span> <span class="token keyword">WHERE</span> <span class="token operator">&lt;</span>列名<span class="token operator">&gt;</span> <span class="token operator">LIKE</span> <span class="token operator">&lt;</span>通配字符串<span class="token operator">&gt;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>通配符：用于匹配值得某些部分的特殊字符。</p><p>要在 WHERE 子句中使用通配符，必须使用 <strong>LIKE</strong> 运算符。LIKE 指示 MySQL 使用 <strong>通配</strong> 的方式，而不是直接相等性匹配来比较后面的条件。</p><p>最常见的通配符是 <strong>百分号</strong>（%）。在搜索字符串中，<strong><code>%</code></strong> 意指『匹配出现任意次数的任意字符串』。</p><p>注意，<strong><code>%</code></strong> 可以匹配 0 个字符。</p><p>可以在搜索字符串中的任意位置使用通配符，也可以使用多个通配符。</p><p>另一个需要注意的地方，<strong><code>%</code></strong> 通配符不会匹配 <strong><code>NULL</code></strong> 。</p><p>另一个有用的通配符是 <strong>下划线</strong>（_）。它只匹配单个字符。</p><h2 id="聚合函数" tabindex="-1"><a class="header-anchor" href="#聚合函数" aria-hidden="true">#</a> 聚合函数</h2><p>有时操作数据库的目的是汇总数据，而并非罗列所有的数据。常见情况有：</p><ul><li>确定表中行数（或满足某个特定条件的行数）。</li><li>获得表中行组的和。</li><li>找出表列中的最大、最小、平均值。</li></ul><p>标准 SQL 中提供了5个 <strong>聚集函数</strong>（也叫<strong>聚合函数</strong>）来提供这样的功能。</p><p><strong>聚集函数</strong>：运行在行组上，计算和返回单个值的函数。</p><table><thead><tr><th style="text-align:left;">聚合函数</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><code>AVG()</code></td><td style="text-align:left;">返回某列的平均值。</td></tr><tr><td style="text-align:left;"><code>COUNT()</code></td><td style="text-align:left;">返回某列的行数。</td></tr><tr><td style="text-align:left;"><code>MAX()</code></td><td style="text-align:left;">返回某列的最大值。</td></tr><tr><td style="text-align:left;"><code>MIN()</code></td><td style="text-align:left;">返回某列的最小值。</td></tr><tr><td style="text-align:left;"><code>SUM()</code></td><td style="text-align:left;">返回某列的和。</td></tr></tbody></table><h3 id="avg-函数" tabindex="-1"><a class="header-anchor" href="#avg-函数" aria-hidden="true">#</a> AVG 函数</h3><p>AVG ( ) 通过对表中行数计数并计算特定列值之和，求得该列的平均值。</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token function">AVG</span><span class="token punctuation">(</span>prod_price<span class="token punctuation">)</span> <span class="token keyword">AS</span> avg_price\n<span class="token keyword">FROM</span> products<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>结合 SELECT 语句中的 WHERE，AVG ( ) 可以用于返回特定数据的平均值。</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token function">AVG</span><span class="token punctuation">(</span>prod_price<span class="token punctuation">)</span> <span class="token keyword">AS</span> avg_price\n<span class="token keyword">FROM</span> products\n<span class="token keyword">WHERE</span> vend_id<span class="token operator">=</span><span class="token string">&#39;DLL01&#39;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>AVG( ) 只能用来计算某 <strong>一个特定数值列</strong> 的平均值，而且列名必须作为函数参数给定。为了获得多个列的平均值，必须使用多个 AVG ( ) 函数。</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token function">AVG</span><span class="token punctuation">(</span>quantity<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">AVG</span><span class="token punctuation">(</span>item_price<span class="token punctuation">)</span>\n<span class="token keyword">FROM</span> orderitems<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>AVG ( ) 函数会忽略值为 NULL 的行。</p><h3 id="count-函数" tabindex="-1"><a class="header-anchor" href="#count-函数" aria-hidden="true">#</a> COUNT 函数</h3><p>COUNT ( ) 函数进行计数，利用 <strong>Count ( )</strong> 函数确定表中行的数目或符合特定条件的行数。</p><p>Count ( ) 函数有两种形式：</p><ul><li>使用 Count ( * ) 会计算所有行，包括值为 NULL 的行。</li><li>使用 Count ( 列名 ) 只会计算指定列中有值的行，即忽略值为 NULL 的行。</li></ul><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> num_cust\n<span class="token keyword">FROM</span> customers<span class="token punctuation">;</span>\n\n<span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>cust_email<span class="token punctuation">)</span> <span class="token keyword">AS</span> num_cust\n<span class="token keyword">FROM</span> customers<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>结合 SELECT 语句中的 WHERE，Count ( ) 可以用于计算符合特定条件的行的数量。</p><h3 id="max-函数" tabindex="-1"><a class="header-anchor" href="#max-函数" aria-hidden="true">#</a> MAX 函数</h3><p><code>MAX()</code> 返回指定列中的最大值。Max() 函数必须指定列名，即 <code>Max(列名)</code> 。</p><p><code>MAX()</code> 函数一般用于找出最大的数值和日期值。</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token function">MAX</span><span class="token punctuation">(</span>prod_price<span class="token punctuation">)</span> <span class="token keyword">AS</span> max_price <span class="token keyword">FROM</span> products<span class="token punctuation">;</span>\n<span class="token keyword">SELECT</span> <span class="token function">MAX</span><span class="token punctuation">(</span>order_date<span class="token punctuation">)</span> <span class="token keyword">AS</span> max_date <span class="token keyword">FROM</span> orders<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><code>MAX()</code> 函数也会忽略值为 NULL 的行。</p><h3 id="min-函数" tabindex="-1"><a class="header-anchor" href="#min-函数" aria-hidden="true">#</a> MIN 函数</h3><p>MIN ( ) 的功能正好与<code>MAX()</code>相反，它返回指定列的最小值。它也必须指定列名，即 Min ( 列名 ) 。</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token function">MIN</span><span class="token punctuation">(</span>prod_price<span class="token punctuation">)</span> <span class="token keyword">AS</span> max_price <span class="token keyword">FROM</span> products<span class="token punctuation">;</span>\n<span class="token keyword">SELECT</span> <span class="token function">MIN</span><span class="token punctuation">(</span>order_date<span class="token punctuation">)</span> <span class="token keyword">AS</span> max_date <span class="token keyword">FROM</span> orders<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>MIN ( ) 函数也会忽略值为 NULL 的行。</p><h3 id="sum-函数" tabindex="-1"><a class="header-anchor" href="#sum-函数" aria-hidden="true">#</a> SUM 函数</h3><p>SUM ( ) 用来返回指定列值的和。</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token function">SUM</span><span class="token punctuation">(</span>quantity<span class="token punctuation">)</span> <span class="token keyword">AS</span> items_orderd\n<span class="token keyword">FROM</span> orderitems<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>结合 SELECT 语句中的 WHERE 子句，SUM ( ) 函数可以计算某些数据的总和。</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token function">SUM</span><span class="token punctuation">(</span>quantity<span class="token punctuation">)</span> <span class="token keyword">AS</span> items_orderd\n<span class="token keyword">FROM</span> orderitems\n<span class="token keyword">WHERE</span> order_num<span class="token operator">=</span><span class="token number">20005</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>利用标准的算术运算符，所有聚集函数都可以用来执行多个列上的计算。</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token function">SUM</span><span class="token punctuation">(</span>quantity<span class="token operator">*</span>item_price<span class="token punctuation">)</span> <span class="token keyword">AS</span> items_orderd\n<span class="token keyword">FROM</span> orderitems\n<span class="token keyword">WHERE</span> order_num<span class="token operator">=</span><span class="token number">20005</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>SUM ( ) 函数也会忽略值为 NULL 的行。</p><h2 id="分组查询和-having-子句" tabindex="-1"><a class="header-anchor" href="#分组查询和-having-子句" aria-hidden="true">#</a> 分组查询和 Having 子句</h2><h3 id="分组查询" tabindex="-1"><a class="header-anchor" href="#分组查询" aria-hidden="true">#</a> 分组查询</h3><p>可以这么认为：在没有指定分组前，所有查询出来的数据默认都在同一个“<strong>组</strong>”里。聚集函数都是这对一个组进行计算，并得出一个结果。</p><p>使用 GROUP BY 子句可以将表中的数据分为几个组进行处理。</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">SELECT</span> vend_id<span class="token punctuation">,</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> products <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> vend_id<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><strong>GROUP BY</strong> 子句和 <strong>SELECT</strong> 子句一样，可以通过逗号分隔指定多列。</p><p>在使用分组和聚集函数时，<strong>SELECT</strong> 子句中<strong>只能</strong>存在以下三种元素：</p><ul><li>常数</li><li>聚集函数</li><li>GROUP BY 子句中指定的列名</li></ul><p>在 <strong>GROUP BY</strong> 子句中不能使用列的别名。</p><p>只有 <strong>SELECT</strong> 子句和 <strong>HAVING</strong> 子句中能够使用聚集函数，特别是 <strong>WHERE</strong> 子句中无法使用。</p><h3 id="having-子句" tabindex="-1"><a class="header-anchor" href="#having-子句" aria-hidden="true">#</a> HAVING 子句</h3><p>使用聚集函数对表中数据进行聚集操作时，为其指定条件的不是 WHERE 子句，而需要使用 HAVING 子句。</p><blockquote><ul><li>WHERE 子句，用于指定行所对应的条件。</li><li>HAVING 子句，用于指定组所对应的条件。</li></ul></blockquote><p>自此，SELECT 语句中各种子句的顺序是：</p><blockquote><ol><li>SELECT 子句</li><li>FROM 子句</li><li>WHERE 子句</li><li>GROUP BY 子句</li><li>HAVING 子句</li><li>ORDER BY 子句</li><li>LIMIT 子句</li></ol></blockquote><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">FROM</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">WHERE</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">HAVING</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">LIMIT</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="使用子查询" tabindex="-1"><a class="header-anchor" href="#使用子查询" aria-hidden="true">#</a> 使用子查询</h2><p>SQL 允许创建 <strong>子查询</strong>（Subquery）：嵌入在其他查询语句中的查询。</p><p>子查询最常见的场景是：由一条 SELECT 语句返回的结果充当另一条 SELECT 语句的 WHERE 子句的条件（通常结合 IN 使用）。</p><h2 id="表之间的关系" tabindex="-1"><a class="header-anchor" href="#表之间的关系" aria-hidden="true">#</a> 表之间的关系</h2><h3 id="一对多-多对一-使用最为广泛" tabindex="-1"><a class="header-anchor" href="#一对多-多对一-使用最为广泛" aria-hidden="true">#</a> 一对多/多对一（使用最为广泛）</h3><p>例如：</p><blockquote><ul><li>员工 - 部门</li><li>学生 - 班级</li><li>问题 - 答案</li></ul></blockquote><p>要点：</p><blockquote><ul><li><code>多方</code> 是从表；<code>一方</code> 是主表。</li><li>从表使用外键列 引用/关联 主表的主键列。</li><li>某些情况下从表中的外键列可以（短暂地）为 NULL 。</li><li>如果从表中的外键列中有值，那么该值必须是主表主键列中已有的值。</li></ul></blockquote><h3 id="多对多-双向的一对多关系" tabindex="-1"><a class="header-anchor" href="#多对多-双向的一对多关系" aria-hidden="true">#</a> 多对多（双向的一对多关系）</h3><p>例如：</p><blockquote><ul><li>学生 - 课程</li><li>电影 - 演员</li><li>订单 - 商品</li></ul></blockquote><p>要点：</p><blockquote><ul><li>使用 <code>中间表</code> 维护双方的关系。</li><li>中间表有两个列，都是外键，分别引用双方的主键。</li><li>中间表的这两列可以组成一个联合主键，当然也可以有 单独的/独立的 主键列。</li></ul></blockquote><h3 id="一对一-使用相对较少" tabindex="-1"><a class="header-anchor" href="#一对一-使用相对较少" aria-hidden="true">#</a> 一对一（使用相对较少）</h3><p>例如：</p><blockquote><ul><li>员工 - 合同</li><li>市民 - 身份证</li></ul></blockquote><p>要点：</p><blockquote><ul><li>类似于一对多的情况，概念上需要分出主从表。</li><li>从表的外键列 引用/关联 到主表的主键。</li></ul></blockquote><h2 id="_10-关联查询-sql-语句" tabindex="-1"><a class="header-anchor" href="#_10-关联查询-sql-语句" aria-hidden="true">#</a> 10. 关联查询 SQL 语句</h2><p>SQL 最强大的一个特性是能够在数据检索查询内自由地连接表。连接是使用 SELECT 可以执行的最重要的操作之一。</p><p>如果把数据存储在多个表中，怎样才能利用独立一条 SELECT 语句检索该数据？<strong>连接</strong>（Join）。</p><p><strong>连接</strong> 使用一种特殊的语法，可以把多个表连接起来，并返回单个输出集，并且连接可以自由地关联每个表中正确的行。</p><h5 id="内连接" tabindex="-1"><a class="header-anchor" href="#内连接" aria-hidden="true">#</a> 内连接</h5><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">SELECT</span> 主表<span class="token punctuation">.</span>列<span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> 从表<span class="token punctuation">.</span>列<span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n  <span class="token keyword">FROM</span> 主表<span class="token punctuation">,</span> 从表\n  <span class="token keyword">WHERE</span> 主表<span class="token punctuation">.</span>主键 <span class="token operator">=</span> 从表<span class="token punctuation">.</span>外键 \n  <span class="token operator">AND</span> 过滤条件 <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>如果两个表中的列名没有同名的，即，列名无歧义，那么 <strong><code>表名.</code></strong> 部分可以省略。</p><p>INNER JOIN 写法：</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">SELECT</span> 主表<span class="token punctuation">.</span>列<span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> 从表<span class="token punctuation">.</span>列<span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n  <span class="token keyword">FROM</span> 主表 <span class="token keyword">INNER</span> <span class="token keyword">JOIN</span> 从表 <span class="token keyword">ON</span> 主表<span class="token punctuation">.</span>主键 <span class="token operator">=</span> 从表<span class="token punctuation">.</span>外键\n  <span class="token keyword">WHERE</span> 过滤条件<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>列名 和 表名 都可以指定别名。以用于缩写。</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">SELECT</span> 列名 <span class="token keyword">AS</span> 别名<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">FROM</span> 表名 <span class="token keyword">AS</span> 别名 <span class="token keyword">WHERE</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>其中 <strong><code>AS</code></strong> 关键字可以省略。</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">SELECT</span> 列名 别名<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">FROM</span> 表名 别名 <span class="token keyword">WHERE</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="_11-外连接" tabindex="-1"><a class="header-anchor" href="#_11-外连接" aria-hidden="true">#</a> 11. 外连接</h2><ul><li>左外连接</li><li>右外连接</li></ul><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> \n    <span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">ON</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n    <span class="token keyword">WHERE</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> \n    <span class="token keyword">RIGHT</span> <span class="token keyword">JOIN</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">ON</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n    <span class="token keyword">WHERE</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>注意，从表在左，主表在右。</p><h2 id="_12-自连接" tabindex="-1"><a class="header-anchor" href="#_12-自连接" aria-hidden="true">#</a> 12. 自连接</h2><p>自连接的关键是使用别名！</p>',178),t={render:function(s,n){return e}}}}]);