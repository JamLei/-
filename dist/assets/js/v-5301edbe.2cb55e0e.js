"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[2042],{67077:(t,a,e)=>{e.r(a),e.d(a,{data:()=>s});const s={key:"v-5301edbe",path:"/java/99-sundry.html",title:"Java 杂项",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"二进制与十进制",slug:"二进制与十进制",children:[{level:3,title:"十进制基本概念",slug:"十进制基本概念",children:[]},{level:3,title:"十进制规则总结",slug:"十进制规则总结",children:[]},{level:3,title:"进制规则的推广",slug:"进制规则的推广",children:[]},{level:3,title:"重点结论",slug:"重点结论",children:[]},{level:3,title:"二进制",slug:"二进制",children:[]},{level:3,title:"十六进制",slug:"十六进制",children:[]}]},{level:2,title:"Unicode 编码",slug:"unicode-编码",children:[{level:3,title:".java 文件和 .class 文件的字符编码",slug:"java-文件和-class-文件的字符编码",children:[]},{level:3,title:"Java 中字符串的长度",slug:"java-中字符串的长度",children:[]},{level:3,title:"中日韩文的 UniCode 码点",slug:"中日韩文的-unicode-码点",children:[]},{level:3,title:"Java 完美判断中文字符的方案",slug:"java-完美判断中文字符的方案",children:[]},{level:3,title:"三种空格",slug:"三种空格",children:[]}]},{level:2,title:"Classpath 在哪？",slug:"classpath-在哪",children:[{level:3,title:"什么叫 Classpath？",slug:"什么叫-classpath",children:[]},{level:3,title:"有对应关系的文件夹可以不止一个",slug:"有对应关系的文件夹可以不止一个",children:[]}]},{level:2,title:"契约式编程与防御式编程",slug:"契约式编程与防御式编程",children:[{level:3,title:"防御式编程",slug:"防御式编程",children:[]},{level:3,title:"契约式编程",slug:"契约式编程",children:[]}]}],filePathRelative:"java/99-sundry.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},3737:(t,a,e)=>{e.r(a),e.d(a,{default:()=>n});const s=(0,e(66252).uE)('<h1 id="java-杂项" tabindex="-1"><a class="header-anchor" href="#java-杂项" aria-hidden="true">#</a> Java 杂项</h1><h2 id="二进制与十进制" tabindex="-1"><a class="header-anchor" href="#二进制与十进制" aria-hidden="true">#</a> 二进制与十进制</h2><h3 id="十进制基本概念" tabindex="-1"><a class="header-anchor" href="#十进制基本概念" aria-hidden="true">#</a> 十进制基本概念</h3><p>145，被理解为“一百四十五” ，但是145并不是一个“数”，而只是一个数的代码，是这个数的*“书写方式”*</p><p>三、叁、three、3、|||、III、***、 丙、等等很多书写方式，其实都可以表达同样的数学上的数字概念。</p><p>阿拉伯数字用10，而罗马数字用X，来表达同一个数学概念。</p><p>我们所说的“一百四十五”，其实只是一种表达方式：阿拉伯式的表达，也即使十进制。</p><h3 id="十进制规则总结" tabindex="-1"><a class="header-anchor" href="#十进制规则总结" aria-hidden="true">#</a> 十进制规则总结</h3><p>归纳起来： <i class="icon-ok-sign"></i> 十进制数使用数字 0~9 <i class="icon-ok-sign"></i> 每一位的【权】是$10^n$。 <i class="icon-ok-sign"></i> 用两位数可表示的最大数为99。也就是说，用n位数表示的范围是：0 ... n个9。共10的n次方个。</p><p>十进制的普及不是偶然的，但是我们可以使用不同的进制。</p><p><code>注</code>，进制不同，只是书写效果的不同。不同的书写方式，可以表达同一个“数”的数学概念。</p><h3 id="进制规则的推广" tabindex="-1"><a class="header-anchor" href="#进制规则的推广" aria-hidden="true">#</a> 进制规则的推广</h3><p>按照十进制中总结的数学规则，可以这样描述 <strong>八进制</strong>： <i class="icon-ok-sign"></i> 可用的数字为 0~7 <i class="icon-ok-sign"></i> 各位的权是$8^n$：$8^0$，$8^1$，$8^2$，$8^3$，$8^4$ 等。 <i class="icon-ok-sign"></i> 用两位数可表示的最大数为77。也就是说，用n位八进制数表示的范围是：0 ... n个7，共$8^n$个。</p><p><code>练习</code>，描述六进、七进制和九进制。</p><p><strong>十进制</strong>：</p><table><thead><tr><th style="text-align:center;">位数</th><th style="text-align:center;">第4位</th><th style="text-align:center;">第3位</th><th style="text-align:center;">第2位</th><th style="text-align:center;">第1位</th></tr></thead><tbody><tr><td style="text-align:center;">位权</td><td style="text-align:center;">$10^3$</td><td style="text-align:center;">$10^2$</td><td style="text-align:center;">$10^1$</td><td style="text-align:center;">$10^0$</td></tr><tr><td style="text-align:center;">值</td><td style="text-align:center;">1000</td><td style="text-align:center;">100</td><td style="text-align:center;">10</td><td style="text-align:center;">1</td></tr></tbody></table><p><strong>七进制</strong>：</p><table><thead><tr><th style="text-align:center;">位</th><th style="text-align:center;">第4位</th><th style="text-align:center;">第3位</th><th style="text-align:center;">第2位</th><th style="text-align:center;">第1位</th></tr></thead><tbody><tr><td style="text-align:center;">位权</td><td style="text-align:center;">$7^3$</td><td style="text-align:center;">$7^2$</td><td style="text-align:center;">$7^1$</td><td style="text-align:center;">$7^0$</td></tr><tr><td style="text-align:center;">等价十进制</td><td style="text-align:center;">343</td><td style="text-align:center;">49</td><td style="text-align:center;">7</td><td style="text-align:center;">1</td></tr></tbody></table><h3 id="重点结论" tabindex="-1"><a class="header-anchor" href="#重点结论" aria-hidden="true">#</a> 重点结论</h3><p>同样的书写方式 <code>200</code>：</p><ul><li>十进制表示的数值是 2 个 100，而</li><li>七进制表示的数值 2 个 49</li></ul><p>为了表达 <code>50</code> 这个数值：</p><ul><li>十进制的书写格式是 50 ，而</li><li>七进制的书写格式是 101 ，</li><li>八进制的书写方式是 62</li></ul><p>所以：</p><ul><li><p><strong>在不同的进制之间，同样的『书写方式』表达的数学值并不一样</strong>；</p></li><li><p><strong>而要表达同样的数学值，『书写方式』是不一样的</strong>。</p></li></ul><h3 id="二进制" tabindex="-1"><a class="header-anchor" href="#二进制" aria-hidden="true">#</a> 二进制</h3><p>二进制是这一概念推广的最终产物。</p><table><thead><tr><th style="text-align:center;">位</th><th style="text-align:center;">第8位</th><th style="text-align:center;">第7位</th><th style="text-align:center;">第6位</th><th style="text-align:center;">第5位</th><th style="text-align:center;">第4位</th><th style="text-align:center;">第3位</th><th style="text-align:center;">第2位</th><th style="text-align:center;">第位</th></tr></thead><tbody><tr><td style="text-align:center;">位权</td><td style="text-align:center;">$2^7$</td><td style="text-align:center;">$2^6$</td><td style="text-align:center;">$2^5$</td><td style="text-align:center;">$2^4$</td><td style="text-align:center;">$2^3$</td><td style="text-align:center;">$2^2$</td><td style="text-align:center;">$2^1$</td><td style="text-align:center;">$2^0$</td></tr><tr><td style="text-align:center;">等价十进制</td><td style="text-align:center;">128</td><td style="text-align:center;">64</td><td style="text-align:center;">32</td><td style="text-align:center;">16</td><td style="text-align:center;">8</td><td style="text-align:center;">4</td><td style="text-align:center;">2</td><td style="text-align:center;">1</td></tr></tbody></table><p>计算机根本不认识字母、数字、指令或程序，在它的内部只是一些电路，某个电路的节点上要么有很多电，要么几乎没有电。</p><p>在硬件上，硬件工程师不太容易表示：<code>少点电</code> - <code>一些点</code> - <code>较多电 </code>- <code>许多电</code> - <code>大量电</code> 这样的多状态。 反而很容易也更稳妥地实现：<code>有电</code> - <code>没电</code> 的两状态。所以二进制的本质就是：用 1 和 0 可以代表每一段电路的真实状态。</p><p>因为早期的计算机一次处理 8 位，所以很自然的将 8 位大小的长度称为 <strong>字节</strong>。</p><p>用 8 位二进制数可以表示 256 个不同的值。如果 8 位都为 1，则对应的十进制值是 255；如果 8 为都是 0，则对应的十进制值是 0，从 0~255 一共有 256 种可能的状态（数据）。</p><p>1 <strong>byte</strong> = 8 <strong>bit</strong> 1 <strong>KB</strong> = $2^{10}$ byte 1 <strong>MB</strong> = $2^{10}$ KB = $2^{20}$ byte 1 <strong>GB</strong> = $2^{10}$ MB = $2^{20}$ KB = $2^{30}$ byte</p><p>$2^{10}$ = 1024</p><h3 id="十六进制" tabindex="-1"><a class="header-anchor" href="#十六进制" aria-hidden="true">#</a> 十六进制</h3><p>因为二进制数难于阅读，于是人们想出了一种更为简单的方式来表达相同的值。 从二进制转换成十进制设计到大量的数的操作，但是从二进制转换成十六进制就很简单。</p><p>十六进制中有十六个数字：0,1,2,3,4,5,6,7,8,9,a,b,c,d,e,f。 用a表示比9大1的数，其值相当于十进制中的10 用b表示比a大1的数，其值相当于十进制中的11 用c表示比b大1的数，其值相当于十进制中的12 用d表示比c大1的数，其值相当于十进制中的13 用e表示比d大1的数，其值相当于十进制中的14 用f表示比e大1的数，其值相当于十进制中的15</p><p>也就是说，有些数学概念上的数值，十进制中需要用两位数表示，但是十六进制用一位数就能表示</p><table><thead><tr><th style="text-align:center;">位</th><th style="text-align:center;">第4位</th><th style="text-align:center;">第3位</th><th style="text-align:center;">第2位</th><th style="text-align:center;">第1位</th></tr></thead><tbody><tr><td style="text-align:center;">位权</td><td style="text-align:center;">$16^3$</td><td style="text-align:center;">$16^2$</td><td style="text-align:center;">$16^1$</td><td style="text-align:center;">$16^0$</td></tr><tr><td style="text-align:center;">等价十进制</td><td style="text-align:center;">4096</td><td style="text-align:center;">256</td><td style="text-align:center;">16</td><td style="text-align:center;">1</td></tr></tbody></table><p><code>诀窍</code>：一个字节中的 8 位 2 进制数，分成两组 4 位，正好每一组 4 位二进制数等价于 1 位十六进制数。</p><h2 id="unicode-编码" tabindex="-1"><a class="header-anchor" href="#unicode-编码" aria-hidden="true">#</a> Unicode 编码</h2><h3 id="java-文件和-class-文件的字符编码" tabindex="-1"><a class="header-anchor" href="#java-文件和-class-文件的字符编码" aria-hidden="true">#</a> <code>.java</code> 文件和 <code>.class</code> 文件的字符编码</h3><p>java 源文件<small>（.java）</small>和编译后的 .class 文件的编码并不一样。</p><p>源文件 .java 可以采用多种编码格式，如</p><ul><li>UTF-8<small>（unix linux 平台默认）</small>。或者</li><li>GBK<small>（windows 平台默认）</small>。</li></ul><p>之所以有<small>（可以有）</small>多种编码格式，是因为源文件毕竟是给『<strong>人</strong>』看的，不是给 jvm 看的，它用什么编码格式 jvm 根本就不关心。</p><p>当将源码用 <strong>javac</strong> 编译的时候，默认是 <strong>javac</strong> 按照系统默认的编码格式读取 java 源文件，然后以 <strong>utf-8</strong> 的格式输出到 .class 文件中。</p><p>换句话说，在默认情况下</p><ul><li><p>unix 平台，javac 用 utf-8 格式读取 java 源文件 然后以 utf-8 格式写 .class；</p></li><li><p>在默认情况下 windows 平台，javac 用 gbk 格式读取 java 源文件然后以 utf-8 格式写 .class 。</p></li></ul><p>所以，中文字符乱码的根本原因在于，你<small>（有意或无意）</small>没有使用默认编码规则存储 .java 文件，而 javac 却又是按照默认规则去读 .java 文件，这就出现了乱码。</p><p>例如， 在 windows 平台下用 utf-8 格式保存 java 源文件， 那么你在执行 javac 命令编译源文件时，你需要『告诉』javac 命令，你要编译的源文件的编码格式。否则，会有乱码问题。</p><h3 id="java-中字符串的长度" tabindex="-1"><a class="header-anchor" href="#java-中字符串的长度" aria-hidden="true">#</a> Java 中字符串的长度</h3><p>在 Java 中一个字符串的长度并『<strong>不能</strong>』简单地、想当然的想象成是其中所有字符数的累加和！</p><p>以下内容来自 stackoverflow 中的总结和解释</p><ul><li><p>A Java char takes always 16 bits.</p></li><li><p>A Unicode character, when encoded as UTF-16, takes “almost always” (not always) 16 bits: that’s because there are more than 64K unicode characters. Hence, a Java char is NOT a Unicode character (though “almost always” is).</p></li><li><p>“Almost always”, above, means the 64K first code points of Unicode, range 0x0000 to 0xFFF (BMP), which take 16 bits in the UTF-16 encoding.</p></li><li><p>A non-BMP (“rare”) Unicode character is represented as two Java chars (surrogate representation). This applies also to the literal representation as a string: For example, the character U+20000 is written as “\\uD840\\uDC00”.</p></li><li><p>Corolary: string.length() returns the number of java chars, not of Unicode chars. A string that has just one “rare” unicode character (eg U+20000) would return length() = 2 . Same consideration applies to any method that deals with char-sequences.</p></li><li><p>Java has little intelligence for dealing with non-BMP unicode characters as a whole. There are some utility methods that treat characters as code-points, represented as ints eg: Character.isLetter(int ch). Those are the real fully-Unicode methods.</p></li></ul><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token string">&quot;\\uD840\\uDC00&quot;</span><span class="token punctuation">;</span>\n<span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token string">&quot;𠀀&quot;</span><span class="token punctuation">;</span>\n\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">isLetter</span><span class="token punctuation">(</span>str2<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="中日韩文的-unicode-码点" tabindex="-1"><a class="header-anchor" href="#中日韩文的-unicode-码点" aria-hidden="true">#</a> 中日韩文的 UniCode 码点</h3><p>https://codepoints.net/planes</p><p>CJK 的意思是 <em><code>Chinese，Japanese，Korea</code></em> 的简写 ，实际上就是指中日韩三国文字<small>（象形文字）</small>的 Unicode 编码。</p><table><thead><tr><th style="text-align:left;">字符集</th><th style="text-align:left;">Unicode 编码</th><th style="text-align:left;">标识</th></tr></thead><tbody><tr><td style="text-align:left;">部首扩展</td><td style="text-align:left;">2E80 - 2EFF</td><td style="text-align:left;">CJK Radicals Supplement</td></tr><tr><td style="text-align:left;">康熙部首</td><td style="text-align:left;">2F00 - 2FDF</td><td style="text-align:left;">Kangxi Radicals</td></tr><tr><td style="text-align:left;">汉字结构</td><td style="text-align:left;">2FF0 - 2FFF</td><td style="text-align:left;">Ideographic Description Characters</td></tr><tr><td style="text-align:left;"><strong>汉语标点符号</strong></td><td style="text-align:left;"><strong>3000 - 303F</strong></td><td style="text-align:left;"><strong>CJK Symbols and Punctuation</strong></td></tr><tr><td style="text-align:left;">日语注音</td><td style="text-align:left;">3100-3120</td><td style="text-align:left;">Bopomofo</td></tr><tr><td style="text-align:left;">注音扩展</td><td style="text-align:left;">31A0-31BA</td><td style="text-align:left;">Bopomofo Extended</td></tr><tr><td style="text-align:left;">汉字笔画</td><td style="text-align:left;">31C0-31EF</td><td style="text-align:left;">CJK Strokes</td></tr><tr><td style="text-align:left;">扩展 A</td><td style="text-align:left;">3400 - 4DBF</td><td style="text-align:left;">CJK Unified Ideographs Extension A</td></tr><tr><td style="text-align:left;"><strong>基本汉字</strong></td><td style="text-align:left;"><strong>4E00 - 9FFF</strong></td><td style="text-align:left;"><strong>CJK Unified Ideographs</strong></td></tr><tr><td style="text-align:left;">兼容汉字</td><td style="text-align:left;">F900- FAD9</td><td style="text-align:left;">CJK Compatibility Ideographs</td></tr><tr><td style="text-align:left;">全角半角字母符号</td><td style="text-align:left;">FF00 - FFEF</td><td style="text-align:left;">Halfwidth and Fullwidth Forms</td></tr><tr><td style="text-align:left;">扩展 B</td><td style="text-align:left;">20000-2A6DF</td><td style="text-align:left;">CJK Unified Ideographs Extension B</td></tr><tr><td style="text-align:left;">扩展 C</td><td style="text-align:left;">2A700-2B73F</td><td style="text-align:left;">CJK Unified Ideographs Extension C</td></tr><tr><td style="text-align:left;">扩展 D</td><td style="text-align:left;">2B740-2B81F</td><td style="text-align:left;">CJK Unified Ideographs Extension D</td></tr><tr><td style="text-align:left;">兼容扩展</td><td style="text-align:left;">2F800-2FA1F</td><td style="text-align:left;">CJK Compatibility Ideographs Supplement</td></tr></tbody></table><h3 id="java-完美判断中文字符的方案" tabindex="-1"><a class="header-anchor" href="#java-完美判断中文字符的方案" aria-hidden="true">#</a> Java 完美判断中文字符的方案</h3><p><small>方案/思路是 ok 的，细节可以再调整。</small></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// 根据 Unicode 编码完美的判断中文汉字和符号 </span>\n<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isChinese</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span> \n    <span class="token class-name">Character<span class="token punctuation">.</span>UnicodeBlock</span> ub <span class="token operator">=</span> <span class="token class-name">Character<span class="token punctuation">.</span>UnicodeBlock</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> \n    <span class="token keyword">if</span> <span class="token punctuation">(</span>ub <span class="token operator">==</span> <span class="token class-name">Character<span class="token punctuation">.</span>UnicodeBlock</span><span class="token punctuation">.</span>CJK_UNIFIED_IDEOGRAPHS \n            <span class="token operator">||</span> ub <span class="token operator">==</span> <span class="token class-name">Character<span class="token punctuation">.</span>UnicodeBlock</span><span class="token punctuation">.</span>CJK_COMPATIBILITY_IDEOGRAPHS \n            <span class="token operator">||</span> ub <span class="token operator">==</span> <span class="token class-name">Character<span class="token punctuation">.</span>UnicodeBlock</span><span class="token punctuation">.</span>CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A \n            <span class="token operator">||</span> ub <span class="token operator">==</span> <span class="token class-name">Character<span class="token punctuation">.</span>UnicodeBlock</span><span class="token punctuation">.</span>CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B \n            <span class="token operator">||</span> ub <span class="token operator">==</span> <span class="token class-name">Character<span class="token punctuation">.</span>UnicodeBlock</span><span class="token punctuation">.</span>CJK_SYMBOLS_AND_PUNCTUATION \n            <span class="token operator">||</span> ub <span class="token operator">==</span> <span class="token class-name">Character<span class="token punctuation">.</span>UnicodeBlock</span><span class="token punctuation">.</span>HALFWIDTH_AND_FULLWIDTH_FORMS \n            <span class="token operator">||</span> ub <span class="token operator">==</span> <span class="token class-name">Character<span class="token punctuation">.</span>UnicodeBlock</span><span class="token punctuation">.</span>GENERAL_PUNCTUATION<span class="token punctuation">)</span> <span class="token punctuation">{</span> \n        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> \n    <span class="token punctuation">}</span> \n    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span> \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="三种空格" tabindex="-1"><a class="header-anchor" href="#三种空格" aria-hidden="true">#</a> 三种空格</h3><table><thead><tr><th style="text-align:left;">空格</th><th style="text-align:left;">Unicode 码</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">不间断空格</td><td style="text-align:left;"><code>\\u00A0</code></td><td style="text-align:left;">主要用在 office 中，让一个单词在结尾处不会换行显示，快捷键 ctrl+shift+space</td></tr><tr><td style="text-align:left;">半角空格<small>（英文符号）</small></td><td style="text-align:left;"><code>\\u0020</code></td><td style="text-align:left;">代码中常用的</td></tr><tr><td style="text-align:left;">全角空格<small>（中文符号）</small></td><td style="text-align:left;"><code>\\u3000</code></td><td style="text-align:left;">中文文章中使用</td></tr></tbody></table><h2 id="classpath-在哪" tabindex="-1"><a class="header-anchor" href="#classpath-在哪" aria-hidden="true">#</a> Classpath 在哪？</h2><pre><code>src 目录就是 classpath 。这个说法对不对？\n</code></pre><h3 id="什么叫-classpath" tabindex="-1"><a class="header-anchor" href="#什么叫-classpath" aria-hidden="true">#</a> 什么叫 Classpath？</h3><p>Classpath 就是『<strong>字面含义</strong>』！指的就是放项目的 <code>.class</code> 文件的文件夹<small>（位置）</small>。</p><h4 id="java-项目的-classpath" tabindex="-1"><a class="header-anchor" href="#java-项目的-classpath" aria-hidden="true">#</a> Java 项目的 Classpath</h4><p>对于 java 项目，<strong>.class</strong> 文件在项目编译后出现的 <strong>bin</strong> 目录下。</p><p>这个目录下的内容是：</p><ul><li><p>与包名一致的目录层次结构</p></li><li><p><strong>.class</strong> 文件</p></li></ul><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Java 项目\n│── ...\n└── bin\n    └── com\n        └── softeem\n            └── App.class\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h4 id="java-web-项目的-classpath" tabindex="-1"><a class="header-anchor" href="#java-web-项目的-classpath" aria-hidden="true">#</a> Java Web 项目的 Classpath</h4><p>对于 java-web 项目，<strong>.class</strong> 文件在项目编译后出现的 <strong>build/classes</strong> 下。</p><p>这个目录下的内容是：</p><ul><li><p>与包名一致的目录层次结构</p></li><li><p><strong>.class</strong> 文件</p></li></ul><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Java Web 项目\n│── ...\n└── build\n    └── classes\n        └── com\n            └── softeem\n                └── App.class\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><strong>这两个文件夹<small>（的位置）</small>才是名副其实的 Classpath 。</strong></p><p>###『src 目录就是 Classpath』不对</p><p>原因很简单，src 目录下根本就没有 <em>.class</em> 文件！</p><p>一个根本就没有 <em>.class</em> 文件的文件夹 <strong>根本不可能</strong> / <strong>没有资格</strong> 是 Classpath 。</p><p>###『src 目录就是 Classpath』有一定道理</p><p>在编译项目时，编译器<small>（或开发工具）</small>是对 src 下的内容进行编译，而后再将编译的结果『搬运』到 Classpath 下。</p><p>那么也即是说，<strong>src</strong> 和 Classpath 是有对应关系的！</p><ul><li><p><strong>src</strong> 下的目录结构<small>（即包结构）</small>与 Classpath 下的目录结构<small>（即包结构）</small>是一样的。</p></li><li><p><strong>src</strong> 下出现的 <strong>.java</strong> 文件，在 Classpath 下就是对应的 <strong>.class</strong> 文件。</p></li><li><p><strong>src</strong> 下出现的配置文件<small>（<strong>.xml</strong> 和 <strong>.properties</strong>）</small>会被『搬运』到 Classpath 下的同样位置。</p></li></ul><p>因为 <strong>src</strong> 和 Classpath 的对应关系，所以，说 <strong>src</strong> 就是 Classpath<small>（从最终的效果上看）</small><strong>勉强也算对</strong>。</p><h3 id="有对应关系的文件夹可以不止一个" tabindex="-1"><a class="header-anchor" href="#有对应关系的文件夹可以不止一个" aria-hidden="true">#</a> 有对应关系的文件夹可以不止一个</h3><p><strong>src</strong> 和 Classpath 的对应关系并非唯一。你可以去设置更多的文件夹与 Classpath 的对应关系。</p><p>未来编译器在编译项目时，会将这 N 个配置文件的内容编译并『搬运』到 Classpath 中。</p><h2 id="契约式编程与防御式编程" tabindex="-1"><a class="header-anchor" href="#契约式编程与防御式编程" aria-hidden="true">#</a> 契约式编程与防御式编程</h2><h3 id="防御式编程" tabindex="-1"><a class="header-anchor" href="#防御式编程" aria-hidden="true">#</a> 防御式编程</h3><p>对于<strong>防御式编程</strong>，<em>《代码大全》</em> 给我们提供了一个定义：</p><blockquote><p>    人类都是不安全、不值得信任的，所有的人，都会犯错误，而你写的代码，应该考虑到所有可能发生的错误，让你的程序不会因为他人的错误而发生错误。</p></blockquote><p>程序需要对可能的错误输入，你需要作出预防。预防的手段可以有如下两种：</p><ul><li><p>做出兼容，允许本轮执行。（例如，参数字符串不允许为 null，如果传入 null，我给它一个默认值：&quot;&quot;，以替代它的原始值 null）</p></li><li><p>错误提示，终止本轮执行，提示重新再来。</p></li></ul><p>简而言之，防御式编程，就是持怀疑态度审视所有的代码：『总有刁民想害朕』。</p><h3 id="契约式编程" tabindex="-1"><a class="header-anchor" href="#契约式编程" aria-hidden="true">#</a> 契约式编程</h3><p>什么是<strong>契约式编程</strong>？</p><blockquote><p>     简单的说，契约作用于两方，每一方都会完成一些任务，从而促成契约的达成，但同时，每一方也会接受一些义务，作为制定契约的前提，有任意一方无视了必尽义的义务，则契约失败。</p></blockquote><p>契约式编程要求我们在『<strong>前提条件</strong>』、『<strong>后继条件</strong>』和『<strong>不变量条件</strong>』进行契约的检查。类似的，例如检查参数，一旦参数不对，当即撕毁契约。</p><p>契约所约束的，是『<strong>一个为了确保程序正常运行的条件</strong>』，一旦契约被损毁，只有一个原因，那就是程序出了 Bug。</p><p>例如，一个参数，在我处理的时候，必须保证是不为空的。那么谁来保证这一点呢？一定是我的调用方（或者说是其它模块），所以，一旦出现问题，应该由调用方来检查，确保调用的时候，必须是不为空的。</p><p>契约式编程可以严格区分责任，让每个人都不必为了迁就他人的错误而进行『艰难的编码』。每个人按照契约处理好自己的事情，让损毁契约的人承担责任。</p>',105),n={render:function(t,a){return s}}}}]);