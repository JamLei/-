"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[8902],{90997:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-23514031",path:"/spring-mvc/05-SSM%E6%95%B4%E5%90%88-Java%E4%BB%A3%E7%A0%81%E9%85%8D%E7%BD%AE.html",title:"SSM 整合（代码配置）",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"基本形式",slug:"基本形式",children:[]},{level:2,title:"无 web.xml 的理论基础",slug:"无-web-xml-的理论基础",children:[]},{level:2,title:"WebInitializer 替代 web.xml",slug:"webinitializer-替代-web-xml",children:[]},{level:2,title:"SpringWebConfig 替代 spring-web.xml",slug:"springwebconfig-替代-spring-web-xml",children:[]},{level:2,title:"配置『静态资源不拦截』",slug:"配置『静态资源不拦截』",children:[]},{level:2,title:"配置 URL 后缀生效/失效",slug:"配置-url-后缀生效-失效",children:[]},{level:2,title:"整合 Service 层",slug:"整合-service-层",children:[]},{level:2,title:"整合 Dao 层",slug:"整合-dao-层",children:[]},{level:2,title:"Mybatis 相关配置文件",slug:"mybatis-相关配置文件",children:[]},{level:2,title:"其它",slug:"其它",children:[]}],filePathRelative:"spring-mvc/05-SSM整合-Java代码配置.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},21709:(n,s,a)=>{a.r(s),a.d(s,{default:()=>t});const p=(0,a(66252).uE)('<h1 id="ssm-整合-代码配置" tabindex="-1"><a class="header-anchor" href="#ssm-整合-代码配置" aria-hidden="true">#</a> SSM 整合（代码配置）</h1><h2 id="基本形式" tabindex="-1"><a class="header-anchor" href="#基本形式" aria-hidden="true">#</a> 基本形式</h2><p>Spring 的 Java 代码配置与 XML 配置文件配置有对应关系，本质上太大区别。</p><p>核心关键点有两处：</p><ul><li><p><strong>.xml</strong> 配置文件演变为一个配置类，其头上标注 <strong>@Configuation</strong> 注解；</p></li><li><p><strong>&lt;bean&gt;</strong> 配置演变为配置类中的一个方法，其头上标注 <strong>@Bean</strong> 注解。</p></li></ul><h2 id="无-web-xml-的理论基础" tabindex="-1"><a class="header-anchor" href="#无-web-xml-的理论基础" aria-hidden="true">#</a> 无 web.xml 的理论基础</h2><p>为了支持脱离 web.xml，Servlet 定义了一个 <strong>javax.servlet.ServletContainerInitializer</strong> 的接口，并且要求在 Servlet 容器启动 web 项目时，在项目的的 jar 包中的 <strong>META-INF/services</strong> 去找一个名字是它的完全限定名的文件。</p><p>在 Spring MVC 项目中，spring-web 包下的 <strong>META-INF/services</strong> 目录下就存在这样一个 <strong>javax.servlet.ServletContainerInitializer</strong> 的文件。</p><p>按照约定，这个文件的内容可以放 <em>ServletContainerInitializer</em> 接口的实现类的完全限定名，在 Spring MVC 中这个实现了是 <strong>org.springframework.web.SpringServletContainerInitializer</strong> 。</p><p>Servlet 容器在启动时会创建这个文件中所记载的 <em>ServletContainerInitializer</em> 接口的实现类的对象，并调用它的 <strong>onStartup</strong> 。</p><p>在 <strong>SpringServletContainerInitializer</strong> 的 <strong>onStartup</strong> 方法中，它会去查找、调用 Spring MVC 项目中所有 <strong>WebApplicationInitializer</strong> 接口直接<small>（或间接）</small>实现类的 <strong>onStartup</strong> 方法。</p><p>所以，我们需要直接<small>（或间接）</small>实现 <strong>WebApplicationInitializer</strong>，并在 <strong>onStartup</strong> 方法中实现我们曾将在 <em>web.xml</em> 中所实现的内容。</p><h2 id="webinitializer-替代-web-xml" tabindex="-1"><a class="header-anchor" href="#webinitializer-替代-web-xml" aria-hidden="true">#</a> WebInitializer 替代 web.xml</h2><p>当然，我们通常并不会直接实现 <strong>WebApplicationInitializer</strong> 接口，我们可以通过继承 <strong>AbstractAnnotationConfigDispatcherServletInitializer</strong> 来间接实现 <em>WebApplicationInitializer</em> 接口：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebInitializer</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractAnnotationConfigDispatcherServletInitializer</span> <span class="token punctuation">{</span>\n\n    <span class="token comment">// 第一次加载配置时机所加载的配置类。</span>\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">protected</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getRootConfigClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>\n            <span class="token class-name">SpringServiceConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>\n            <span class="token class-name">SpringDaoConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span>\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// 第二次加载配置时机所加载的配置类。 </span>\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">protected</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getServletConfigClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>\n            <span class="token class-name">SpringWebConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span>\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// 设置 DispatcherServlet 的映射</span>\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">protected</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getServletMappings</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token string">&quot;/&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p>考虑到我们曾经在 <strong>web.xml</strong> 中配置过一个 Filter 来解决 GET 请求中文乱码问题，如果要在 <strong>WebInitializer</strong> 中实现同样的效果，则需要多重写一个父类的方法：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>\n<span class="token keyword">protected</span> <span class="token class-name">Filter</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getServletFilters</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Filter</span> encodingFilter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CharacterEncodingFilter</span><span class="token punctuation">(</span><span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Filter</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> \n        encodingFilter \n    <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="springwebconfig-替代-spring-web-xml" tabindex="-1"><a class="header-anchor" href="#springwebconfig-替代-spring-web-xml" aria-hidden="true">#</a> SpringWebConfig 替代 spring-web.xml</h2><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>\n<span class="token annotation punctuation">@EnableWebMvc</span>   <span class="token comment">// 注解驱动</span>\n<span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token string">&quot;xxx.yyy.zzz.web&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 包扫描</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringWebConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>\n\n    <span class="token annotation punctuation">@Bean</span>   <span class="token comment">// 视图解析器</span>\n    <span class="token keyword">public</span> <span class="token class-name">InternalResourceViewResolver</span> <span class="token function">viewResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">InternalResourceViewResolver</span> viewResolver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InternalResourceViewResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        viewResolver<span class="token punctuation">.</span><span class="token function">setPrefix</span><span class="token punctuation">(</span><span class="token string">&quot;/WEB-INF/jsp/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        viewResolver<span class="token punctuation">.</span><span class="token function">setSuffix</span><span class="token punctuation">(</span><span class="token string">&quot;.jsp&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">return</span> viewResolver<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>除了上面三项关键性配置之外，还有一些附加功能配置可供选择。</p><h2 id="配置『静态资源不拦截』" tabindex="-1"><a class="header-anchor" href="#配置『静态资源不拦截』" aria-hidden="true">#</a> 配置『静态资源不拦截』</h2><p><small>当然 DispatcherServlet 配置的是拦截的是『<strong>*.后缀</strong>』形式，那么就不存在静态资源拦截问题。所以，需要考虑静态资源拦截问题时，通常意味着 DispacherServlet 配置的是『<strong>/</strong>』 。另外，通常不会、不建议使用『**/**』 。</small></p><p>实现静态资源不拦截的方式有两种<small>（二选一）</small>，一是启用 <strong>DefaultServletHandler</strong>，二是配置 <strong>ResouceHandler</strong> 。</p><p>配置启用 <strong>DefaultServletHandler</strong> 意味着：像 <strong>.js</strong>、<strong>.css</strong> 这样的 URL 没有 Controller 处理则由 <strong>DefaultServletHandler</strong> 处理，而它的处理方式就是在对应目录下找到这些文件并发送给客户端<small>（浏览器）</small>。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureDefaultServletHandling</span><span class="token punctuation">(</span><span class="token class-name">DefaultServletHandlerConfigurer</span> configurer<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    configurer<span class="token punctuation">.</span><span class="token function">enable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>配置 <strong>ResouceHandler</strong> 就是明确告诉 Spring MVC 当 URL 路径中出现何种关键词<small>（或后缀）</small>时，去哪个路径下找静态资源文件。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>\n<span class="token annotation punctuation">@Override</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addResourceHandlers</span><span class="token punctuation">(</span><span class="token class-name">ResourceHandlerRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    registry\n        <span class="token punctuation">.</span><span class="token function">addResourceHandler</span><span class="token punctuation">(</span><span class="token string">&quot;/css/**&quot;</span><span class="token punctuation">)</span><span class="token comment">// 过滤静态资源路径</span>\n        <span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span><span class="token string">&quot;classpath:/css&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 定位资源</span>\n    registry\n        <span class="token punctuation">.</span><span class="token function">addResourceHandler</span><span class="token punctuation">(</span><span class="token string">&quot;/js/**&quot;</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span><span class="token string">&quot;classpath:/js&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    registry\n        <span class="token punctuation">.</span><span class="token function">addResourceHandler</span><span class="token punctuation">(</span><span class="token string">&quot;/img/**&quot;</span><span class="token punctuation">)</span>\n        <span class="token punctuation">.</span><span class="token function">addResourceLocations</span><span class="token punctuation">(</span><span class="token string">&quot;classpath:/img&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="配置-url-后缀生效-失效" tabindex="-1"><a class="header-anchor" href="#配置-url-后缀生效-失效" aria-hidden="true">#</a> 配置 URL 后缀生效/失效</h2><p><small>常规的 Java Web 一般不会考虑这个问题。在 Restful 的 Java Web 中才会针对『一个奇怪的现象』考虑这个配置。</small></p><p>默认情况下 Spring MVC 会忽略掉 URL 请求中的后缀。也即是说 ，在 URL 中使用 <strong>hello.do</strong> 能触发 <strong>@RequestMapping(&quot;/hello&quot;)</strong> 的执行。</p><p>有时可能需要 Spring MVC 更『严谨』一些。如果是在 <strong>.xml</strong> 配置文件中是配置成这样：</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>path-matching</span> <span class="token attr-name">suffix-pattern</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>false<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>在代码配置中，对等的配置是如下：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configurePathMatch</span><span class="token punctuation">(</span><span class="token class-name">PathMatchConfigurer</span> configurer<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 显而易见，这个值默认是 true 。</span>\n    configurer<span class="token punctuation">.</span><span class="token function">setUseSuffixPatternMatch</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="整合-service-层" tabindex="-1"><a class="header-anchor" href="#整合-service-层" aria-hidden="true">#</a> 整合 Service 层</h2><p>这里通过配置类 <strong>SpringServiceConfig</strong> 来等价替代 <em>spring-service.xml</em> 配置文件。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>\n<span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token string">&quot;xxx.yyy.zzz.service&quot;</span><span class="token punctuation">)</span>   <span class="token comment">// 包扫描</span>\n<span class="token annotation punctuation">@EnableTransactionManagement</span>            <span class="token comment">// 激活/启用事务注解（@Transactional）</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringServiceConfig</span> <span class="token punctuation">{</span>\n\n    <span class="token comment">// txManager</span>\n    <span class="token annotation punctuation">@Bean</span>\n    <span class="token keyword">public</span> <span class="token class-name">DataSourceTransactionManager</span> <span class="token function">transactionManager</span><span class="token punctuation">(</span><span class="token class-name">DataSource</span> dataSource<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">DataSourceTransactionManager</span> manager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceTransactionManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        manager<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> manager<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="整合-dao-层" tabindex="-1"><a class="header-anchor" href="#整合-dao-层" aria-hidden="true">#</a> 整合 Dao 层</h2><p>这里通过配置类 <strong>SpringDaoConfig</strong> 来等价替代 <strong>spring-dao.xml</strong> 配置文件。</p><p>大体上，以下配置类就是 <strong>spring-dao.xml</strong> 配置文件的对等转换结果。不过有一处需要注意的地方。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>\n<span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span><span class="token string">&quot;classpath:jdbc.properties&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringDaoConfig</span> <span class="token punctuation">{</span>\n\n    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;${datasource.driver-class-name}&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> driverClassName<span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;${datasource.url}&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> url<span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;${datasource.username}&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> userName<span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;${datasource.password}&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@Bean</span>   <span class="token comment">// 数据库连接池</span>\n    <span class="token keyword">public</span> <span class="token class-name">HikariDataSource</span> <span class="token function">dataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">HikariDataSource</span> ds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HikariDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        ds<span class="token punctuation">.</span><span class="token function">setDriverClassName</span><span class="token punctuation">(</span>driverClassName<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        ds<span class="token punctuation">.</span><span class="token function">setJdbcUrl</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        ds<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span>userName<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        ds<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> ds<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Bean</span>   <span class="token comment">// sqlSessionFactory</span>\n    <span class="token keyword">public</span> <span class="token class-name">SqlSessionFactoryBean</span> <span class="token function">sqlSessionFactory</span><span class="token punctuation">(</span><span class="token class-name">DataSource</span> dataSource<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>\n        <span class="token class-name">SqlSessionFactoryBean</span> sqlSessionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        sqlSessionFactory<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        sqlSessionFactory<span class="token punctuation">.</span><span class="token function">setConfigLocation</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ClassPathResource</span><span class="token punctuation">(</span><span class="token string">&quot;mybatis/mybatis-config.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        sqlSessionFactory<span class="token punctuation">.</span><span class="token function">setMapperLocations</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PathMatchingResourcePatternResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span><span class="token string">&quot;mybatis/mapper/*.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">return</span> sqlSessionFactory<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@Bean</span>   <span class="token comment">// 包扫描</span>\n    <span class="token keyword">public</span> <span class="token class-name">MapperScannerConfigurer</span> <span class="token function">mapperScannerConfigurer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">MapperScannerConfigurer</span> configurer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MapperScannerConfigurer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        configurer<span class="token punctuation">.</span><span class="token function">setBasePackage</span><span class="token punctuation">(</span><span class="token string">&quot;com.softeem.dao&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> configurer<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br></div></div><p>如果是 <code>spring-dao.xml</code> 无脑改 <code>SpringDaoConfig</code>，那么</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>sqlSessionFactory<span class="token punctuation">.</span><span class="token function">setConfigLocation</span><span class="token punctuation">(</span><span class="token string">&quot;...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nsqlSessionFactory<span class="token punctuation">.</span><span class="token function">setMapperLocations</span><span class="token punctuation">(</span><span class="token string">&quot;...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>为 sqlSessionFactory 的 configLocation 和 mapperLocations 属性赋值时【想当然地】是提供两个字符换（因为 <code>.xml</code> 配置文件中就是如此）。</p><p>但是，在实际中，sqlSessionFactory 的这两个属性需要的是 Resource 对象和 Resource 对象的数组。因此，需要以这两个字符串为依据，生成与之对应的对象和对象的数组，后再使用：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">new</span> <span class="token class-name">ClassPathResource</span><span class="token punctuation">(</span><span class="token string">&quot;mybatis/mybatis-config.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">new</span> <span class="token class-name">PathMatchingResourcePatternResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span><span class="token string">&quot;mybatis/mapper/*.xml&quot;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="mybatis-相关配置文件" tabindex="-1"><a class="header-anchor" href="#mybatis-相关配置文件" aria-hidden="true">#</a> Mybatis 相关配置文件</h2><p>Mybatis 的核心配置文件和映射文件还是需要以 <em><code>.xml</code></em> 形式提供。</p><p>略。</p><h2 id="其它" tabindex="-1"><a class="header-anchor" href="#其它" aria-hidden="true">#</a> 其它</h2><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>\n<span class="token annotation punctuation">@EnableWebMvc</span>\n<span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token string">&quot;com.xja.hemiao.web.controller&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 包扫描</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringWebConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>\n\n\n\n\t<span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;multipartResolver&quot;</span><span class="token punctuation">)</span> <span class="token comment">// bean 必须写 name 属性且必须为 multipartResolver</span>\n\t<span class="token keyword">protected</span> <span class="token class-name">CommonsMultipartResolver</span> <span class="token function">multipartResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token class-name">CommonsMultipartResolver</span> commonsMultipartResolver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CommonsMultipartResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\tcommonsMultipartResolver<span class="token punctuation">.</span><span class="token function">setMaxUploadSize</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\tcommonsMultipartResolver<span class="token punctuation">.</span><span class="token function">setMaxInMemorySize</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\tcommonsMultipartResolver<span class="token punctuation">.</span><span class="token function">setDefaultEncoding</span><span class="token punctuation">(</span><span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token keyword">return</span> commonsMultipartResolver<span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n\n\n\t<span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configureMessageConverters</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HttpMessageConverter</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> converters<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">configureMessageConverters</span><span class="token punctuation">(</span>converters<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token class-name">FastJsonHttpMessageConverter</span> fastConverter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FastJsonHttpMessageConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token class-name">FastJsonConfig</span> fastJsonConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FastJsonConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        fastJsonConfig<span class="token punctuation">.</span><span class="token function">setSerializerFeatures</span><span class="token punctuation">(</span>\n                <span class="token class-name">SerializerFeature<span class="token punctuation">.</span>PrettyFormat</span>\n        <span class="token punctuation">)</span><span class="token punctuation">;</span>\n        fastConverter<span class="token punctuation">.</span><span class="token function">setFastJsonConfig</span><span class="token punctuation">(</span>fastJsonConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        converters<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>fastConverter<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div>',51),t={render:function(n,s){return p}}}}]);