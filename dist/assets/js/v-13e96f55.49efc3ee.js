"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[7915],{19630:(n,a,s)=>{s.r(a),s.d(a,{data:()=>t});const t={key:"v-13e96f55",path:"/spring-boot/07-spring-boot-jpa-a.html",title:"Spring Data JPA 的基本使用",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"基本概念",slug:"基本概念",children:[{level:3,title:"JPA 由来",slug:"jpa-由来",children:[]},{level:3,title:"Spring Data JPA",slug:"spring-data-jpa",children:[]}]},{level:2,title:"快速上手",slug:"快速上手",children:[{level:3,title:"添加依赖",slug:"添加依赖",children:[]},{level:3,title:"添加配置文件",slug:"添加配置文件",children:[]},{level:3,title:"开启 JPA 框架功能",slug:"开启-jpa-框架功能",children:[]},{level:3,title:"实体类",slug:"实体类",children:[]}]},{level:2,title:"UUID 和 ASSIGNED 主键策略（了解、自学）",slug:"uuid-和-assigned-主键策略-了解、自学",children:[]},{level:2,title:"Repository 构建",slug:"repository-构建",children:[]},{level:2,title:"自定义简单的条件查询",slug:"自定义简单的条件查询",children:[]}],filePathRelative:"spring-boot/07-spring-boot-jpa-a.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},66668:(n,a,s)=>{s.r(a),s.d(a,{default:()=>e});const t=(0,s(66252).uE)('<h1 id="spring-data-jpa-的基本使用" tabindex="-1"><a class="header-anchor" href="#spring-data-jpa-的基本使用" aria-hidden="true">#</a> Spring Data JPA 的基本使用</h1><h2 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念" aria-hidden="true">#</a> 基本概念</h2><h3 id="jpa-由来" tabindex="-1"><a class="header-anchor" href="#jpa-由来" aria-hidden="true">#</a> JPA 由来</h3><blockquote><p>从理论上来说，Mybatis 和 Hibernate 并非同一类框架：Mybatis 是半自动 ORM 框架，而 Hibernate 是全自动的。</p></blockquote><p>而从全自动 ORM 框架的角度来将，Hibernate 也非唯一的一个，跟它同类的竞争对手还有：TopLink、JDO 等<small>（虽然市场占有率十分低）</small> 。</p><p>不同的全自动 ORM 框架<small>（这里并不包括 Mybatis）</small>之间，功能是是相似的，但是 API 接口的区别十分大。不便于项目在底层技术实现之间迁移。</p><p>JPA（Java Persistence API）是 Sun 官方提出的 Java 持久化 <strong>规范</strong>。它的出现主要是为了简化现有的持久化开发工作和整合 ORM 技术，提供统一的 API 接口，结束现在 Hibernate、TopLink、JDO 等 ORM 框架各自为营的局面。</p><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>JPA 只是一套规范，不是一套产品。JPA 和 Hibernate、TopLink、JDO 之间的关系，就像 slf4j 和 log4j2、logback 之间的关系一样。</p></div><h3 id="spring-data-jpa" tabindex="-1"><a class="header-anchor" href="#spring-data-jpa" aria-hidden="true">#</a> Spring Data JPA</h3><p>一个项目直接<small>（或间接）</small>使用 Hibernate 有三种方式：</p><ol><li><p>直接使用 Hibernate。</p></li><li><p>直接使用 JPA，间接使用 Hibernate；</p></li><li><p>通过 <strong>spring-data-jpa</strong>，将 JPA（和 Hibernate）整合进 Spring 项目，以一种特定的方式<small>（sprig data）</small>使用 JPA，从而间接使用 Hibernate 。</p></li></ol><p>Spring Data JPA 是 Spring 基于 ORM 框架、JPA 规范的基础上封装的一套 JPA 应用框架。如果说，JPA 简化了 Hibernate 的使用，那么 spring-data-jpa 则是在这个基础上再一次简化了 hibernate，提高了开发效率。<small>Spring Data JPA 让我们摆脱了 DAO 层的操作，基本上所有 CRUD 都可以依赖于它实现。</small></p><p>Spring Data JPA 其实就是要求在 Spirng Data 的体系下使用 JPA。<small>Spring Data JPA 只是 Spring Data 体系中的一员。</small></p><h2 id="快速上手" tabindex="-1"><a class="header-anchor" href="#快速上手" aria-hidden="true">#</a> 快速上手</h2><h3 id="添加依赖" tabindex="-1"><a class="header-anchor" href="#添加依赖" aria-hidden="true">#</a> 添加依赖</h3><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-data-jpa<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="添加配置文件" tabindex="-1"><a class="header-anchor" href="#添加配置文件" aria-hidden="true">#</a> 添加配置文件</h3><div class="language-properties ext-properties line-numbers-mode"><pre class="language-properties"><code><span class="token attr-name">spring.datasource.driver-class-name</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.cj.jdbc.Driver</span>\n<span class="token attr-name">spring.datasource.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://127.0.0.1:3306/scott\\\n    ?useUnicode=true\\\n    &amp;characterEncoding=utf-8\\\n    &amp;useSSL=true\\\n    &amp;serverTimezone=UTC</span>\n<span class="token attr-name">spring.datasource.username</span><span class="token punctuation">=</span><span class="token attr-value">root</span>\n<span class="token attr-name">spring.datasource.password</span><span class="token punctuation">=</span><span class="token attr-value">123456</span>\n\n<span class="token attr-name">spring.jpa.show-sql</span><span class="token punctuation">=</span><span class="token attr-value">true</span>\n<span class="token attr-name">spring.jpa.properties.hibernate.dialect</span><span class="token punctuation">=</span><span class="token attr-value">org.hibernate.dialect.MySQL5Dialect</span>\n<span class="token attr-name">spring.jpa.properties.hibernate.format_sql</span><span class="token punctuation">=</span><span class="token attr-value">true</span>\n<span class="token attr-name">spring.jpa.properties.hibernate.hbm2ddl.auto</span><span class="token punctuation">=</span><span class="token attr-value">update</span>\n\n<span class="token attr-name">logging.level.root</span><span class="token punctuation">=</span><span class="token attr-value">INFO</span>\n<span class="token attr-name">logging.level.xxx.yyy.zzz</span><span class="token punctuation">=</span><span class="token attr-value">DEBUG</span>\n<span class="token attr-name">logging.pattern.console</span><span class="token punctuation">=</span><span class="token attr-value">${CONSOLE_LOG_PATTERN:\\\n  %clr(${LOG_LEVEL_PATTERN:%5p}) \\\n  %clr(|){faint} \\\n  %clr(%-40.40logger{39}){cyan} \\\n  %clr(:){faint} %m%n\\\n  ${LOG_EXCEPTION_CONVERSION_WORD:%wEx}}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p><strong><code>hibernate.hbm2ddl.auto</code></strong> 参数的作用主要用于：自动创建、更新、验证数据库表结构，有四个值。</p><table><thead><tr><th style="text-align:left;">值</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><code>create</code></td><td style="text-align:left;">每次启动项目都会删除上一次创建的 Table，再根据配置重新创建 Table 。<small>这种方式会导致数据库表数据丢失。</small></td></tr><tr><td style="text-align:left;"><code>create-drop</code></td><td style="text-align:left;">本质上和 <code>create</code> 一样，只不过是本次项目结束时就删除 Table 。<small>不用等到下次启动时再删除。</small></td></tr><tr><td style="text-align:left;"><strong><code>update</code></strong></td><td style="text-align:left;"><small>最常用。</small>会以 Model 类的配置为依据，在没有表时建表，在表中没有某列时，新增列。每次启动时都是如此。</td></tr><tr><td style="text-align:left;"><code>validate</code></td><td style="text-align:left;">每次加载 Hibernate 时，会以 Model 类的配置来验证数据库中的表结构，两者必须严格一直<small>（char 和 varchar 都算不一致）</small>。这个过程中不会创建、更新新表。如果不一致会报错。</td></tr></tbody></table><blockquote><p><strong><code>update</code></strong> 对数据库表结构的『更新』仅限于：</p><ul><li>根据 Model 创建一个原本不存在的 Table；</li><li>为已存在的 Table『新增』列。</li></ul><p>不包括</p><ul><li>修改已有列的数据类型；</li><li>新增或修改已有列的约束条件；</li><li>删除 Table 的某列。</li></ul></blockquote><h3 id="开启-jpa-框架功能" tabindex="-1"><a class="header-anchor" href="#开启-jpa-框架功能" aria-hidden="true">#</a> 开启 JPA 框架功能</h3><p>在某个配置类（或入口类）上加上 <em><strong><code>@EnableJpaRepositories(basePackages = &quot;xxx.yyy.zzz.dao&quot;)</code></strong></em> 注解。</p><blockquote><p>经测试，这一步并非必须。不加时 Spring Boot 也会自动启动 JPA 框架功能。而且，默认会扫描入口类平级及下级包，看哪个类『脑袋』上有 <em><strong><code>@Repository</code></strong></em> 注解。</p></blockquote><h3 id="实体类" tabindex="-1"><a class="header-anchor" href="#实体类" aria-hidden="true">#</a> 实体类</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">/*\n * DBMS   - catalog  - schema   - table\n * Mysql  - &lt;no&gt;     - database - table\n * Oracle - database - &lt;no&gt;     - table\n */</span>\n<span class="token annotation punctuation">@Entity</span>\n<span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&quot;表名&quot;</span><span class="token punctuation">,</span> schema <span class="token operator">=</span><span class="token string">&quot;数据库名&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Department</span> <span class="token punctuation">{</span>\n\n  <span class="token annotation punctuation">@Id</span>\n  <span class="token annotation punctuation">@GeneratedValue</span><span class="token punctuation">(</span>strategy <span class="token operator">=</span> <span class="token class-name">GenerationType</span><span class="token punctuation">.</span>IDENTITY<span class="token punctuation">)</span>\n  <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>\n\n  <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>nullable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> unique <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>\n  <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>\n\n  <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>nullable <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>\n  <span class="token keyword">private</span> <span class="token class-name">String</span> location<span class="token punctuation">;</span>\n\n  <span class="token comment">// getter / settet ...</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><ul><li><p>由于默认配置的存在，上述示例省略了默写配置<small>（后续会讲解）</small>。</p></li><li><p><code>@Entity(name=&quot;EntityName&quot;)</code> <strong>必须</strong></p><p>用来标注一个数据库对应的实体，数据库中创建的表名默认和类名一致。其中，name 为可选，对应数据库中一个表，使用此注解标记 JavaBean 是一个 JPA 实体。</p></li><li><p><code>@Table(name=&quot;&quot;, catalog=&quot;&quot;, schema=&quot;&quot;)</code> <em>可选</em></p><p>用来标注一个数据库对应的实体，数据库中创建的表名默认和类名一致。通常和 <code>@Entity</code> 配合使用，只能标注在实体的 class 定义处，表示实体对应的数据库表的信息。</p><p>在数据库理论领域中，DBMS - Catalog - Schema - Table 是四级概念，但不是所有的数据库系统都支持这四级。MySql 就不支持其中的 catalog ，而 schema 就是 mysql 中的 database 。</p></li><li><p><code>@Id</code> <strong>必须</strong></p><p><code>@Id</code> 定义了映射到数据库表的主键的属性，一个实体只能有一个属性被映射为主键。</p></li><li><p><code>@GeneratedValue(strategy=GenerationType, generator=&quot;&quot;)</code> <em>可选</em></p><ul><li><p><code>strategy</code>：表示主键生成策略,有 <code>AUTO</code>、<code>INDENTITY</code>、<code>SEQUENCE</code> 和 <code>TABLE</code> 4 种。</p></li><li><p><code>generator</code>：表示主键生成器的名称。</p></li></ul></li><li><p><code>@Column(name=&quot;user_code&quot;, nullable=false, length=32)</code> <em>可选</em></p><p><code>@Column</code> 描述了数据库表中该字段的详细定义，这对于根据 JPA 注解生成数据库表结构的工具。</p><ul><li><p><code>name</code>：表示数据库表中该字段的名称，默认情形属性名称一致;</p></li><li><p><code>nullable</code>：表示该字段是否允许为 null，默认为 true;</p></li><li><p><code>unique</code>：表示该字段是否是唯一标识，默认为 false;</p></li><li><p><code>length</code>：表示该字段的大小，仅对 String 类型的字段有效。</p></li></ul></li><li><p><code>@Transient</code> <em>可选</em></p><p><code>@Transient</code> 表示该属性并非一个到数据库表的字段的映射，ORM 框架将忽略该属性。</p></li></ul><blockquote><p>另外，<em>@Enumerated</em> 和 <em>@Enumerated</em> 注解在某些场景下可能也会用到。</p></blockquote><p>这些标注于属性上的注解，也可以标注在属性的 get 方法上。注意，不是/不用标注在 set 方法上。</p><h2 id="uuid-和-assigned-主键策略-了解、自学" tabindex="-1"><a class="header-anchor" href="#uuid-和-assigned-主键策略-了解、自学" aria-hidden="true">#</a> UUID 和 ASSIGNED 主键策略（了解、自学）</h2><p>通常 JPA『背后』是 Hibernate，而 Hibernate 除了和上述的一样的 <strong><code>identity</code></strong>、<strong><code>sequence</code></strong> 主键生成策略之外，还有 <strong><code>uuid</code></strong> 和 <strong><code>assigend</code></strong> 两种主键生成策略。</p><p>在 JPA 中使用 Hibernate 的 <strong><code>uuid</code></strong> 和 <strong><code>assigend</code></strong> 策略，需要【多】使用一个注解：<em><strong><code>@GenericGenerator</code></strong></em> 。</p><ul><li><p>strategy = &quot;uuid&quot;：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Id</span>\n<span class="token annotation punctuation">@GeneratedValue</span><span class="token punctuation">(</span>generator <span class="token operator">=</span> <span class="token string">&quot;xxx&quot;</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@GenericGenerator</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;xxx&quot;</span><span class="token punctuation">,</span> strategy <span class="token operator">=</span> <span class="token string">&quot;uuid&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">private</span> <span class="token class-name">String</span> id<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><p>strategy = &quot;assigend&quot;：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Id</span>\n<span class="token annotation punctuation">@GeneratedValue</span><span class="token punctuation">(</span>generator <span class="token operator">=</span> <span class="token string">&quot;yyy&quot;</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@GenericGenerator</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;yyy&quot;</span><span class="token punctuation">,</span> strategy <span class="token operator">=</span> <span class="token string">&quot;assigned&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">private</span> <span class="token class-name">Long</span> id<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li></ul><h2 id="repository-构建" tabindex="-1"><a class="header-anchor" href="#repository-构建" aria-hidden="true">#</a> Repository 构建</h2><blockquote><p>提前声明一点，如果要在 JUnit 中测试 Repository，记得使用 <strong><code>@Transactionl</code></strong> 注解。否则会报错：no session 。</p></blockquote><p>自定义的 <em><strong><code>Repository</code></strong></em> 只要继承 <em><strong><code>JpaRepository</code></strong></em> 即可，就会帮我们自动生成很多内置方法。这是 spring-data-jpa 为我们带来的便利！</p><p>父接口 JpaRepository 要求传入两个泛型参数：</p><ul><li><p>第一个泛型参数是自定义的 Repository 所操作的 <em><code>@Entity</code></em> ；</p></li><li><p>第二个泛型参数是 Entity 的 <em><code>@Id</code></em> 属性类型。</p></li></ul><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Repository</span>\n<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserRepository</span> <span class="token keyword">extends</span> <span class="token class-name">JpaRepository</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><img src="https://hemiao3000.gitee.io/java-note-img/images/spring-boot/img/spring-boot-data-jpa-JpaRepository.png" alt="JpaRepository"></p><p><em><strong><code>JpaRepository</code></strong></em> 继承 PagingAndSortingRepository 和 QueryByExampleExecutor。PagingAndSortingRepository 又继承了 CrudRepository 。</p><table><thead><tr><th style="text-align:left;">祖先</th><th style="text-align:left;">作用</th></tr></thead><tbody><tr><td style="text-align:left;">CrudRepository</td><td style="text-align:left;">内置了我们最常用的增、删、改、查的方法。</td></tr><tr><td style="text-align:left;">PagingAndSortingRepository</td><td style="text-align:left;">在 CrudRepository 基础上负责排序和分⻚</td></tr><tr><td style="text-align:left;">QueryByExampleExecutor</td><td style="text-align:left;">提供了很多示例的查询方法。</td></tr></tbody></table><p>因此使用 JPA 操作数据库时，只需要构建的 Repository 继承了 <em><strong><code>JpaRepository</code></strong></em>，就会拥有了很多常用的数据库操作方法。常用的方法有：</p><ul><li><p>增/改</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>repository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>entity<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>添加和修改功能都是使用 <em><code>.save()</code></em> 方法。</p><p>有一点需要注意的是，对于修改而言，要先执行查询，再对查询到的 Entity 进行修改，而后再调用 <em><code>.save()</code></em> 方法。</p></li><li><p>删</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>repository<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>entity<span class="token punctuation">)</span><span class="token punctuation">;</span>\nrepository<span class="token punctuation">.</span><span class="token function">deleteById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>删除常见两种：先执行查询，再对查询到的 Entity 调用 <em><code>.delete</code></em> 方法进行删除；另一种是直接提供 Entity 的 ID 进行删除。</p></li><li><p>查</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>repository<span class="token punctuation">.</span><span class="token function">getOne</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>\nrepository<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>\nrepository<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><em><code>.getOne()</code></em> 和 <em><code>findById()</code></em> 都是根据 ID 进行查询。区别在于：查不到时，<em><code>.getOne()</code></em> 抛出 <em><strong><code>EntityNotFoundException</code></strong></em> 异常，而 <em><code>.findById()</code></em> 查不查得到都是返回 <em><strong><code>Optional&lt;&gt;</code></strong></em> 。</p><p>补充一点，在 Repository 的继承体系中 QueryByExampleExecutor 提供了通过 Example 对象进行条件查询。不过，它用起来还是相对比较繁琐，因此，通常使用的是其它方案来实现各种条件查询。这也是 spring-data-jpa 对 JPA 的改进之处。</p></li></ul><h2 id="自定义简单的条件查询" tabindex="-1"><a class="header-anchor" href="#自定义简单的条件查询" aria-hidden="true">#</a> 自定义简单的条件查询</h2><p>spring-data-jap 还有一个功能非常实用：可以根据方法名自动生产 SQL。比如 <em><code>.findByUserName()</code></em> 会自动生产一个以 <code>userName</code> 为参数的查询方法。只需要在我们自定义的 Repository 中创建好方法，使用的时候直接将接口注入到类中调用即可。</p><ul><li><p>根据用户名查询用户：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">User</span> <span class="token function">findByUserName</span><span class="token punctuation">(</span><span class="token class-name">String</span> userName<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li><p>也可以加一些关键字 And、or：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">User</span> <span class="token function">findByUserNameOrEmail</span><span class="token punctuation">(</span><span class="token class-name">String</span> username， <span class="token class-name">String</span> email<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li><p>修改、删除、统计也是类似语法：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Long</span> <span class="token function">deleteByUserName</span><span class="token punctuation">(</span><span class="token class-name">String</span> userName<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">Long</span> <span class="token function">countByUserName</span><span class="token punctuation">(</span><span class="token class-name">String</span> userName<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><p>基本上 SQL 体系中的关键词都可以使用，如 LIKE 、IgnoreCase、OrderBy：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">findByEmailLike</span><span class="token punctuation">(</span><span class="token class-name">String</span> email<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token class-name">User</span> <span class="token function">findByUserNameIgnoreCase</span><span class="token punctuation">(</span><span class="token class-name">String</span> userName<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token function">findByUserNameOrderByEmailDesc</span><span class="token punctuation">(</span><span class="token class-name">String</span> email<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li></ul><p>可以根据查询的条件不断地添加和拼接，Spring Boot 都可以正确解析和执行，其他使用示例例可以参考下表。</p><p><strong>具体的关键字，使用方法和生产成 SQL 如下表所示</strong></p><table><thead><tr><th style="text-align:left;">Keyword</th><th style="text-align:left;">Sample</th><th style="text-align:left;">JPQL snippet</th></tr></thead><tbody><tr><td style="text-align:left;">And</td><td style="text-align:left;">findByLastnameAndFirstname</td><td style="text-align:left;">… where x.lastname = ?1 and x.firstname = ?2</td></tr><tr><td style="text-align:left;">Or</td><td style="text-align:left;">findByLastnameOrFirstname</td><td style="text-align:left;">… where x.lastname = ?1 or x.firstname = ?2</td></tr><tr><td style="text-align:left;">Is, Equals</td><td style="text-align:left;">findByFirstnameIs, <br>findByFirstnameEquals</td><td style="text-align:left;">… where x.firstname = ?1</td></tr><tr><td style="text-align:left;">Between</td><td style="text-align:left;">findByStartDateBetween</td><td style="text-align:left;">… where x.startDate between ?1 and ?2</td></tr><tr><td style="text-align:left;">LessThan</td><td style="text-align:left;">findByAgeLessThan</td><td style="text-align:left;">… where x.age &lt; ?1</td></tr><tr><td style="text-align:left;">LessThanEqual</td><td style="text-align:left;">findByAgeLessThanEqual</td><td style="text-align:left;">… where x.age &lt;= ?1</td></tr><tr><td style="text-align:left;">GreaterThan</td><td style="text-align:left;">findByAgeGreaterThan</td><td style="text-align:left;">… where x.age &gt; ?1</td></tr><tr><td style="text-align:left;">GreaterThanEqual</td><td style="text-align:left;">findByAgeGreaterThanEqual</td><td style="text-align:left;">… where x.age &gt;= ?1</td></tr><tr><td style="text-align:left;">After</td><td style="text-align:left;">findByStartDateAfter</td><td style="text-align:left;">… where x.startDate &gt; ?1</td></tr><tr><td style="text-align:left;">Before</td><td style="text-align:left;">findByStartDateBefore</td><td style="text-align:left;">… where x.startDate &lt; ?1</td></tr><tr><td style="text-align:left;">IsNull</td><td style="text-align:left;">findByAgeIsNull</td><td style="text-align:left;">… where x.age is null</td></tr><tr><td style="text-align:left;">IsNotNull, NotNull</td><td style="text-align:left;">findByAge(Is)NotNull</td><td style="text-align:left;">… where x.age not null</td></tr><tr><td style="text-align:left;">Like</td><td style="text-align:left;">findByFirstnameLike</td><td style="text-align:left;">… where x.firstname like ?1</td></tr><tr><td style="text-align:left;">NotLike</td><td style="text-align:left;">findByFirstnameNotLike</td><td style="text-align:left;">… where x.firstname not like ?1</td></tr><tr><td style="text-align:left;">StartingWith</td><td style="text-align:left;">findByFirstnameStartingWith</td><td style="text-align:left;">… where x.firstname like ?1 (parameter bound with appended %)</td></tr><tr><td style="text-align:left;">EndingWith</td><td style="text-align:left;">findByFirstnameEndingWith</td><td style="text-align:left;">… where x.firstname like ?1 (parameter bound with prepended %)</td></tr><tr><td style="text-align:left;">Containing</td><td style="text-align:left;">findByFirstnameContaining</td><td style="text-align:left;">… where x.firstname like ?1 (parameter bound wrapped in %)</td></tr><tr><td style="text-align:left;">OrderBy</td><td style="text-align:left;">findByAgeOrderByLastnameDesc</td><td style="text-align:left;">… where x.age = ?1 order by x.lastname desc</td></tr><tr><td style="text-align:left;">Not</td><td style="text-align:left;">findByLastnameNot</td><td style="text-align:left;">… where x.lastname &lt;&gt; ?1</td></tr><tr><td style="text-align:left;">In</td><td style="text-align:left;">findByAgeIn(Collection ages)</td><td style="text-align:left;">… where x.age in ?1</td></tr><tr><td style="text-align:left;">NotIn</td><td style="text-align:left;">findByAgeNotIn(Collection age)</td><td style="text-align:left;">… where x.age not in ?1</td></tr><tr><td style="text-align:left;">TRUE</td><td style="text-align:left;">findByActiveTrue()</td><td style="text-align:left;">… where x.active = true</td></tr><tr><td style="text-align:left;">FALSE</td><td style="text-align:left;">findByActiveFalse()</td><td style="text-align:left;">… where x.active = false</td></tr><tr><td style="text-align:left;">IgnoreCase</td><td style="text-align:left;">findByFirstnameIgnoreCase</td><td style="text-align:left;">… where UPPER(x.firstame) = UPPER(?1)</td></tr></tbody></table><p>『The End』</p>',51),e={render:function(n,a){return t}}}}]);