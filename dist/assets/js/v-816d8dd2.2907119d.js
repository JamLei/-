"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[5256],{69033:(n,a,s)=>{s.r(a),s.d(a,{data:()=>e});const e={key:"v-816d8dd2",path:"/jdbc/02-JDBC%E9%AB%98%E7%BA%A7.html",title:"JDBC 高级",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"获取插入数据的主键",slug:"获取插入数据的主键",children:[]},{level:2,title:"设值 NULL",slug:"设值-null",children:[]},{level:2,title:"处理 Blob（选学）",slug:"处理-blob-选学",children:[]}],filePathRelative:"jdbc/02-JDBC高级.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},18915:(n,a,s)=>{s.r(a),s.d(a,{default:()=>t});const e=(0,s(66252).uE)('<h1 id="jdbc-高级" tabindex="-1"><a class="header-anchor" href="#jdbc-高级" aria-hidden="true">#</a> JDBC 高级</h1><h2 id="获取插入数据的主键" tabindex="-1"><a class="header-anchor" href="#获取插入数据的主键" aria-hidden="true">#</a> 获取插入数据的主键</h2><p>MySQL 支持通过 <code>AUTO_INCREMENT</code> 关键字来实现有它管理/维护主键 ID 的功能。有时你会在向 MySQL 插入一条新数据后向它“询问”该数据的主键。</p><p><code>prepareStatement()</code> 方法有一个两参数重载形式，它的第二个参数形参名为 <code>autoGeneratedKeys</code>。通过向该参数传入 <code>Statement.RETURN_GENERATED_KEYS</code> 表示启用获取主键功能。</p><p>在通过 <code>PreparedStatement</code> 对象执行完 <code>execute()</code> / <code>executeUpdate()</code> 后，调用 <code>PreparedStatement</code> 对象的 <code>getGeneratedKeys()</code> 方法，可以获得一个结果集对象。该结果集仅有一行一列，其值为新插入数据的主键 ID 值。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">&quot;xxxx&quot;</span><span class="token punctuation">;</span>\n\n<span class="token class-name">PreparedStatement</span> pstmt <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token class-name">Statement</span><span class="token punctuation">.</span>RETURN_GENERATED_KEYS<span class="token punctuation">)</span><span class="token punctuation">;</span>\npstmt<span class="token punctuation">.</span><span class="token function">setXXX</span><span class="token punctuation">(</span>xx<span class="token punctuation">,</span> xxx<span class="token punctuation">)</span><span class="token punctuation">;</span>\npstmt<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name">ResultSet</span> rs <span class="token operator">=</span> pstmt<span class="token punctuation">.</span><span class="token function">getGeneratedKeys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Long</span> id <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getLong</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>Statement 对象也有类似方法，及相同处理方案。</p><h2 id="设值-null" tabindex="-1"><a class="header-anchor" href="#设值-null" aria-hidden="true">#</a> 设值 NULL</h2><p>通过 JDBC 的 PreparedStatement 向数据库表字段设值为 NULL，不能直接使用类似 <code>setString(xxx, nlll)</code> 这样的方法。</p><p>JDBC 为此专门提供到了一个 <code>setNull(xxx, Types.XXX)</code> 方法，来为 pst 中第 N 个占位符 的位置写入一个 NULL。</p><p>其中第二个参数是该字段的数据库类型。</p><h2 id="处理-blob-选学" tabindex="-1"><a class="header-anchor" href="#处理-blob-选学" aria-hidden="true">#</a> 处理 Blob<small>（选学）</small></h2><p>BLOB 类型的字段用于存放大量的二进制数据，例如：图片、视频、音频和大型文件等。</p><p>MySQL 的 BLOB 类型细分为：</p><ul><li>TinyBlob，最大 255 字节。</li><li>Blob，最大 65k。</li><li>MediumBlob，最大 16M。</li><li>LongBlob，最大 4G。</li></ul><p>JDBC中，插入 Blob 类型必须使用 PrepareStatement，因为 Blob 类型的数据无法使用字符串拼接。</p><p>调用 <code>setBlob(int index, InputStream inputStream)</code></p>',17),t={render:function(n,a){return e}}}}]);