"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[7295],{25656:(n,a,s)=>{s.r(a),s.d(a,{data:()=>t});const t={key:"v-1375a0ec",path:"/js/JS-03-BOM.html",title:"BOM 和 DOM",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"1. BOM：浏览器对象模型",slug:"_1-bom-浏览器对象模型",children:[]},{level:2,title:"2. DOM：文档对象模型",slug:"_2-dom-文档对象模型",children:[{level:3,title:"1. 核心概念",slug:"_1-核心概念",children:[]},{level:3,title:"2. 选中页面元素",slug:"_2-选中页面元素",children:[]},{level:3,title:"3. 通过亲属关系选中元素",slug:"_3-通过亲属关系选中元素",children:[]},{level:3,title:"4. 操作所选元素",slug:"_4-操作所选元素",children:[]},{level:3,title:"5. 操作 DOM 结构",slug:"_5-操作-dom-结构",children:[]}]},{level:2,title:"3. DOM：事件处理",slug:"_3-dom-事件处理",children:[{level:3,title:"1. 添加事件处理程序",slug:"_1-添加事件处理程序",children:[]},{level:3,title:"2. 常见的事件及其种类",slug:"_2-常见的事件及其种类",children:[]},{level:3,title:"3. EventHandler",slug:"_3-eventhandler",children:[]}]}],filePathRelative:"js/JS-03-BOM.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},24035:(n,a,s)=>{s.r(a),s.d(a,{default:()=>e});const t=(0,s(66252).uE)('<h1 id="bom-和-dom" tabindex="-1"><a class="header-anchor" href="#bom-和-dom" aria-hidden="true">#</a> BOM 和 DOM</h1><h2 id="_1-bom-浏览器对象模型" tabindex="-1"><a class="header-anchor" href="#_1-bom-浏览器对象模型" aria-hidden="true">#</a> 1. BOM：浏览器对象模型</h2><p>在浏览器中使用 JavaScript 时，有一些【天然存在】的对象你可以直接使用，无需你来声明/创建。因为这些对象都是由浏览器创建供你使用。通过这些对象，你可以利用到浏览器的某些功能。</p><p>早期这些【天然可用】的对象、方法等一系列的概念比较混乱，不成体系。后来，为了建立一个统一的概念，HTML 标准中将这些对象都【<strong>收拢于一个叫做 <em>Window</em> 的对象下</strong>】，作为这个对象的各种属性。这整个体系就被称为 <strong>浏览器对象模型</strong>（BOM）。</p><p>window 对象代表着当前浏览器中的窗口。</p><table><thead><tr><th style="text-align:center;">常用属性和方法</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:center;"><em>window.location</em></td><td style="text-align:left;">window 对象当前的URL</td></tr><tr><td style="text-align:center;"><em>window.history</em></td><td style="text-align:left;">指向一个 history 对象，其中包含了本页浏览过的页面的详细记录</td></tr><tr><td style="text-align:center;"><em>window.alert()</em></td><td style="text-align:left;">创建含有消息的对话框</td></tr></tbody></table><p>JavaScript 是单线程语言，但它允许通过设置超时值和间歇时间值来调度代码在特定的时刻执行。</p><p>前者在指定的时间过后执行代码，而后者则是每隔指定的时间就执行一次代码。</p><p>超时调用需要使用 <em><strong>window</strong></em> 对象的 <em><strong>setTimeout()</strong></em> 方法，它接受两个参数：要执行的代码和毫秒数的超时时间。</p><p>调用 <em><strong>setTimeout()</strong></em> 之后，该方法会返回一个数值 ID，用于表示这个超时调用。在调用执行前，可以通过它和 <em><strong>clearTimeout()</strong></em> 方法取消超时调用。</p><p>间歇调用与超时调用类似，只不过它会按照指定的时间间隔重复执行代码，直至间歇调用被取消或者页面被卸载。</p><p>设置间歇调用的方法是 <em><strong>setInterval()</strong></em>，它接受的参数与 <em><strong>setTimeout()</strong></em> 相同：要执行的代码和每次执行之前需要等待的毫秒数。</p><p>取消间歇调用方法和取消超时调用类似，使用 <em><strong>clearInterval()</strong></em> 方法。</p><h2 id="_2-dom-文档对象模型" tabindex="-1"><a class="header-anchor" href="#_2-dom-文档对象模型" aria-hidden="true">#</a> 2. DOM：文档对象模型</h2><h3 id="_1-核心概念" tabindex="-1"><a class="header-anchor" href="#_1-核心概念" aria-hidden="true">#</a> 1. 核心概念</h3><p>当浏览器加载 Web 页面时，会在内存中创建页面的模型。</p><p>创建什么样的对象，这些对象有什么样的属性和方法，对象和对象之间有何种关系，这都是有统一的标准化的规定：DOM 模型。</p><p>DOM 对象与页面上的各种元素之间有明确的一一对应关系，访问和修改 DOM 对象等同于修改页面（视觉效果）。</p><p>DOM 对象的种类有：</p><ul><li>文档节点（Document）</li><li>元素节点（Element）</li><li>属性节点（Attribute）</li><li>文本节点（Text）</li></ul><p><code>注意</code>，HTML 元素的属性习惯性使用单词 <strong>attribute</strong>，编程领域中的对象的属性（也叫特征）则习惯使用单词 <strong>property</strong> 。</p><p><strong>文档节点</strong> 是整棵 DOM 树的顶点，它代表着整个页面。当需要访问任何元素、属性和文本节点时，都需要通过它来进行导航。</p><p><strong>元素节点</strong> 对应着 HTML 页面上的 HTML 元素。对元素节点的访问和操作，就代表着对页面上的 HTML 元素进行访问和操作。HTML 元素的父子关系，也会导致其对应的元素节点间有父子关系。</p><p>HTML 元素的开始标签中可以包含若干属性，这些属性在 DOM 树中形成 <strong>属性节点</strong> 。需要注意的是，属性节点 <strong>并非</strong> 元素节点的子节点。</p><p>当访问元素节点时可以访问元素内部的文本，这些文本保存在其 <strong>文本节点</strong> 中。文本节点是元素节点的子节点，而文本节点自己并没有子节点。如果一个元素包含文本和其它子元素，这些子元素和文本节点即为“兄弟”关系。</p><p>所有的【节点】都有以下关键属性：</p><dl><dt>nodeType</dt><dd>表示该节点的类型</dd><dd>9 代表 Document 节点</dd><dd>1 代表 Element 节点</dd><dd>3 代表 Text 节点</dd><dd>8 代表 Comment 节点</dd></dl><dl><dt>nodeName </dt><dd>元素的标签名，以大写形式表示。</dd></dl><dl><dt>nodeValue </dt><dd>Text 节点的文本内容</dd></dl><h3 id="_2-选中页面元素" tabindex="-1"><a class="header-anchor" href="#_2-选中页面元素" aria-hidden="true">#</a> 2. 选中页面元素</h3><p>访问并更新 DOM 树需要两个步骤：</p><ol><li><p>定位到需要操作的元素所对应的节点。</p></li><li><p>使用它的文本内容、子元素或属性。</p></li></ol><p>常见的访问/定位元素的方法：</p><table><thead><tr><th style="text-align:left;">选中单个元素</th><th style="text-align:left;">选中多个元素</th></tr></thead><tbody><tr><td style="text-align:left;">getElementById()</td><td style="text-align:left;">getElementsByTagName()</td></tr><tr><td style="text-align:left;">querySelector()</td><td style="text-align:left;">getElementByClassName()</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">querySelectorAll()</td></tr></tbody></table><p>关于选择方法的几个注意事项：</p><ol><li><p><em><strong>querySelector()</strong></em> 和 <em><strong>querySelectorAll()</strong></em> 这两个方法是 DOM 原生 API 受 jQuery 的影响，【后来】才有的。</p></li><li><p><em><strong>querySelector()</strong></em> 和 <em><strong>querySelectorAll()</strong></em> 这两个方法的性能比其它三个要差一些，因此，在有其它选择的情况下，尽量不要优先使用它俩。</p></li><li><p>你在使用 <em><strong>querySelector()</strong></em> 时，传给它的参数逻辑上可能会选中页面上的多个元素，但是这个方法只返回所匹配的第一个元素。</p></li><li><p>上述 3 个能选中多个元素的方法的返回值是 <em><strong>NodeList</strong></em><small>（即便其中只有一个元素）</small>，逻辑上，它是所选中的 DOM 对象的集合。</p><p>NodeList 看起来像是数组，它有</p><ul><li><em><code>length</code></em> 属性</li><li><em><code>item()</code></em> 方法</li><li>另外对它可以使用数组的 <code>[]</code> 语法。优先考虑使用它，而非 <em><code>item()</code></em> 方法。</li></ul></li></ol><h3 id="_3-通过亲属关系选中元素" tabindex="-1"><a class="header-anchor" href="#_3-通过亲属关系选中元素" aria-hidden="true">#</a> 3. 通过亲属关系选中元素</h3><p>因为 DOM 树上的元素是以【父子关系】为依据关联在一起的，因此，当你选中某个元素之后，你可以【顺藤摸瓜】地【摸】出很多其它的元素。</p><p>元素之间的关系：</p><table><thead><tr><th style="text-align:left;">父子关系</th><th style="text-align:left;">兄弟关系</th></tr></thead><tbody><tr><td style="text-align:left;">parentNode 属性</td><td style="text-align:left;">previousSibling 属性</td></tr><tr><td style="text-align:left;">firstChild 属性</td><td style="text-align:left;">nextSibling 属性</td></tr><tr><td style="text-align:left;">lastChild 属性</td><td style="text-align:left;"></td></tr></tbody></table><h3 id="_4-操作所选元素" tabindex="-1"><a class="header-anchor" href="#_4-操作所选元素" aria-hidden="true">#</a> 4. 操作所选元素</h3><h4 id="_4-1-读写元素的文本内容" tabindex="-1"><a class="header-anchor" href="#_4-1-读写元素的文本内容" aria-hidden="true">#</a> 4.1 读写元素的文本内容</h4><p>读取元素的文本内容有两种方式：</p><ol><li><p>在获得元素节点（Element Node）之后，通过 Element 的 <em><strong>textContent</strong></em> 属性获得其文本内容。</p></li><li><p>在获得元素节点（Element Node）之后，进一步获得其子元素文本节点（Text Node），通过 Text 的 <em><strong>nodeValue</strong></em> 属性。</p></li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span> el<span class="token punctuation">.</span>textContent <span class="token punctuation">)</span><span class="token punctuation">;</span>\nel<span class="token punctuation">.</span>textContent <span class="token operator">=</span> <span class="token string">&quot;...&quot;</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span> el<span class="token punctuation">.</span>textContent <span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="_4-2-读写元素的-html-内容" tabindex="-1"><a class="header-anchor" href="#_4-2-读写元素的-html-内容" aria-hidden="true">#</a> 4.2 读写元素的 HTML 内容</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span> el<span class="token punctuation">.</span>innerHTML <span class="token punctuation">)</span><span class="token punctuation">;</span>\nel<span class="token punctuation">.</span>textContent <span class="token operator">=</span> <span class="token string">&quot;...&quot;</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span> el<span class="token punctuation">.</span>innerHTML <span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="_4-3-读写元素的-class-id-属性" tabindex="-1"><a class="header-anchor" href="#_4-3-读写元素的-class-id-属性" aria-hidden="true">#</a> 4.3 读写元素的 class / id 属性</h4><table><thead><tr><th style="text-align:left;">操作属性值</th></tr></thead><tbody><tr><td style="text-align:left;">className / id 属性</td></tr><tr><td style="text-align:left;">hasAttribute ( )</td></tr><tr><td style="text-align:left;">getAttribute ( )</td></tr><tr><td style="text-align:left;">setAttribute ( )</td></tr><tr><td style="text-align:left;">removeAttribute ( )</td></tr></tbody></table><h3 id="_5-操作-dom-结构" tabindex="-1"><a class="header-anchor" href="#_5-操作-dom-结构" aria-hidden="true">#</a> 5. 操作 DOM 结构</h3><p>DOM 层次结构操作：</p><ul><li>document.createElement ( )</li><li>document.createTextNode ( )</li><li>document.appendChild ( ) / document.removeChild ( )</li></ul><h4 id="_5-1-添加节点" tabindex="-1"><a class="header-anchor" href="#_5-1-添加节点" aria-hidden="true">#</a> 5.1 添加节点</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">click_handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> textNode <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span><span class="token string">&#39;粒粒皆辛苦&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> liNode <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    liNode<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>textNode<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">var</span> olNode <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&quot;ol&quot;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    olNode<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>liNode<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><ul><li><p><code>document.createTextNode(&#39;...&#39;);</code> createTextNode() 方法创建一个新的文本节点。</p></li><li><p><code>document.createElement(&quot;li&quot;);</code> createElement() 方法创建一个新的元素节点。</p></li><li><p><code>liNode.appendChild(textNode);</code></p></li></ul><h4 id="_5-2-添加节点的另一种方式" tabindex="-1"><a class="header-anchor" href="#_5-2-添加节点的另一种方式" aria-hidden="true">#</a> 5.2 添加节点的另一种方式</h4><p>上面的新增节点的方式比较罗嗦，IE 提出了一个 API 并且被 HTML5 所接纳：<em><strong>.insertAdjacentHTML()</strong></em> 。</p><p><em><strong>insertAdjacentHTML()</strong></em> 不仅可以接纳 Element 对象作为参数，更方便的是它可以接受 html 字符串作为参数。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> ul <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;ul&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nul<span class="token punctuation">.</span><span class="token function">insertAdjacentHTML</span><span class="token punctuation">(</span><span class="token string">&#39;afterbegin&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&lt;li&gt;梨子&lt;/li&gt;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><em><strong>insertAdjacentHTML()</strong></em> 方法的第一个参数是四个固定的字符串，分别代表四种不同的插入位置：</p><table><thead><tr><th style="text-align:left;">参数字符串</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">&quot;beforebegin&quot;</td><td style="text-align:left;">当前元素的开始标签之前</td></tr><tr><td style="text-align:left;">&quot;afterbegin&quot;</td><td style="text-align:left;">当前元素的开始标签之后</td></tr><tr><td style="text-align:left;">&quot;beforeend&quot;</td><td style="text-align:left;">当前元素的结束标签之前</td></tr><tr><td style="text-align:left;">&quot;afterend&quot;</td><td style="text-align:left;">当前元素的结束标签之后</td></tr></tbody></table><h4 id="_5-3-删除节点" tabindex="-1"><a class="header-anchor" href="#_5-3-删除节点" aria-hidden="true">#</a> 5.3 删除节点</h4><p>集合父节点（<em><strong>parentNode</strong></em>），删除一个节点的代码可以写成：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;...&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nel<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="_5-4-清空节点" tabindex="-1"><a class="header-anchor" href="#_5-4-清空节点" aria-hidden="true">#</a> 5.4 清空节点</h4><p>清空节点指的就是删除一个节点下的所有子节点。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;...&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nel<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="_5-5-插入节点" tabindex="-1"><a class="header-anchor" href="#_5-5-插入节点" aria-hidden="true">#</a> 5.5 插入节点</h4><p>【插入节点】可以实现和【添加节点】一样的功能。区别在于，【插入节点】是站在【父子关系】的角度上实现的功能，而【添加节点】是站在【兄弟关系】上实现的。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">click_handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> text <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span><span class="token string">&#39;谁知盘中餐&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> li <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    li<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">var</span> ol <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&#39;ol&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> last_li <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;last&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    ol<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>li<span class="token punctuation">,</span> last_li<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h4 id="_5-6-替换节点" tabindex="-1"><a class="header-anchor" href="#_5-6-替换节点" aria-hidden="true">#</a> 5.6 替换节点</h4><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">click_handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> text <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createTextNode</span><span class="token punctuation">(</span><span class="token string">&#39;谁知盘中餐&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> li <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;li&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    li<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">var</span> ol <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&#39;ol&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> last_li <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;last&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    ol<span class="token punctuation">.</span><span class="token function">replaceChild</span><span class="token punctuation">(</span>li<span class="token punctuation">,</span> last_li<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h4 id="_5-7-dom-和-css" tabindex="-1"><a class="header-anchor" href="#_5-7-dom-和-css" aria-hidden="true">#</a> 5.7 DOM 和 CSS</h4><p>在 DOM 节点对象里，可以找到与 HTML 元素 <code>class</code> 属性对应的 <code>className</code> 属性。<small>（注意，这里不是 DOM 对象的 <code>class</code> 属性，因为 <code>class</code> 是 JavaScript 中的 <strong>保留字</strong>）。</small></p><p>每个 DOM 节点都有一个 <code>style</code> 属性，用于操作该节点的样式。<code>style</code> 属性引用了一个对象，这个对象中有 HTML 元素可能存在的所有属性。例如：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>p<span class="token punctuation">.</span>style<span class="token punctuation">.</span>opacity <span class="token operator">=</span> <span class="token string">&quot;0.0&quot;</span><span class="token punctuation">;</span>\t<span class="token comment">// 不透明度</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="_3-dom-事件处理" tabindex="-1"><a class="header-anchor" href="#_3-dom-事件处理" aria-hidden="true">#</a> 3. DOM：事件处理</h2><p>事件是用户在访问页面时执行的操作。当浏览器探测到一个事件时，比如用鼠标单击或按键，它可以触发与这个事件相关联的 JavaScript 对象，这些对象称为 <strong>事件处理程序</strong>（event handler）。</p><h3 id="_1-添加事件处理程序" tabindex="-1"><a class="header-anchor" href="#_1-添加事件处理程序" aria-hidden="true">#</a> 1. 添加事件处理程序</h3><p>为元素添加事件处理程序的方式有三种：</p><ul><li><p>在 html 元素中指定事件的处理程序：</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">...</span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value javascript language-javascript"><span class="token function">click_handler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">...</span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value javascript language-javascript"><span class="token function">click_handler</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>早期的方案，现在不建议使用。</p></li><li><p>在 javascript 为 onXXX 属性赋值：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  div<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token operator">...</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">&quot;hello&quot;</span> <span class="token operator">...</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div></li><li><p>在 javascript 调用 <em><code>addEventListener()</code></em> 方法：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  div<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>新标准，优先考虑使用。</p></li></ul><p><em><code>addEventListener()</code></em> 有第三个参数，缺省时的默认值是 false 。这个 boolean 参数表示是否开启【捕获期】触发。</p><p>【捕获期】触发意味着只有在本元素上发生了对应事件，由本元素捕获的事件，才触发该执行程序的运行。对于自己的子元素上触发，通过【冒泡】方式引起的事件，则不予理睬。</p><p>对于同一个元素 <em><code>addEventListener()</code></em> 方法可以调用多次，为一个事件绑定多个事件处理程序，而非覆盖。</p><p><em><code>addEventListener()</code></em> 的反向操作是 <em><code>removeEventListener()</code></em> ；</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>div<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> click_handler<span class="token punctuation">)</span><span class="token punctuation">;</span>\ndiv<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> click_handler<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="_2-常见的事件及其种类" tabindex="-1"><a class="header-anchor" href="#_2-常见的事件及其种类" aria-hidden="true">#</a> 2. 常见的事件及其种类</h3><h4 id="_3-1-窗口事件" tabindex="-1"><a class="header-anchor" href="#_3-1-窗口事件" aria-hidden="true">#</a> 3.1 窗口事件</h4><p>当用户执行某些会影响整个浏览器窗口的操作时，就会发生窗口事件。</p><table><thead><tr><th style="text-align:left;">事件名</th><th style="text-align:left;">备注</th></tr></thead><tbody><tr><td style="text-align:left;">load</td><td style="text-align:left;">Web 页面加载完成时触发该事件</td></tr></tbody></table><h4 id="_3-2-鼠标事件" tabindex="-1"><a class="header-anchor" href="#_3-2-鼠标事件" aria-hidden="true">#</a> 3.2 鼠标事件</h4><table><thead><tr><th style="text-align:left;">事件名</th><th style="text-align:left;">备注</th></tr></thead><tbody><tr><td style="text-align:left;">click</td><td style="text-align:left;">点击一个元素时触发</td></tr><tr><td style="text-align:left;">mousedown</td><td style="text-align:left;">在一个元素上按下鼠标按键时触发</td></tr><tr><td style="text-align:left;">mouseup</td><td style="text-align:left;">在一个元素上松开鼠标按键时触发</td></tr><tr><td style="text-align:left;">mousemove</td><td style="text-align:left;">移动鼠标时持续触发</td></tr><tr><td style="text-align:left;">mouseover</td><td style="text-align:left;">鼠标进入一个元素时触发</td></tr><tr><td style="text-align:left;">mouseout</td><td style="text-align:left;">鼠标移出一个元素时触发</td></tr></tbody></table><h4 id="_3-3-焦点事件" tabindex="-1"><a class="header-anchor" href="#_3-3-焦点事件" aria-hidden="true">#</a> 3.3 焦点事件</h4><table><thead><tr><th style="text-align:left;">事件名</th><th style="text-align:left;">备注</th></tr></thead><tbody><tr><td style="text-align:left;">focus</td><td style="text-align:left;">元素得到焦点</td></tr><tr><td style="text-align:left;">blur</td><td style="text-align:left;">元素失去焦点</td></tr></tbody></table><h4 id="_3-4-表单事件" tabindex="-1"><a class="header-anchor" href="#_3-4-表单事件" aria-hidden="true">#</a> 3.4 表单事件</h4><table><thead><tr><th style="text-align:left;">事件名</th><th style="text-align:left;">备注</th></tr></thead><tbody><tr><td style="text-align:left;">input</td><td style="text-align:left;"><code>&lt;input&gt;</code>这样需要“动键盘”的表单元素中的值发生了变化时触发</td></tr><tr><td style="text-align:left;">change</td><td style="text-align:left;">单选框这样需要“动鼠标”的表单元素中得值发生了变化时触发</td></tr><tr><td style="text-align:left;">submit</td><td style="text-align:left;">用户提交表单时触发</td></tr><tr><td style="text-align:left;">reset</td><td style="text-align:left;">用于点击表单上的重置按钮时触发</td></tr></tbody></table><p>事件触发 JavaScript 代码的过程分为三步，这些步骤成为【事件处理】：</p><ol><li><p>选中需要进行事件响应的元素节点。</p></li><li><p>声明需要在所选节点上要响应的事件。</p></li><li><p>指定当事件发生时需要运行的代码。</p></li></ol><p>常见的为元素绑定事件处理函数的方式：</p><ul><li><p>在 HTML 中通过元素属性指定处理函数（不建议使用）</p></li><li><p>在 JavaScript 代码中通过元素节点的 <code>onXXX</code> 属性制定处理函数</p></li></ul><h3 id="_3-eventhandler" tabindex="-1"><a class="header-anchor" href="#_3-eventhandler" aria-hidden="true">#</a> 3. EventHandler</h3><h4 id="_3-1-eventhandler-中的-event-对象" tabindex="-1"><a class="header-anchor" href="#_3-1-eventhandler-中的-event-对象" aria-hidden="true">#</a> 3.1 EventHandler 中的 Event 对象</h4><p>当指定元素上发生事件后，浏览器会去执行与之关联的事件处理函数，并向事件处理函数中传入一个 <strong>事件对象</strong>（Event）。</p><p>考虑事件处理程序的两种写法，这里的 Event 对象的传递也有两种方式：</p><ul><li><p>方式一：</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code>function div_click(event) {\n  console.info(event);\n}\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">...</span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value javascript language-javascript"><span class="token function">btn_click</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>需要注意的是，这种方式中必须使用单词 <strong><code>event</code></strong> 。</p></li><li><p>方式二:</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code>window.onload = function () {\n  const div = document.getElementById(&#39;hello&#39;);\n\n  div.onclick = function (xxx) {\n      ...\n  }\n};\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>hello<span class="token punctuation">&quot;</span></span> <span class="token attr-name">...</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>这种方式不强求使用单词 <strong><code>event</code></strong> 。</p></li></ul><p>事件对象（Event）会【告诉】你关于这个事件的信息，以及它发生在哪个元素上。</p><p>事件对象（Event）常见属性：</p><table><thead><tr><th style="text-align:left;">属性</th><th style="text-align:left;">备注</th></tr></thead><tbody><tr><td style="text-align:left;">target</td><td style="text-align:left;">事件的目标，即发生事件的元素</td></tr><tr><td style="text-align:left;">type</td><td style="text-align:left;">事件的类型</td></tr></tbody></table><p>事件对象（Event）常用方法：</p><table><thead><tr><th style="text-align:left;">方法</th><th style="text-align:left;">备注</th></tr></thead><tbody><tr><td style="text-align:left;">preventDefault()</td><td style="text-align:left;">撤销这个事件的默认行为</td></tr></tbody></table><h4 id="_3-2-event-对象的-target-和-currenttarget" tabindex="-1"><a class="header-anchor" href="#_3-2-event-对象的-target-和-currenttarget" aria-hidden="true">#</a> 3.2 Event 对象的 target 和 currentTarget</h4><p>Event 对象中除了有 <em><code>target</code></em> 属性，还有一个 <em><code>currentTarget</code></em> 属性。</p><p>有时候它们两个指向的是同一个 DOM 对象，有时候则不是:</p><ul><li><p><em><code>target</code></em> 是事件触发的真实元素</p></li><li><p><em><code>currentTarget</code></em> 是事件绑定的元素</p></li><li><p>当事件是子元素触发时，<em><code>currentTarget</code></em> 为绑定事件的元素，<em><code>target</code></em> 为子元素</p></li><li><p>当事件是元素自身触发时，<em><code>currentTarget</code></em> 和 <em><code>target</code></em> 为同一个元素</p></li></ul><p>以下列代码为例:</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>box<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>apple<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>苹果<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>香蕉<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>桃子<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>当你点击了 <em><code>&lt;li id=&quot;apple&quot;&gt;</code></em> 元素导致 ul 和 li 上绑定的 click 事件的处理程序执行时：</p><ul><li><p>li 元素的处理程序中的 <em><code>event.currentTarget</code></em> 和 <em><code>event.target</code></em> 都是 li 元素它自己。</p></li><li><p>ul 元素的处理程序中 <em><code>event.currentTarget</code></em> 是 ul 元素自己，因为处理程序绑定在它的身上；而 <em><code>event.target</code></em> 则是它的子元素 li，因为是 li 上发生的触发事件，因为事件冒泡，才导致的 ul 的处理程序的执行。</p></li></ul><p>它俩都是只读的，不能也不应该被你重新被赋值。</p><h4 id="_3-3-eventhandler-中的-this" tabindex="-1"><a class="header-anchor" href="#_3-3-eventhandler-中的-this" aria-hidden="true">#</a> 3.3 EventHandler 中的 this</h4><p>大多数情况下，我们对 EventHandler 中的 <em><code>event.currentTarget</code></em> 和 <em><code>event.target</code></em> 不会过于身就，讲解它们的关系和区别是为了讲解这里 <strong><code>this</code></strong> 。</p><p>所有的 EventHandler 中都有一个 <em><code>this</code></em> 变量可用，既不需要声明，又不需要传入，它是浏览器默认传入的一个对象。</p><p><strong><code>this</code></strong> 始终等于 <em><code>currentTarget</code></em> 的值，即指向的是 EventHandler 所绑定的那个元素对象，这个元素对象不一定是发生/响应事件的对象。例如上例中的 ul 和 li 关系。</p>',123),e={render:function(n,a){return t}}}}]);