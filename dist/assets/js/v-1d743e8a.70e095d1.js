"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[871],{95391:(s,n,e)=>{e.r(n),e.d(n,{data:()=>a});const a={key:"v-1d743e8a",path:"/docker/01-%E7%AE%80%E4%BB%8B%E5%92%8C%E5%AE%89%E8%A3%85.html",title:"Docker 简介和安装",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"简介",slug:"简介",children:[{level:3,title:"基本概念",slug:"基本概念",children:[]},{level:3,title:"实现方式",slug:"实现方式",children:[]},{level:3,title:"Docker 和传统虚拟化方式的不同",slug:"docker-和传统虚拟化方式的不同",children:[]},{level:3,title:"Docker 虚拟化特点",slug:"docker-虚拟化特点",children:[]}]},{level:2,title:"在 CentOS 上安装 Docker",slug:"在-centos-上安装-docker",children:[{level:3,title:"前期准备工作",slug:"前期准备工作",children:[]},{level:3,title:"安装 docker 并验证",slug:"安装-docker-并验证",children:[]},{level:3,title:"配置国内镜像",slug:"配置国内镜像",children:[]},{level:3,title:"导入已有的镜像文件",slug:"导入已有的镜像文件",children:[]}]},{level:2,title:"Ubuntu 上安装 Docker",slug:"ubuntu-上安装-docker",children:[{level:3,title:"前期准备工作",slug:"前期准备工作-1",children:[]},{level:3,title:"安装 docker 并验证",slug:"安装-docker-并验证-1",children:[]},{level:3,title:"配置国内镜像",slug:"配置国内镜像-1",children:[]},{level:3,title:"导入已有的镜像文件",slug:"导入已有的镜像文件-1",children:[]}]}],filePathRelative:"docker/01-简介和安装.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},60998:(s,n,e)=>{e.r(n),e.d(n,{default:()=>l});const a=(0,e(66252).uE)('<h1 id="docker-简介和安装" tabindex="-1"><a class="header-anchor" href="#docker-简介和安装" aria-hidden="true">#</a> Docker 简介和安装</h1><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h2><h3 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念" aria-hidden="true">#</a> 基本概念</h3><p>Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的Linux机器上，也可以实现虚拟化。</p><p>容器是完全使用沙箱机制，相互之间不会有任何接口<small>（类似 iPhone 的 app）</small>。几乎没有性能开销,可以很容易地在机器和数据中心中运行。最重要的是，他们不依赖于任何语言、框架或包括系统。</p><h3 id="实现方式" tabindex="-1"><a class="header-anchor" href="#实现方式" aria-hidden="true">#</a> 实现方式</h3><p>Docker 项目的目标是实现轻量级的操作系统虚拟化解决方案。 Docker 的基础是 Linux 容器（LXC）、Cgroup 等技术。</p><p>在 LXC 的基础上，Docker 进行了进一步的封装，让用户不需要去关心容器的管理，使得操作更为简便。用户操作 Docker 的容器就像操作一个快速轻量级的虚拟机一样简单。</p><h3 id="docker-和传统虚拟化方式的不同" tabindex="-1"><a class="header-anchor" href="#docker-和传统虚拟化方式的不同" aria-hidden="true">#</a> Docker 和传统虚拟化方式的不同</h3><p>容器是在操作系统层面上实现虚拟化，直接复用本地主机的操作系统，而传统方式则是在硬件的基础上，虚拟出自己的系统，再在系统上部署相关的 APP 应用。</p><ul><li><p>传统虚拟化方案：</p><p><img src="/images/docker/img/docker_1.png" alt="docker_1"></p></li><li><p>Docker虚拟化方案：</p><p><img src="/images/docker/img/docker_2.png" alt="docker_2"></p></li></ul><p>Docker 虚拟化有三个概念需要理解：镜像、容器、仓库。</p><ul><li><p>镜像：docker 的镜像其实就是模板，跟我们常见的 ISO 镜像类似，是一个样板。</p></li><li><p>容器：使用镜像所创建的应用或者系统，我们称之为一个容器。</p></li><li><p>仓库：仓库是存放镜像的地方，分为公开仓库<small>（Public）</small>和私有仓库<small>（Private）</small>两种形式。</p></li></ul><h3 id="docker-虚拟化特点" tabindex="-1"><a class="header-anchor" href="#docker-虚拟化特点" aria-hidden="true">#</a> Docker 虚拟化特点</h3><ul><li><p>操作启动快</p><p>运行时的性能可以获取极大提升，管理操作<small>（启动，停止，开始，重启等等）</small>都是以秒或毫秒为单位的。</p></li><li><p>轻量级虚拟化</p><p>你会拥有足够的『操作系统』，仅需添加或减小镜像即可。在一台服务器上可以布署几百个 Containers 容器。但是传统虚拟化，你虚拟 20 个虚拟机就不错了。</p></li><li><p>开源免费</p><p>开源的，免费的，低成本的。由现代 Linux 内核支持并驱动。<small>轻量的 Container 必定可以在一个物理机上开启更多“容器”，注定比 VMs 要便宜。</small></p></li></ul><h2 id="在-centos-上安装-docker" tabindex="-1"><a class="header-anchor" href="#在-centos-上安装-docker" aria-hidden="true">#</a> 在 CentOS 上安装 Docker</h2><blockquote><p>以下 CentOS 的版本是 8 。另外，以下命令默认以 root 进行操作。<br> 另外，开发环境中，简单起见，记得关闭 Linux 防火墙<br></p><table><thead><tr><th style="text-align:left;">#</th><th style="text-align:left;">命令</th></tr></thead><tbody><tr><td style="text-align:left;">开启</td><td style="text-align:left;"><code>systemctl start firewalld</code></td></tr><tr><td style="text-align:left;">关闭</td><td style="text-align:left;"><code>systemctl stop firewalld</code></td></tr><tr><td style="text-align:left;">查看状态</td><td style="text-align:left;"><code>systemctl status firewalld</code></td></tr><tr><td style="text-align:left;">开机禁用</td><td style="text-align:left;"><code>systemctl disable firewalld</code></td></tr><tr><td style="text-align:left;">开机启用</td><td style="text-align:left;"><code>systemctl enable firewalld</code></td></tr></tbody></table></blockquote><h3 id="前期准备工作" tabindex="-1"><a class="header-anchor" href="#前期准备工作" aria-hidden="true">#</a> 前期准备工作</h3><ul><li><p>查看内核版本</p><p>Docker 官方要求 Linux 内核版本至少 3.8 以上，建议 3.10 以上。通过以下命令可查看内核版本：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">uname</span> -r\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>CentOS 7 的内核版本是满足其要求的。</p></li><li><p>卸载旧版本</p><p>较旧的 Docker 版本称为 <em>docker</em> 或 <em>docker-engine</em> 。如果已安装这些程序，请卸载它们以及相关的依赖项。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>yum remove docker <span class="token punctuation">\\</span>\n           docker-client <span class="token punctuation">\\</span>\n           docker-client-latest <span class="token punctuation">\\</span>\n           docker-common <span class="token punctuation">\\</span>\n           docker-latest <span class="token punctuation">\\</span>\n           docker-latest-logrotate <span class="token punctuation">\\</span>\n           docker-logrotate <span class="token punctuation">\\</span>\n           docker-engine\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></li><li><p>前期准备 3：为配置 docker 软件源作准备</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>yum <span class="token function">install</span> -y <span class="token punctuation">\\</span>\n    yum-utils <span class="token punctuation">\\</span>\n    device-mapper-persistent-data <span class="token punctuation">\\</span>\n    lvm2\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><p>前期准备 4：为 CentOS 添加 docker 软件源</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>yum-config-manager <span class="token punctuation">\\</span>\n    --add-repo  <span class="token punctuation">\\</span>\n    https://download.docker.com/linux/centos/docker-ce.repo\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>考虑到从 docker 官方的仓库下载 docker-ce 有时会比较慢，可以使用下述命令将下载网址改为华为的镜像服务器：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">sed</span> -i <span class="token string">&#39;s+download.docker.com+repo.huaweicloud.com/docker-ce+&#39;</span> /etc/yum.repos.d/docker-ce.repo\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li><p>截至目前为止，我们干了什么？</p><p>CentOS 的默认的 yum 软件源中实际上有 docker 的安装包，如果直接进行 <code>yum install docker</code> 也是可行的。</p><p>但是 docker 官方考虑到不同的用户对 docker 的不同版本有不同的需求<small>（有人追求最新，有人追求稳定）</small>，他们专门提供了一个仓库/网址用以提供多个版本的 docker 的下载。</p><p>因此，我们必须告知 yum 有这样一个仓库的存在，并且未来要求 yum 从这个仓库中下载我们指定版本的 docker 。<small>而非默认的仓库。</small></p></li><li><p>前期准备 5：查看所有仓库中所有 docker 版本</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>yum list docker-ce --showduplicates <span class="token operator">|</span> <span class="token function">sort</span> -r\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li></ul><h3 id="安装-docker-并验证" tabindex="-1"><a class="header-anchor" href="#安装-docker-并验证" aria-hidden="true">#</a> 安装 docker 并验证</h3><h4 id="从网络仓库中下载-安装" tabindex="-1"><a class="header-anchor" href="#从网络仓库中下载-安装" aria-hidden="true">#</a> 从网络仓库中下载，安装</h4><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>yum <span class="token function">install</span> -y docker-ce\n或\nyum <span class="token function">install</span> -y docker-ce-xxx\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>上述命令中的 <code>xxx</code> 是指定的版本。例如：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>yum <span class="token function">install</span> -y docker-ce-18.06.3.ce-3.el7\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>安装过程中会出现类似如下询问：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>从 https://download.docker.com/linux/centos/gpg 检索密钥\n导入 GPG key 0x621E9F35:\n 用户ID     : &quot;Docker Release (CE rpm) &lt;docker@docker.com&gt;&quot;\n 指纹       : 060a 61c5 1b55 8a7f 742b 77aa c52f eb6b 621e 9f35\n 来自       : https://download.docker.com/linux/centos/gpg\n是否继续？[y/N]：\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>输入 <code>y</code> 按回车继续安装。</p><p>最终会出现：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>完毕！\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h4 id="启动-docker-并将其加入开机启动" tabindex="-1"><a class="header-anchor" href="#启动-docker-并将其加入开机启动" aria-hidden="true">#</a> 启动 Docker，并将其加入开机启动</h4><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># systemctl start docker</span>\n\nsystemctl <span class="token builtin class-name">enable</span> docker --now\n\nsystemctl status docker\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>会出现类似如下结果：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>Created symlink from /etc/systemd/system/multi-user.target.wants/docker.service to /usr/lib/systemd/system/docker.service.\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h4 id="验证安装是否成功" tabindex="-1"><a class="header-anchor" href="#验证安装是否成功" aria-hidden="true">#</a> 验证安装是否成功</h4><p><small>（有 client 和 service 两部分表示 docker 安装启动都成功了）</small></p><p>输入 <code>docker version</code> 命令，会出现类似如下内容：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>Client:\n  Version:    <span class="token number">17.12</span>.1-ce\n  API version:    <span class="token number">1.35</span>\n  Go version:    go1.9.4\n  Git commit:    7390fc6\n  Built:    Tue Feb <span class="token number">27</span> <span class="token number">22</span>:15:20 <span class="token number">2018</span>\n  OS/Arch:    linux/amd64\n\nServer:\n Engine:\n   Version:    <span class="token number">17.12</span>.1-ce\n   API version:    <span class="token number">1.35</span> <span class="token punctuation">(</span>minimum version <span class="token number">1.12</span><span class="token punctuation">)</span>\n   Go version:    go1.9.4\n   Git commit:    7390fc6\n   Built:    Tue Feb <span class="token number">27</span> <span class="token number">22</span>:17:54 <span class="token number">2018</span>\n   OS/Arch:    linux/amd64\n   Experimental:    <span class="token boolean">false</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h4 id="验证连接-docker-hub-中央镜像仓库" tabindex="-1"><a class="header-anchor" href="#验证连接-docker-hub-中央镜像仓库" aria-hidden="true">#</a> 验证连接 docker hub 中央镜像仓库</h4><p>输入 <code>docker search -f is-official=true mysql</code> 命令，会出现类似如下结果：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>NAME     DESCRIPTION                                     STARS  OFFICIAL <span class="token punctuation">..</span>.\nmysql    MySQL is a widely used, open-source relation…   <span class="token number">8819</span>   <span class="token punctuation">[</span>OK<span class="token punctuation">]</span>     <span class="token punctuation">..</span>.\nmariadb  MariaDB is a community-developed fork of MyS…   <span class="token number">3102</span>   <span class="token punctuation">[</span>OK<span class="token punctuation">]</span>     <span class="token punctuation">..</span>.\npercona  Percona Server is a fork of the MySQL relati…   <span class="token number">459</span>    <span class="token punctuation">[</span>OK<span class="token punctuation">]</span>     <span class="token punctuation">..</span>.\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="配置国内镜像" tabindex="-1"><a class="header-anchor" href="#配置国内镜像" aria-hidden="true">#</a> 配置国内镜像</h3><p>由于 docker hub 的中央镜像仓库在国外，因此有时我们连接 docker hub 从中下载镜像速度会很感人，因此，我们需要配置国内的镜像网址，从国内现在镜像文件。</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>国内的镜像本质上就是 docker hub 中央仓库在国内的一份缓存/备份。</p></div><p>通过 vi 命令编辑相关配置文件：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">vi</span> /etc/docker/daemon.json \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>如果该文件存在，则将其内容清除；如果文件不存在，<small>（打开该文件后，其内容是空白的），</small>编辑结束后保存退出，即创建。</p><p>输入如下内容：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token punctuation">{</span>\n  <span class="token string">&quot;registry-mirrors&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>\n    <span class="token string">&quot;https://registry.docker-cn.com&quot;</span>,\n    <span class="token string">&quot;https://docker.mirrors.ustc.edu.cn&quot;</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><small>该配置文件配置了两个镜像，一个是 docker 官方在中国境内的官方镜像，一个是中科大维护的一个镜像。</small></p><p>重新启动 docker 服务：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>systemctl restart docker\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>查看修改结果：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>docker info\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>会有如下内容：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>...\nRegistry Mirrors:\n https://registry.docker-cn.com/\n https://docker.mirrors.ustc.edu.cn/\n...\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="导入已有的镜像文件" tabindex="-1"><a class="header-anchor" href="#导入已有的镜像文件" aria-hidden="true">#</a> 导入已有的镜像文件</h3><p>考虑到有些场景下的联网的不方便，docker 提供了将已下载的 images 打包导出，再在别处导入的功能。</p><p>导出已有 image 使用命令：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>docker save <span class="token operator">&lt;</span>repository<span class="token operator">&gt;</span>:<span class="token operator">&lt;</span>tag<span class="token operator">&gt;</span> -o <span class="token operator">&lt;</span>repository<span class="token operator">&gt;</span>.tar\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>例如：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>docker save mysql:5.7 -o mysql-5.7.tar\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>导入 image 使用命令：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>docker load -i <span class="token operator">&lt;</span>repository<span class="token operator">&gt;</span>.tar\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>例如：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>docker load -i mysql-5.7.tar\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="ubuntu-上安装-docker" tabindex="-1"><a class="header-anchor" href="#ubuntu-上安装-docker" aria-hidden="true">#</a> Ubuntu 上安装 Docker</h2><blockquote><p>以下 CentOS 的版本是 8 。另外，以下命令默认以 root 进行操作。<br> 另外，开发环境中，简单起见，记得关闭 Linux 防火墙<br></p><table><thead><tr><th style="text-align:left;">#</th><th style="text-align:left;">命令</th></tr></thead><tbody><tr><td style="text-align:left;">查看状态</td><td style="text-align:left;"><code>sudo ufw status</code></td></tr><tr><td style="text-align:left;">开启并开机启动</td><td style="text-align:left;"><code>sudo ufw enable</code></td></tr><tr><td style="text-align:left;">关闭</td><td style="text-align:left;"><code>sudo ufw disable</code></td></tr></tbody></table><p>Ubuntu 的防火墙默认是关闭的。</p></blockquote><h3 id="前期准备工作-1" tabindex="-1"><a class="header-anchor" href="#前期准备工作-1" aria-hidden="true">#</a> 前期准备工作</h3><p>Ubuntu 的默认的 apt 软件源中实际上有 docker 的安装包，理论上来说，你直接利用默认软件源中的 docker 安装包进行安装也是可行的。</p><p>但是 docker 官方考虑到不同的用户对 docker 的不同版本有不同的需求<small>（有人追求最新，有人追求稳定）</small>，他们专门提供了一个仓库用以提供多个版本的 docker 的下载。</p><p>另外，通常 apt 默认软件源中的软件的版本并不一定是最新版。</p><p>因此，我们必须『告知』apt 有这样一个仓库的存在，并且未来要求 apt 从这个仓库中下载我们指定版本的 docker 。<small>而非默认的仓库。</small></p><ol><li><p>查看内核版本</p><p>Docker 官方要求 Linux 内核版本至少 <code>3.8</code> 以上，建议 <code>3.10</code> 以上。Ubuntu 18.04 的内核是符合其要求的。</p><p>通过以下命令可查看内核版本：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">uname</span> -r\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li><p>卸载旧版本</p><p>较旧的 Docker 版本称为 <em>docker</em> 或 <em>docker-engine</em> 。如果已安装这些程序，请卸载它们以及相关的依赖项。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">apt</span> remove <span class="token punctuation">\\</span>\n        docker <span class="token punctuation">\\</span>\n        docker-engine <span class="token punctuation">\\</span>\n        docker-ce <span class="token punctuation">\\</span>\n        docker.io\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li><li><p>为配置 docker 软件源作准备</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token punctuation">\\</span>\n        apt-transport-https <span class="token punctuation">\\</span>\n        ca-certificates <span class="token punctuation">\\</span>\n        <span class="token function">curl</span> <span class="token punctuation">\\</span>\n        software-properties-common\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><small>这一步操作是为下一步操作作准备工作。</small></p></li><li><p>为 apt 将要添加的 docker 软件源添加校验</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">curl</span> -fsSL https://download.docker.com/linux/ubuntu/gpg <span class="token operator">|</span> <span class="token function">sudo</span> apt-key <span class="token function">add</span> -\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><small>这一步操作是为下一步操作作准备工作。</small></p></li><li><p>为 apt 添加 docker 官方软件源</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">sudo</span> add-apt-repository <span class="token punctuation">\\</span>\n  <span class="token string">&quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu \\\n  <span class="token variable"><span class="token variable">$(</span>lsb_release -cs<span class="token variable">)</span></span> \\\n  stable&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>这步操作的最直观的效果就是：你的 <strong>/etc/apt/sources.list</strong> 文件中会『多出来一行』<small>（一个远程仓库的网址）</small></p><p>记得执行以此 <strong>sudo apt update</strong>，去更新『软件清单』。</p></li><li><p>验证仓库是否添加成功：查看所有仓库中所有 docker 版本</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">apt-cache</span> madison docker-ce\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li></ol><h3 id="安装-docker-并验证-1" tabindex="-1"><a class="header-anchor" href="#安装-docker-并验证-1" aria-hidden="true">#</a> 安装 docker 并验证</h3><h4 id="从网络仓库中下载-安装-1" tabindex="-1"><a class="header-anchor" href="#从网络仓库中下载-安装-1" aria-hidden="true">#</a> 从网络仓库中下载，安装</h4><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token punctuation">\\</span>\n  docker-ce <span class="token punctuation">\\</span>\n  docker-ce-cli <span class="token punctuation">\\</span>\n  containerd.io\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>在没有指定版本的情况下，apt 下载的是软件源中的最新版。如果想要指定特定版本，则使用如下语法：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token punctuation">\\</span>\n  docker-ce<span class="token operator">=</span><span class="token operator">&lt;</span>VERSION_STRING<span class="token operator">&gt;</span> <span class="token punctuation">\\</span>\n  docker-ce-cli<span class="token operator">=</span><span class="token operator">&lt;</span>VERSION_STRING<span class="token operator">&gt;</span> <span class="token punctuation">\\</span>\n  containerd.io\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>带入特定版本号，例如：<code>5:19.03.13~3-0~ubuntu-bionic</code> 。</p><h4 id="启动-docker" tabindex="-1"><a class="header-anchor" href="#启动-docker" aria-hidden="true">#</a> 启动 Docker</h4><p>类似于 MySQL，<strong>Docker 也是基于 CS 架构的</strong>。你的 Ubuntu 上存在一个 Docker 服务端和一个 Docker 客户端。</p><p>要使用 Docker 的前提是：确保 Docker 的服务端启动了。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># 启动 docker 服务端</span>\n<span class="token function">sudo</span> systemctl start docker\n\n<span class="token comment"># 将 docker 服务端设置为开机启动</span>\n<span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> docker\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="验证安装是否成功-1" tabindex="-1"><a class="header-anchor" href="#验证安装是否成功-1" aria-hidden="true">#</a> 验证安装是否成功</h4><p>Docker 是 CS 架构的，<strong>docker 的服务端是以 docker 用户</strong><small>（属于 docker 用户组）</small>身份运行的，因此你去执行 docker 命令时，你的身份<small>（和权限）</small>是不符合的。</p><p>当你通过 <strong>docker version</strong> 命令去验证安装是否成功时，会出现如下信息：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>Got permission denied <span class="token keyword">while</span> trying to connect to the Docker daemon socket <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span> connect: permission denied\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><small>有 client 和 server 两部分表示 docker 安装启动都成功了。</small></p><p>解决办法有 2 个：</p><ol><li><p>你所执行的所有的 docker 命令前面都加上 <strong>sudo</strong> 。将你的身份临时提升为 root，root 自然是有权限执行 docker 命令的。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">sudo</span> docker version\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li><p>将你自己添加到 docker 用户组中。你和 docker 用户所属同一个用户组，你的自然就有权限执行 docker 命令。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># 创建名为 docker 的用户组。</span>\n<span class="token comment"># 正常情况下，这条命令的结果会告诉你 docker 用户组已存在。</span>\n<span class="token function">sudo</span> <span class="token function">groupadd</span> docker \n\n<span class="token comment"># 将当前用户（即你所登录系统的账号）添加至 docker 用户组</span>\n<span class="token function">sudo</span> gpasswd -a <span class="token environment constant">$USER</span> docker \n\n<span class="token comment"># 更新 docker 用户组</span>\nnewgrp docker \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div></li></ol><h4 id="验证连接-docker-hub-中央镜像仓库-1" tabindex="-1"><a class="header-anchor" href="#验证连接-docker-hub-中央镜像仓库-1" aria-hidden="true">#</a> 验证连接 docker hub 中央镜像仓库</h4><p>输入 <code>docker search -f is-official=true mysql</code> 命令，会出现类似如下结果：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>NAME     DESCRIPTION                                     STARS  OFFICIAL <span class="token punctuation">..</span>.\nmysql    MySQL is a widely used, open-source relation…   <span class="token number">8819</span>   <span class="token punctuation">[</span>OK<span class="token punctuation">]</span>     <span class="token punctuation">..</span>.\nmariadb  MariaDB is a community-developed fork of MyS…   <span class="token number">3102</span>   <span class="token punctuation">[</span>OK<span class="token punctuation">]</span>     <span class="token punctuation">..</span>.\npercona  Percona Server is a fork of the MySQL relati…   <span class="token number">459</span>    <span class="token punctuation">[</span>OK<span class="token punctuation">]</span>     <span class="token punctuation">..</span>.\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="配置国内镜像-1" tabindex="-1"><a class="header-anchor" href="#配置国内镜像-1" aria-hidden="true">#</a> 配置国内镜像</h3><p>由于 docker hub 的中央镜像仓库在国外，因此有时我们连接 docker hub 从中下载镜像速度会很感人，因此，我们需要配置国内的镜像网址，从国内现在镜像文件。</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>国内的镜像本质上就是 docker hub 中央仓库在国内的一份缓存/备份。</p></div><p>通过 vi 命令编辑相关配置文件：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">vi</span> /etc/docker/daemon.json \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>如果该文件存在，则将其内容清除；如果文件不存在，<small>（打开该文件后，其内容是空白的），</small>编辑结束后保存退出，即创建。</p><p>输入如下内容：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token punctuation">{</span>\n  <span class="token string">&quot;registry-mirrors&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>\n    <span class="token string">&quot;https://registry.docker-cn.com&quot;</span>,\n    <span class="token string">&quot;https://docker.mirrors.ustc.edu.cn&quot;</span>\n  <span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><small>该配置文件配置了两个镜像，一个是 docker 官方在中国境内的官方镜像，一个是中科大维护的一个镜像。</small></p><p>重新启动 docker 服务：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">sudo</span> systemctl restart docker\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>查看修改结果：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>docker info\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>会有如下内容：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>...\nRegistry Mirrors:\n https://registry.docker-cn.com/\n https://docker.mirrors.ustc.edu.cn/\n...\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="导入已有的镜像文件-1" tabindex="-1"><a class="header-anchor" href="#导入已有的镜像文件-1" aria-hidden="true">#</a> 导入已有的镜像文件</h3><p>考虑到有些场景下的联网的不方便，docker 提供了将已下载的 images 打包导出，再在别处导入的功能。</p><p>导出已有 image 使用命令：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>docker save <span class="token operator">&lt;</span>repository<span class="token operator">&gt;</span>:<span class="token operator">&lt;</span>tag<span class="token operator">&gt;</span> -o <span class="token operator">&lt;</span>repository<span class="token operator">&gt;</span>.tar\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>例如：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>docker save mysql:5.7 -o mysql-5.7.tar\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>导入 image 使用命令：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>docker load -i <span class="token operator">&lt;</span>repository<span class="token operator">&gt;</span>.tar\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>例如：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>docker load -i mysql-5.7.tar\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',118),l={render:function(s,n){return a}}}}]);