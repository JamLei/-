"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[330],{7385:(n,a,s)=>{s.r(a),s.d(a,{data:()=>t});const t={key:"v-20f4808c",path:"/java/99-io.html",title:"Java IO",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"操作文件或目录属性",slug:"操作文件或目录属性",children:[]},{level:2,title:"流（Stream）",slug:"流-stream",children:[]},{level:2,title:"读写二进制文件",slug:"读写二进制文件",children:[]}],filePathRelative:"java/99-io.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},45203:(n,a,s)=>{s.r(a),s.d(a,{default:()=>e});const t=(0,s(66252).uE)('<h1 id="java-io" tabindex="-1"><a class="header-anchor" href="#java-io" aria-hidden="true">#</a> Java IO</h1><ul><li>使用 File 类操作文件或目录属性。</li><li>使用 FileInputStream 类读文本文件内容。</li><li>使用 FileOutputStream 类写文本文件。</li><li>使用 BufferedWriter 类和 FileWriter 类写文本文件。</li><li>使用 DataInputStram 类读二进制文件。</li><li>使用 DataOutputStream 类写二进制文件。</li></ul><p>流是一种抽象的概念，可以理解为输入/输出的途径。</p><p>一个读取字节（byte）序列的丢向被称为输入流；一个写入字节（byte）序列的对象称为输出流。输出流和输入流都是相对于程序（或者说内存）本身而言。</p><p>在 Java 的 java.io 包中有各种 I/O 流类。</p><h2 id="操作文件或目录属性" tabindex="-1"><a class="header-anchor" href="#操作文件或目录属性" aria-hidden="true">#</a> 操作文件或目录属性</h2><p>File 对象既可表示文件，也可表示目录，在程序中一个 File 对象可以代表一个文件或目录。</p><blockquote><p>这是一个典型的 Unix/Linux 思维。在 Unix/Linux 中，『文件』这个词分为 <strong>广义上的文件</strong> 和 <strong>狭义上的文件</strong>。 广义上的文件概念范畴极大（Everything is file），因此，自然就包括 Windows 概念中的 文件 和 文件夹 。 而狭义上的文件就是只我们日常工作生活中所说的文件。 另外，『目录』也是 Unix/Linux 风格的称呼，也就是 Windows 中的文件夹。</p></blockquote><p>利用 File 类可以对文件或目录进行基本操作（读/写/创建/删除/移动/重命名），也可以查出与文件相关的信息，如名称、最后修改日期、文件大小等。</p><h4 id="file-类的构造方法" tabindex="-1"><a class="header-anchor" href="#file-类的构造方法" aria-hidden="true">#</a> File 类的构造方法</h4><table><thead><tr><th style="text-align:left;">方法</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">File ( String pathname )</td><td style="text-align:left;">用指定的『文件路径』构造 File 对象</td></tr><tr><td style="text-align:left;">File ( String dir, String subpath )</td><td style="text-align:left;">构造代表指定『目录』下指定『文件名』的文件的 File 对象 ，<strong>dir</strong> 参数指定目录路径，<strong>subpath</strong> 参数指定文件名</td></tr><tr><td style="text-align:left;">File ( File parent, String subpath )</td><td style="text-align:left;">根据一个『父文件』对象和一个『子文件名』构造 File 对象 ，<strong>parent</strong> 参数指定父目录文件，<strong>subpath</strong> 参数指定文件名</td></tr></tbody></table><h4 id="file-类的常用方法" tabindex="-1"><a class="header-anchor" href="#file-类的常用方法" aria-hidden="true">#</a> File 类的常用方法</h4><table><thead><tr><th style="text-align:left;">方法</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">boolean exists ( )</td><td style="text-align:left;">测试文件是否存在</td></tr><tr><td style="text-align:left;">String getAbsolutePath ( )</td><td style="text-align:left;">返回此对象表示的文件的绝对路径</td></tr><tr><td style="text-align:left;">String getName ( )</td><td style="text-align:left;">返回此对象表示的文件的名称</td></tr><tr><td style="text-align:left;">String getParent ( )</td><td style="text-align:left;">返回此对象的路径名的上一级，如果路径名没有上一级，则返回 null</td></tr><tr><td style="text-align:left;">boolean delete ( )</td><td style="text-align:left;">删除此对象指定的文件</td></tr><tr><td style="text-align:left;">boolean createNewFile ( )</td><td style="text-align:left;">创建空文件（不创建文件夹）</td></tr><tr><td style="text-align:left;">boolean isDirectory ( )</td><td style="text-align:left;">判断此 File 对象表示的是否是目录</td></tr><tr><td style="text-align:left;">boolean mkdir ( )</td><td style="text-align:left;">创建一个目录，它的路径名由当前 File 对象指定</td></tr><tr><td style="text-align:left;">boolean mkdirs ( )</td><td style="text-align:left;">创建包括父目录的名字</td></tr></tbody></table><h4 id="使用-file-类操作文件和目录属性的步骤" tabindex="-1"><a class="header-anchor" href="#使用-file-类操作文件和目录属性的步骤" aria-hidden="true">#</a> 使用 File 类操作文件和目录属性的步骤</h4><p><strong>1.</strong> 引入 File 类</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><strong>2.</strong> 构造一个文件对象</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">file</span><span class="token punctuation">(</span><span class="token string">&quot;...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><strong>3.</strong> 利用 File 类的方法访问文件或目录的属性，例如：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">// 判断文件或目录是否存在</span>\nfile<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">// 判断是否是文件</span>\nfile<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// 判断文件是否是目录</span>\nfile<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">// 获取文件或目录的名称</span>\nfile<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">// 获取文件或目录的路径</span>\nfile<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 获取文件或目录的绝对路径</span>\nfile<span class="token punctuation">.</span><span class="token function">lastModified</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取文件或目录的最后修改日期</span>\nfile<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">// 获取文件或目录的大小，单位为字节</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><blockquote><p>File 类有许多方法，对于这些方法不需要死记硬背，编程时若用到相关的方法，查看 API 既可。</p></blockquote><h2 id="流-stream" tabindex="-1"><a class="header-anchor" href="#流-stream" aria-hidden="true">#</a> 流（Stream）</h2><p>File 类可以对文件或目录进行基本操作，也可以访问文件的各种属性，但是它不能访问文件的内容。即，我们无法通过 File 对象从文件中读取数据，或王文件中写入数据。</p><p>『读文件』是指把文件中的数据读取到内存中；『写文件』是把内存中的数据写到文件中。</p><p>『流』是指一串流动的字节/字符，是以先进先出（FIFO）的方式发送和接受数据的通道。</p><p>『流』根据传输的数据的“走向”分为『输入流』和『输出流』；根据传输的数据的种类又分为『字节流』和『字符流』，组合起来一共四种情况：</p><ul><li>字节_输入_流：InputStream</li><li>字节_输出_流：OutputStream</li><li>字符_输入_流：Reader</li><li>字符_输出_流：Writer</li></ul><p>构造流对象时，往往会和数据源（如文件）联系起来。数据源分为『源』数据源<small>（Source）</small>和『目标』数据源<small>（Target）</small>。</p><p>字节流中传送数据的基本单位是字节；字符流传送数据的基本单位是字符。</p><h4 id="inputstream-类的常用方法" tabindex="-1"><a class="header-anchor" href="#inputstream-类的常用方法" aria-hidden="true">#</a> InputStream 类的常用方法</h4><table><thead><tr><th style="text-align:left;">方法</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">int read ( )</td><td style="text-align:left;">从输入流中读取下一个字节数据</td></tr><tr><td style="text-align:left;">int read ( byte[] b )</td><td style="text-align:left;">从输入流中读取数据，并将数据存储在缓冲区数组中，返回时机读取的字节数</td></tr><tr><td style="text-align:left;">int read ( byte[] b, int off, int len )</td><td style="text-align:left;">从输入流中读取最多 len 长度的字节，保存到缓存区数组 b 中，保存的位置从 off 开始</td></tr><tr><td style="text-align:left;">void close ( )</td><td style="text-align:left;">关闭输入流</td></tr></tbody></table><p>FileInputStream 是 InputStream 的最常用子类，用于从文件中读取数据。</p><h4 id="outputstream-类的常用方法" tabindex="-1"><a class="header-anchor" href="#outputstream-类的常用方法" aria-hidden="true">#</a> OutputStream 类的常用方法</h4><table><thead><tr><th style="text-align:left;">方法</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">void write ( int c )</td><td style="text-align:left;">将指定的字节数据写入此输出流中</td></tr><tr><td style="text-align:left;">void write ( byte[] buf )</td><td style="text-align:left;">将数组 buf 中的所有字节写入此输出流中</td></tr><tr><td style="text-align:left;">void write ( byte[] b, int off, int len )</td><td style="text-align:left;">将字节数据从偏移位置 off 开始的长度为 len 的字节数据输出到输出流中</td></tr><tr><td style="text-align:left;">void close ( )</td><td style="text-align:left;">关闭输出流</td></tr></tbody></table><p>FileOutputStream 是 OutputStream 的最常用子类，用于向文件中写数据。</p><h4 id="reader-类的常用方法" tabindex="-1"><a class="header-anchor" href="#reader-类的常用方法" aria-hidden="true">#</a> Reader 类的常用方法</h4><table><thead><tr><th style="text-align:left;">方法</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">int read ( )</td><td style="text-align:left;">从输入流读取单个字符，返回所读取的字符数据</td></tr><tr><td style="text-align:left;">int read ( byte[] c)</td><td style="text-align:left;">从输入流中最多读取 c.length 个字符，保存到字符数组 c 中，返回实际读取的字符数</td></tr><tr><td style="text-align:left;">int read ( char[] c, int off, int len )</td><td style="text-align:left;">从输入流中读取最多 len 个字符，保存到字符数组 c 中，保存的位置从 off 位置开始，返回实际读取的字符数</td></tr><tr><td style="text-align:left;">void close ( )</td><td style="text-align:left;">关闭流</td></tr></tbody></table><p>Reader 类的常用子类为 BufferedReader，接受 Reader 对象作为参数，并对其添加字符缓冲器。</p><h4 id="writer-类的常用方法" tabindex="-1"><a class="header-anchor" href="#writer-类的常用方法" aria-hidden="true">#</a> Writer 类的常用方法</h4><table><thead><tr><th style="text-align:left;">方法</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">void write ( String str )</td><td style="text-align:left;">将字符串 str 里包含的字符输出到指定的输出流中</td></tr><tr><td style="text-align:left;">void write ( String str, int off, int len )</td><td style="text-align:left;">将 str 字符串里从 off 位置开始，长度为 len 的多个字符输出到输出流中</td></tr><tr><td style="text-align:left;">void close ( )</td><td style="text-align:left;">关闭输出流</td></tr><tr><td style="text-align:left;">void flush ( )</td><td style="text-align:left;">刷新输出流</td></tr></tbody></table><p>Writer 类的常用子类为 BufferedWriter，用于将数据缓冲到字符输出流。</p><h4 id="使用字节流-fileinputstream-读文本文件" tabindex="-1"><a class="header-anchor" href="#使用字节流-fileinputstream-读文本文件" aria-hidden="true">#</a> 使用字节流 FileInputStream 读文本文件</h4><p><strong>1.</strong> 导入相关类</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOExceptoin</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStream</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileInputStream</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><strong>2.</strong> 构造一个文件输入流对象</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">InputStream</span> is <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">&quot;...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><strong>3.</strong> 利用文件输入流类的方法读取文本文件中的数据</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>is<span class="token punctuation">.</span><span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 可读取的字节数</span>\nis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 读取文件中的数据</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>4.</strong> 关闭文件输入流对象</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>is<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h4 id="使用字节流类-fileoutputstream-写文本文件" tabindex="-1"><a class="header-anchor" href="#使用字节流类-fileoutputstream-写文本文件" aria-hidden="true">#</a> 使用字节流类 FileOutputStream 写文本文件</h4><p><strong>1.</strong> 引入相关的类</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOExceptoin</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">OutputStream</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileOutputStream</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><strong>2.</strong> 构造一个文件输出流对象</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">OutputStream</span> os <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">&quot;...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><strong>3.</strong> 利用文件输出流的方法把数据写入到文本文件中</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">&quot;...&quot;</span><span class="token punctuation">;</span>\n<span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> words <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 利用 write 方法将数据写入到文件中去</span>\nos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>words<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> words<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><strong>4.</strong> 关闭文件输出流</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>os<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h4 id="使用字符流类-bufferedreader-和-filereader-读文件内容" tabindex="-1"><a class="header-anchor" href="#使用字符流类-bufferedreader-和-filereader-读文件内容" aria-hidden="true">#</a> 使用字符流类 BufferedReader 和 FileReader 读文件内容</h4><p><strong>1.</strong> 引入相关的类</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileReader</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">BufferedReader</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><strong>2.</strong> 构造一个 BufferedReader 对象</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">FileReader</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">&quot;...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">Buffereder</span> br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>3.</strong> 利用 BufferedReader 类的方法读取文本文件的数据</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><strong>4.</strong> 关闭相关的流对象</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>br<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nr<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="使用字符流类-bufferedwriter-和-filewriter-读文件内容" tabindex="-1"><a class="header-anchor" href="#使用字符流类-bufferedwriter-和-filewriter-读文件内容" aria-hidden="true">#</a> 使用字符流类 BufferedWriter 和 FileWriter 读文件内容</h4><p><strong>1.</strong> 引入相关的类</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileWriter</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">BufferedWriter</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><strong>2.</strong> 构造一个 BufferedWriter 对象</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">FileWriter</span> w <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">BufferedWriter</span> bw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>3.</strong> 利用 BufferedWriter 类的方法向文本写入文本内容</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>bw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><strong>4.</strong> 刷新并关闭相关流对象</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>bw<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nbw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="读写二进制文件" tabindex="-1"><a class="header-anchor" href="#读写二进制文件" aria-hidden="true">#</a> 读写二进制文件</h2><p>如果需要读写的是二进制文件，那么可以通过 DataInputStream 和 DataOutputStream 类进行读写。</p><h4 id="使用字节流写二进制文件" tabindex="-1"><a class="header-anchor" href="#使用字节流写二进制文件" aria-hidden="true">#</a> 使用字节流写二进制文件</h4><p><strong>1.</strong> 引入相关的类</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileOutputStream</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">DataOutputStream</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>2.</strong> 构造一个数据输出流对象</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">FileOutputStream</span> outFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">&quot;...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">DataOutputStream</span> out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataOutputStream</span><span class="token punctuation">(</span>outFile<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>3.</strong> 利用数据输出类的方法把数据写入二进制文件</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 把数据写入二进制文件</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><strong>4.</strong> 关闭数据输出流</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\noutFile<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="使用字节流读二进制文件" tabindex="-1"><a class="header-anchor" href="#使用字节流读二进制文件" aria-hidden="true">#</a> 使用字节流读二进制文件</h4><p><strong>1.</strong> 引入相关的类</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileInputStream</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">DataInputStream</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>2.</strong> 构造一个数据输入流对象</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">FileInputStream</span> is <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">&quot;...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">DataInputStream</span> dis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataInputStream</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>3.</strong> 利用数据输入流的方法读取二进制文件中的数据</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>dis<span class="token punctuation">.</span><span class="token function">readInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 读取出来的是整数</span>\ndis<span class="token punctuation">.</span><span class="token function">readByte</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 读取出来的是 Byte 类型</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><strong>4.</strong> 关闭数据输入流</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>dis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',97),e={render:function(n,a){return t}}}}]);