"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[3718],{51478:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-50ccd0b1",path:"/spring-boot/12-spring-boot-mail.html",title:"使用 Spring Boot 开发邮件系统",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"邮件发送流程",slug:"邮件发送流程",children:[]},{level:2,title:"简单使用",slug:"简单使用",children:[{level:3,title:"pom 包配置",slug:"pom-包配置",children:[]},{level:3,title:"配置文件",slug:"配置文件",children:[]}]},{level:2,title:"文本邮件发送",slug:"文本邮件发送",children:[]},{level:2,title:"编写 test 类进行测试",slug:"编写-test-类进行测试",children:[]},{level:2,title:"富文本邮件",slug:"富文本邮件",children:[{level:3,title:"发送 HTML 格式邮件",slug:"发送-html-格式邮件",children:[]},{level:3,title:"发送带附件的邮件",slug:"发送带附件的邮件",children:[]},{level:3,title:"发送带静态资源的邮件",slug:"发送带静态资源的邮件",children:[]}]}],filePathRelative:"spring-boot/12-spring-boot-mail.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},82489:(n,s,a)=>{a.r(s),a.d(s,{default:()=>t});const p=(0,a(66252).uE)('<h1 id="使用-spring-boot-开发邮件系统" tabindex="-1"><a class="header-anchor" href="#使用-spring-boot-开发邮件系统" aria-hidden="true">#</a> 使用 Spring Boot 开发邮件系统</h1><h2 id="邮件发送流程" tabindex="-1"><a class="header-anchor" href="#邮件发送流程" aria-hidden="true">#</a> 邮件发送流程</h2><p><img src="https://hemiao3000.gitee.io/java-note-img/images/spring-boot/img/mail_01.png" alt="mail_01"></p><ul><li><p>发信人在用户代理上编辑邮件，并写清楚收件人的邮箱地址;</p></li><li><p>用户代理根据发信人编辑的信息，生成一封符合邮件格式的邮件;</p></li><li><p>用户代理把邮件发送到发信人的邮件服务器上，邮件服务器上面有一个缓冲队列列，发送到邮件服务器上面的邮件都会加入到缓冲队列中，等待邮件服务器上的 SMTP 客户端进行行发送;</p></li><li><p>发信人的邮件服务器使用 SMTP 协议把这封邮件发送到收件人的邮件服务器上;</p></li><li><p>收件人的邮件服务器收到邮件后，把这封邮件放到收件人在这个服务器上的信箱中;</p></li><li><p>收件人使用用户代理来收取邮件，首先用户代理使用 POP3 协议来连接收件人人所在的邮件服务器，身份验证成功后，用户代理就可以把邮件服务器上面的收件人人邮箱里面的邮件读取出来，并展示给收件人。</p></li></ul><p>这就是邮件发送的一个完整流程。</p><blockquote><p>简单来说，邮件的接收发送类似 Git 中的 push 和 pull，是分开的两个操作。并且 push 和 pull 使用的是不同的协议：push 使用的是 SMTP 协议；pull 使用的是 POP3 协议。</p></blockquote><h2 id="简单使用" tabindex="-1"><a class="header-anchor" href="#简单使用" aria-hidden="true">#</a> 简单使用</h2><p>最早期的时候使用 JavaMail 的相关 API 来开发，需要自己去封装消息体，代码量比较庞大;后来 Spring 推出了 JavaMailSender 来简化邮件发送过程，JavaMailSender 提供了强大的邮件发送功能，可支持各种类型的邮件发送。</p><p>现在 Spring Boot 在 JavaMailSender 的基础上又进行了封装，就有了现在的 <code>spring-boot-starter-mail</code>，让邮件发送流程更加简洁和完善。</p><h3 id="pom-包配置" tabindex="-1"><a class="header-anchor" href="#pom-包配置" aria-hidden="true">#</a> pom 包配置</h3><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-mail<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="配置文件" tabindex="-1"><a class="header-anchor" href="#配置文件" aria-hidden="true">#</a> 配置文件</h3><p>在 <em><code>application.properties</code></em> 中添加邮箱配置，不同的邮箱参数稍有不同，下面面列举几个常用邮箱配置。</p><h4 id="_163-邮箱配置" tabindex="-1"><a class="header-anchor" href="#_163-邮箱配置" aria-hidden="true">#</a> 163 邮箱配置</h4><div class="language-properties ext-properties line-numbers-mode"><pre class="language-properties"><code><span class="token attr-name">spring.mail.host</span><span class="token punctuation">=</span><span class="token attr-value">smtp.163.com   // 邮箱服务器器地址</span>\n<span class="token attr-name">spring.mail.username</span><span class="token punctuation">=</span><span class="token attr-value">xxx@oo.com // 用用户名</span>\n<span class="token attr-name">spring.mail.password</span><span class="token punctuation">=</span><span class="token attr-value">xxx        // 密码</span>\n<span class="token attr-name">spring.mail.default-encoding</span><span class="token punctuation">=</span><span class="token attr-value">UTF-8</span>\n\n<span class="token attr-name">//</span> <span class="token attr-value">超时时间，可选</span>\n<span class="token attr-name">spring.mail.properties.mail.smtp.connectiontimeout</span><span class="token punctuation">=</span><span class="token attr-value">5000</span>\n<span class="token attr-name">spring.mail.properties.mail.smtp.timeout</span><span class="token punctuation">=</span><span class="token attr-value">3000</span>\n<span class="token attr-name">spring.mail.properties.mail.smtp.writetimeout</span><span class="token punctuation">=</span><span class="token attr-value">5000</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h4 id="_126-邮箱配置" tabindex="-1"><a class="header-anchor" href="#_126-邮箱配置" aria-hidden="true">#</a> 126 邮箱配置</h4><div class="language-properties ext-properties line-numbers-mode"><pre class="language-properties"><code><span class="token attr-name">spring.mail.host</span><span class="token punctuation">=</span><span class="token attr-value">smtp.126.com</span>\n<span class="token attr-name">spring.mail.username</span><span class="token punctuation">=</span><span class="token attr-value">xxx@126.com</span>\n<span class="token attr-name">spring.mail.password</span><span class="token punctuation">=</span><span class="token attr-value">xxx</span>\n<span class="token attr-name">spring.mail.default-encoding</span><span class="token punctuation">=</span><span class="token attr-value">UTF-8</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="qq-邮箱配置如下" tabindex="-1"><a class="header-anchor" href="#qq-邮箱配置如下" aria-hidden="true">#</a> QQ 邮箱配置如下:</h4><div class="language-properties ext-properties line-numbers-mode"><pre class="language-properties"><code><span class="token attr-name">spring.mail.host</span><span class="token punctuation">=</span><span class="token attr-value">smtp.qq.com</span>\n<span class="token attr-name">spring.mail.username</span><span class="token punctuation">=</span><span class="token attr-value">xxx@qq.com</span>\n<span class="token attr-name">spring.mail.password</span><span class="token punctuation">=</span><span class="token attr-value">xxx</span>\n<span class="token attr-name">spring.mail.default-encoding</span><span class="token punctuation">=</span><span class="token attr-value">UTF-8</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>测试时需要将 <em><code>spring.mail.username</code></em> 和 <em><code>spring.mail.password</code></em> 改成自自己邮箱对应的登录名和密码，这里的密码不是邮箱的登录密码，是开启 POP3 之后设置的客户端授权密码。</p></div><p>这里以 126 邮件举例，有两个地方需要在邮箱中设置。</p><h4 id="开启-pop-3-smtp-服务、imap-smtp-服务" tabindex="-1"><a class="header-anchor" href="#开启-pop-3-smtp-服务、imap-smtp-服务" aria-hidden="true">#</a> 开启 POP 3 / SMTP 服务、IMAP / SMTP 服务</h4><p><img src="https://hemiao3000.gitee.io/java-note-img/images/spring-boot/img/mail_02.png" alt="mail_02"></p><p>图片下方会有 SMTP 等相关信息的配置提示。</p><h4 id="开通设置客户端授权密码" tabindex="-1"><a class="header-anchor" href="#开通设置客户端授权密码" aria-hidden="true">#</a> 开通设置客户端授权密码</h4><p><img src="https://hemiao3000.gitee.io/java-note-img/images/spring-boot/img/mail_03.png" alt="mail_03"></p><p>设置客户端授权密码一般需求手机验证码验证。</p><h2 id="文本邮件发送" tabindex="-1"><a class="header-anchor" href="#文本邮件发送" aria-hidden="true">#</a> 文本邮件发送</h2><p>Spring 已经帮我们内置了 JavaMailSender，直接在项目中引用即可，封装一个 MailService 类来实现普通的邮件发送方法。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MailServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">MailService</span> <span class="token punctuation">{</span>\n\n    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@Autowired</span>\n    <span class="token keyword">private</span> <span class="token class-name">JavaMailSender</span> mailSender<span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;${spring.mail.username}&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">private</span> <span class="token class-name">String</span> from<span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendSimpleMail</span><span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token keyword">to</span><span class="token punctuation">,</span> <span class="token class-name">String</span> subject<span class="token punctuation">,</span> <span class="token class-name">String</span> content<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">SimpleMailMessage</span> message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleMailMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        message<span class="token punctuation">.</span><span class="token function">setFrom</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        message<span class="token punctuation">.</span><span class="token function">setTo</span><span class="token punctuation">(</span><span class="token keyword">to</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        message<span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span>subject<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        message<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">try</span> <span class="token punctuation">{</span>\n            mailSender<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;简单邮件已经发送。&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;发送简单邮件时发生生异常!&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><blockquote><p>文本邮件抄送使用:message.copyTo(copyTo) 来实现。</p></blockquote><ul><li>from，即为邮件发送者，一般设置在配置文件中</li><li>to，邮件接收者，此参数可以为数组，同时发送多人</li><li>subject，邮件主题</li><li>content，邮件的主体</li></ul><p>邮件发送者 from 一般采用固定的形式写到配置文件中。</p><h2 id="编写-test-类进行测试" tabindex="-1"><a class="header-anchor" href="#编写-test-类进行测试" aria-hidden="true">#</a> 编写 test 类进行测试</h2><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>\n<span class="token annotation punctuation">@Spring</span> <span class="token class-name">BootTest</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MailServiceTest</span> <span class="token punctuation">{</span>\n\n    <span class="token annotation punctuation">@Autowired</span>\n    <span class="token keyword">private</span> <span class="token class-name">MailService</span> <span class="token class-name">MailService</span><span class="token punctuation">;</span>\n\n    <span class="token annotation punctuation">@Test</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSimpleMail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n        mailService<span class="token punctuation">.</span><span class="token function">sendSimpleMail</span><span class="token punctuation">(</span><span class="token string">&quot;hemiao3000@126.com&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;这是一封简单邮件&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;大家好，这是我的第一封邮件!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>稍微等待几秒，就可以在邮箱中找到此邮件内容了。</p><h2 id="富文本邮件" tabindex="-1"><a class="header-anchor" href="#富文本邮件" aria-hidden="true">#</a> 富文本邮件</h2><p>在日常使用的过程中,我们通常在邮件中加入图片或者附件来丰富邮件的内容。</p><h3 id="发送-html-格式邮件" tabindex="-1"><a class="header-anchor" href="#发送-html-格式邮件" aria-hidden="true">#</a> 发送 HTML 格式邮件</h3><p>邮件发送支持以 HTML 语法去构建自定义的邮件格式,Spring Boot 支持使用用 HTML 发送邮件。</p><p>我们在 MailService 中添加支持 HTML 邮件发送的方法:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendHtmlMail</span><span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token keyword">to</span><span class="token punctuation">,</span> <span class="token class-name">String</span> subject<span class="token punctuation">,</span> <span class="token class-name">String</span> content<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">MimeMessage</span> message <span class="token operator">=</span> mailSender<span class="token punctuation">.</span><span class="token function">createMimeMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">try</span> <span class="token punctuation">{</span>\n        <span class="token comment">// true 表示需要创建一一个 multipart message</span>\n        <span class="token class-name">MimeMessageHelper</span> helper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MimeMessageHelper</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        helper<span class="token punctuation">.</span><span class="token function">setFrom</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        helper<span class="token punctuation">.</span><span class="token function">setTo</span><span class="token punctuation">(</span><span class="token keyword">to</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        helper<span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span>subject<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        helper<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        mailSender<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;html邮件发送成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">MessagingException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;发送html邮件时发生生异常!&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><blockquote><p>富文本邮件抄送使用:helper.addCc(cc) 来实现。</p></blockquote><p>和文本邮件发送代码对比,富文本邮件发送使用 MimeMessageHelper 类,该类支持发送复杂邮件模板,支持文本、附件、HTML、图片等。</p><p>在测试类中构建 HTML 内容,测试发送:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testHtmlMail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n    <span class="token class-name">String</span> content <span class="token operator">=</span> \n    <span class="token string">&quot;&lt;html&gt;\\n&quot;</span> <span class="token operator">+</span> \n        <span class="token string">&quot;&lt;body&gt;\\n&quot;</span> <span class="token operator">+</span> \n            <span class="token string">&quot;&lt;h3&gt;hello world ! 这是一一封html邮件!&lt;/h3&gt;\\n&quot;</span> <span class="token operator">+</span>\n        <span class="token string">&quot;&lt;/body&gt;\\n&quot;</span> <span class="token operator">+</span>\n    <span class="token string">&quot;&lt;/html&gt;&quot;</span><span class="token punctuation">;</span>\n\n    mailService<span class="token punctuation">.</span><span class="token function">sendHtmlMail</span><span class="token punctuation">(</span><span class="token string">&quot;hemiao3000@126.com&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;这是一封HTML邮件&quot;</span><span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>代码中拼接出的 HTML 的 String 字符串交给 MimeMessageHelper 来处理理,最后由邮件客户端负责渲染显示内容。</p><h3 id="发送带附件的邮件" tabindex="-1"><a class="header-anchor" href="#发送带附件的邮件" aria-hidden="true">#</a> 发送带附件的邮件</h3><p>在 MailService 添加 sendAttachmentsMail 方法,发送带附件的邮件主要是使用 FileSystemResource 对文件进行封装,再添加到 MimeMessageHelper 中。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> sendAttachmentsMail <span class="token punctuation">(</span>\n        <span class="token class-name">String</span> <span class="token keyword">to</span><span class="token punctuation">,</span> <span class="token class-name">String</span> subject<span class="token punctuation">,</span> \n        <span class="token class-name">String</span> content<span class="token punctuation">,</span> <span class="token class-name">String</span> filePath<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">MimeMessage</span> message <span class="token operator">=</span> mailSender<span class="token punctuation">.</span><span class="token function">createMimeMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">try</span> <span class="token punctuation">{</span>\n        <span class="token class-name">MimeMessageHelper</span> helper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MimeMessageHelper</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        helper<span class="token punctuation">.</span><span class="token function">setFrom</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        helper<span class="token punctuation">.</span><span class="token function">setTo</span><span class="token punctuation">(</span><span class="token keyword">to</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        helper<span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span>subject<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        helper<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">FileSystemResource</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileSystemResource</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">String</span> fileName <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        helper<span class="token punctuation">.</span><span class="token function">addAttachment</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// helper.addAttachment(&quot;test&quot;+fileName, file);</span>\n        mailSender<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;带附件的邮件已经发送。&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">MessagingException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;发送带附件的邮件时发生生异常!&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><blockquote><p>添加多个附件可以使用多条 helper.addAttachment(fileName, file) 。</p></blockquote><p>在测试类中添加测试方法:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendAttachmentsMail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">String</span> filePath <span class="token operator">=</span> <span class="token string">&quot;e:\\\\temp\\\\fastdfs-client-java-5.0.0.jar&quot;</span><span class="token punctuation">;</span>\n    mailService<span class="token punctuation">.</span><span class="token function">sendAttachmentsMail</span><span class="token punctuation">(</span><span class="token string">&quot;hemiao3000@126.com&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;主题:带附件的邮件&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;有附件,请查收!&quot;</span><span class="token punctuation">,</span> filePath<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><blockquote><p>附件可以是图片、压缩包、Word 等任何文件,但是邮件厂商一般都会对附件大小有限制,太大的附件建议使用网盘上传后,在邮件中给出链接。</p></blockquote><h3 id="发送带静态资源的邮件" tabindex="-1"><a class="header-anchor" href="#发送带静态资源的邮件" aria-hidden="true">#</a> 发送带静态资源的邮件</h3><p>邮件中的静态资源一般指图片,在 MailService 中添加 sendInlineResourceMail 方法:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendInlineResourceMail</span><span class="token punctuation">(</span>\n        <span class="token class-name">String</span> <span class="token keyword">to</span><span class="token punctuation">,</span> <span class="token class-name">String</span> subject<span class="token punctuation">,</span> \n        <span class="token class-name">String</span> content<span class="token punctuation">,</span> <span class="token class-name">String</span> rscPath<span class="token punctuation">,</span> <span class="token class-name">String</span> rscId<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">MimeMessage</span> message <span class="token operator">=</span> mailSender<span class="token punctuation">.</span><span class="token function">createMimeMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">try</span> <span class="token punctuation">{</span>\n        <span class="token class-name">MimeMessageHelper</span> helper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MimeMessageHelper</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        helper<span class="token punctuation">.</span><span class="token function">setFrom</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        helper<span class="token punctuation">.</span><span class="token function">setTo</span><span class="token punctuation">(</span><span class="token keyword">to</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        helper<span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span>subject<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        helper<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">FileSystemResource</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileSystemResource</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>rscPath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        helper<span class="token punctuation">.</span><span class="token function">addInline</span><span class="token punctuation">(</span>rscId<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        mailSender<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;嵌入静态资源的邮件已经发送。&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">MessagingException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;发送嵌入静态资源的邮件时发生异常!&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>在测试类中添加测试方法:</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendInlineResourceMail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">String</span> rscId <span class="token operator">=</span> <span class="token string">&quot;neo006&quot;</span><span class="token punctuation">;</span>\n    <span class="token class-name">String</span> content <span class="token operator">=</span> <span class="token string">&quot;&lt;html&gt;&lt;body&gt;这是有图片片的邮件:&lt;img src=\\&#39;cid:&quot;</span> <span class="token operator">+</span> rscId <span class="token operator">+</span> <span class="token string">&quot;\\&#39; &gt;&lt;/body&gt;&lt;/html&gt;&quot;</span><span class="token punctuation">;</span>\n    <span class="token class-name">String</span> imgPath <span class="token operator">=</span> <span class="token string">&quot;e:\\\\temp\\\\weixin.jpg&quot;</span><span class="token punctuation">;</span>\n    mailService<span class="token punctuation">.</span><span class="token function">sendInlineResourceMail</span><span class="token punctuation">(</span><span class="token string">&quot;hemiao3000@126.com&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;主题:这是有图片的邮件&quot;</span><span class="token punctuation">,</span> content<span class="token punctuation">,</span> imgPath<span class="token punctuation">,</span> rscId<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><blockquote><p>添加多个图片可以使用多条 &lt;img src=&#39;cid:&quot;+ rscId +&quot;&#39; &gt; 和 helper.addInline(rscId, res) 来实现。</p></blockquote>',60),t={render:function(n,s){return p}}}}]);