"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[5649],{24684:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-cbbfc05c",path:"/rabbitmq/04-%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1.html",title:"基于 RabbitMQ 的最终一致性分布式事务",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"1. 整体思路",slug:"_1-整体思路",children:[]},{level:2,title:"2. 简单方案",slug:"_2-简单方案",children:[{level:3,title:"2.1 生产方的『可靠性』",slug:"_2-1-生产方的『可靠性』",children:[]},{level:3,title:"2.2 新增本地消息表",slug:"_2-2-新增本地消息表",children:[]},{level:3,title:"2.2 确认消息发送成功或失败",slug:"_2-2-确认消息发送成功或失败",children:[]},{level:3,title:"2.3 RabbitMQ 删除过期消息",slug:"_2-3-rabbitmq-删除过期消息",children:[]},{level:3,title:"2.4 消费方的『可靠性』",slug:"_2-4-消费方的『可靠性』",children:[]},{level:3,title:"2.5 消费者开启手动 ACK 模式",slug:"_2-5-消费者开启手动-ack-模式",children:[]}]},{level:2,title:"3. 改进方案：可靠消息服务",slug:"_3-改进方案-可靠消息服务",children:[]}],filePathRelative:"rabbitmq/04-分布式事务.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},42166:(n,s,a)=>{a.r(s),a.d(s,{default:()=>t});const p=(0,a(66252).uE)('<h1 id="基于-rabbitmq-的最终一致性分布式事务" tabindex="-1"><a class="header-anchor" href="#基于-rabbitmq-的最终一致性分布式事务" aria-hidden="true">#</a> 基于 RabbitMQ 的最终一致性分布式事务</h1><h2 id="_1-整体思路" tabindex="-1"><a class="header-anchor" href="#_1-整体思路" aria-hidden="true">#</a> 1. 整体思路</h2><p>注册新用户后，可以慢慢等待促销中心为新用户发电子优惠券，并非强制要求同时性。</p><ol><li>可靠生产 : 保证消息一定要发送到 RabitMQ 服务。</li><li>可靠消费 : 保证消息取出来一定正确消费掉。</li></ol><p>最终使多方数据达到一致。</p><h2 id="_2-简单方案" tabindex="-1"><a class="header-anchor" href="#_2-简单方案" aria-hidden="true">#</a> 2. 简单方案</h2><p><img src="https://hemiao3000.gitee.io/java-note-img/images/rabbitmq/img/rabbitmq-transaction-02.png" alt="rabbitmq-transaction-02"></p><h3 id="_2-1-生产方的『可靠性』" tabindex="-1"><a class="header-anchor" href="#_2-1-生产方的『可靠性』" aria-hidden="true">#</a> 2.1 生产方的『可靠性』</h3><p>这里的『可靠性』指的是一旦 A 服务<small>（事务的发起方）</small>本地操作执行成功后，要务必确保消息一定要发送至 RabbitMQ 。</p><p>如果发送失败，那么：</p><ol><li><p>撤销 A 服务的本地操作；</p></li><li><p>如果 A 服务的本地操作是无法撤销的，那么消息需要重发；如果重复仍然失败，那么则需要人工干预。</p></li></ol><p>为了确保消息发送方的可靠性需要执行的以下操作：</p><h3 id="_2-2-新增本地消息表" tabindex="-1"><a class="header-anchor" href="#_2-2-新增本地消息表" aria-hidden="true">#</a> 2.2 新增本地消息表</h3><p>在 A 服务的本地数据库中添加一张通用的消息表，形如：</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">drop</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token keyword">exists</span> <span class="token punctuation">`</span>message<span class="token punctuation">`</span><span class="token punctuation">;</span>\n<span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token punctuation">`</span>message<span class="token punctuation">`</span>\n<span class="token punctuation">(</span>\n    <span class="token punctuation">`</span>id<span class="token punctuation">`</span>              <span class="token keyword">BIGINT</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>\n    <span class="token punctuation">`</span>exchange<span class="token punctuation">`</span>        <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span>  <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n    <span class="token punctuation">`</span>routing_key<span class="token punctuation">`</span>     <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span>  <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n    <span class="token punctuation">`</span>message_content<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">4096</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n    <span class="token punctuation">`</span><span class="token keyword">status</span><span class="token punctuation">`</span>          <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span>  <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n    <span class="token punctuation">`</span>retry_count<span class="token punctuation">`</span>     <span class="token keyword">INT</span>           <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token number">3</span><span class="token punctuation">,</span>\n    <span class="token punctuation">`</span>version<span class="token punctuation">`</span>         <span class="token keyword">BIGINT</span>        <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">default</span> <span class="token number">0</span><span class="token punctuation">,</span>\n    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>其中 <strong>retry_count</strong> 是配合定时任务实现消息重发；<strong>version</strong> 是用来实现乐观锁的。<small>极简情况下，这两个字段可以没有，那么整个功能就更简单一些。</small></p><p>在 A 服务做完本身的业务操作后，要向消息表中添加一条记录，表示有一条待发送消息。注意，A 服务的本身的操作和向消息表中添加记录这两个操作要在同一个事务中。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Transactional</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">,</span> <span class="token class-name">String</span> password<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    userRepository<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">String</span> messageContent <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;\\&quot;userId\\&quot; : %s&quot;</span><span class="token punctuation">,</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    messageRepository<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">&quot;user.register&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;user.register-user-success&quot;</span><span class="token punctuation">,</span> messageContent<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    messageService<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;user.register&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;user.register-user-success&quot;</span><span class="token punctuation">,</span> messageContent<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>messageId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="_2-2-确认消息发送成功或失败" tabindex="-1"><a class="header-anchor" href="#_2-2-确认消息发送成功或失败" aria-hidden="true">#</a> 2.2 确认消息发送成功或失败</h3><p>生产者为了明确知道发送到了 RabbitMQ 或发送失败，因此需要开启『发送者确认』功能。</p><ul><li><p>配置文件</p><div class="language-properties ext-properties line-numbers-mode"><pre class="language-properties"><code><span class="token comment"># 确认消息已发送到交换机（Exchange）</span>\n<span class="token attr-name">spring.rabbitmq.publisher-confirm-type</span><span class="token punctuation">=</span><span class="token attr-value">CORRELATED</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><p>设置回调方法</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitMQConfig</span> <span class="token punctuation">{</span>\n\n  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n\n  <span class="token annotation punctuation">@Bean</span>\n  <span class="token keyword">public</span> <span class="token class-name">RabbitTemplate</span> <span class="token function">createRabbitTemplate</span><span class="token punctuation">(</span><span class="token class-name">ConnectionFactory</span> connectionFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token class-name">RabbitTemplate</span> rabbitTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RabbitTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      rabbitTemplate<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>connectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n      <span class="token comment">// 设置开启 Mandatory，才能触发回调函数，无论消息推送结果怎么样都强制调用回调函数</span>\n      rabbitTemplate<span class="token punctuation">.</span><span class="token function">setMandatory</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n      <span class="token comment">// 关键就是以下两句</span>\n      rabbitTemplate<span class="token punctuation">.</span><span class="token function">setConfirmCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span>correlationData<span class="token punctuation">,</span> ack<span class="token punctuation">,</span> cause<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n          <span class="token comment">// 这里的 correlationData 来源于 convertAndSend 方法。</span>\n          log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;消息唯一标识 ： {}&quot;</span><span class="token punctuation">,</span> correlationData<span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token keyword">if</span> <span class="token punctuation">(</span>ack<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n              log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;消息已发送至 RabbitMQ（的Exchange），修改 id 为 {} 的状态。&quot;</span><span class="token punctuation">,</span> correlationData<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n              messageRepository<span class="token punctuation">.</span><span class="token function">changeStatus2Success</span><span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">parseLong</span><span class="token punctuation">(</span>correlationData<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n              log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;消息未能发送到 Exchange。失败原因 {}&quot;</span><span class="token punctuation">,</span> cause<span class="token punctuation">)</span><span class="token punctuation">;</span>\n              <span class="token comment">// ...</span>\n          <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n      <span class="token keyword">return</span> rabbitTemplate<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div></li></ul><p>消费者发送消息至 RabbitMQ 成功，那么执行数据库操作，将 message 表中的该消息的状态改为成功（或等价的其它）状态。</p><p>如果发送消息失败，那么有两种后续处理方式：</p><ol><li><p>和成功的请款一样，直接修改数据库中的消息的状态，改为失败。（当然这种只发送一次的一锤子买卖并不人性）。</p></li><li><p>结合表中的 <strong>retry_count</strong> 字段和 Spring Task 功能，实现一个定时任务。不停地从消息表中取出待发送消息，直至消息发送成功，或重试次数耗完。</p></li></ol><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Slf4j</span>\n<span class="token annotation punctuation">@Service</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReliableMessageService</span> <span class="token punctuation">{</span>\n\n    <span class="token annotation punctuation">@Autowired</span> <span class="token keyword">private</span> <span class="token class-name">RabbitTemplate</span> rabbitTemplate<span class="token punctuation">;</span>\n    <span class="token annotation punctuation">@Autowired</span> <span class="token keyword">private</span> <span class="token class-name">MessageRepository</span> messageRepository<span class="token punctuation">;</span>\n\n    <span class="token comment">// 发送消息 </span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token class-name">String</span> routingKey<span class="token punctuation">,</span> <span class="token class-name">String</span> messageContent<span class="token punctuation">,</span> <span class="token class-name">String</span> messageId<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span>routingKey<span class="token punctuation">,</span> messageContent<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">CorrelationData</span><span class="token punctuation">(</span>messageId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// 发送消息 </span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token class-name">String</span> exchange<span class="token punctuation">,</span> <span class="token class-name">String</span> routingKey<span class="token punctuation">,</span> <span class="token class-name">String</span> messageContent<span class="token punctuation">,</span> <span class="token class-name">String</span> messageId<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span>exchange<span class="token punctuation">,</span> routingKey<span class="token punctuation">,</span> messageContent<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">CorrelationData</span><span class="token punctuation">(</span>messageId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n\n    <span class="token comment">// 定时任务：每隔 3 分钟从数据库中读取未发送的消息发送到 RabbitMQ</span>\n    <span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>fixedDelay <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span>\n    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">autoSend</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Message</span><span class="token punctuation">&gt;</span></span> messageList <span class="token operator">=</span> messageRepository<span class="token punctuation">.</span><span class="token function">selectNeededToBeSentMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;执行定时任务。查询出有 {} 条待发送消息。&quot;</span><span class="token punctuation">,</span> messageList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Message</span> message <span class="token operator">:</span> messageList<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;待发送消息 : id-{}&quot;</span><span class="token punctuation">,</span> message<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token comment">// if (messageRepository.touchMessage(message.getId(), message.getVersion()) &gt; 0) {</span>\n                rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> message<span class="token punctuation">.</span><span class="token function">getRoutingKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> message<span class="token punctuation">.</span><span class="token function">getMessageContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">CorrelationData</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                messageRepository<span class="token punctuation">.</span><span class="token function">reduceRetryCount</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 重试</span>\n            <span class="token comment">// }</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><p>如果考虑到 A 服务可能会部署多个，那么这里可以再加上乐观锁以保证避免消息发送多次。</p><h3 id="_2-3-rabbitmq-删除过期消息" tabindex="-1"><a class="header-anchor" href="#_2-3-rabbitmq-删除过期消息" aria-hidden="true">#</a> 2.3 RabbitMQ 删除过期消息</h3><p>由于存在消费者因故未能消费消息的可能，这会导致这些消息堆积在 RabbitMQ 中。因此需要在创建队列，或发送消息时指定过期时间，以便于让 RabbitMQ 将这些在规定时间内未能消费的消息移除。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>\n<span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">queue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> arguments <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    arguments<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;x-message-ttl&quot;</span><span class="token punctuation">,</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10 分钟的过期时间</span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token string">&quot;user.register&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="_2-4-消费方的『可靠性』" tabindex="-1"><a class="header-anchor" href="#_2-4-消费方的『可靠性』" aria-hidden="true">#</a> 2.4 消费方的『可靠性』</h3><p>B 服务在收到消息后，去执行本地操作可能失败。此时，由于 B 服务确实是已经收到了该消息，（默认情况下）该消息已经被 RabbitMQ 移除了，无法重发。</p><h3 id="_2-5-消费者开启手动-ack-模式" tabindex="-1"><a class="header-anchor" href="#_2-5-消费者开启手动-ack-模式" aria-hidden="true">#</a> 2.5 消费者开启手动 ACK 模式</h3><p>开启手动 ACK 模式的目的是先去执行 B 服务的本地操作，在操作执行成功后再『回复』RabbitMQ 已收到消息。这种情况下，如果 B 服务本地操作失败，那么就没有去『确认』收到该消息，RabbitMQ 自然就会重发该消息。</p><ul><li><p>配置文件</p><div class="language-properties ext-properties line-numbers-mode"><pre class="language-properties"><code><span class="token attr-name">spring.rabbitmq.listener.simple.acknowledge-mode</span><span class="token punctuation">=</span><span class="token attr-value">manual</span>\n<span class="token attr-name">spring.rabbitmq.listener.direct.acknowledge-mode</span><span class="token punctuation">=</span><span class="token attr-value">manual</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><p>业务代码</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Transactional</span>\n<span class="token annotation punctuation">@RabbitHandler</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">,</span>\n                    <span class="token class-name">Channel</span> channel<span class="token punctuation">,</span>\n                    <span class="token annotation punctuation">@Header</span><span class="token punctuation">(</span><span class="token class-name">AmqpHeaders</span><span class="token punctuation">.</span>DELIVERY_TAG<span class="token punctuation">)</span> <span class="token keyword">long</span> tag<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>\n\n    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;收到用户已注册的消息。去操作数据据，未其派发优惠券。 {}&quot;</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;操作数据库/派发优惠券成功。 向 RabbitMQ 回复 ACK。&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    channel<span class="token punctuation">.</span><span class="token function">basicAck</span><span class="token punctuation">(</span>tag<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div></li></ul><h2 id="_3-改进方案-可靠消息服务" tabindex="-1"><a class="header-anchor" href="#_3-改进方案-可靠消息服务" aria-hidden="true">#</a> 3. 改进方案：可靠消息服务</h2><p>可靠消息服务，就是将发送消息<small>（和消息表）</small>的功能由一个专门的微服务来处理，这个微服务是真正意义上的消息的生产者，它向 RabbitMQ 投递消息。</p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/rabbitmq/img/rabbitmq-transaction-03.png" alt="rabbitmq-transaction-03"></p><p>其它模块并不直接和 RabbitMQ 产生联系，他们是逻辑上的消息的生产者。</p>',38),t={render:function(n,s){return p}}}}]);