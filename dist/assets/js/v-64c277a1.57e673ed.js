"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[6616],{40469:(a,n,s)=>{s.r(n),s.d(n,{data:()=>t});const t={key:"v-64c277a1",path:"/maven/009-%E5%87%A0%E4%B8%AA%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98.html",title:"几个常见问题",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"maven-archetype-webapp 骨架的 Servlet 版本问题",slug:"maven-archetype-webapp-骨架的-servlet-版本问题",children:[]},{level:2,title:".lastUpdated 文件问题",slug:"lastupdated-文件问题",children:[]},{level:2,title:"IDEA Maven 默认使用 JDK 1.5 编译问题",slug:"idea-maven-默认使用-jdk-1-5-编译问题",children:[]},{level:2,title:"tomcat7-maven-plugin 版本『低』的问题",slug:"tomcat7-maven-plugin-版本『低』的问题",children:[]},{level:2,title:"mirrorOf 是 central 还是 * 的问题",slug:"mirrorof-是-central-还是-的问题",children:[]},{level:2,title:"高版本的 lombok 和 tomcat 7 插件冲突问题",slug:"高版本的-lombok-和-tomcat-7-插件冲突问题",children:[]},{level:2,title:"hibernate-validator 高版本问题",slug:"hibernate-validator-高版本问题",children:[]}],filePathRelative:"maven/009-几个常见问题.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},22744:(a,n,s)=>{s.r(n),s.d(n,{default:()=>e});const t=(0,s(66252).uE)('<h1 id="几个常见问题" tabindex="-1"><a class="header-anchor" href="#几个常见问题" aria-hidden="true">#</a> 几个常见问题</h1><h2 id="maven-archetype-webapp-骨架的-servlet-版本问题" tabindex="-1"><a class="header-anchor" href="#maven-archetype-webapp-骨架的-servlet-版本问题" aria-hidden="true">#</a> maven-archetype-webapp 骨架的 Servlet 版本问题</h2><p>通过 <strong>maven-archetype-webapp</strong> 骨架去创建 java web 项目时，自动生成的 <em>web.xml</em> 配置文件所使用的 Servlet 的版本比较低<small>（2.3）</small>，而在低版本的 Servlet 中 EL 表达式默认是关闭的。</p><p>通常，我们使用的 Servlet 至少会是 <strong>3.1</strong> 。</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">&quot;</span></span>\n    <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">&quot;</span></span>\n    <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://xmlns.jcp.org/xml/ns/javaee\n      http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd<span class="token punctuation">&quot;</span></span>\n    <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>3.1<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n  ...\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="lastupdated-文件问题" tabindex="-1"><a class="header-anchor" href="#lastupdated-文件问题" aria-hidden="true">#</a> .lastUpdated 文件问题</h2><p><strong>.lastUpdated</strong> 文件是 Maven 在下载依赖包时的中间文件。例如：</p><pre><code>slf4j-api-1.7.5.pom.lastUpdated\nsurefire-junit4-2.12.4.jar.lastUpdated\n</code></pre><p>在下载成功完成后，<strong>.lastUpdated</strong> 文件会被移除，成功下载的包文件将会出现。</p><p>当你发现你的本地仓库中的某个包的目录下存在 <strong>.lastUpdated</strong> 文件，那么这意味着发生了以下 2 种情况之一：</p><ul><li><p>Maven 正在下载这个包。<small>通常不会是这个情况，因为配置国内的中央仓库镜像后，下载包的速度较快，再加上各个包实际并不大，这种情况的 .lastUpdated 文件只存在极短的一瞬间，不会让你『长期看到』它。</small></p></li><li><p><strong>上一次 maven 下载这个包时失败，而遗留下来的</strong>，通常你可能『长期看到』一个 .lastUpdated 文件就是因为这个原因。</p></li></ul><p>如果是第二种情况，则会给你带来麻烦：因为 maven 不支持断点续传，而 <strong>.lastUpdated</strong> 文件既不可用，又会导致 maven 不会重新下载。</p><p>因此，理论上，你要清除掉你本地仓库中的 <em>.lastUpdated</em> 文件，以免它干扰你的 maven 的正常使用。</p><ul><li><p>cleanLastUpdated.bat</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>@echo off\n\nrem 这里写你的仓库路径\n<span class="token builtin class-name">set</span> <span class="token assign-left variable">REPOSITORY_PATH</span><span class="token operator">=</span>C:<span class="token punctuation">\\</span>Users<span class="token punctuation">\\</span>xxx<span class="token punctuation">\\</span>.m2<span class="token punctuation">\\</span>repository\nrem 正在搜索<span class="token punctuation">..</span>.\n<span class="token keyword">for</span> /f <span class="token string">&quot;delims=&quot;</span> %%i <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token string">&#39;dir /b /s &quot;%REPOSITORY_PATH%\\*lastUpdated*&quot;&#39;</span><span class="token punctuation">)</span> <span class="token keyword">do</span> <span class="token punctuation">(</span>\n    <span class="token builtin class-name">echo</span> %%i\n    del /s /q <span class="token string">&quot;%%i&quot;</span>\n<span class="token punctuation">)</span>\nrem 搜索完毕\npause\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div></li></ul><h2 id="idea-maven-默认使用-jdk-1-5-编译问题" tabindex="-1"><a class="header-anchor" href="#idea-maven-默认使用-jdk-1-5-编译问题" aria-hidden="true">#</a> IDEA Maven 默认使用 JDK 1.5 编译问题</h2><p>IDEA 在『调用』maven 时，IDEA 默认都会采用 JDK 1.5 编译，不管你安装的 JDK 版本是 JDK 7 还是 JDK 8 或者更高。<small>这样一来非常不方便，尤其是时不时使用 JDK 7/8 的新特性时。如果使用新特性，编译器直接报错。</small></p><p>对于此类问题，解决办法不止一种。Maven 官方推荐做法是固定 JDK 的编译版本。</p><p>需要在 <strong>pom.xml</strong> 文件中加入：</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="tomcat7-maven-plugin-版本『低』的问题" tabindex="-1"><a class="header-anchor" href="#tomcat7-maven-plugin-版本『低』的问题" aria-hidden="true">#</a> tomcat7-maven-plugin 版本『低』的问题</h2><p>相较于当前最新版的 tomcat 10 而言，tomcat7-maven-plugin 确实看起来很显老旧。但是，这个问题并不是问题，至少不是大问题。</p><ol><li><p>tomcat7-maven-plugin 仅用于我们<small>（程序员）</small>开发环境中，最终项目交付以后的运行环境，是 tomcat7 还是更高版本的 tomcat，甚至是其它的 Servlet 容器，这就是另一个问题了，这和 tomcat7-maven-plugin 的版本无关。</p></li><li><p>tomcat7 支持 Servlet 3.0，tomcat8 支持 Servlet 3.1，实际上 Servlet 3.0 和 3.1 的区别并不大，甚至说，从 Servlet 3.0 开始，tomcat 的新特性在绝大多数的项目中都用不少，所以，tomcat8-maven-plugin 的高级也没高到哪里去。</p><blockquote><p><small>这里涉及到一个小知识，从 3.1 开始，Servlet 开始内置了文件上传功能。但是，经测试实际上，3.0 就已经有了这个功能。另外，Servlet 内置的上传功能，在上传文件名是中文的文件是有中文乱码问题，不是很好解决。所以，实际上上传文件的方案，还是 commons-fileupload 更常见，Servlet 3.0 开始出现的内置的上传方案并没有那么美好。</small></p></blockquote></li><li><p>tomcat7-maven-plugin 是 tomcat-maven-plugin 的子项目，tomcat-maven-plugin 的最高版本是 2.2 ，版本新特性就是支持 tomcat7 。也就是说 tomcat8-maven-plugin 并非官方项目，这也是为什么，中央仓库没中 tomcat8-maven-plugin 的原因。</p><blockquote><p><small>如果对 tomcat7 的版本仍疑虑，也不一定非要使用非官方的 tomcat8-maven-plugin。可以使用其它的 Servlet 容器的 maven 插件，例如 jetty 。</small></p></blockquote></li></ol><h2 id="mirrorof-是-central-还是-的问题" tabindex="-1"><a class="header-anchor" href="#mirrorof-是-central-还是-的问题" aria-hidden="true">#</a> mirrorOf 是 central 还是 * 的问题</h2><p>在配置阿里对官方中央仓库的镜像服务器时，我们使用到了 <strong>&lt;mirror&gt;</strong> 元素。</p><p>故名思意，<strong>&lt;mirror&gt;</strong> 用于配置网络仓库的『<strong>镜像</strong>』。当你准备去默认的中央仓库下载包和插件时，Maven 会『<strong>拦截</strong>』你的下载请求，转而去你所配置的『<strong>镜像网址</strong>』下载，从而也能实现从指定的国内的网址下载。</p><p>而 <em>&lt;mirror&gt;</em> 元素的子元素 <strong>&lt;mirrorOf&gt;</strong> 的值常见两种：<strong>central</strong> 和通配符 <strong>*</strong> 。</p><p>central 和 * 的区别在于：</p><ul><li><p>如果是 <strong>central</strong>，那么 maven 只会将你的从『<strong>中央仓库</strong>』下载请求<small>（无论是 jar 包，还是插件包）</small>，转向你所配置的镜像地址。</p></li><li><p>如果是 <strong>*</strong> ，那么 maven 会将你的『<strong>所有</strong>』下载请求转向你所配置的镜像地址。</p></li></ul><p>如果你要下载一个不在中央仓库的包<small>（或插件）</small>，例如 <strong>tomcat8-maven-plugin</strong> ，</p><ul><li><p>如果你配置的值是 <strong>central</strong>，那么 maven 会去你所配置的『别的』仓库下载，因为中央仓库没有这个包；</p></li><li><p>如果你配置的值是 <strong>*</strong>，那么无论这个包在不在中央仓库，maven 只会去中央仓库下载。有，则有；没有，则没有。</p></li></ul><h2 id="高版本的-lombok-和-tomcat-7-插件冲突问题" tabindex="-1"><a class="header-anchor" href="#高版本的-lombok-和-tomcat-7-插件冲突问题" aria-hidden="true">#</a> 高版本的 lombok 和 tomcat 7 插件冲突问题</h2><p>在开发期间，当我们使用 <strong>tomcat7-maven-plugin</strong> 来作为运行环境运行我们项目使，如果我们项目中使用了 <strong>1.16.20</strong> 及以上版本的 lombok 包，项目启动时会报错：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>for annotations org.apache.tomcat.util.bcel.classfile.ClassFormatException: Invalid byte tag in constant pool: 19\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>原因在于，从 <strong>1.16.20</strong> 开始 lombok 包中有了一个叫 <strong>module-info.class</strong> 的文件，而低版本的 tomcat 不能识别这个文件，从而导致运行时出错。</p><blockquote><p>其实这个问题对于我们而言不是问题，因为项目部署时，肯定不会部署到 tomcat 7 上，至少是 tomcat 8.5 。</p></blockquote><p>对于这个问题，解决办法有 2 个：</p><ol><li><p>使用 tomcat8-maven-plugin 。</p></li><li><p>将 lombok 的 <code>&lt;scope&gt;</code> 设置为 <code>provided</code>，这样，maven 在打包时就不会将 lombok 包含在 jar/war 包内。<small>我们对 lombok 的使用也就是在编译时使用，运行时不需要它。</small></p></li><li><p>使用低版本的 lombok，例如，<code>1.14.x</code> 的最高版本 <code>1.14.8</code> 。</p></li></ol><h2 id="hibernate-validator-高版本问题" tabindex="-1"><a class="header-anchor" href="#hibernate-validator-高版本问题" aria-hidden="true">#</a> hibernate-validator 高版本问题</h2><p>hibernate-validator 的高版本<small>（邮箱注解）</small>依赖于高版本的 el-api，tomcat 8 的 el-api 是 3.0，满足需要。但是 tomcat 7 的 el-api 只有 2.2，不满足其要求。</p><p>解决办法有 2 种：</p><ul><li><p>低版本如 <strong>5.4.3.Final</strong> 在 tomcat7-maven-plugin 上可用。</p></li><li><p>使用 tomcat8-maven-plugin 。</p></li></ul>',41),e={render:function(a,n){return t}}}}]);