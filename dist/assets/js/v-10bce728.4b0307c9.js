"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[7635],{96932:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-10bce728",path:"/spring-mvc/203-%E7%BB%9F%E4%B8%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86.html",title:"Spring MVC 中的统一异常处理",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"Spring MVC 中跳转自定义 404 页面的两种常见方式",slug:"spring-mvc-中跳转自定义-404-页面的两种常见方式",children:[{level:3,title:"在 web.xml 中指定自定义的 404 页面",slug:"在-web-xml-中指定自定义的-404-页面",children:[]},{level:3,title:"提供一个匹配 * 的 Controller 请求处理方法",slug:"提供一个匹配-的-controller-请求处理方法",children:[]}]},{level:2,title:"使用 @ExceptionHandler 注解",slug:"使用-exceptionhandler-注解",children:[]},{level:2,title:"使用 @ControllerAdvice + @ExceptionHandler 注解",slug:"使用-controlleradvice-exceptionhandler-注解",children:[{level:3,title:"使用示例",slug:"使用示例",children:[]},{level:3,title:"控制生效的 Controller 范围",slug:"控制生效的-controller-范围",children:[]}]}],filePathRelative:"spring-mvc/203-统一异常处理.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},57010:(n,s,a)=>{a.r(s),a.d(s,{default:()=>e});const p=(0,a(66252).uE)('<h1 id="spring-mvc-中的统一异常处理" tabindex="-1"><a class="header-anchor" href="#spring-mvc-中的统一异常处理" aria-hidden="true">#</a> Spring MVC 中的统一异常处理</h1><h2 id="spring-mvc-中跳转自定义-404-页面的两种常见方式" tabindex="-1"><a class="header-anchor" href="#spring-mvc-中跳转自定义-404-页面的两种常见方式" aria-hidden="true">#</a> Spring MVC 中跳转自定义 404 页面的两种常见方式</h2><h3 id="在-web-xml-中指定自定义的-404-页面" tabindex="-1"><a class="header-anchor" href="#在-web-xml-中指定自定义的-404-页面" aria-hidden="true">#</a> 在 web.xml 中指定自定义的 404 页面</h3><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>error-page</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>error-code</span><span class="token punctuation">&gt;</span></span>404<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>error-code</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>location</span><span class="token punctuation">&gt;</span></span>/WEB-INF/jsp/404.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>location</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>error-page</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="提供一个匹配-的-controller-请求处理方法" tabindex="-1"><a class="header-anchor" href="#提供一个匹配-的-controller-请求处理方法" aria-hidden="true">#</a> 提供一个匹配 * 的 Controller 请求处理方法</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// 凡是不能精确匹配的 url，都会由这个请求处理方法处理</span>\n<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;*&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">error404</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token string">&quot;404&quot;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="使用-exceptionhandler-注解" tabindex="-1"><a class="header-anchor" href="#使用-exceptionhandler-注解" aria-hidden="true">#</a> 使用 @ExceptionHandler 注解</h2><p>@ExceptionHandler 注解用于标注于某个 Controller 的方法上，例如：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Controller</span>      \n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GlobalController</span> <span class="token punctuation">{</span>               \n\n    <span class="token doc-comment comment">/**    \n     * 用于处理异常的\n     */</span>      \n    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">AException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">BException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">)</span>       \n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">exception</span><span class="token punctuation">(</span><span class="token class-name">MyException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    \n        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;test1&quot;</span><span class="token punctuation">)</span>       \n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n    <span class="token punctuation">}</span>\n    \n    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;test2&quot;</span><span class="token punctuation">)</span>       \n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>当 Controller 的请求方法发生指定异常时，<strong>@ExceptionHandler</strong> 所标注的方法将会被执行。返回给服务器的数据也就由该方法的返回值决定。</p><p><strong>@ExceptionHandler</strong> 所标注的方法的常见参数有以下几种：</p><ul><li><p>一个异常参数。代表所发生的异常<small>（最常用）</small></p></li><li><p>HttpServletRequest  / HttpServletResponse  对象</p></li><li><p>HttpSession 对象</p></li><li><p>Model 对象</p></li><li><p>等等。</p></li></ul><p><strong>@ExceptionHandler</strong> 所标注的方法的返回值的类型支持：</p><ul><li><p>ModelAndView 对象<small>（最常用）</small></p></li><li><p>Model 对象</p></li><li><p>Map 对象</p></li><li><p>View 对象</p></li><li><p>被解析成一个视图名称的 String 值<small>（次常用）</small></p></li><li><p>等等</p></li></ul><p>另外，可以将 <strong>@ResponseStatus</strong> 与 <strong>@ExceptionHandler</strong> 结合使用，来定义 HTTP 响应的响应状态。</p><p>可以看到，这种方式最大的缺陷就是不能全局控制异常。每个类都要写一遍。</p><h2 id="使用-controlleradvice-exceptionhandler-注解" tabindex="-1"><a class="header-anchor" href="#使用-controlleradvice-exceptionhandler-注解" aria-hidden="true">#</a> 使用 @ControllerAdvice + @ExceptionHandler 注解</h2><p><strong>@ExceptionHandler</strong> 需要进行异常处理的方法必须与出错的方法在同一个 Controller 里面。那么当代码加入了 <strong>@ControllerAdvice</strong>，则不需要必须在同一个 controller 中了。</p><blockquote><p>这也是 Spring 3.2 带来的新特性。从名字上可以看出大体意思是控制器增强。</p></blockquote><h3 id="使用示例" tabindex="-1"><a class="header-anchor" href="#使用示例" aria-hidden="true">#</a> 使用示例</h3><p>请确保此 <strong>WebExceptionHandle</strong> 类能被扫描到并装载进 Spring 容器中。由于标注了 <strong>@ControllerAdvice</strong> 注解，在开启了包扫描的情况下，Spring 会创建该类的单例对象。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Slf4j</span>\n<span class="token annotation punctuation">@ControllerAdvice</span><span class="token punctuation">(</span>assignableTypes <span class="token operator">=</span> <span class="token class-name">FirstController</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FirstControllerExceptionHandler</span> <span class="token punctuation">{</span>\n\n    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">IllegalArgumentException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">demo1</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;IllegalArgumentException&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span><span class="token class-name">NullPointerException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;NullPointerException&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>上述方法中的参数对象就是 Controller 层抛出的异常对象。注意，该方法如果有第二个参数，那么该机制会失效，无法捕获-处理 Controller 抛出的异常！</p><h3 id="控制生效的-controller-范围" tabindex="-1"><a class="header-anchor" href="#控制生效的-controller-范围" aria-hidden="true">#</a> 控制生效的 Controller 范围</h3><p>注意到，我是这样编写注解的：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@ControllerAdvice</span><span class="token punctuation">(</span>assignableTypes <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token class-name">FirstController</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>它用来限定这些异常处理函数起作用的 Controller 的范围。如果不写，则默认对所有 Controller 有效。</p><p>这也是 ControllerAdvice 进行统一异常处理的优点，它能够细粒度的控制该异常处理器针对哪些 Controller 有效，这样的好处是：</p><ol><li><p>一个系统里就能够存在不同的异常处理器，Controller 也可以有选择的决定使用哪个，更加灵活。</p></li><li><p>不同的业务模块可能对异常处理的方式不同，通过该机制就能做到。</p></li><li><p>设想一个一开始并未使用全局异常处理的系统，如果直接引入全局范围内生效的全局异常处理，势必可能会改变已有 Controller 的行为，有侵入性。 也就是说，如果不控制生效范围，即默认对所有 Controller 生效。如果控制生效范围，则默认对所有 Controller 不生效，降低侵入性。</p></li></ol><p>ControllerAdvice 支持的限定范围：</p><ol><li><p>按注解：<strong>@ControllerAdvice(annotations = RestController.class)</strong></p></li><li><p>按包名：<strong>@ControllerAdvice(&quot;org.example.controllers&quot;)</strong></p></li><li><p>按类型：<strong>@ControllerAdvice(assignableTypes = {ControllerInterface.class, AbstractController.class})</strong></p></li></ol>',31),e={render:function(n,s){return p}}}}]);