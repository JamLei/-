"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[5516],{15769:(t,l,e)=>{e.r(l),e.d(l,{data:()=>o});const o={key:"v-de0fbf60",path:"/linux/00-%E9%A2%84%E5%A4%87%E7%9F%A5%E8%AF%86.html",title:"系统安装的预备知识",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"主分区和逻辑分区",slug:"主分区和逻辑分区",children:[]},{level:2,title:"分区的编号",slug:"分区的编号",children:[]},{level:2,title:"开机启动和 boot loader",slug:"开机启动和-boot-loader",children:[]}],filePathRelative:"linux/00-预备知识.md",git:{updatedTime:1629790307e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},20253:(t,l,e)=>{e.r(l),e.d(l,{default:()=>a});const o=(0,e(66252).uE)('<h1 id="系统安装的预备知识" tabindex="-1"><a class="header-anchor" href="#系统安装的预备知识" aria-hidden="true">#</a> 系统安装的预备知识</h1><h2 id="主分区和逻辑分区" tabindex="-1"><a class="header-anchor" href="#主分区和逻辑分区" aria-hidden="true">#</a> 主分区和逻辑分区</h2><p>『<strong>主分区</strong>』和『<strong>逻辑分区</strong>』的概念的区别，以及『<strong>扩展分区</strong>』概念的引出，都是历史发展过程中的产物。</p><p><strong>DOS</strong> 和 <strong>FAT</strong> 文件系统<small>（它们是最早出现的广为流行的个人 PC 上的文件系统）</small>的早期设计思路是支持最多 24 个分区，可用盘符从 <strong>C</strong> 到 <strong>Z</strong> 。<small>（<code>A</code> 和 <code>B</code> 两个盘符固定分配给了软驱）。</small></p><p>但是这个设定很快和另一个设定冲突了：MBR<small>（主引导记录）</small>的分区表中最多只能存放 4 个分区的相关信息。</p><p>为了避免被『打脸』<small>（ 24 VS 4）</small>，<strong>DOS</strong> 和 <strong>FAT</strong> 提出了一个方案：你可以将多个分区『<strong>装</strong>』进一个<small>（概念上的）</small>容器中把它们『<strong>当作</strong>』一个整体。这样，N 个分区就变成了 1 个分区。</p><blockquote><p>通过这种方案，别说 24 个分区硬凑成 4 个分区，就是 240 个分区你都能硬凑成 4 个分区。</p></blockquote><p>这样，被『装』进这个<small>（概念上的）</small>容器中的各个分区就被称为『<strong>逻辑分区</strong>』。它们这个整体，也就是这个容器被称为『<strong>扩展分区</strong>』。</p><p>有些分区独立存在的，不用和别的分区硬凑进扩展分区中的分区就被称为『<strong>主分区</strong>』。</p><p>这样<code>凑四</code>的方案就可以有很多种了。<small>当然，你也『<strong>不一定非得用满 4 个分区</strong>』。</small>方案很多，无穷无尽，随手例如：</p><table><thead><tr><th style="text-align:center;">#</th><th style="text-align:left;">方案一</th><th style="text-align:left;">方案二</th><th style="text-align:left;">方案三</th></tr></thead><tbody><tr><td style="text-align:center;">1</td><td style="text-align:left;">主分区</td><td style="text-align:left;">主分区</td><td style="text-align:left;">主分区</td></tr><tr><td style="text-align:center;">2</td><td style="text-align:left;">主分区</td><td style="text-align:left;">主分区</td><td style="text-align:left;">扩展分区，<br><small>它由 5 个逻辑分区组成</small></td></tr><tr><td style="text-align:center;">3</td><td style="text-align:left;">主分区</td><td style="text-align:left;">扩展分区，<br><small>它由 10 个逻辑分区组成</small></td><td style="text-align:left;">扩展分区，<br><small>它由 10 个逻辑分区组成</small></td></tr><tr><td style="text-align:center;">4</td><td style="text-align:left;">扩展分区，<br><small>它由 21 个逻辑分区组成</small></td><td style="text-align:left;">扩展分区，<br><small>它由 12 个逻辑分区组成</small></td><td style="text-align:left;">扩展分区，<br><small>它由 8 个逻辑分区组成</small></td></tr></tbody></table><p>再强调一遍，如果你本身没有那么多的分区需求，你完全可以就是直接 4 个主分区<small>（或更少的主分区）</small>，简单粗暴。</p><table><thead><tr><th style="text-align:center;">#</th><th style="text-align:left;">方案一</th><th style="text-align:left;">方案二</th><th style="text-align:left;">方案三</th><th style="text-align:left;">方案四</th></tr></thead><tbody><tr><td style="text-align:center;">1</td><td style="text-align:left;">主分区</td><td style="text-align:left;">主分区</td><td style="text-align:left;">主分区</td><td style="text-align:left;">主分区</td></tr><tr><td style="text-align:center;">2</td><td style="text-align:left;">主分区</td><td style="text-align:left;">主分区</td><td style="text-align:left;">主分区</td><td style="text-align:left;">无</td></tr><tr><td style="text-align:center;">3</td><td style="text-align:left;">主分区</td><td style="text-align:left;">主分区</td><td style="text-align:left;">无</td><td style="text-align:left;">无</td></tr><tr><td style="text-align:center;">4</td><td style="text-align:left;">主分区</td><td style="text-align:left;">无</td><td style="text-align:left;">无</td><td style="text-align:left;">无</td></tr></tbody></table><hr><h2 id="分区的编号" tabindex="-1"><a class="header-anchor" href="#分区的编号" aria-hidden="true">#</a> 分区的编号</h2><p>在 Windows 中，各个分区都有盘符表示，从 <strong>C</strong> 到 <strong>Z</strong>。在 Linux 中则使用的是数字编号，并且人为规定编号有『主分区』和『逻辑分区』之分：</p><ul><li><p>『<strong>主分区</strong>』使用数字：1、2、3、4</p></li><li><p>『<strong>逻辑分区</strong>』使用数字：5、6、7、8、...</p></li></ul><blockquote><p>在 Windows 中，作为『逻辑分区』的容器，『<strong>扩展分区</strong>』这个概念十分明显，在不少些地方你会看到『扩展分区』这个名词。</p><p>但是在 Linux 中，扩展分区概念十分弱化，一般你面对的都是『<strong>主分区</strong>』、『<strong>逻辑分区</strong>』这两个概念。</p></blockquote><p>当然，如果你没有那么多主分区，那么中间的某些数字可能会跳过。因为第一个逻辑分区的编号必定是 5 。</p><p>例如，上述的方案二，你得到的各个分区的数字编号将是：1、2、5、6、7、... 。</p><h2 id="开机启动和-boot-loader" tabindex="-1"><a class="header-anchor" href="#开机启动和-boot-loader" aria-hidden="true">#</a> 开机启动和 boot loader</h2><p>计算机的开机启动有固定的流程：</p><ol><li><p>主板通电后执行主板中的 BIOS，去执行某些任务；</p></li><li><p>BIOS 最后会加载『<strong>硬盘第一个扇区</strong>』<small>（512 个字节）</small>中的代码；<small>至此，BIOS<small>（在本次启动中）</small>的任务使命结束。</small></p><p>硬盘第一个扇区的 512 个字节中有 2 部分内容：</p><ul><li><p>前 446 字节中是被称为 <strong>boot loader</strong> 的程序的代码；</p></li><li><p>后 64 字节中最多可存放 4 个分区的相关信息（8 x 4 字节）；</p></li><li><p>最后 2 个字节是固定的标志 0x55AA 。</p></li></ul></li><li><p>BIOS 结束运行后，<strong>boot loader</strong> 开始运行。<strong>boot loader</strong> 的使命和任务就是加载操作系统镜像并运行。</p></li><li><p>boot loader 加载了操作系统镜像之后，它（在本次启动过程中的）使命就结束了。</p></li><li><p>操作系统开始运行，电脑的控制权就交到了操作系统手里。</p></li></ol><p>boot loader 是一类软件的总称<small>（角色、身份）</small>。Windows 使用的 boot loader 是 <strong><code>windows boot manager</code></strong>，Linux 使用的 boot loader 是 <strong><code>grub2</code></strong> 。</p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/linux/img/boot-loader.png" alt="boot-loader"></p><hr><p>从上面的开机启动过程可以看到，开机无法进入系统的原因通常有：</p><ul><li><p>BIOS 坏了<small>（这个可能性极低）</small>。</p></li><li><p>硬盘的第一个扇区中的内容不正确，因此 BIOS 无法加载 boot loader，无法进入下一个环节。</p></li><li><p>boot loader 没有发现你电脑上有系统镜像，或者，没有发现你电脑上的全部系统镜像。</p></li></ul><hr><p>毫无疑问，一台电脑上，boot loader 软件有且仅需要一个。<code>windows boot manager</code> 或者是 <code>grub2</code> 。</p><p>不过，有可能你有意或无意中遇到特殊情况。例如，你的电脑是双硬盘，你在两块硬盘上分别安装 Windows 和 Linux 双系统，并且将它们对应的 boot loader 也在两个硬盘上各装了一个。</p><p>对于这种情况，无论你有多少个硬盘，其上又有多少个 boot loader，BIOS 总是按照先后顺序挨个在各个硬盘上查找是否存在 boot loader，如果有，则加载，运行，并且不再查找下一个硬盘。</p><p>当然，你可以在 BIOS 中去设置硬盘的优先级，从而决定使用哪个硬盘上所安装的 boot loader。但是本质上这里始终是只有一个 boot loader 在起作用。</p>',33),a={render:function(t,l){return o}}}}]);