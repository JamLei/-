"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[6127],{58190:(i,l,e)=>{e.r(l),e.d(l,{data:()=>t});const t={key:"v-72b1bc6e",path:"/utility/spring-utils/99-spring-statemachine.html",title:"squirrel-foundation",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"有限状态机概念",slug:"有限状态机概念",children:[]},{level:2,title:"目标状态机功能介绍",slug:"目标状态机功能介绍",children:[]}],filePathRelative:"utility/spring-utils/99-spring-statemachine.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},89680:(i,l,e)=>{e.r(l),e.d(l,{default:()=>a});const t=(0,e(66252).uE)('<p><span class="title">Spring Statemachine</span></p><h2 id="有限状态机概念" tabindex="-1"><a class="header-anchor" href="#有限状态机概念" aria-hidden="true">#</a> 有限状态机概念</h2><p>有限状态机简称状态机，它表示有限个状态以及在这些状态之间的转移和动作等行为的数学模型。</p><p>通俗的描述状态机就是定义了一套状态変更的流程：状态机包含一个状态集合，定义当状态机处于某一个状态的时候它所能接收的事件以及可执行的行为，执行完成后，状态机所处的状态。</p><p>状态机会包含以下几个重要的元素：</p><ul><li><p>State：状态</p><ul><li>一个标准的状态机最少包含两个状态：初始和终态。</li><li>初态是状态机初始化后所处的状态，而终态顾名思义就是状态机结束时所处的状态。</li><li>其他的状态都是一些流转中停留的状态。</li></ul></li><li><p>Event：事件</p><ul><li>还有中描述叫 Trigger，就是要执行某个操作的触发器或口令</li><li>当状态机处于某个状态时，只有外界告诉状态机要干什么事情的时候，状态机才会去执行具体的行为，来完成外界想要它完成的操作。</li></ul></li><li><p>Action：行为</p><ul><li>状态变更索要执行的具体行为。</li></ul></li><li><p>Transition：变更</p><ul><li>一个状态接收一个事件执行了某些行为到达了另外一个状态的过程就是一个Transition。</li><li>定义Transition就是在定义状态机的运转流程。</li></ul></li></ul><p>状态机主要的应用场景就是流程控制：</p><ul><li>一个状态机定义以后，在某个状态下就只接收固定的Event，也就是执行指定的操作</li><li>一个很典型的应用就是工作流引擎</li></ul><h2 id="目标状态机功能介绍" tabindex="-1"><a class="header-anchor" href="#目标状态机功能介绍" aria-hidden="true">#</a> 目标状态机功能介绍</h2><p>状态机的定义：通过定义 State，Event，Action，Transition 来实现状态机的流转，摒弃标准状态机中那些较复杂的概念（通过其他方式来实现所谓的较复杂的操作）</p><ul><li>状态持久化：数据持久化到数据库，实现状态机的中断重启</li><li>上下文保存与传递：提供一套流程流转过程中参数的传递机制</li><li>并发控制：提供不同状态机隔离，同一状态机单实例运行机制</li><li>功能增强：接口或注解的形式实现自触发，重试，定时执行</li></ul><h1 id="squirrel-foundation" tabindex="-1"><a class="header-anchor" href="#squirrel-foundation" aria-hidden="true">#</a> squirrel-foundation</h1><p>squirrel-foundation 是一款轻量级的java有限状态机。既支持流式API又支持声明式创建状态机，允许用户以一种简单方式定义操作方法。</p><p>简单操作介绍</p><ul><li>machine（T） 代表实现的状态机类型。</li><li>state（S） 代表实现的状态类型。</li><li>event（E） 代表实现的事件类型。</li><li>context（C） 代表实现的外部上下文类型。</li></ul><p>『未完待续 ... 』</p>',16),a={render:function(i,l){return t}}}}]);