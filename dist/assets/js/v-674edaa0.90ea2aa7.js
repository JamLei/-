"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[9293],{59567:(n,a,s)=>{s.r(a),s.d(a,{data:()=>t});const t={key:"v-674edaa0",path:"/utility/apache-commons/99-commons-chain.html",title:"Apache Commons Chain",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"基本概念",slug:"基本概念",children:[]},{level:2,title:"极简案例",slug:"极简案例",children:[]},{level:2,title:"基本对象",slug:"基本对象",children:[{level:3,title:"Command 接口",slug:"command-接口",children:[]},{level:3,title:"Context 接口",slug:"context-接口",children:[]},{level:3,title:"Chain 接口",slug:"chain-接口",children:[]},{level:3,title:"Filter 接口",slug:"filter-接口",children:[]},{level:3,title:"Catalog 接口",slug:"catalog-接口",children:[]}]},{level:2,title:"基本使用",slug:"基本使用",children:[]}],filePathRelative:"utility/apache-commons/99-commons-chain.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},56711:(n,a,s)=>{s.r(a),s.d(a,{default:()=>p});const t=(0,s(66252).uE)('<h1 id="apache-commons-chain" tabindex="-1"><a class="header-anchor" href="#apache-commons-chain" aria-hidden="true">#</a> <span class>Apache Commons Chain</span></h1><h2 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念" aria-hidden="true">#</a> 基本概念</h2><p>apache commons chain 提供了对责任链（Chain Of Responsebility）模式的基础支持。Commons Chain 实现了 Chain of Responsebility 和 Command 模式，其中的 <code>Catalog + 配置文件</code> 的方式使得调用方和 Command 的实现方的耦合度大大的降低，提高了灵活性。</p><p>使用 Apachecommons chain，需要将 <em>commons-chain.jar</em> 放入你的 classpath。另外，如果要使用 <code>Catalog + 配置文件</code> 的方式还需要加入 <em>commons-digester.jar</em> 包。</p><p>从使用的角度来看，Commons Chain 和工作流（workflow）非常相似。</p><h2 id="极简案例" tabindex="-1"><a class="header-anchor" href="#极简案例" aria-hidden="true">#</a> 极简案例</h2><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Command1</span> <span class="token keyword">implements</span> <span class="token class-name">Command</span> <span class="token punctuation">{</span>\n\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">Context</span> arg0<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Command1 is done!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n<span class="token punctuation">}</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Command2</span> <span class="token keyword">implements</span> <span class="token class-name">Command</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>\n\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Command3</span> <span class="token keyword">implements</span> <span class="token class-name">Command</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span>\n\n<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Chain</span> chain <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChainBase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    chain<span class="token punctuation">.</span><span class="token function">addCommand</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Command1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    chain<span class="token punctuation">.</span><span class="token function">addCommand</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Command2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    chain<span class="token punctuation">.</span><span class="token function">addCommand</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Command3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token class-name">Context</span> ctx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ContextBase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    chain<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h2 id="基本对象" tabindex="-1"><a class="header-anchor" href="#基本对象" aria-hidden="true">#</a> 基本对象</h2><h3 id="command-接口" tabindex="-1"><a class="header-anchor" href="#command-接口" aria-hidden="true">#</a> Command 接口</h3><p>它是 Commons Chain 中最重要的接口，表示在 Chain 中的具体某一步要执行的命令。它只有一个方法：<code>boolean execute(Context context)</code> 。如果返回 true，那么表示 Chain 的处理结束，Chain 中的其他命令不会被调用；返回 false，则 Chain 会继续调用下一个 Command，直到：</p><ul><li><p>Command 返回 true；</p></li><li><p>Command 抛出异常；</p></li><li><p>Chain 的末尾；</p></li></ul><h3 id="context-接口" tabindex="-1"><a class="header-anchor" href="#context-接口" aria-hidden="true">#</a> Context 接口</h3><p>它表示命令执行的上下文，在命令间实现共享信息的传递。<strong>Context</strong> 接口的父接口是 Map，<strong>ContextBase</strong> 实现了 <strong>Context</strong>。对于 web 环境，可以使用 <em><strong><code>WebContext</code></strong></em> 类及其子类（<em><code>FacesWebContext</code></em>、<em><code>PortletWebContext</code></em> 和 <em><code>ServletWebContext</code></em>）。</p><h3 id="chain-接口" tabindex="-1"><a class="header-anchor" href="#chain-接口" aria-hidden="true">#</a> Chain 接口</h3><p>它表示“命令链”，要在其中执行的命令，需要先添加到 <em><strong><code>Chain</code></strong></em> 中。<em><strong><code>Chain</code></strong></em> 的父接口是 <em><strong><code>Command</code></strong></em>，<em><strong><code>ChainBase</code></strong></em> 实现了它。</p><h3 id="filter-接口" tabindex="-1"><a class="header-anchor" href="#filter-接口" aria-hidden="true">#</a> Filter 接口</h3><p>它的父接口是 Command，它是一种特殊的 Command。除了 Command 的 <em><code>.execute()</code></em>，它还包括一个方法：<em><code>boolean postprocess(Context context, Exception exception)</code></em> 。Commons Chain 会在执行了 Filter 的 <em><code>.execute()</code></em> 方法之后，执行 <em><code>.postprocess()</code></em>（不论 Chain 以何种方式结束）。Filter 的执行 <em><code>.execute()</code></em> 的顺序与 Filter 出现在 Chain 中出现的位置一致，但是执行 postprocess 顺序与之相反。</p><p>如：如果连续定义了 filter1 和 filter2，那么 execute 的执行顺序是：filter1 -&gt; filter2；而 postprocess 的执行顺序是：filter2 -&gt; filter1。</p><h3 id="catalog-接口" tabindex="-1"><a class="header-anchor" href="#catalog-接口" aria-hidden="true">#</a> Catalog 接口</h3><p>它是逻辑命名的 Chain 和 Command 集合。通过使用它，Command 的调用者不需要了解具体实现 Command 的类名，只需要通过名字就可以获取所需要的 Command 实例。</p><h2 id="基本使用" tabindex="-1"><a class="header-anchor" href="#基本使用" aria-hidden="true">#</a> 基本使用</h2><p>除了上述极简案例中那样直接使用 ChainBase 外，还可以自己创建 ChainBase 的子类再使用：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommandChain</span> <span class="token keyword">extends</span> <span class="token class-name">ChainBase</span> <span class="token punctuation">{</span>\n\n    <span class="token comment">// 增加命令的顺序也决定了执行命令的顺序</span>\n    <span class="token keyword">public</span> <span class="token class-name">CommandChain</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">addCommand</span><span class="token punctuation">(</span> <span class="token keyword">new</span> <span class="token class-name">Command1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">addCommand</span><span class="token punctuation">(</span> <span class="token keyword">new</span> <span class="token class-name">Command2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">addCommand</span><span class="token punctuation">(</span> <span class="token keyword">new</span> <span class="token class-name">Command3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exceptio</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Command</span> process <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CommandChain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Context</span> ctx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ContextBase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    process<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span> ctx <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>除了在程序中注册命令之外，还可以使用配置文件来完成。</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;gb2312&quot;?&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>catalog</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>chain</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>CommandChain<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n        <span class="token comment">&lt;!-- 定义的顺序决定执行的顺序 --&gt;</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>command</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>command1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">&quot;</span>chain.Command1<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>command</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>command2<span class="token punctuation">&quot;</span></span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">&quot;</span>chain.Command2<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>command</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>command3<span class="token punctuation">&quot;</span></span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">&quot;</span>chain.Command3<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>chain</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>command</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>command4<span class="token punctuation">&quot;</span></span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>chain.Command1<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>catalog</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>装入配置文件的代码如下：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">final</span> <span class="token class-name">String</span> cfgFile <span class="token operator">=</span> <span class="token string">&quot;/chain-cfg.xml&quot;</span><span class="token punctuation">;</span>    <span class="token comment">// from classpath</span>\n    <span class="token class-name">ConfigParser</span> parser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConfigParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    parser<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token class-name">AppTest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span>cfgFile<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Catalog</span> catalog <span class="token operator">=</span> <span class="token class-name">CatalogFactoryBase</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCatalog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 加载 Chain</span>\n    <span class="token class-name">Command</span> cmd <span class="token operator">=</span> catalog<span class="token punctuation">.</span><span class="token function">getCommand</span><span class="token punctuation">(</span><span class="token string">&quot;CommandChain&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name">Context</span> ctx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ContextBase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    cmd<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 加载 Command</span>\n    cmd <span class="token operator">=</span> catalog<span class="token punctuation">.</span><span class="token function">getCommand</span><span class="token punctuation">(</span><span class="token string">&quot;command4&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    cmd<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p><strong>注意</strong>：使用配置文件的话，需要使用 Commons Digester。而 Digester 则依赖：Commons Collections、Commons Logging 和 Commons BeanUtils。</p><hr><p>加载 Catalog 到 web 应用。为了在 web 应用中加载 Catalog，需要在对应的 web.xml 中添加：</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>org.apache.commons.chain.CONFIG_CLASS_RESOURCE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>resources/catalog.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener-class</span><span class="token punctuation">&gt;</span></span>org.apache.commons.chain.web.ChainListener<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener-class</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>默认情况下，Catalog 会被加载到 Servlet Context 中，对应的属性名字是 <em><code>catalog</code></em> 。因此获取 Catalog ：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Catalog</span> catalog <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Catalog</span><span class="token punctuation">)</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;catalog&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Over</p>',34),p={render:function(n,a){return t}}}}]);