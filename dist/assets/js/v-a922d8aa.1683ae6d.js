"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[3591],{38111:(s,a,t)=>{t.r(a),t.d(a,{data:()=>e});const e={key:"v-a922d8aa",path:"/spring-cloud/21-netflix-hystrix-dashboard.html",title:"Hystrix-DashBoard 服务监控",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"1. 单服务监控",slug:"_1-单服务监控",children:[{level:3,title:"1.1 step 1. 对外暴露 hystrix.stream 端点",slug:"_1-1-step-1-对外暴露-hystrix-stream-端点",children:[]},{level:3,title:"1.2 step 2: 启用 hystrix-dashboard",slug:"_1-2-step-2-启用-hystrix-dashboard",children:[]}]},{level:2,title:"2. Hystrix-dashboard 集群监控",slug:"_2-hystrix-dashboard-集群监控",children:[]}],filePathRelative:"spring-cloud/21-netflix-hystrix-dashboard.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},64152:(s,a,t)=>{t.r(a),t.d(a,{default:()=>c});var e=t(66252);const n=(0,e.uE)('<h1 id="hystrix-dashboard-服务监控" tabindex="-1"><a class="header-anchor" href="#hystrix-dashboard-服务监控" aria-hidden="true">#</a> Hystrix-DashBoard 服务监控</h1><h2 id="_1-单服务监控" tabindex="-1"><a class="header-anchor" href="#_1-单服务监控" aria-hidden="true">#</a> 1. 单服务监控</h2><p>在使用了 Hystrix 进行服务熔断降级之后，我们亟待于有一种方式可以查看 Spring Cloud 微服务各个节点的哪些方法接口触发了熔断、请求成功数量、请求失败数量，包括断路器状态、服务请求频率等信息。</p><p>运维人员对这些信息进行观察、分析之后，才能有效的进行服务的扩容、调整，从而更好地满足微服务系统的高并发以及高可用的要求！</p><p><strong>注意</strong>：由于 Hystrix 是作用于服务的发起方的，所有我们这里贯彻的是请求发起方的 Hystrix 的实时信息，当然，这也间接反映出了请求接收方的运行状态。</p><p>在整个监控体系中，角色有 3 个：</p><table><thead><tr><th style="text-align:left;">注册中心</th><th style="text-align:left;">服务提供者</th><th style="text-align:left;">服务调用者</th></tr></thead><tbody><tr><td style="text-align:left;">eureka-server</td><td style="text-align:left;">eureka-client</td><td style="text-align:left;">eureka-client</td></tr><tr><td style="text-align:left;"><em>actuator</em></td><td style="text-align:left;">web</td><td style="text-align:left;">web</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;"><em>actuator</em></td><td style="text-align:left;">hystrix</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;"><strong>hystrix-dashboard</strong></td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;"></td><td style="text-align:left;"><strong>actuator</strong></td></tr></tbody></table><h3 id="_1-1-step-1-对外暴露-hystrix-stream-端点" tabindex="-1"><a class="header-anchor" href="#_1-1-step-1-对外暴露-hystrix-stream-端点" aria-hidden="true">#</a> 1.1 step 1. 对外暴露 <strong>hystrix.stream</strong> 端点</h3><p>未来，Hystrix Dashboard 要通过访问 Hystrix 所在服务的 actuator 的 <code>hystrix.stream</code> 端点，来获得 Hystrix 的运行情况，其中就包括Hystrix 所统计的对外发起调用的成功、失败、熔断等情况。</p><p>因此，我们首先要 <strong>hystrix.stream</strong> 端点可访问。否则，你访问该该端点的 URL 时会出现 404 错误。</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">management</span><span class="token punctuation">:</span>\n  <span class="token key atrule">endpoints</span><span class="token punctuation">:</span>\n    <span class="token key atrule">web</span><span class="token punctuation">:</span>\n      <span class="token key atrule">exposure</span><span class="token punctuation">:</span>\n        <span class="token key atrule">include</span><span class="token punctuation">:</span> refresh<span class="token punctuation">,</span> health<span class="token punctuation">,</span> hystrix.stream\n<span class="token comment">#       include: &quot;*&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div>',11),r=(0,e.Uk)("通过配置，开放 actuator 的 "),l=(0,e._)("strong",null,"hystrix.stream",-1),i=(0,e.Uk)(" 端点后，你可以通过 "),p={href:"http://localhost:9090/actuator/hystrix.stream",target:"_blank",rel:"noopener noreferrer"},o=(0,e._)("em",null,"http://localhost:9090/actuator/hystrix.stream",-1),d=(0,e.Uk)(" 查看到服务调用者的熔断信息。"),h=(0,e.uE)('<p>但是，在初次访问时，你会看到大量的滚动的 <em><strong>ping</strong></em> 字样，而无实际内容！这是因为，服务调用着还未发出对提供者的远程调用，因此 Hystrx 的熔断功能一次执行机会都没有。</p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/spring-cloud/img/hystrix-dashboard-1.png" alt="hystrix-dashboard-1"></p><p>你需要手动触发服务调用者的某个功能，进而使它去向服务提供者发出远程请求。在此之后，你在页面上会看到滚动的大段的 Hystrix 相关信息。</p><h3 id="_1-2-step-2-启用-hystrix-dashboard" tabindex="-1"><a class="header-anchor" href="#_1-2-step-2-启用-hystrix-dashboard" aria-hidden="true">#</a> 1.2 step 2: 启用 hystrix-dashboard</h3><p>为『<strong>服务使用者</strong>』添加 <strong>@EnableHystrixDashboard</strong>，启用其 Hystrix Dashboard 功能。前提是它有 hystrix dashboard 依赖 。</p><p>在启用 Hystrix Dashboard 功能之后，通过网址 <a href="%5Bhttp://localhost:9090/hystrix%5D"><em>http://localhost:9090/hystrix</em></a> 你可以看到 Hystrix Dashboard 自带的监控页面。</p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/spring-cloud/img/hystrix-dashboard-2.png" alt="hystrix-dashboard-2"></p><p>按照页面上的提示，在输入框中输入需要观测的 URI，也就是上一步中的那个 <code>actuator/hystrix.stream</code> 网址。</p><p>理论上，你本应该看见该看见的内容，但是实际上并没有：</p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/spring-cloud/img/hystrix-dashboard-3.png" alt="hystrix-dashboard-3"></p><p>并且，在『服务调用者』的控制台你会看见 WARN 信息：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>Origin parameter: http://localhost:9090/actuator/hystrix.stream is not <span class="token keyword">in</span> the allowed list of proxy <span class="token function">host</span> names. If it should be allowed <span class="token function">add</span> it to hystrix.dashboard.proxyStreamAllowList\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>按照提示信息，将你要观察的 URL 添加到 hystrix 的 <strong>proxy-stream-allow-list</strong> 配置项中。这相当于是一个白名单。</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">hystrix</span><span class="token punctuation">:</span>\n  <span class="token key atrule">dashboard</span><span class="token punctuation">:</span>\n    <span class="token key atrule">proxy-stream-allow-list</span><span class="token punctuation">:</span> localhost<span class="token punctuation">,</span> 127.0.0.1\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><img src="https://hemiao3000.gitee.io/java-note-img/images/spring-cloud/img/hystrix-dashboard-4.png" alt="hystrix-dashboard-4"></p><p>页面上的关键指标如下：</p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/spring-cloud/img/hystrix-dashboard-5.png" alt="hystrix-dashboard-5"></p><h2 id="_2-hystrix-dashboard-集群监控" tabindex="-1"><a class="header-anchor" href="#_2-hystrix-dashboard-集群监控" aria-hidden="true">#</a> 2. Hystrix-dashboard 集群监控</h2><p>我们只能每次监控一个服务。在大型的微服务系统中动则几百微服务，还是需要一种把监控信息聚合起来的方式，方便我们发现集群内个服务节点中的问题。</p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/spring-cloud/img/hystrix-dashboard-6.png" alt="hystrix-dashboard-6"></p><blockquote><p>我们上面的例子中，为了简便起见，hystrix-dashboard 和服务调用者是同一个项目。按道理，应该创建一个单独的 hystrix-dashboard 项目来监控其它各个服务的熔断器状态。</p></blockquote><p>新建一个 Turbine 项目：</p><ol><li><p>加依赖：</p><ul><li>eureka-client</li><li>netflix-turbine</li></ul></li><li><p>加注解:</p><p>在启动类上使用 <strong>@EnableTurbine</strong> 注解开启 Turbine 功能。</p></li><li><p>加配置：</p><p>在 application.yml 加入 Eureka Client 和 Turbine 的相关配置：</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">server</span><span class="token punctuation">:</span>\n  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">10086</span>\n\n<span class="token comment"># 其它配置和 Eureka Client 配置略。</span>\n\n<span class="token key atrule">turbine</span><span class="token punctuation">:</span>\n  <span class="token key atrule">app-config</span><span class="token punctuation">:</span> CONSUMER\n  <span class="token key atrule">cluster-name-expression</span><span class="token punctuation">:</span> new String(&quot;default&quot;)\n  <span class="token key atrule">combine-host-port</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><ul><li><p><strong>turbine.app-config</strong>：指定需要收集监控信息的服务名，多个服务名之间用逗号分隔。</p></li><li><p><strong>turbine.combine-host-port</strong>：设置为 <code>true</code> ，可以让同一主机上的服务通过主机名与端口号的组合来进行区分。默认情况下会以 host 来区分不同的服务，这会使得在本地调试的时候，本机上的不同服务聚合成一个服务来统计。</p></li><li><p><strong>turbine.cluster-name-expression</strong>：指定集群名称为<strong>default</strong>。当我们服务数量非常多的时候，可以启动多个 Turbine 服务来构建不同的聚合集群，而这个参数可以用来区分这些不同的聚合集群，同时这个参数值可以在 Hystrix Dashboard 中用来定位不同的聚合集群，只需要在 Hystrix Stream 的 URL 中通过 cluster 参数来指定。</p></li></ul><p><strong>注意</strong>：<code>default</code> 这个一定要用 <code>new String(&quot;...&quot;)</code> 来『包』一下，否则有 bug 。</p></li></ol><p>访问 Turbine 的 <em>http://localhost:10086/turbine.stream</em> ，你可以看到如下的文字信息：</p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/spring-cloud/img/hystrix-dashboard-7.png" alt="hystrix-dashboard-7"></p><p>访问 Hystrix Dashboard 并对http://localhost:10086/turbine.stream 聚合结果进行监控：</p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/spring-cloud/img/hystrix-dashboard-8.png" alt="hystrix-dashboard-8"></p>',27),c={render:function(s,a){const t=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.iD)(e.HY,null,[n,(0,e._)("p",null,[r,l,i,(0,e._)("a",p,[o,(0,e.Wm)(t)]),d]),h],64)}}}}]);