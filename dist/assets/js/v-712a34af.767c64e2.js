"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[1359],{27648:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-712a34af",path:"/spring/08-RestTemplate.html",title:"RestTemplate",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"API 方法介绍",slug:"api-方法介绍",children:[]},{level:2,title:"发起 GET 请求",slug:"发起-get-请求",children:[{level:3,title:"无参的情况",slug:"无参的情况",children:[]},{level:3,title:"有参的情况",slug:"有参的情况",children:[]},{level:3,title:"返回一个对象",slug:"返回一个对象",children:[]},{level:3,title:"返回一个对象的集合",slug:"返回一个对象的集合",children:[]}]},{level:2,title:"发起 POST 请求",slug:"发起-post-请求",children:[{level:3,title:"无参的情况",slug:"无参的情况-1",children:[]},{level:3,title:"有参的情况",slug:"有参的情况-1",children:[]},{level:3,title:"返回一个对象",slug:"返回一个对象-1",children:[]},{level:3,title:"返回一个对象的集合",slug:"返回一个对象的集合-1",children:[]}]},{level:2,title:"发起 PUT 请求",slug:"发起-put-请求",children:[{level:3,title:"无参的情况",slug:"无参的情况-2",children:[]},{level:3,title:"有参的情况",slug:"有参的情况-2",children:[]},{level:3,title:"返回一个对象",slug:"返回一个对象-2",children:[]},{level:3,title:"返回一个对象的集合",slug:"返回一个对象的集合-2",children:[]}]},{level:2,title:"发起 DELETE 请求",slug:"发起-delete-请求",children:[{level:3,title:"无参的情况",slug:"无参的情况-3",children:[]},{level:3,title:"有参的情况",slug:"有参的情况-3",children:[]},{level:3,title:"返回一个对象",slug:"返回一个对象-3",children:[]},{level:3,title:"返回一个对象的集合",slug:"返回一个对象的集合-3",children:[]},{level:3,title:"实现 DELETE 的批量删除",slug:"实现-delete-的批量删除",children:[]}]}],filePathRelative:"spring/08-RestTemplate.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},54528:(n,s,a)=>{a.r(s),a.d(s,{default:()=>p});const t=(0,a(66252).uE)('<h1 id="resttemplate" tabindex="-1"><a class="header-anchor" href="#resttemplate" aria-hidden="true">#</a> RestTemplate</h1><p>SpringRestTemplate 是 Spring 提供的用于访问 Rest 服务的客端。 RestTemplate 提供了多种便捷访问远程 HTTP 服务的方法，能够大大提高客户端的编写效率，所以很多客户端比如 Android 或者第三方服务商都是使用 RestTemplate 请求 restful 服务。</p><table><thead><tr><th style="text-align:left;">method</th><th style="text-align:left;">content-type</th><th style="text-align:left;">body</th><th style="text-align:left;">SpringMVC 参数注解</th></tr></thead><tbody><tr><td style="text-align:left;">GET</td><td style="text-align:left;">none</td><td style="text-align:left;">none</td><td style="text-align:left;">@RequestParam</td></tr><tr><td style="text-align:left;">POST</td><td style="text-align:left;">x-www-form-urlencoded</td><td style="text-align:left;">username=tom&amp;age=20</td><td style="text-align:left;">@RequestParam</td></tr><tr><td style="text-align:left;">PUT</td><td style="text-align:left;">json</td><td style="text-align:left;">{ username:tom, age:20 }</td><td style="text-align:left;">@RequestBody</td></tr><tr><td style="text-align:left;">DELETE</td><td style="text-align:left;">none</td><td style="text-align:left;">none</td><td style="text-align:left;">@PathVariable</td></tr></tbody></table><p>另外，GET 如果像 DELETE 一样将参数作为 URL 的一部分，那么也是用 @PathVariable 。</p><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>《Spring MVC 中 PUT、PATCH 请求参数》。</p><p>使用 Spring Boot 实现 Server 端时，Spring Boot 自动配置了使用 <strong>HttpPutFormContentFilter</strong> 解决 PUT 请求获取不到参数问题。 因此，RestTemplate 发出 PUT 请求时，content-type 反而要设置成 <code>x-www-form-urlencoded</code> 这种『好似错误』的情况。</p></div><h2 id="api-方法介绍" tabindex="-1"><a class="header-anchor" href="#api-方法介绍" aria-hidden="true">#</a> API 方法介绍</h2><p>常见方法有：</p><table><thead><tr><th style="text-align:left;">请求类型</th><th style="text-align:left;">API</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">GET</td><td style="text-align:left;"><code>getForEntity()</code></td><td style="text-align:left;">返回的 ResponseEntity 包含了响应体所映射成的对象</td></tr><tr><td style="text-align:left;">GET</td><td style="text-align:left;"><code>getForObject()</code></td><td style="text-align:left;">返回的请求体将映射为一个对象</td></tr><tr><td style="text-align:left;">POST</td><td style="text-align:left;"><code>postForEntity()</code></td><td style="text-align:left;">返回包含一个对象的 ResponseEntity，这个对象是从响应体中映射得到的</td></tr><tr><td style="text-align:left;">POST</td><td style="text-align:left;"><code>postForObject()</code></td><td style="text-align:left;">返回根据响应体匹配形成的对象</td></tr><tr><td style="text-align:left;">DELETE</td><td style="text-align:left;"><code>delete()</code></td><td style="text-align:left;">对资源执行 HTTP DELETE 操作</td></tr><tr><td style="text-align:left;">PUT</td><td style="text-align:left;"><code>put()</code></td><td style="text-align:left;">PUT 资源到特定的 URL</td></tr><tr><td style="text-align:left;">any</td><td style="text-align:left;"><code>exchange()</code></td><td style="text-align:left;">返回包含对象的 ResponseEntity，这个对象是从响应体中映射得到的</td></tr><tr><td style="text-align:left;">any</td><td style="text-align:left;"><code>execute()</code></td><td style="text-align:left;">返回一个从响应体映射得到的对象</td></tr></tbody></table><p>GET / POST / DELETE / PUT 都有专门的方法发出对应方式的请求。这些方法的底层方式都是 <strong>execute</strong> 方法，<small>不过该方法的使用有些繁琐</small>：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token function">exchange</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">,</span> <span class="token class-name">HttpMeghod</span> method<span class="token punctuation">,</span> <span class="token class-name">HttpEntity</span> requestEntity<span class="token punctuation">,</span> \n         <span class="token class-name">Class</span> responseType<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> uriVariables<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">exchange</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">,</span> <span class="token class-name">HttpMethod</span> method<span class="token punctuation">,</span> <span class="token class-name">HttpEntity</span> requestEntity<span class="token punctuation">,</span> \n         <span class="token class-name">Class</span> responseType<span class="token punctuation">,</span> <span class="token class-name">Map</span> uriVariables<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">exchange</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">,</span> <span class="token class-name">HttpMethod</span> method<span class="token punctuation">,</span> <span class="token class-name">HttpEntity</span> requestEntity<span class="token punctuation">,</span> \n         <span class="token class-name">ParameterizedTypeReference</span> responseType<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> uriVariables<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">exchange</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">,</span> <span class="token class-name">HttpMethod</span> method<span class="token punctuation">,</span> <span class="token class-name">HttpEntity</span> requestEntity<span class="token punctuation">,</span> \n         <span class="token class-name">ParameterizedTypeReference</span> responseType<span class="token punctuation">,</span> <span class="token class-name">Map</span> uriVariables<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>exchange 方法参数说明：</p><dl><dt><h3>参数 url</h3></dt><dd>向哪个 url 发起请求。</dd><dt><h3>参数 method</h3></dt><dd>发起哪种请求。</dd><dt><h3>参数 requestEntity</h3></dt><dd>用以封装请求头<small>（header）</small>和请求体<small>（body）</small>的对象。</dd><dt><h3>参数 responseType</h3></dt><dd>指定返回响应中的 body 的数据类型。</dd><dt><h3>返回值 ResponseEntity</h3></dt><dd>其中封装的响应数据。包括了几个重要的元素，如响应码、contentType、contentLength、响应消息体等。在输出结果中我们能够看到这些与 HTTP 协议有关的数据。</dd></dl><h2 id="发起-get-请求" tabindex="-1"><a class="header-anchor" href="#发起-get-请求" aria-hidden="true">#</a> 发起 GET 请求</h2><p>回顾一下 GET 请求的特点：</p><ul><li><p>GET 请求不用『管』header 中的 content-type 的值。</p></li><li><p>GET 请求的参数是『追加』到 URL 中，而不是附带在请求的 body 部分的。</p></li></ul><p>因此，<small>如果没有其他的设置请求头的要求，</small>GET 请求在调用 <code>exchange()</code> 方法时，不需要 HttpEntity 参数，因为它就是用来封装请求 body 和请求 header 的。</p><h3 id="无参的情况" tabindex="-1"><a class="header-anchor" href="#无参的情况" aria-hidden="true">#</a> 无参的情况</h3><ul><li><p>服务端代码</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>略。服务端返回一个简单的 <span class="token class-name">String</span> 。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li><p>客户端调用</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">&quot;http://localhost:8080/get1&quot;</span><span class="token punctuation">;</span>\n  <span class="token class-name">RestTemplate</span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> responseEntity <span class="token operator">=</span> template<span class="token punctuation">.</span><span class="token function">exchange</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token class-name">HttpMethod</span><span class="token punctuation">.</span>GET<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> responseEntity<span class="token punctuation">.</span><span class="token function">getStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> responseEntity<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> responseEntity<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div></li></ul><h3 id="有参的情况" tabindex="-1"><a class="header-anchor" href="#有参的情况" aria-hidden="true">#</a> 有参的情况</h3><p>由于 GET 请求的参数是拼接在 URL 后面传递到后台的，因此我们的参数也可以出现在 URL 中。</p><p>参数出现在 URL 有两种方式，一种是使用数字作为占位符（从 1 开始），另一种是利用 Map 的 key 值作占位符。</p><ul><li><p>客户端调用</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 方式一</span>\n  <span class="token class-name">String</span> url1 <span class="token operator">=</span> <span class="token string">&quot;http://localhost:8080/get2?username={1}&amp;password={2}&quot;</span><span class="token punctuation">;</span>\n  <span class="token class-name">RestTemplate</span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> responseEntity1 <span class="token operator">=</span> template<span class="token punctuation">.</span><span class="token function">exchange</span><span class="token punctuation">(</span>url1<span class="token punctuation">,</span> <span class="token class-name">HttpMethod</span><span class="token punctuation">.</span>GET<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string">&quot;tom&quot;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> responseEntity1<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// 方式二</span>\n  <span class="token class-name">String</span> url2 <span class="token operator">=</span> <span class="token string">&quot;http://localhost:8080/get2?username={xxx}&amp;password={yyy}&quot;</span><span class="token punctuation">;</span>\n  <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;xxx&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;tom&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;yyy&quot;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> responseEntity2 <span class="token operator">=</span> template<span class="token punctuation">.</span><span class="token function">exchange</span><span class="token punctuation">(</span>url2<span class="token punctuation">,</span> <span class="token class-name">HttpMethod</span><span class="token punctuation">.</span>GET<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> responseEntity2<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div></li></ul><h3 id="返回一个对象" tabindex="-1"><a class="header-anchor" href="#返回一个对象" aria-hidden="true">#</a> 返回一个对象</h3><p>这里的关键在于，要在调用 <code>exchange()</code> 方法时明确说明返回的是一个 User 类型的对象。<small>（这背后是因为，RestTemplate 需要知道要将收到的 JSON 格式的字符串按什么规则转换）。</small></p><ul><li><p>服务端代码</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>略。服务端返回一个 <span class="token class-name">User</span> 对象。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li><p>客户端调用</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">&quot;http://localhost:8080/get3?username={1}&amp;age={2}&quot;</span><span class="token punctuation">;</span>\n  <span class="token class-name">RestTemplate</span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> responseEntity1 <span class="token operator">=</span> template<span class="token punctuation">.</span><span class="token function">exchange</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token class-name">HttpMethod</span><span class="token punctuation">.</span>GET<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string">&quot;tom&quot;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> responseEntity1<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></li></ul><h3 id="返回一个对象的集合" tabindex="-1"><a class="header-anchor" href="#返回一个对象的集合" aria-hidden="true">#</a> 返回一个对象的集合</h3><p>本质上和上面的返回一个普通对象的情况类似，只不过如何『描述』对象的集合需要实现 ParameterizedTypeReference 接口。<small>好在这是一段只用复制粘贴稍作修改的代码。</small></p><ul><li><p>描述对象的集合</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">ParameterizedTypeReference</span><span class="token operator">&lt;</span>看这里<span class="token operator">&gt;</span> pr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ParameterizedTypeReference</span><span class="token operator">&lt;</span>看这里<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li></ul><p>只需要在上述 <code>看这里</code> 部分替换成对象的集合的类型即可，如下例子：</p><ul><li><p>服务端代码</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>略。服务端返回一个 <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li><p>客户端调用</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testGet4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">&quot;http://localhost:8080/get4?username={1}&amp;age={2}&quot;</span><span class="token punctuation">;</span>\n  <span class="token class-name">RestTemplate</span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token class-name">ParameterizedTypeReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> pr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ParameterizedTypeReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> responseEntity1 <span class="token operator">=</span> template<span class="token punctuation">.</span><span class="token function">exchange</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token class-name">HttpMethod</span><span class="token punctuation">.</span>GET<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> pr<span class="token punctuation">,</span> <span class="token string">&quot;tom&quot;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> responseEntity1<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></li></ul><h2 id="发起-post-请求" tabindex="-1"><a class="header-anchor" href="#发起-post-请求" aria-hidden="true">#</a> 发起 POST 请求</h2><p>回顾一下 POST 请求的特点：</p><ul><li><p>POST 请求的 header 中的 content-type 的值是 <code>application/x-www-form-urlencoded</code> 。</p></li><li><p>POST 请求的参数是附加到请求的 body 部分的。</p></li></ul><p>因此，在调用 <code>exchange()</code> 方法时，需要为其提供一个 <code>HttpEntity</code> 类型参数。</p><h3 id="无参的情况-1" tabindex="-1"><a class="header-anchor" href="#无参的情况-1" aria-hidden="true">#</a> 无参的情况</h3><ul><li><p>客户端调用</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testPost1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">&quot;http://localhost:8080/post1&quot;</span><span class="token punctuation">;</span>\n  <span class="token class-name">RestTemplate</span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// 准备请求头部信息</span>\n  <span class="token class-name">HttpHeaders</span> headers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  headers<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span>APPLICATION_FORM_URLENCODED<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// 无参数情况下，不需要设置请求 body 部分</span>\n  <span class="token class-name">HttpEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> entity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> headers<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> responseEntity <span class="token operator">=</span> template<span class="token punctuation">.</span><span class="token function">exchange</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token class-name">HttpMethod</span><span class="token punctuation">.</span>POST<span class="token punctuation">,</span> entity<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> responseEntity<span class="token punctuation">.</span><span class="token function">getStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> responseEntity<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> responseEntity<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div></li></ul><h3 id="有参的情况-1" tabindex="-1"><a class="header-anchor" href="#有参的情况-1" aria-hidden="true">#</a> 有参的情况</h3><ul><li><p>客户端调用</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testPost2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 准备请求头部信息</span>\n  <span class="token class-name">HttpHeaders</span> headers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  headers<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span>APPLICATION_FORM_URLENCODED<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// 准备要提交的数据</span>\n  <span class="token class-name">MultiValueMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> parameters <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedMultiValueMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  parameters<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;tom&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  parameters<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token class-name">HttpEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MultiValueMap</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> entity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>parameters<span class="token punctuation">,</span> headers<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">&quot;http://localhost:8080/post2&quot;</span><span class="token punctuation">;</span>\n  <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> responseEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exchange</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token class-name">HttpMethod</span><span class="token punctuation">.</span>POST<span class="token punctuation">,</span> entity<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> responseEntity<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div></li></ul><h3 id="返回一个对象-1" tabindex="-1"><a class="header-anchor" href="#返回一个对象-1" aria-hidden="true">#</a> 返回一个对象</h3><p>理论上，和 GET 请求方式是一样的，只需要按照上面所述做出响应修改即可。</p><h3 id="返回一个对象的集合-1" tabindex="-1"><a class="header-anchor" href="#返回一个对象的集合-1" aria-hidden="true">#</a> 返回一个对象的集合</h3><p>理论上，和 GET 请求方式是一样的，只需要按照上面所述做出响应修改即可。</p><h2 id="发起-put-请求" tabindex="-1"><a class="header-anchor" href="#发起-put-请求" aria-hidden="true">#</a> 发起 PUT 请求</h2><p>回顾一下 PUT 请求的特点：</p><ul><li>由于底层的 Servlet 的原因，Spring MVC（和 Servlet）可以接收 PUT 请求，但是不接收 PUT 请求提交的参数。参见 <code>RESTfule API</code> &gt; <code>设计 RESTful API</code> &gt; <code>Spring MVC 中 PUT、PATCH 请求参数</code> 。</li><li>基于上一点，PUT 请求的 <code>header</code> 中的 <code>content-type</code> 通常需要设值为 <code>application/json</code> 。</li><li>PUT 请求的参数是附带在请求的 <code>body</code> 部分，是一个 JSON 格式的字符串内容。</li></ul><h3 id="无参的情况-2" tabindex="-1"><a class="header-anchor" href="#无参的情况-2" aria-hidden="true">#</a> 无参的情况</h3><ul><li><p>客户端调用</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testPut1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">&quot;http://localhost:8080/put1&quot;</span><span class="token punctuation">;</span>\n  <span class="token class-name">RestTemplate</span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// 准备请求头部信息</span>\n  <span class="token class-name">HttpHeaders</span> headers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  headers<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span>APPLICATION_FORM_URLENCODED<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// 无参数情况下，不需要设置请求 body 部分</span>\n  <span class="token class-name">HttpEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> entity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> headers<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> responseEntity <span class="token operator">=</span> template<span class="token punctuation">.</span><span class="token function">exchange</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token class-name">HttpMethod</span><span class="token punctuation">.</span>PUT<span class="token punctuation">,</span> entity<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> responseEntity<span class="token punctuation">.</span><span class="token function">getStatusCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> responseEntity<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> responseEntity<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div></li></ul><h3 id="有参的情况-2" tabindex="-1"><a class="header-anchor" href="#有参的情况-2" aria-hidden="true">#</a> 有参的情况</h3><ul><li><p>客户端调用</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testPut2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 准备请求头部信息</span>\n  <span class="token class-name">HttpHeaders</span> headers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  headers<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span>APPLICATION_FORM_URLENCODED<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// 准备要提交的数据</span>\n  <span class="token class-name">MultiValueMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> parameters <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedMultiValueMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  parameters<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;tom&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  parameters<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token class-name">HttpEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MultiValueMap</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> entity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>parameters<span class="token punctuation">,</span> headers<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">&quot;http://localhost:8080/put2&quot;</span><span class="token punctuation">;</span>\n  <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> responseEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exchange</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token class-name">HttpMethod</span><span class="token punctuation">.</span>PUT<span class="token punctuation">,</span> entity<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;{}&quot;</span><span class="token punctuation">,</span> responseEntity<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div></li></ul><h3 id="返回一个对象-2" tabindex="-1"><a class="header-anchor" href="#返回一个对象-2" aria-hidden="true">#</a> 返回一个对象</h3><p>!FILENAME 服务端代码</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>略。服务端返回一个 <span class="token class-name">User</span> 对象。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>!FILENAME 客户端调用</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code></code></pre><div class="line-numbers"></div></div><h3 id="返回一个对象的集合-2" tabindex="-1"><a class="header-anchor" href="#返回一个对象的集合-2" aria-hidden="true">#</a> 返回一个对象的集合</h3><p>!FILENAME 服务端代码</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>略。服务端返回一个 <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>!FILENAME 客户端调用</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code></code></pre><div class="line-numbers"></div></div><h2 id="发起-delete-请求" tabindex="-1"><a class="header-anchor" href="#发起-delete-请求" aria-hidden="true">#</a> 发起 DELETE 请求</h2><p>回顾一下 DELETE 请求的特点：</p><ul><li><p>DELETE 请求和 GET 请求一样不用『管』header 中的 <code>content-type</code> 的值。</p></li><li><p>DELETE 请求的参数是『内嵌』在 URL 中的，是 RUL 一部分。</p><p><small>注意，这和 GET 请求的 <code>?xxx=xxx</code> 『追加在 URL 屁股后面』的性质是不一样的，GET 请求追加的部分不属于 URL 内容本身。</small></p></li><li><p>DELETE 请求不要试图在请求的 body 中附带参数数据。</p><p><small>因为根据 HTTP 协议标准，DELETE 请求的 body 部分无意义，因此，一些网关、代理、防火墙在收到 DELET 请求后会直接删除/忽略其 bdoy 部分内容。</small></p></li></ul><h3 id="无参的情况-3" tabindex="-1"><a class="header-anchor" href="#无参的情况-3" aria-hidden="true">#</a> 无参的情况</h3><p>略，基本原理和 GET 请求一致。</p><h3 id="有参的情况-3" tabindex="-1"><a class="header-anchor" href="#有参的情况-3" aria-hidden="true">#</a> 有参的情况</h3><p>略，基本原理和 GET 请求一致。</p><h3 id="返回一个对象-3" tabindex="-1"><a class="header-anchor" href="#返回一个对象-3" aria-hidden="true">#</a> 返回一个对象</h3><p>略，基本原理和 GET 请求一致。</p><h3 id="返回一个对象的集合-3" tabindex="-1"><a class="header-anchor" href="#返回一个对象的集合-3" aria-hidden="true">#</a> 返回一个对象的集合</h3><p>略，基本原理和 GET 请求一致。</p><h3 id="实现-delete-的批量删除" tabindex="-1"><a class="header-anchor" href="#实现-delete-的批量删除" aria-hidden="true">#</a> 实现 DELETE 的批量删除</h3><h4 id="方案一-少量的参数情况" tabindex="-1"><a class="header-anchor" href="#方案一-少量的参数情况" aria-hidden="true">#</a> 方案一：少量的参数情况</h4><p>将多个 id 以 <code>,</code> 作为分隔符分隔，并作为一个整体存在于 URL 中，后台以 String 的形式从路径中接收它，再作后续处理。</p><p>!FILENAME 例如</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">8080</span><span class="token operator">/</span>del5<span class="token operator">/</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">300</span>&quot;\n\n<span class="token annotation punctuation">@DeleteMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/del5/{ids}&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo5</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token class-name">String</span> ids<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 在这里 ids == &quot;100,200,300&quot;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h4 id="方案二-多参数时不使用-delete-使用-post" tabindex="-1"><a class="header-anchor" href="#方案二-多参数时不使用-delete-使用-post" aria-hidden="true">#</a> 方案二：多参数时不使用 DELETE，使用 POST</h4><p>如果只有三五个，哪怕是七八个 id 时，使用上述方案问题不大，但是如果需要向后台传递几十上百个 id ，那么上述方案就不太合适。</p><p>此时，最简单的办法就是放弃 DELETE 方法/语义，改为 POST 方法传参。</p><h4 id="方案三-多参数时仍硬刚-delete" tabindex="-1"><a class="header-anchor" href="#方案三-多参数时仍硬刚-delete" aria-hidden="true">#</a> 方案三：多参数时仍硬刚 DELETE</h4><p>如果不想放弃 DELETE 语义，仍坚持删除用删除（DELETE），那么就只能采用下述麻烦的办法了：将逻辑上的一个 <code>DELET</code> 操作拆分成 <code>POST</code> + <code>DELETE</code> 两步操作。</p><ul><li><p>Step 1：</p><p>发起 POST 请求，将多个 id 提交到服务端。无论服务端是存到数据库，还是 Redis，还是什么地方，要求服务端返回一个能代表这批 id 的一个唯一性表示。例如：9527 。</p></li><li><p>Step 2：</p><p>发起 DELETE 请求，以上一步的哪个唯一性标识作为参数，要求服务器删除它们。例如：<code>DELETE /student/batch/9527</code> 。</p></li></ul>',81),p={render:function(n,s){return t}}}}]);