"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[8116],{19722:(e,a,t)=>{t.r(a),t.d(a,{data:()=>n});const n={key:"v-dc62bfca",path:"/git/101-%E5%88%86%E6%94%AF%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E5%92%8C%E6%93%8D%E4%BD%9C.html",title:"分支：基本概念和操作",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"查看分支",slug:"查看分支",children:[]},{level:2,title:"创建分支",slug:"创建分支",children:[]},{level:2,title:"切换分支",slug:"切换分支",children:[]},{level:2,title:"删除分支",slug:"删除分支",children:[]},{level:2,title:"重命名当前",slug:"重命名当前",children:[]}],filePathRelative:"git/101-分支的基本概念和操作.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},96672:(e,a,t)=>{t.r(a),t.d(a,{default:()=>s});const n=(0,t(66252).uE)('<h1 id="分支-基本概念和操作" tabindex="-1"><a class="header-anchor" href="#分支-基本概念和操作" aria-hidden="true">#</a> 分支：基本概念和操作</h1><p>版本的提交不可能『依次进行，以便形成一条直线型的提交历史记录』，原因有二：</p><ul><li><p>有两个以上的开发者在对同一个项目进行并行式开发。</p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/git/img/git_branch_1.png" alt="图片"></p></li><li><p>一方面要修复旧版本中的 bug，而与此同时又要创建和发布新的版本。</p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/git/img/git_branch_2.png" alt="图片"></p></li></ul><p>分支可以看作是开发过程当中的并行线，我们可以把提交图想象成游泳池中的泳道：</p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/git/img/git_branch_3.png" alt="图片"></p><p>在一个 Git 版本库中，总是唯一存在着一个『<strong>活动分支</strong>』<small>（也叫『<strong>当前分支</strong>』）</small>。我们可以用 <strong>branch</strong> 命令<small>（不带选项）</small>来列出所有的分支。Git 会用星号<small>（*）</small>凸显出当前活动分支。</p><blockquote><p>对分支（Branch）的灵活高效操作是 Git 的『拳头』特性。</p></blockquote><h2 id="查看分支" tabindex="-1"><a class="header-anchor" href="#查看分支" aria-hidden="true">#</a> 查看分支</h2><p>通过 <strong>git branch</strong> 可以看到 Git 仓库的所有分支。</p><p>当执行 <strong>git init</strong> 指令的时候，Git 就会自动产生一个名为 master 的分支：主分支。</p><h2 id="创建分支" tabindex="-1"><a class="header-anchor" href="#创建分支" aria-hidden="true">#</a> 创建分支</h2><p>创建新的分支，也是使用 <strong>git branch</strong> 命令。</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> branch 新分支名 <span class="token punctuation">[</span>从当前分支的 Commit<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>如果省略 Commit，那么就是从当前分支的 HEAD 分化出新分支。</p><h2 id="切换分支" tabindex="-1"><a class="header-anchor" href="#切换分支" aria-hidden="true">#</a> 切换分支</h2><p>建立分支后，可以通过 <strong>git checkout</strong> 命令来切换当前分支：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>git checkout &lt;分支名&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>有个简单的办法可以创建新分支并切换：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>git checkout -b &lt;新分支名&gt; [Commit节点]\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>分支指针主要用于指向活动分支<small>（即它总是在当前分支上的）</small>，每次提交时，它会移动到最新提交上。</p><h2 id="删除分支" tabindex="-1"><a class="header-anchor" href="#删除分支" aria-hidden="true">#</a> 删除分支</h2><p>删除分支使用：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>git branch -d &lt;被删除分支名&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>如果在删除一个分支时，自己还未转移到其他分支上，git 会拒绝删除操作。如果坚持要删除的话，则使用 <strong>-D</strong> 选项替换 <strong>-d</strong> 选项。</p><p>一般情况下，分支应该合并到另一个分支。如果要删除还未合并的分支，Git 会显示错误信息，并拒绝删除。当然你也通过 <strong>-D</strong> 选项来强制删除。</p><h2 id="重命名当前" tabindex="-1"><a class="header-anchor" href="#重命名当前" aria-hidden="true">#</a> 重命名当前</h2><p>如果要更改分支的名称，需要先切换到该分支，然后执行</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>git branch -m &lt;分支新名字&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',28),s={render:function(e,a){return n}}}}]);