"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[1995],{72055:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-0385683d",path:"/utility/apache-commons/99-%E5%8F%8D%E5%B0%84%E5%B7%A5%E5%85%B7%E7%B1%BB.html",title:"反射相关的工具类",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"ClassUtils",slug:"classutils",children:[]},{level:2,title:"FieldUtils",slug:"fieldutils",children:[]},{level:2,title:"MethodUtils",slug:"methodutils",children:[]},{level:2,title:"ConstructorUtils",slug:"constructorutils",children:[]}],filePathRelative:"utility/apache-commons/99-反射工具类.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},59457:(n,s,a)=>{a.r(s),a.d(s,{default:()=>t});const e=(0,a(66252).uE)('<h1 id="反射相关的工具类" tabindex="-1"><a class="header-anchor" href="#反射相关的工具类" aria-hidden="true">#</a> 反射相关的工具类</h1><h2 id="classutils" tabindex="-1"><a class="header-anchor" href="#classutils" aria-hidden="true">#</a> ClassUtils</h2><p>取得类相关信息的工具类。例如，包名，类名，所继承的父类，所实现的接口信息等。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">// 取得包名</span>\n<span class="token class-name">ClassUtils</span><span class="token punctuation">.</span><span class="token function">getPackageName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 取得类名</span>\n<span class="token class-name">ClassUtils</span><span class="token punctuation">.</span><span class="token function">getShortClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 取得类所实现的所有接口的完全限定名，包括父接口实现的接口名</span>\n<span class="token class-name">ClassUtils</span><span class="token punctuation">.</span><span class="token function">getAllInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 取得类所继的父类的完全限定名，包括父类继承的父类名</span>\n<span class="token class-name">ClassUtils</span><span class="token punctuation">.</span><span class="token function">getAllSuperclasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="fieldutils" tabindex="-1"><a class="header-anchor" href="#fieldutils" aria-hidden="true">#</a> FieldUtils</h2><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">FieldUtils</span><span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">FieldUtils</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 读取静态域的值</span>\n<span class="token class-name">FieldUtils</span><span class="token punctuation">.</span><span class="token function">readStaticField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 读取对象的指定域的值。包括继承而来的域。</span>\n<span class="token class-name">FieldUtils</span><span class="token punctuation">.</span><span class="token function">readField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 读取对象的指定域的值。不包括继承而来的域。</span>\n<span class="token class-name">FieldUtils</span><span class="token punctuation">.</span><span class="token function">readDeclaredField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name">FieldUtils</span><span class="token punctuation">.</span><span class="token function">writeStaticField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">FieldUtils</span><span class="token punctuation">.</span><span class="token function">writeField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">FieldUtils</span><span class="token punctuation">.</span><span class="token function">writeDeclaredField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="methodutils" tabindex="-1"><a class="header-anchor" href="#methodutils" aria-hidden="true">#</a> MethodUtils</h2><ul><li>调用静态方法</li></ul><p>MethodUtils#invokeStaticMethod方法比传统的java反射方法的写法更加简洁。</p><ul><li>调用非静态方法</li></ul><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">MethodUtils</span><span class="token punctuation">.</span><span class="token function">invokeMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>MethodUtils 下的方法只能调用 public 的方法，否则会抛出异常。</p><h2 id="constructorutils" tabindex="-1"><a class="header-anchor" href="#constructorutils" aria-hidden="true">#</a> ConstructorUtils</h2><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">ConstructorUtils</span><span class="token punctuation">.</span><span class="token function">invokeConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>ConstructorUtils#invokeConstructor 方法，只能调用 public 的构造函数，否则会抛出异常。</p>',15),t={render:function(n,s){return e}}}}]);