"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[8185],{74825:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-f3a1372a",path:"/spring-boot/01-%E5%9F%BA%E7%A1%80.html",title:"SpringBoot 基础",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"基本概念",slug:"基本概念",children:[]},{level:2,title:"创建 SpringBoot 项目",slug:"创建-springboot-项目",children:[]},{level:2,title:"编码",slug:"编码",children:[{level:3,title:"编写启动类",slug:"编写启动类",children:[]},{level:3,title:"写 Controller",slug:"写-controller",children:[]},{level:3,title:"运行 / 测试",slug:"运行-测试",children:[]},{level:3,title:"properties 和 yml",slug:"properties-和-yml",children:[]},{level:3,title:"日志",slug:"日志",children:[]},{level:3,title:"spring-boot 默认的日志格式（了解、自学）",slug:"spring-boot-默认的日志格式-了解、自学",children:[]}]},{level:2,title:"解决 start.spring.io 不能访问",slug:"解决-start-spring-io-不能访问",children:[]},{level:2,title:"不使用 spring boot 的 parent pom",slug:"不使用-spring-boot-的-parent-pom",children:[]}],filePathRelative:"spring-boot/01-基础.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},52834:(n,s,a)=>{a.r(s),a.d(s,{default:()=>k});var t=a(66252);const p=(0,t.uE)('<h1 id="springboot-基础" tabindex="-1"><a class="header-anchor" href="#springboot-基础" aria-hidden="true">#</a> SpringBoot 基础</h1><p>Spring Boot 是由 Pivotal 团队提供的基于 Spring 的全新框架，其设计目的是为了简化 Spring 应用的搭建和开发过程。该框架遵循『约定大于配置』原则，采用特定的方式进行配置，从而使开发者无需定义大量的 XML 配置。通过这种方式，Spring Boot 致力于在蓬勃发展的快速应用开发领域成为领导者。</p><p>Spring Boot 并不重复造轮子，而且在原有 Spring 的框架基础上封装了一层，并且它集成了一些类库（提供了默认的配置），用于简化开发。</p><p>简而言之，Spring Boot 就是一个大容器，其中包含了很多类库的默认配置，你只需要在项目中引入这些类库即可使用。</p><h2 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念" aria-hidden="true">#</a> 基本概念</h2><p>Spring Boot 是 Spring 项目中的一个子工程，推崇约定大于配置的方式以便于你能够尽可能快速的启动并运行程序。</p><p>由于 Spring Boot 使用一些固定的方式来构建生产级别的 spring 应用，所有人们把 SpringBoot 称为搭建程序的『<strong>脚手架</strong>』。</p><p>SpringBoot 简化了基于 Spring 的应用开发，只需要 <strong>run</strong> 就能创建一个独立的、生产级别的 Spring 应用。</p><p>SpringBoot 为 Spring 平台及第三方库提供开箱即用的设置<small>（提供默认设置，存放默认配置的包就是启动器）</small>，这样我们就可以简单的开始。多数 SpringBoot 应用只需要很少的 Spring 配置。</p><p>我们可以使用 SpringBoot 创建 java 应用，并使用 <strong>java –jar xxx.jar</strong> 启动它，就能得到一个生产级别的 web 工程。</p><p>SpringBoot 主要特点和目标是：</p><ul><li><p>为所有 Spring 的开发者提供一个非常快速的、广泛接受的入门体验</p></li><li><p>开箱即用<small>（启动器 <strong>starter-*</strong> 其实就是 Spring Boot 提供的一个 jar 包）</small>，但通过自己设置参数<small>（<em>.properties</em> 或 <em>.yml</em> ）</small>，即可快速摆脱这种方式。</p></li><li><p>提供了一些大型项目中常见的非功能性特性，如内嵌服务器、安全、指标，健康检测、外部化配置等</p></li><li><p>绝对没有代码生成，也无需 XML 配置。</p></li></ul><h2 id="创建-springboot-项目" tabindex="-1"><a class="header-anchor" href="#创建-springboot-项目" aria-hidden="true">#</a> 创建 SpringBoot 项目</h2><p>创建一个 Maven 项目，但是『不用』勾选 <code>Create from archetype</code> 。<small>截止目前为止，该项目与 SpringBoot 还没有任何关系。</small></p><p>Spring Boot 提供了一个名为 <strong>spring-boot-starter-parent</strong> 的工程，里面已经对各种常用依赖<small>（并非全部）</small>的版本进行了管理，我们的项目需要以这个项目为父工程，这样我们就不用操心依赖的版本问题了，需要什么依赖，直接引入坐标即可！</p><ul><li><p><strong>添加父工程坐标：</strong></p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.1.11.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li><li><p><strong>添加 web 启动器：</strong></p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li></ul><p>需要注意的是，我们并没有在这里指定版本信息。因为 Spring Boot 的 <strong>父工程</strong> 已经对版本进行了管理了。</p><p><img src="https://hemiao3000.gitee.io/java-note-img/images/spring-boot/img/springboot_1.png" alt="springboot_1"></p><p>这些都是 Spring Boot 根据 <strong><code>spring-boot-starter-web</code></strong> 这个依赖自动引入的，而且所有的版本都已经管理好，不会出现冲突。</p><ul><li><p><strong>完整 pom 如下所示：</strong></p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">&quot;</span></span>\n       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">&quot;</span></span>\n       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.1.11.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>hemiao3000.gitee.io<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>springboot-demo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\n\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">&gt;</span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span>\n\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div></li></ul><blockquote><p>有时候，你不想，甚至是不能使用使用 spring-boot-starter-parent 作为你的父项目。例如，在父子模块项目中，你本身就有自己的父亲。这种情况下，你需要使用别的方式来使用 spring boot。见最后。</p></blockquote><h2 id="编码" tabindex="-1"><a class="header-anchor" href="#编码" aria-hidden="true">#</a> 编码</h2><h3 id="编写启动类" tabindex="-1"><a class="header-anchor" href="#编写启动类" aria-hidden="true">#</a> 编写启动类</h3><p>SpringBoot 项目通过 <em><code>main</code></em> 函数即可启动，我们需要创建一个启动类：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@SpringBootApplication</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span> <span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">SpringbootDemo1Application</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="写-controller" tabindex="-1"><a class="header-anchor" href="#写-controller" aria-hidden="true">#</a> 写 Controller</h3><p>接下来的编码工作，就是正常的 Spring MVC 项目的开发过程。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@RestController</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">{</span>\n\n    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/hello&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">helo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token string">&quot;hello world&quot;</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="运行-测试" tabindex="-1"><a class="header-anchor" href="#运行-测试" aria-hidden="true">#</a> 运行 / 测试</h3><p>运行启动类的 main 方法，会在控制台中看见日志信息，其中有一条信息如下：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Tomcat started on port(s): 8080 (http) with context path &#39;&#39;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ol><li><p>监听的端口是 8080</p></li><li><p>Spring MVC 的映射路径是：<strong><code>/</code></strong></p></li><li><p><strong><code>/hello</code></strong> 路径已经映射到了 <em><strong><code>HelloController</code></strong></em> 中的 <em><code>hello()</code></em> 方法</p></li></ol>',32),e=(0,t.Uk)("打开页面访问："),o={href:"http://localhost:8080/hello",target:"_blank",rel:"noopener noreferrer"},l=(0,t.Uk)("http://localhost:8080/hello"),c=(0,t.uE)('<h3 id="properties-和-yml" tabindex="-1"><a class="header-anchor" href="#properties-和-yml" aria-hidden="true">#</a> properties 和 yml</h3><p>Spring Boot 整个应用程序只有一个配置文件，那就是 <strong><code>.properties</code></strong> 或 <strong><code>.yml</code></strong> 文件。如果你的 Spring Boot 项目中没有包含这个配置文件，Spring Boot 对每个配置项都有默认值（当然，我们也可以添加配置文件，用以覆盖其默认值）。</p><p>这里以 <strong><code>.properties</code></strong> 文件为例，首先在 <strong><code>resources</code></strong> 下新建一个名为 <strong><code>applicatioon.properties</code></strong>（<strong>必须是这个名字</strong>）的文件。</p><p>输入内容为：</p><div class="language-properties ext-properties line-numbers-mode"><pre class="language-properties"><code><span class="token attr-name">server.port</span><span class="token punctuation">=</span><span class="token attr-value">8081</span>\n<span class="token attr-name">server.servlet.context-path</span><span class="token punctuation">=</span><span class="token attr-value">/api</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>并且启动 main 方法，这时程序请求地址则变成了：<strong><code>http://localhost:8081/api/hello</code></strong> 。</p><p>Spring Boot 支持 .properties 和 .yml 两种格式的文件，文件名分别对应 <strong><code>application.properties</code></strong> 和 <strong><code>application.yml</code></strong> 。</p><p>下面贴出 yaml 文件格式供大家参考：</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">server</span><span class="token punctuation">:</span>\n    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8080</span>\n    <span class="token key atrule">servlet</span><span class="token punctuation">:</span>\n        <span class="token key atrule">context-path</span><span class="token punctuation">:</span> /api\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>可以看出 yml 则 <strong><code>换行 + tab</code></strong> 隔开。这里需要注意的是冒号后面 <strong>必须有空格</strong>，否则会报错。</p><h3 id="日志" tabindex="-1"><a class="header-anchor" href="#日志" aria-hidden="true">#</a> 日志</h3><p>Spring Boot 直接使用 slf4j ，默认间接使用 logback 日志，因此，它支持直接在 <strong><code>.properties</code></strong> 和 <strong><code>.yml</code></strong> 文件中对日志的相关信息进行配置。</p><p>另外，Spring Boot 还支持控制台日志上色功能。</p><div class="language-properties ext-properties line-numbers-mode"><pre class="language-properties"><code><span class="token attr-name">logging.level.root</span><span class="token punctuation">=</span><span class="token attr-value">INFO</span>\n<span class="token attr-name">logging.level.xxx.yyy.zzz</span><span class="token punctuation">=</span><span class="token attr-value">DEBUG</span>\n<span class="token attr-name">logging.pattern.console</span><span class="token punctuation">=</span><span class="token attr-value">${CONSOLE_LOG_PATTERN:%clr(${LOG_LEVEL_PATTERN:%5p}) %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:%wEx}}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>有一点需要注意，如果是 <em><code>.yml</code></em> 文件格式，在设置 <em><code>logging.pattern.console</code></em> 时，其值必须用双引号括起来，形如：<em><code>console=&quot;...&quot;</code></em> 。</p><h3 id="spring-boot-默认的日志格式-了解、自学" tabindex="-1"><a class="header-anchor" href="#spring-boot-默认的日志格式-了解、自学" aria-hidden="true">#</a> spring-boot 默认的日志格式（了解、自学）</h3><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>spring-boot.jar\n└── org.springframework.boot.logging\n    └── defaults.xml\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>其中有一段日志的格式配置<small>（格式化后显示如下）：</small></p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>CONSOLE_LOG_PATTERN<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>${CONSOLE_LOG_PATTERN:-\n%clr(%d{${LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd HH:mm:ss.SSS}}){faint} \n%clr(${LOG_LEVEL_PATTERN:-%5p}) \n%clr(${PID:- }){magenta} \n%clr(---){faint} \n%clr([%15.15t]){faint} \n%clr(%-40.40logger{39}){cyan} \n%clr(:){faint} %m%n\n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>其中单词 blue、cyan、faint、green、magenta、red、yellow，表示颜色。</p><h2 id="解决-start-spring-io-不能访问" tabindex="-1"><a class="header-anchor" href="#解决-start-spring-io-不能访问" aria-hidden="true">#</a> 解决 start.spring.io 不能访问</h2>',21),r=(0,t.Uk)("使用阿里云国服链接替代："),i={href:"https://start.aliyun.com",target:"_blank",rel:"noopener noreferrer"},u=(0,t._)("em",null,[(0,t._)("code",null,"https://start.aliyun.com")],-1),g=(0,t.uE)('<h2 id="不使用-spring-boot-的-parent-pom" tabindex="-1"><a class="header-anchor" href="#不使用-spring-boot-的-parent-pom" aria-hidden="true">#</a> 不使用 spring boot 的 parent pom</h2><p>这种情况下，你可以在你自己的 parent 项目中加入如下东西（通过 <code>spring-boot-dependencies</code> 使用 <code>scope=import</code> 依赖项来保持依赖项管理）</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>${spring-boot.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">&gt;</span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">&gt;</span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n \n        <span class="token comment">&lt;!-- 在未来，spring cloud 遇到这种情况时，也是如此处理。\n        &lt;dependency&gt;\n            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n            &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;\n            &lt;version&gt;${spring-cloud.version}&lt;/version&gt;\n            &lt;type&gt;pom&lt;/type&gt;\n            &lt;scope&gt;import&lt;/scope&gt;\n        &lt;/dependency&gt;\n        --&gt;</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>这样，你的子项目中就不再需要编写版本号了。</p>',4),k={render:function(n,s){const a=(0,t.up)("OutboundLink");return(0,t.wg)(),(0,t.iD)(t.HY,null,[p,(0,t._)("p",null,[e,(0,t._)("a",o,[l,(0,t.Wm)(a)])]),c,(0,t._)("p",null,[r,(0,t._)("a",i,[u,(0,t.Wm)(a)])]),g],64)}}}}]);