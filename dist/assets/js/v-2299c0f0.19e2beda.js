"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[5698],{33277:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-2299c0f0",path:"/spring-mvc/104-Session%E5%92%8CCookie.html",title:"操作 Session 和 Cookie",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"操作 Session",slug:"操作-session",children:[{level:3,title:"方式一：方法中声明、使用 HttpServletRequest 参数",slug:"方式一-方法中声明、使用-httpservletrequest-参数",children:[]},{level:3,title:"方式二：方法中直接声明、使用 HttpSession 参数",slug:"方式二-方法中直接声明、使用-httpsession-参数",children:[]}]},{level:2,title:"操作 Cookie",slug:"操作-cookie",children:[]}],filePathRelative:"spring-mvc/104-Session和Cookie.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},19135:(n,s,a)=>{a.r(s),a.d(s,{default:()=>e});const t=(0,a(66252).uE)('<h1 id="操作-session-和-cookie" tabindex="-1"><a class="header-anchor" href="#操作-session-和-cookie" aria-hidden="true">#</a> 操作 Session 和 Cookie</h1><h2 id="操作-session" tabindex="-1"><a class="header-anchor" href="#操作-session" aria-hidden="true">#</a> 操作 Session</h2><h3 id="方式一-方法中声明、使用-httpservletrequest-参数" tabindex="-1"><a class="header-anchor" href="#方式一-方法中声明、使用-httpservletrequest-参数" aria-hidden="true">#</a> 方式一：方法中声明、使用 HttpServletRequest 参数</h3><p>这种情况下，Spring MVC 在调用请求处理方法时，会传入本次请求的 Request 对象，后续可以像普通同的 Servlet 代码一样操作 Session 。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/...&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">demo1</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token class-name">HttpSession</span> session <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="方式二-方法中直接声明、使用-httpsession-参数" tabindex="-1"><a class="header-anchor" href="#方式二-方法中直接声明、使用-httpsession-参数" aria-hidden="true">#</a> 方式二：方法中直接声明、使用 HttpSession 参数</h3><p>该方式是 <code>方式一</code> 的改进版。直接要求 SpringMVC 『帮』我们去调用 <strong>request.getSession()</strong> 后再传入到请求处理方法中。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/...&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token class-name">HttpSession</span> session<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="操作-cookie" tabindex="-1"><a class="header-anchor" href="#操作-cookie" aria-hidden="true">#</a> 操作 Cookie</h2><p>在 Spring MVC 中操作 Cookie 和操作 Session 非常类似，你可以要求 SpringMVC 将当前请求的 Response 对象传入你的方法中，而后对其添加 Cookie ：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;...&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">demo1</span><span class="token punctuation">(</span><span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token class-name">Cookie</span> cookie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  cookie<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  resp<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>Spring MVC 提供了一个 <strong>@CookieValue</strong> 注解来简化『<strong>获取</strong>』客户端『<strong>传入</strong>』的 Cookie 数据：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;...&quot;</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">demo2</span><span class="token punctuation">(</span><span class="token annotation punctuation">@CookieValue</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span> <span class="token class-name">String</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>',13),e={render:function(n,s){return t}}}}]);