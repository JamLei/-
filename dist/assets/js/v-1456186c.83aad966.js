"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[9060],{63118:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-1456186c",path:"/js/JS-06-js-native-utils.html",title:"JavaScript 中内置的工具和常用代码片段",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"2. 数组相关",slug:"_2-数组相关",children:[{level:3,title:"2.6 makeArray",slug:"_2-6-makearray",children:[]}]},{level:2,title:"3. DOM 相关",slug:"_3-dom-相关",children:[{level:3,title:"3.1 包含",slug:"_3-1-包含",children:[]},{level:3,title:"3.2 解析 parseHTML",slug:"_3-2-解析-parsehtml",children:[]},{level:3,title:"3.3 解析 parseJSON",slug:"_3-3-解析-parsejson",children:[]}]},{level:2,title:"4. 其它",slug:"_4-其它",children:[{level:3,title:"4.1 extend",slug:"_4-1-extend",children:[]},{level:3,title:"4.2 trim",slug:"_4-2-trim",children:[]},{level:3,title:"4.3 type",slug:"_4-3-type",children:[]},{level:3,title:"4.4 now",slug:"_4-4-now",children:[]}]},{level:2,title:"5. JS 中构建一个 Form",slug:"_5-js-中构建一个-form",children:[]}],filePathRelative:"js/JS-06-js-native-utils.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},4335:(n,s,a)=>{a.r(s),a.d(s,{default:()=>e});const p=(0,a(66252).uE)('<h1 id="javascript-中内置的工具和常用代码片段" tabindex="-1"><a class="header-anchor" href="#javascript-中内置的工具和常用代码片段" aria-hidden="true">#</a> JavaScript 中内置的工具和常用代码片段</h1><h2 id="_2-数组相关" tabindex="-1"><a class="header-anchor" href="#_2-数组相关" aria-hidden="true">#</a> 2. 数组相关</h2><h3 id="_2-6-makearray" tabindex="-1"><a class="header-anchor" href="#_2-6-makearray" aria-hidden="true">#</a> 2.6 makeArray</h3><p>类数组对象转化为真正的 JavaScript 数组</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// Native</span>\n<span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arrayLike<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// ES6 的新方法</span>\nArray<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>arrayLike<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="_3-dom-相关" tabindex="-1"><a class="header-anchor" href="#_3-dom-相关" aria-hidden="true">#</a> 3. DOM 相关</h2><h3 id="_3-1-包含" tabindex="-1"><a class="header-anchor" href="#_3-1-包含" aria-hidden="true">#</a> 3.1 包含</h3><p>检测 DOM 元素是不是其他 DOM 元素的后代.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// jQuery</span>\n$<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> child<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Native</span>\nel <span class="token operator">!==</span> child <span class="token operator">&amp;&amp;</span> el<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="_3-2-解析-parsehtml" tabindex="-1"><a class="header-anchor" href="#_3-2-解析-parsehtml" aria-hidden="true">#</a> 3.2 解析 parseHTML</h3><p>解析字符串为 DOM 节点数组.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// jQuery</span>\n$<span class="token punctuation">.</span><span class="token function">parseHTML</span><span class="token punctuation">(</span>htmlString<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Native</span>\n<span class="token keyword">function</span> <span class="token function">parseHTML</span><span class="token punctuation">(</span><span class="token parameter">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n   <span class="token keyword">const</span> context <span class="token operator">=</span> document<span class="token punctuation">.</span>implementation<span class="token punctuation">.</span><span class="token function">createHTMLDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n   <span class="token comment">// Set the base href for the created document so any parsed elements with URLs</span>\n   <span class="token comment">// are based on the document&#39;s URL</span>\n   <span class="token keyword">const</span> base <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;base&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n   base<span class="token punctuation">.</span>href <span class="token operator">=</span> document<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href<span class="token punctuation">;</span>\n   context<span class="token punctuation">.</span>head<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>base<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n   context<span class="token punctuation">.</span>body<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> string<span class="token punctuation">;</span>\n   <span class="token keyword">return</span> context<span class="token punctuation">.</span>body<span class="token punctuation">.</span>children<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h3 id="_3-3-解析-parsejson" tabindex="-1"><a class="header-anchor" href="#_3-3-解析-parsejson" aria-hidden="true">#</a> 3.3 解析 parseJSON</h3><p>传入格式正确的 JSON 字符串并返回 JavaScript 值.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// jQuery</span>\n$<span class="token punctuation">.</span><span class="token function">parseJSON</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Native</span>\n<span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="_4-其它" tabindex="-1"><a class="header-anchor" href="#_4-其它" aria-hidden="true">#</a> 4. 其它</h2><h3 id="_4-1-extend" tabindex="-1"><a class="header-anchor" href="#_4-1-extend" aria-hidden="true">#</a> 4.1 extend</h3><p>合并多个对象的内容到第一个对象。 object.assign 是 ES6 API 。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// Native</span>\nObject<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> defaultOpts<span class="token punctuation">,</span> opts<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="_4-2-trim" tabindex="-1"><a class="header-anchor" href="#_4-2-trim" aria-hidden="true">#</a> 4.2 trim</h3><p>移除字符串头尾空白。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// Native</span>\nstring<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="_4-3-type" tabindex="-1"><a class="header-anchor" href="#_4-3-type" aria-hidden="true">#</a> 4.3 type</h3><p>检测对象的 JavaScript [Class] 内部类型。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// Native</span>\n<span class="token keyword">function</span> <span class="token function">type</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> reTypeOf <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?:^\\[object\\s(.*?)\\]$)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reTypeOf<span class="token punctuation">,</span> <span class="token string">&#39;$1&#39;</span><span class="token punctuation">)</span>\n     <span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="_4-4-now" tabindex="-1"><a class="header-anchor" href="#_4-4-now" aria-hidden="true">#</a> 4.4 now</h3><p>返回当前时间的数字呈现。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// Native</span>\nDate<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="_5-js-中构建一个-form" tabindex="-1"><a class="header-anchor" href="#_5-js-中构建一个-form" aria-hidden="true">#</a> 5. JS 中构建一个 Form</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// JavaScript 构建一个 form</span>\n<span class="token keyword">function</span> <span class="token function">make_form</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 创建一个 form</span>\n    <span class="token keyword">const</span> form1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;form&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    form1<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token string">&quot;form1&quot;</span><span class="token punctuation">;</span>\n    form1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;form1&quot;</span><span class="token punctuation">;</span>\n    form1<span class="token punctuation">.</span>style <span class="token operator">=</span> <span class="token string">&quot;display:none;&quot;</span><span class="token punctuation">;</span>\n    <span class="token comment">// form1.style.display = &quot;none&quot;;</span>\n    form1<span class="token punctuation">.</span>method <span class="token operator">=</span> <span class="token string">&quot;POST&quot;</span><span class="token punctuation">;</span>\n    form1<span class="token punctuation">.</span>action <span class="token operator">=</span> <span class="token string">&quot;/servlet/info&quot;</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 创建一个输入</span>\n    <span class="token keyword">const</span> input <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;input&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    input<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">&quot;text&quot;</span><span class="token punctuation">;</span>\n    input<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;value1&quot;</span><span class="token punctuation">;</span>\n    input<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">&quot;1234567&quot;</span><span class="token punctuation">;</span>\n    <span class="token comment">// 将该输入框插入到 form 中</span>\n    form1<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 添加 form 到 body，提交，删除 form</span>\n    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>form1<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    form1<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>form1<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div>',30),e={render:function(n,s){return p}}}}]);