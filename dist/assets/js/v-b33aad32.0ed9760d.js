"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[7950],{84956:(n,a,s)=>{s.r(a),s.d(a,{data:()=>e});const e={key:"v-b33aad32",path:"/interview-questions/02-%E7%BA%BF%E7%A8%8B.html",title:"线程、线程池和锁面试题",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"1. 线程",slug:"_1-线程",children:[{level:3,title:"1.1 线程和进程有什么区别和联系？",slug:"_1-1-线程和进程有什么区别和联系",children:[]},{level:3,title:"1.2 如何保证一个线程执行完再执行第二个线程？",slug:"_1-2-如何保证一个线程执行完再执行第二个线程",children:[]},{level:3,title:"1.3 线程有哪些常用的方法？",slug:"_1-3-线程有哪些常用的方法",children:[]},{level:3,title:"1.4 wait() 和 sleep() 有什么区别？",slug:"_1-4-wait-和-sleep-有什么区别",children:[]},{level:3,title:"1.5 守护线程是什么？",slug:"_1-5-守护线程是什么",children:[]},{level:3,title:"1.6 线程有哪些状态？",slug:"_1-6-线程有哪些状态",children:[]},{level:3,title:"1.7 线程中的 start() 和 run() 有那些区别？",slug:"_1-7-线程中的-start-和-run-有那些区别",children:[]},{level:3,title:"1.8 产生死锁需要具备哪些条件？",slug:"_1-8-产生死锁需要具备哪些条件",children:[]},{level:3,title:"1.9 如何预防死锁？",slug:"_1-9-如何预防死锁",children:[]},{level:3,title:"1.10 如何让两个程序依次输出 11/22/33 等数字，请写出实现代码？",slug:"_1-10-如何让两个程序依次输出-11-22-33-等数字-请写出实现代码",children:[]},{level:3,title:"1.11 说一下线程的调度策略？",slug:"_1-11-说一下线程的调度策略",children:[]}]},{level:2,title:"2. 线程池：ThreadPoolExecutor",slug:"_2-线程池-threadpoolexecutor",children:[{level:3,title:"2.1 ThreadPoolExecutor 有哪些常用的方法？",slug:"_2-1-threadpoolexecutor-有哪些常用的方法",children:[]},{level:3,title:"2.2 以下程序执行的结果是什么？",slug:"_2-2-以下程序执行的结果是什么",children:[]},{level:3,title:"2.3 在 ThreadPool 中 submit() 和 execute() 有什么区别？",slug:"_2-3-在-threadpool-中-submit-和-execute-有什么区别",children:[]},{level:3,title:"2.4 说一下 ThreadPoolExecutor 都需要哪些参数？",slug:"_2-4-说一下-threadpoolexecutor-都需要哪些参数",children:[]},{level:3,title:"2.5 在线程池中 shutdownNow() 和 shutdown() 有什么区别？",slug:"_2-5-在线程池中-shutdownnow-和-shutdown-有什么区别",children:[]},{level:3,title:"2.6 说一说线程池的工作原理？",slug:"_2-6-说一说线程池的工作原理",children:[]},{level:3,title:"2.7 以下线程名称被打印了几次？",slug:"_2-7-以下线程名称被打印了几次",children:[]}]},{level:2,title:"3. 线程池：Executors",slug:"_3-线程池-executors",children:[{level:3,title:"3.1 以下程序会输出什么结果？",slug:"_3-1-以下程序会输出什么结果",children:[]},{level:3,title:"3.2 Executors 能创建单线程的线程池吗？怎么创建？",slug:"_3-2-executors-能创建单线程的线程池吗-怎么创建",children:[]},{level:3,title:"3.3 Executors 中哪个线程适合执行短时间内大量任务？",slug:"_3-3-executors-中哪个线程适合执行短时间内大量任务",children:[]},{level:3,title:"3.4 可以执行周期性任务的线程池都有哪些？",slug:"_3-4-可以执行周期性任务的线程池都有哪些",children:[]},{level:3,title:"3.5 JDK 8 新增了什么线程池？有什么特点？",slug:"_3-5-jdk-8-新增了什么线程池-有什么特点",children:[]},{level:3,title:"3.6 newFixedThreadPool 和 ThreadPoolExecutor 有什么关系？",slug:"_3-6-newfixedthreadpool-和-threadpoolexecutor-有什么关系",children:[]},{level:3,title:"3.7 单线程的线程池存在的意义是什么？",slug:"_3-7-单线程的线程池存在的意义是什么",children:[]},{level:3,title:"3.8 线程池为什么建议使用 ThreadPoolExecutor 创建，而非 Executors？",slug:"_3-8-线程池为什么建议使用-threadpoolexecutor-创建-而非-executors",children:[]}]},{level:2,title:"4. ThreadLocal",slug:"_4-threadlocal",children:[{level:3,title:"4.1 ThreadLocal 为什么是线程安全的？",slug:"_4-1-threadlocal-为什么是线程安全的",children:[]},{level:3,title:"4.2 以下程序打印的结果是 true 还是 false？",slug:"_4-2-以下程序打印的结果是-true-还是-false",children:[]},{level:3,title:"4.3 ThreadLocal 为什么会发生内存溢出？",slug:"_4-3-threadlocal-为什么会发生内存溢出",children:[]},{level:3,title:"4.4 解决 ThreadLocal 内存溢出的关键代码是什么？",slug:"_4-4-解决-threadlocal-内存溢出的关键代码是什么",children:[]},{level:3,title:"4.5 ThreadLocal 和 Synchonized 有什么区别？",slug:"_4-5-threadlocal-和-synchonized-有什么区别",children:[]}]},{level:2,title:"5. synchronized 和 ReentrantLock",slug:"_5-synchronized-和-reentrantlock",children:[{level:3,title:"5.1 ReentrantLock 常用的方法有哪些？",slug:"_5-1-reentrantlock-常用的方法有哪些",children:[]},{level:3,title:"5.2 ReentrantLock 有哪些优势？",slug:"_5-2-reentrantlock-有哪些优势",children:[]},{level:3,title:"5.3 ReentrantLock 怎么创建公平锁？",slug:"_5-3-reentrantlock-怎么创建公平锁",children:[]},{level:3,title:"5.4 公平锁和非公平锁有哪些区别？",slug:"_5-4-公平锁和非公平锁有哪些区别",children:[]},{level:3,title:"5.5 ReentrantLock 中 lock() 和 lockInterruptibly() 有什么区别？",slug:"_5-5-reentrantlock-中-lock-和-lockinterruptibly-有什么区别",children:[]},{level:3,title:"5.6 synchronized 和 ReentrantLock 有什么区别？",slug:"_5-6-synchronized-和-reentrantlock-有什么区别",children:[]},{level:3,title:"5.7 ReentrantLock 的 tryLock(3, TimeUnit.SECONDS) 表示等待 3 秒后再去获取锁，这种说法对吗？为什么？",slug:"_5-7-reentrantlock-的-trylock-3-timeunit-seconds-表示等待-3-秒后再去获取锁-这种说法对吗-为什么",children:[]},{level:3,title:"5.8 synchronized 是如何实现锁升级的？",slug:"_5-8-synchronized-是如何实现锁升级的",children:[]}]},{level:2,title:"6. CAS 和各种锁",slug:"_6-cas-和各种锁",children:[{level:3,title:"6.1 synchronized 是哪种锁的实现？为什么？",slug:"_6-1-synchronized-是哪种锁的实现-为什么",children:[]},{level:3,title:"6.2 new ReentrantLock() 创建的是公平锁还是非公平锁？",slug:"_6-2-new-reentrantlock-创建的是公平锁还是非公平锁",children:[]},{level:3,title:"6.3 synchronized 使用的是公平锁还是非公平锁？",slug:"_6-3-synchronized-使用的是公平锁还是非公平锁",children:[]},{level:3,title:"6.4 为什么非公平锁吞吐量大于公平锁？",slug:"_6-4-为什么非公平锁吞吐量大于公平锁",children:[]},{level:3,title:"6.5 volatile 的作用是什么？",slug:"_6-5-volatile-的作用是什么",children:[]},{level:3,title:"6.6 volatile 对比 synchronized 有什么区别？",slug:"_6-6-volatile-对比-synchronized-有什么区别",children:[]},{level:3,title:"6.7 CAS 是如何实现的？",slug:"_6-7-cas-是如何实现的",children:[]},{level:3,title:"6.8 CAS 会产生什么问题？应该怎么解决？",slug:"_6-8-cas-会产生什么问题-应该怎么解决",children:[]},{level:3,title:"6.9 以下说法错误的是？",slug:"_6-9-以下说法错误的是",children:[]}]}],filePathRelative:"interview-questions/02-线程.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},48081:(n,a,s)=>{s.r(a),s.d(a,{default:()=>t});const e=(0,s(66252).uE)('<h1 id="线程、线程池和锁面试题" tabindex="-1"><a class="header-anchor" href="#线程、线程池和锁面试题" aria-hidden="true">#</a> 线程、线程池和锁面试题</h1><h2 id="_1-线程" tabindex="-1"><a class="header-anchor" href="#_1-线程" aria-hidden="true">#</a> 1. 线程</h2><h3 id="_1-1-线程和进程有什么区别和联系" tabindex="-1"><a class="header-anchor" href="#_1-1-线程和进程有什么区别和联系" aria-hidden="true">#</a> 1.1 线程和进程有什么区别和联系？</h3><p>答：</p><ul><li><p>联系：</p><ul><li><p>进程是线程的『上级』和『容器』，一个进程中可以有一个或多个线程<small>（至少一个）</small>。</p></li><li><p>线程概念是进程概念的轻量化，很多线程概念和进程大概念都是一脉相承。</p></li></ul></li><li><p>区别：</p><ul><li><p>进程概念要比线程概念出现更早；</p></li><li><p>进程与进程间是隔离的，不能共享内存空间和上下文。但是，<small>（因为同属一个进程）</small>一个进程下的线程缺可以；</p></li><li><p>线程占用资源比进程更少，切换线程比切换进程代价更小；</p></li><li><p>进程是程序的一次执行，线程是程序中的部分代码、部分逻辑的执行。</p></li></ul></li></ul><h3 id="_1-2-如何保证一个线程执行完再执行第二个线程" tabindex="-1"><a class="header-anchor" href="#_1-2-如何保证一个线程执行完再执行第二个线程" aria-hidden="true">#</a> 1.2 如何保证一个线程执行完再执行第二个线程？</h3><p>答：</p><p>使用 <code>join()</code> 方法，等待上一个线程的执行完之后，再执行当前线程。</p><p>示例代码：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Thread</span> joinThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">try</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;执行前&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;执行后&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\njoinThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\njoinThread<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;主程序&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="_1-3-线程有哪些常用的方法" tabindex="-1"><a class="header-anchor" href="#_1-3-线程有哪些常用的方法" aria-hidden="true">#</a> 1.3 线程有哪些常用的方法？</h3><p>答：线程的常用方法如下：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：返回当前正在执行的线程引用\n      <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：返回此线程的名称\n  <span class="token function">setPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> 设置线程的优先级\n  <span class="token function">getPriority</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：返回线程的优先级\n      <span class="token function">isAlive</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：检测此线程是否处于活动状态，活动状态指的是程序处于正在运行或准备运行的状态\n        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：使线程休眠\n         <span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：等待线程执行完成\n        <span class="token keyword">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：让同优先级的线程有执行的机会，但不能保证自己会从正在运行的状态迅速转换到可运行的状态\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="_1-4-wait-和-sleep-有什么区别" tabindex="-1"><a class="header-anchor" href="#_1-4-wait-和-sleep-有什么区别" aria-hidden="true">#</a> 1.4 wait() 和 sleep() 有什么区别？</h3><p>答：</p><ol><li><p>从来源看：sleep() 来自 Thread ，wait() 来自 Object 。</p></li><li><p>从线程状态看：sleep() 导致当前线程进入 TIMED_WAITING 状态，wait() 导致当前线程进入 WAITING 状态。</p></li><li><p>从恢复执行看：sleep() 在指定时间之后，线程会恢复执行，wait() 则需要等待别的线程使用 notify()/notifyAll() 来唤醒它。（这和上述 <code>2</code> 有关）。</p></li><li><p>从锁看：如果当前线程持有锁，sleep() 不会释放锁，wait() 会释放锁。</p></li></ol><h3 id="_1-5-守护线程是什么" tabindex="-1"><a class="header-anchor" href="#_1-5-守护线程是什么" aria-hidden="true">#</a> 1.5 守护线程是什么？</h3><p>答：守护线程是一种比较低级别的线程，一般用于为其他类别线程提供服务，因此当其他线程都退出时，它也就没有存在的必要了。例如，JVM<small>（Java 虚拟机）</small>中的垃圾回收线程。</p><h3 id="_1-6-线程有哪些状态" tabindex="-1"><a class="header-anchor" href="#_1-6-线程有哪些状态" aria-hidden="true">#</a> 1.6 线程有哪些状态？</h3><p>答：在 JDK 8 中，线程的状态有以下 6 种。</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>          NEW：尚未启动\n     RUNNABLE：正在执行中\n      BLOCKED：阻塞（被同步锁或者 IO 锁阻塞）\n      WAITING：永久等待状态\nTIMED_WAITING：等待指定的时间重新被唤醒的状态\n   TERMINATED：执行完成\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>这里需要说明的是：经典操作系统线程核心三态是 Runnable、Running 和 Blocked，而 Java 线程的状态中与之对应的是：Runnable、Blocked、Waiting、Timed_Waiting。</p><ul><li><p>Java 线程状态没有区分 Runnable 和 Running，把它们都归于 Runnable 。</p></li><li><p>Java 把 Blocked 状态细分为：Blocked、Waiting 和 Timed_Waiting 三种。</p></li></ul><h3 id="_1-7-线程中的-start-和-run-有那些区别" tabindex="-1"><a class="header-anchor" href="#_1-7-线程中的-start-和-run-有那些区别" aria-hidden="true">#</a> 1.7 线程中的 start() 和 run() 有那些区别？</h3><p>答：</p><ul><li><p>start() 方法用于启动线程； run() 方法用于执行线程的运行时代码。</p></li><li><p>run() 可以重复调用，而 start() 只能调用一次。</p></li></ul><h3 id="_1-8-产生死锁需要具备哪些条件" tabindex="-1"><a class="header-anchor" href="#_1-8-产生死锁需要具备哪些条件" aria-hidden="true">#</a> 1.8 产生死锁需要具备哪些条件？</h3><p>答：产生死锁的四个必要条件：</p><ul><li><p>互斥条件：一个资源每次只能被一个线程使用；</p></li><li><p>请求与保持条件：一个线程因请求资源而阻塞时，对已获得的资源保持不放；</p></li><li><p>不剥夺条件：线程已获得的资源，在末使用完之前，不能强行剥夺；</p></li><li><p>循环等待条件：若干线程之间形成一种头尾相接的循环等待资源关系；</p></li></ul><p>这四个条件是死锁的必要条件，只要系统发生死锁，这些条件必然成立，而只要上述条件之一不满足，就不会发生死锁。</p><p>简而言之一句话：每个线程拥有部分资源，不愿意放弃已有资源，并且在等待别人释放资源。</p><h3 id="_1-9-如何预防死锁" tabindex="-1"><a class="header-anchor" href="#_1-9-如何预防死锁" aria-hidden="true">#</a> 1.9 如何预防死锁？</h3><p>答：预防死锁的方法如下：</p><ul><li><p>尽量使用 tryLock(long timeout, TimeUnit unit) 的方法 (ReentrantLock、ReentrantReadWriteLock)，设置超时时间，超时可以退出防止死锁；</p></li><li><p>尽量使用 Java.util.concurrent 并发类代替自己手写锁；</p></li><li><p>尽量降低锁的使用粒度，尽量不要几个功能用同一把锁；</p></li><li><p>优化代码逻辑，如果无法获取全部资源，就释放以获得资源，并重新开始获取资源。</p></li></ul><h3 id="_1-10-如何让两个程序依次输出-11-22-33-等数字-请写出实现代码" tabindex="-1"><a class="header-anchor" href="#_1-10-如何让两个程序依次输出-11-22-33-等数字-请写出实现代码" aria-hidden="true">#</a> 1.10 如何让两个程序依次输出 11/22/33 等数字，请写出实现代码？</h3><p>答：使用思路是在每个线程输出信息之后，让当前线程等待一会再执行下一次操作，具体实现代码如下：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;线程一：&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">try</span> <span class="token punctuation">{</span>\n            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;线程二：&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">try</span> <span class="token punctuation">{</span>\n            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>程序执行结果如下：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>线程一：1\n线程二：1\n线程二：2\n线程一：2\n线程二：3\n线程一：3\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="_1-11-说一下线程的调度策略" tabindex="-1"><a class="header-anchor" href="#_1-11-说一下线程的调度策略" aria-hidden="true">#</a> 1.11 说一下线程的调度策略？</h3><p>答：线程调度器选择优先级最高的线程运行，但是如果发生以下情况，就会终止线程的运行：</p><ul><li>线程体中调用了 yield() 方法，让出了对 CPU 的占用权；</li><li>线程体中调用了 sleep() 方法，使线程进入睡眠状态；</li><li>线程由于 I/O 操作而受阻塞；</li><li>另一个更高优先级的线程出现；</li><li>在支持时间片的系统中，该线程的时间片用完。</li></ul><h2 id="_2-线程池-threadpoolexecutor" tabindex="-1"><a class="header-anchor" href="#_2-线程池-threadpoolexecutor" aria-hidden="true">#</a> 2. 线程池：ThreadPoolExecutor</h2><h3 id="_2-1-threadpoolexecutor-有哪些常用的方法" tabindex="-1"><a class="header-anchor" href="#_2-1-threadpoolexecutor-有哪些常用的方法" aria-hidden="true">#</a> 2.1 ThreadPoolExecutor 有哪些常用的方法？</h3><p>答：常用方法如下所示：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>   <span class="token function">getCorePoolSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：获取核心线程数\n<span class="token function">getMaximumPoolSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：获取最大线程数\n    <span class="token function">getActiveCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：正在运行的线程数\n          <span class="token function">getQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：获取线程池中的任务队列\n        <span class="token function">isShutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：判断线程是否终止\n            <span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：执行线程池\n           <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：执行线程池\n          <span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> 终止线程池\n       <span class="token function">shutdownNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：终止线程池\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="_2-2-以下程序执行的结果是什么" tabindex="-1"><a class="header-anchor" href="#_2-2-以下程序执行的结果是什么" aria-hidden="true">#</a> 2.2 以下程序执行的结果是什么？</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">ThreadPoolExecutor</span> threadPoolExecutor <span class="token operator">=</span> \n    <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> \n        <span class="token number">10L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span> \n        <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    \nthreadPoolExecutor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;I：&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">try</span> <span class="token punctuation">{</span>\n                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nthreadPoolExecutor<span class="token punctuation">.</span><span class="token function">shutdownNow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Java&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>答：程序执行的结果是：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>I：0\nJava\njava.lang.InterruptedException: sleep interrupted（报错信息）\nI：1\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>题目解析：因为程序中使用了 <code>shutdownNow()</code> 会导致程序执行一次之后报错，抛出 <code>sleep interrupted</code> 异常，又因为本身有 try/catch，所以程序会继续执行打印 <code>I：1</code> 。</p><h3 id="_2-3-在-threadpool-中-submit-和-execute-有什么区别" tabindex="-1"><a class="header-anchor" href="#_2-3-在-threadpool-中-submit-和-execute-有什么区别" aria-hidden="true">#</a> 2.3 在 ThreadPool 中 submit() 和 execute() 有什么区别？</h3><p>答：submit() 和 execute() 都是用来执行线程池的，不同的是：</p><ul><li>使用 execute() 执行线程池不能有返回方法；</li><li>使用 submit() 可以使用 Future 接收线程池执行的返回值。</li></ul><h3 id="_2-4-说一下-threadpoolexecutor-都需要哪些参数" tabindex="-1"><a class="header-anchor" href="#_2-4-说一下-threadpoolexecutor-都需要哪些参数" aria-hidden="true">#</a> 2.4 说一下 ThreadPoolExecutor 都需要哪些参数？</h3><p>答：ThreadPoolExecutor 最多包含以下七个参数：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>            corePoolSize：线程池中的核心线程数\n         maximumPoolSize：线程池中最大线程数\n           keepAliveTime：闲置超时时间\n                    unit：keepAliveTime 超时时间的单位（时/分/秒等）\n               workQueue：线程池中的任务队列\n           threadFactory：为线程池提供创建新线程的线程工厂\nrejectedExecutionHandler：线程池任务队列超过最大值之后的拒绝策略\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="_2-5-在线程池中-shutdownnow-和-shutdown-有什么区别" tabindex="-1"><a class="header-anchor" href="#_2-5-在线程池中-shutdownnow-和-shutdown-有什么区别" aria-hidden="true">#</a> 2.5 在线程池中 shutdownNow() 和 shutdown() 有什么区别？</h3><p>答：shutdownNow() 和 shutdown() 都是用来终止线程池的，它们的区别是：</p><ul><li><p>使用 shutdown() 程序不会报错，也不会立即终止线程，它会等待线程池中的缓存任务执行完之后再退出，执行了 shutdown() 之后就不能给线程池添加新任务了；</p></li><li><p>shutdownNow() 会试图立马停止任务，如果线程池中还有缓存任务正在执行，则会抛出 java.lang.InterruptedException: sleep interrupted 异常。</p></li></ul><h3 id="_2-6-说一说线程池的工作原理" tabindex="-1"><a class="header-anchor" href="#_2-6-说一说线程池的工作原理" aria-hidden="true">#</a> 2.6 说一说线程池的工作原理？</h3><p>答：当线程池中有任务需要执行时，线程池会判断如果线程数量没有超过核心数量就会新建线程池进行任务执行，如果线程池中的线程数量已经超过核心线程数，这时候任务就会被放入任务队列中排队等待执行；如果任务队列超过最大队列数，并且线程池没有达到最大线程数，就会新建线程来执行任务；如果超过了最大线程数，就会执行拒绝执行策略。</p><h3 id="_2-7-以下线程名称被打印了几次" tabindex="-1"><a class="header-anchor" href="#_2-7-以下线程名称被打印了几次" aria-hidden="true">#</a> 2.7 以下线程名称被打印了几次？</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">ThreadPoolExecutor</span> threadPool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span>\n        <span class="token number">10L</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span> \n        <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor<span class="token punctuation">.</span>DiscardPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nthreadPool<span class="token punctuation">.</span><span class="token function">allowCoreThreadTimeOut</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    threadPool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token annotation punctuation">@Override</span>\n        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// 打印线程名称</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">try</span> <span class="token punctuation">{</span>\n                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>答：线程名被打印了 3 次。</p><p>线程池第 1 次执行任务时，会新创建任务并执行；第 2 次执行任务时，因为没有空闲线程所以会把任务放入队列；第 3 次同样把任务放入队列，因为队列最多可以放两条数据，所以第 4 次之后的执行都会被舍弃（没有定义拒绝策略），于是就打印了 3 次线程名称。</p><h2 id="_3-线程池-executors" tabindex="-1"><a class="header-anchor" href="#_3-线程池-executors" aria-hidden="true">#</a> 3. 线程池：Executors</h2><h3 id="_3-1-以下程序会输出什么结果" tabindex="-1"><a class="header-anchor" href="#_3-1-以下程序会输出什么结果" aria-hidden="true">#</a> 3.1 以下程序会输出什么结果？</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">ExecutorService</span> workStealingPool <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newWorkStealingPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">int</span> finalNumber <span class="token operator">=</span> i<span class="token punctuation">;</span>\n        workStealingPool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>finalNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>A：不输出任何结果<br> B：输出 0 到 9 有序数字<br> C：输出 0 到 9 无需数字<br> D：以上全对</p><p>答：A</p><p>newWorkStealingPool 内部实现是 ForkJoinPool，它会随着主程序的退出而退出，因为主程序没有任何休眠和等待操作，程序会一闪而过，不会执行任何信息，所以也就不会输出任何结果。</p><h3 id="_3-2-executors-能创建单线程的线程池吗-怎么创建" tabindex="-1"><a class="header-anchor" href="#_3-2-executors-能创建单线程的线程池吗-怎么创建" aria-hidden="true">#</a> 3.2 Executors 能创建单线程的线程池吗？怎么创建？</h3><p>答：Executors 可以创建单线程线程池，创建分为两种方式：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>         <span class="token function">newSingleThreadExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：创建一个单线程线程池。\n<span class="token function">newSingleThreadScheduledExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>：创建一个可以执行周期性任务的单线程池。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="_3-3-executors-中哪个线程适合执行短时间内大量任务" tabindex="-1"><a class="header-anchor" href="#_3-3-executors-中哪个线程适合执行短时间内大量任务" aria-hidden="true">#</a> 3.3 Executors 中哪个线程适合执行短时间内大量任务？</h3><p>答：<code>newCachedThreadPool()</code> 适合处理大量短时间工作任务。它会试图缓存线程并重用，如果没有缓存任务就会新创建任务，如果线程的限制时间超过 60 秒，则会被移除线程池，因此它比较适合短时间内处理大量任务。</p><h3 id="_3-4-可以执行周期性任务的线程池都有哪些" tabindex="-1"><a class="header-anchor" href="#_3-4-可以执行周期性任务的线程池都有哪些" aria-hidden="true">#</a> 3.4 可以执行周期性任务的线程池都有哪些？</h3><p>答：可执行周期性任务的线程池有两个，分别是：<code>newScheduledThreadPool()</code> 和 <code>newSingleThreadScheduledExecutor()</code>，其中 newSingleThreadScheduledExecutor() 是 newScheduledThreadPool() 的单线程版本。</p><h3 id="_3-5-jdk-8-新增了什么线程池-有什么特点" tabindex="-1"><a class="header-anchor" href="#_3-5-jdk-8-新增了什么线程池-有什么特点" aria-hidden="true">#</a> 3.5 JDK 8 新增了什么线程池？有什么特点？</h3><p>答：JDK 8 新增的线程池是 <code>.newWorkStealingPool(n)</code>，如果不指定并发数（也就是不指定 n），newWorkStealingPool() 会根据当前 CPU 处理器数量生成相应个数的线程池。它的特点是并行处理任务的，不能保证任务的执行顺序。</p><h3 id="_3-6-newfixedthreadpool-和-threadpoolexecutor-有什么关系" tabindex="-1"><a class="header-anchor" href="#_3-6-newfixedthreadpool-和-threadpoolexecutor-有什么关系" aria-hidden="true">#</a> 3.6 newFixedThreadPool 和 ThreadPoolExecutor 有什么关系？</h3><p>答：newFixedThreadPool 是 ThreadPoolExecutor 包装，newFixedThreadPool 底层也是通过 ThreadPoolExecutor 实现的。</p><h3 id="_3-7-单线程的线程池存在的意义是什么" tabindex="-1"><a class="header-anchor" href="#_3-7-单线程的线程池存在的意义是什么" aria-hidden="true">#</a> 3.7 单线程的线程池存在的意义是什么？</h3><p>答：单线程线程池提供了队列功能，如果有多个任务会排队执行，可以保证任务执行的顺序性。单线程线程池也可以重复利用已有线程，减低系统创建和销毁线程的性能开销。</p><h3 id="_3-8-线程池为什么建议使用-threadpoolexecutor-创建-而非-executors" tabindex="-1"><a class="header-anchor" href="#_3-8-线程池为什么建议使用-threadpoolexecutor-创建-而非-executors" aria-hidden="true">#</a> 3.8 线程池为什么建议使用 ThreadPoolExecutor 创建，而非 Executors？</h3><p>答：使用 ThreadPoolExecutor 能让开发者更加明确线程池的运行规则，避免资源耗尽的风险。</p><p>Executors 返回线程池的缺点如下：</p><ul><li>FixedThreadPool 和 SingleThreadPool 允许请求队列长度为 Integer.MAX_VALUE，可能会堆积大量请求，可能会导致内存溢出；</li><li>CachedThreadPool 和 ScheduledThreadPool 允许创建线程数量为 Integer.MAX_VALUE，创建大量线程，可能会导致内存溢出。</li></ul><h2 id="_4-threadlocal" tabindex="-1"><a class="header-anchor" href="#_4-threadlocal" aria-hidden="true">#</a> 4. ThreadLocal</h2><h3 id="_4-1-threadlocal-为什么是线程安全的" tabindex="-1"><a class="header-anchor" href="#_4-1-threadlocal-为什么是线程安全的" aria-hidden="true">#</a> 4.1 ThreadLocal 为什么是线程安全的？</h3><p>答：ThreadLocal 为每一个线程维护变量的副本，把共享数据的可见范围限制在同一个线程之内，因此 ThreadLocal 是线程安全的，每个线程都有属于自己的变量。</p><h3 id="_4-2-以下程序打印的结果是-true-还是-false" tabindex="-1"><a class="header-anchor" href="#_4-2-以下程序打印的结果是-true-还是-false" aria-hidden="true">#</a> 4.2 以下程序打印的结果是 true 还是 false？</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">ThreadLocal</span> threadLocal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InheritableThreadLocal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nthreadLocal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;老王&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">ThreadLocal</span> threadLocal2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nthreadLocal2<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;老王&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>threadLocal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>threadLocal2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>答：false。</p><p>因为 threadLocal 使用的是 InheritableThreadLocal（共享本地线程），所以 threadLocal.get() 结果为 <code>老王</code> ，而 threadLocal2 使用的是 ThreadLocal，因此在新线程中 threadLocal2.get() 的结果为 <code>null</code> ，因而它们比较的最终结果为 false。</p><h3 id="_4-3-threadlocal-为什么会发生内存溢出" tabindex="-1"><a class="header-anchor" href="#_4-3-threadlocal-为什么会发生内存溢出" aria-hidden="true">#</a> 4.3 ThreadLocal 为什么会发生内存溢出？</h3><p>答：</p><p>ThreadLocal 造成内存溢出的原因：如果 ThreadLocal 没有被直接引用<small>（外部强引用）</small>，在 GC<small>（垃圾回收）</small>时，由于 ThreadLocalMap 中的 key 是弱引用，所以一定就会被回收，这样一来 ThreadLocalMap 中就会出现 key 为 null 的 Entry，并且没有办法访问这些数据，如果当前线程再迟迟不结束的话，这些 key 为 null 的 Entry 的 value 就会一直存在一条强引用链：Thread Ref -&gt; Thread -&gt; ThreaLocalMap -&gt; Entry -&gt; value 并且永远无法回收，从而造成内存泄漏。</p><h3 id="_4-4-解决-threadlocal-内存溢出的关键代码是什么" tabindex="-1"><a class="header-anchor" href="#_4-4-解决-threadlocal-内存溢出的关键代码是什么" aria-hidden="true">#</a> 4.4 解决 ThreadLocal 内存溢出的关键代码是什么？</h3><p>答：关键代码为 <code>threadLocal.remove()</code> ，使用完 ThreadLocal 之后，调用remove() 方法，清除掉 ThreadLocalMap 中的无用数据就可以避免内存溢出了。</p><h3 id="_4-5-threadlocal-和-synchonized-有什么区别" tabindex="-1"><a class="header-anchor" href="#_4-5-threadlocal-和-synchonized-有什么区别" aria-hidden="true">#</a> 4.5 ThreadLocal 和 Synchonized 有什么区别？</h3><p>答：ThreadLocal 和 Synchonized 都用于解决多线程并发访问，防止任务在共享资源上产生冲突，但是 ThreadLocal 与 Synchronized 有本质的区别：</p><ul><li><p>Synchronized 用于实现同步机制，是利用锁的机制使变量或代码块在某一时刻只能被一个线程访问，是一种 <code>以时间换空间</code> 的方式；</p></li><li><p>ThreadLocal 为每一个线程提供了独立的变量副本，这样每个线程的（变量）操作都是相互隔离的，这是一种 <code>以空间换时间</code> 的方式。</p></li></ul><h2 id="_5-synchronized-和-reentrantlock" tabindex="-1"><a class="header-anchor" href="#_5-synchronized-和-reentrantlock" aria-hidden="true">#</a> 5. synchronized 和 ReentrantLock</h2><h3 id="_5-1-reentrantlock-常用的方法有哪些" tabindex="-1"><a class="header-anchor" href="#_5-1-reentrantlock-常用的方法有哪些" aria-hidden="true">#</a> 5.1 ReentrantLock 常用的方法有哪些？</h3><p>答：ReentrantLock 常见方法如下：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>          lock()：用于获取锁\n        unlock()：用于释放锁\n       tryLock()：尝试获取锁\n  getHoldCount()：查询当前线程执行 lock() 方法的次数\ngetQueueLength()：返回正在排队等待获取此锁的线程数\n        isFair()：该锁是否为公平锁\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="_5-2-reentrantlock-有哪些优势" tabindex="-1"><a class="header-anchor" href="#_5-2-reentrantlock-有哪些优势" aria-hidden="true">#</a> 5.2 ReentrantLock 有哪些优势？</h3><p>答：ReentrantLock 具备非阻塞方式获取锁的特性，使用 <code>tryLock()</code> 方法。ReentrantLock 可以中断获得的锁，使用 <code>lockInterruptibly()</code> 方法当获取锁之后，如果所在的线程被中断，则会抛出异常并释放当前获得的锁。ReentrantLock 可以在指定时间范围内获取锁，使用 <code>tryLock(long timeout,TimeUnit unit)</code> 方法。</p><h3 id="_5-3-reentrantlock-怎么创建公平锁" tabindex="-1"><a class="header-anchor" href="#_5-3-reentrantlock-怎么创建公平锁" aria-hidden="true">#</a> 5.3 ReentrantLock 怎么创建公平锁？</h3><p>答：<code>new ReentrantLock()</code> 默认创建的为非公平锁，如果要创建公平锁可以使用 <code>new ReentrantLock(true)</code> 。</p><h3 id="_5-4-公平锁和非公平锁有哪些区别" tabindex="-1"><a class="header-anchor" href="#_5-4-公平锁和非公平锁有哪些区别" aria-hidden="true">#</a> 5.4 公平锁和非公平锁有哪些区别？</h3><p>答：公平锁指的是线程获取锁的顺序是按照加锁顺序来的，而非公平锁指的是抢锁机制，先 lock() 的线程不一定先获得锁。</p><h3 id="_5-5-reentrantlock-中-lock-和-lockinterruptibly-有什么区别" tabindex="-1"><a class="header-anchor" href="#_5-5-reentrantlock-中-lock-和-lockinterruptibly-有什么区别" aria-hidden="true">#</a> 5.5 ReentrantLock 中 lock() 和 lockInterruptibly() 有什么区别？</h3><p>答：lock() 和 lockInterruptibly() 的区别在于获取线程的途中如果所在的线程中断，lock() 会忽略异常继续等待获取线程，而 lockInterruptibly() 则会抛出 InterruptedException 异常。</p><p>题目解析：执行以下代码，在线程中分别使用 lock() 和 lockInterruptibly() 查看运行结果，代码如下：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Lock</span> interruptLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ninterruptLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">try</span> <span class="token punctuation">{</span>\n            interruptLock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token comment">//interruptLock.lockInterruptibly();  </span>\n            <span class="token comment">// java.lang.InterruptedException</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n           e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nthread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nthread<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Over&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>执行以下代码会发现使用 lock() 时程序不会报错，运行完成直接退出；而使用 lockInterruptibly() 则会抛出异常 java.lang.InterruptedException，这就说明：在获取线程的途中如果所在的线程中断，lock() 会忽略异常继续等待获取线程，而 lockInterruptibly() 则会抛出 InterruptedException 异常。</p><h3 id="_5-6-synchronized-和-reentrantlock-有什么区别" tabindex="-1"><a class="header-anchor" href="#_5-6-synchronized-和-reentrantlock-有什么区别" aria-hidden="true">#</a> 5.6 synchronized 和 ReentrantLock 有什么区别？</h3><p>答：synchronized 和 ReentrantLock 都是保证线程安全的，它们的区别如下：</p><ul><li>ReentrantLock 使用起来比较灵活，但是必须有释放锁的配合动作；</li><li>ReentrantLock 必须手动获取与释放锁，而 synchronized 不需要手动释放和开启锁；</li><li>ReentrantLock 只适用于代码块锁，而 synchronized 可用于修饰方法、代码块等；</li><li>ReentrantLock 性能略高于 synchronized。</li></ul><h3 id="_5-7-reentrantlock-的-trylock-3-timeunit-seconds-表示等待-3-秒后再去获取锁-这种说法对吗-为什么" tabindex="-1"><a class="header-anchor" href="#_5-7-reentrantlock-的-trylock-3-timeunit-seconds-表示等待-3-秒后再去获取锁-这种说法对吗-为什么" aria-hidden="true">#</a> 5.7 ReentrantLock 的 tryLock(3, TimeUnit.SECONDS) 表示等待 3 秒后再去获取锁，这种说法对吗？为什么？</h3><p>答：不对。tryLock(3, TimeUnit.SECONDS) 表示获取锁的最大等待时间为 3 秒，期间会一直尝试获取，而不是等待 3 秒之后再去获取锁。</p><h3 id="_5-8-synchronized-是如何实现锁升级的" tabindex="-1"><a class="header-anchor" href="#_5-8-synchronized-是如何实现锁升级的" aria-hidden="true">#</a> 5.8 synchronized 是如何实现锁升级的？</h3><p>答：在锁对象的对象头里面有一个 threadid 字段，在第一次访问的时候 threadid 为空，JVM<small>（Java 虚拟机）</small>让其持有偏向锁，并将 threadid 设置为其线程 id，再次进入的时候会先判断 threadid 是否尤其线程 id 一致，如果一致则可以直接使用，如果不一致，则升级偏向锁为轻量级锁，通过自旋循环一定次数来获取锁，不会阻塞，执行一定次数之后就会升级为重量级锁，进入阻塞，整个过程就是锁升级的过程。</p><h2 id="_6-cas-和各种锁" tabindex="-1"><a class="header-anchor" href="#_6-cas-和各种锁" aria-hidden="true">#</a> 6. CAS 和各种锁</h2><h3 id="_6-1-synchronized-是哪种锁的实现-为什么" tabindex="-1"><a class="header-anchor" href="#_6-1-synchronized-是哪种锁的实现-为什么" aria-hidden="true">#</a> 6.1 synchronized 是哪种锁的实现？为什么？</h3><p>答：synchronized 是悲观锁的实现，因为 synchronized 修饰的代码，每次执行时会进行加锁操作，同时只允许一个线程进行操作，所以它是悲观锁的实现。</p><h3 id="_6-2-new-reentrantlock-创建的是公平锁还是非公平锁" tabindex="-1"><a class="header-anchor" href="#_6-2-new-reentrantlock-创建的是公平锁还是非公平锁" aria-hidden="true">#</a> 6.2 new ReentrantLock() 创建的是公平锁还是非公平锁？</h3><p>答：非公平锁。</p><ul><li><p><code>new ReentrantLock()</code> 等同于 <code>new ReentrantLock(false)</code> 它是非公平锁；</p></li><li><p><code>new ReentrantLock(true)</code> 是公平锁。</p></li></ul><h3 id="_6-3-synchronized-使用的是公平锁还是非公平锁" tabindex="-1"><a class="header-anchor" href="#_6-3-synchronized-使用的是公平锁还是非公平锁" aria-hidden="true">#</a> 6.3 synchronized 使用的是公平锁还是非公平锁？</h3><p>答：synchronized 使用的是非公平锁，并且是不可设置的。</p><p>这是因为非公平锁的吞吐量大于公平锁，并且是主流操作系统线程调度的基本选择，所以这也是 synchronized 使用非公平锁原由。</p><h3 id="_6-4-为什么非公平锁吞吐量大于公平锁" tabindex="-1"><a class="header-anchor" href="#_6-4-为什么非公平锁吞吐量大于公平锁" aria-hidden="true">#</a> 6.4 为什么非公平锁吞吐量大于公平锁？</h3><p>答：比如 A 占用锁的时候，B 请求获取锁，发现被 A 占用之后，堵塞等待被唤醒，这个时候 C 同时来获取 A 占用的锁，如果是公平锁 C 后来者发现不可用之后一定排在 B 之后等待被唤醒，而非公平锁则可以让 C 先用，在 B 被唤醒之前 C 已经使用完成，从而节省了 C 等待和唤醒之间的性能消耗，这就是非公平锁比公平锁吞吐量大的原因。</p><h3 id="_6-5-volatile-的作用是什么" tabindex="-1"><a class="header-anchor" href="#_6-5-volatile-的作用是什么" aria-hidden="true">#</a> 6.5 volatile 的作用是什么？</h3><p>答：volatile 是 Java 虚拟机提供的最轻量级的同步机制。</p><p>当变量被定义成 volatile 之后，具备两种特性：</p><ul><li><p>保证此变量对所有线程的可见性，当一条线程修改了这个变量的值，修改的新值对于其他线程是可见的<small>（可以立即得知的）</small>；</p></li><li><p>禁止指令重排序优化，普通变量仅仅能保证在该方法执行过程中，得到正确结果，但是不保证程序代码的执行顺序。</p></li></ul><h3 id="_6-6-volatile-对比-synchronized-有什么区别" tabindex="-1"><a class="header-anchor" href="#_6-6-volatile-对比-synchronized-有什么区别" aria-hidden="true">#</a> 6.6 volatile 对比 synchronized 有什么区别？</h3><p>答：synchronized 既能保证可见性，又能保证原子性，而 volatile 只能保证可见性，无法保证原子性。比如，i++ 如果使用 synchronized 修饰是线程安全的，而 volatile 会有线程安全的问题。</p><h3 id="_6-7-cas-是如何实现的" tabindex="-1"><a class="header-anchor" href="#_6-7-cas-是如何实现的" aria-hidden="true">#</a> 6.7 CAS 是如何实现的？</h3><p>答： CAS（Compare and Swap）比较并交换，CAS 是通过调用 JNI（Java Native Interface）的代码实现的，比如，在 Windows 系统 CAS 就是借助 C 语言来调用 CPU 底层指令实现的。</p><h3 id="_6-8-cas-会产生什么问题-应该怎么解决" tabindex="-1"><a class="header-anchor" href="#_6-8-cas-会产生什么问题-应该怎么解决" aria-hidden="true">#</a> 6.8 CAS 会产生什么问题？应该怎么解决？</h3><p>答：CAS 是标准的乐观锁的实现，会产生 ABA 的问题。</p><p>ABA 通常的解决办法是添加版本号，每次修改操作时版本号加一，这样数据对比的时候就不会出现 ABA 的问题了。</p><h3 id="_6-9-以下说法错误的是" tabindex="-1"><a class="header-anchor" href="#_6-9-以下说法错误的是" aria-hidden="true">#</a> 6.9 以下说法错误的是？</h3><p>A：独占锁是指任何时候都只有一个线程能执行资源操作<br> B：共享锁指定是可以同时被多个线程读取和修改<br> C：公平锁是指多个线程按照申请锁的顺序来获取锁<br> D：非公平锁是指多个线程获取锁的顺序并不是按照申请锁的顺序，有可能后申请的线程比先申请的线程优先获取锁</p><p>答：B</p><p>共享锁指定是可以同时被多个线程读取，但只能被一个线程修改。</p>',152),t={render:function(n,a){return e}}}}]);