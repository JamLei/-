"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[9249],{77340:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-87a156f8",path:"/mysql/02-%E6%93%8D%E4%BD%9CTable.html",title:"操作 Table",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"创建表",slug:"创建表",children:[]},{level:2,title:"约束",slug:"约束",children:[{level:3,title:"非空（Not Null）约束",slug:"非空-not-null-约束",children:[]},{level:3,title:"唯一性（Unique）约束",slug:"唯一性-unique-约束",children:[]},{level:3,title:"默认值（Default）约束",slug:"默认值-default-约束",children:[]},{level:3,title:"主键（Primary Key）约束",slug:"主键-primary-key-约束",children:[]},{level:3,title:"外键（Foreign Key）约束",slug:"外键-foreign-key-约束",children:[]}]},{level:2,title:"查看表的结构",slug:"查看表的结构",children:[{level:3,title:"查看表的字段信息",slug:"查看表的字段信息",children:[]},{level:3,title:"查看建表语句",slug:"查看建表语句",children:[]}]},{level:2,title:"删除 Table",slug:"删除-table",children:[]},{level:2,title:"修改表的元数据",slug:"修改表的元数据",children:[{level:3,title:"添加主键约束",slug:"添加主键约束",children:[]},{level:3,title:"添加外键约束",slug:"添加外键约束",children:[]},{level:3,title:"删除主键约束",slug:"删除主键约束",children:[]},{level:3,title:"删除外键约束",slug:"删除外键约束",children:[]},{level:3,title:"其他",slug:"其他",children:[]}]},{level:2,title:"MySql 中的数据类型总结",slug:"mysql-中的数据类型总结",children:[{level:3,title:"数值类型：整数和浮点数",slug:"数值类型-整数和浮点数",children:[]},{level:3,title:"字符串类型",slug:"字符串类型",children:[]},{level:3,title:"日期/时间类型",slug:"日期-时间类型",children:[]},{level:3,title:"枚举类型",slug:"枚举类型",children:[]}]}],filePathRelative:"mysql/02-操作Table.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},74034:(n,s,a)=>{a.r(s),a.d(s,{default:()=>e});const t=(0,a(66252).uE)('<h1 id="操作-table" tabindex="-1"><a class="header-anchor" href="#操作-table" aria-hidden="true">#</a> 操作 Table</h1><h2 id="创建表" tabindex="-1"><a class="header-anchor" href="#创建表" aria-hidden="true">#</a> 创建表</h2><p>创建表的过程是规定 <strong>数据列</strong> 的属性的过程，同时也是定义数据完整性约束的过程。</p><p>表（TABLE）是出于数据库（DATABASE）“之下”的，在创建数据表之前，应该使用语句 <strong><code>UESE 数据库名;</code></strong> 来指定当前（及未来）的操作都是在哪个数据库（DATABASE）中。</p><p>语法：</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token operator">&lt;</span>表名<span class="token operator">&gt;</span> <span class="token punctuation">(</span>\n  <span class="token operator">&lt;</span>字段名<span class="token number">1</span><span class="token operator">&gt;</span> <span class="token operator">&lt;</span>数据类型<span class="token operator">&gt;</span> <span class="token punctuation">[</span>列级别约束条件<span class="token punctuation">]</span> <span class="token punctuation">[</span>默认值<span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token operator">&lt;</span>字段名<span class="token number">2</span><span class="token operator">&gt;</span> <span class="token operator">&lt;</span>数据类型<span class="token operator">&gt;</span> <span class="token punctuation">[</span>列级别约束条件<span class="token punctuation">]</span> <span class="token punctuation">[</span>默认值<span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token operator">&lt;</span>字段名<span class="token number">3</span><span class="token operator">&gt;</span> <span class="token operator">&lt;</span>数据类型<span class="token operator">&gt;</span> <span class="token punctuation">[</span>列级别约束条件<span class="token punctuation">]</span> <span class="token punctuation">[</span>默认值<span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n  <span class="token punctuation">[</span>表级别约束条件<span class="token punctuation">]</span>\n<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token keyword">ENGINE</span><span class="token operator">=</span>引擎<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>字符编码<span class="token punctuation">]</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><strong>注意</strong>：上面出现的 <code>&lt;&gt;</code> 表示此处内容由用户自定义。<code>&lt;&gt;</code> 本身并非 SQL 的内容的一部分。</p><p>被 <code>[]</code> 括起来的部分都不是必要部分，缺失的话，MySQL 会使用默认设置。</p><ul><li><p>例如：</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>dept<span class="token punctuation">`</span> <span class="token punctuation">(</span>\n  <span class="token punctuation">`</span>deptno<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">,</span>\n  <span class="token punctuation">`</span>dname<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">`</span>loc<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li></ul><p>需要注意的是：</p><ul><li>SQL 语法是不区分大小写的，但是按惯例，关键字大写。</li><li>严格语法中，数据库名 和 字段名 需要用 <strong>反单引号</strong>（`）括起来。</li><li>如果 数据库名 和 字段名 的命名涉及多个单词，惯例是 <strong>下划线命名法</strong> 。</li></ul><h2 id="约束" tabindex="-1"><a class="header-anchor" href="#约束" aria-hidden="true">#</a> 约束</h2><p>创建表时要确保数据的完整性，『约束』是保证数据完整性的重要技术手段。</p><p>通过约束，MySQL 数据库对于数据库操作行为进行限定，某些违反约束的操作行为会被 MySQL 数据库拒绝。</p><p>需要注意的是：</p><ul><li>『列级别约束』位于列声明的末尾，『表级别约束』位于表声明的尾部，是标准写法，但不是唯一的写法。</li><li>按惯例，列级别约束一般都是写在列声明的尾部，而表级别约束可酌情考虑是否也出现在列声明的尾部。</li><li>一个约束条件是列级别约束，还是表级别约束，取决于它的功能本身<small>（是限定列，还是限定表）</small>，与它在声明中所处位置无关。</li></ul><h3 id="非空-not-null-约束" tabindex="-1"><a class="header-anchor" href="#非空-not-null-约束" aria-hidden="true">#</a> 非空（Not Null）约束</h3><p>非空（Not Null）是一个<em>列级别</em> 约束，它要求（未来）它所限定的列中不允许插入（或修改为）空值。</p><p>未指定该约束时，允许列中数据为 NULL 。</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token operator">&lt;</span>表名<span class="token operator">&gt;</span> <span class="token punctuation">(</span>\n  字段名 数据类型 <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span> \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="唯一性-unique-约束" tabindex="-1"><a class="header-anchor" href="#唯一性-unique-约束" aria-hidden="true">#</a> 唯一性（Unique）约束</h3><p>唯一性（UNIQUE）约束是一个<em>列级别</em> 约束，它要求（未来）它所限定的列中不允许插入（或修改）重复的数据。</p><p>未指定该约束时，允许列中数据有重复值。</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token operator">&lt;</span>表名<span class="token operator">&gt;</span> <span class="token punctuation">(</span>\n  字段名 数据类型 <span class="token keyword">UNIQUE</span><span class="token punctuation">,</span>\n  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span> \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="默认值-default-约束" tabindex="-1"><a class="header-anchor" href="#默认值-default-约束" aria-hidden="true">#</a> 默认值（Default）约束</h3><p>默认值（DEFAULT）约束是一个<em>列级别</em> 约束，它要求（未来）它所限定的列中插入数据时，如果未指定具体值，那么就以此处声明的值作为插入值。</p><p>未指定该约束时，列中插入未指定数据时，默认值为 NULL 。当然，是否真的可以插入 NULL，还要看有没有 <strong>非空约束</strong>）。</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token operator">&lt;</span>表名<span class="token operator">&gt;</span> <span class="token punctuation">(</span>\n  字段名 数据类型 <span class="token keyword">DEFAULT</span> <span class="token operator">&lt;</span>具体值<span class="token operator">&gt;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="主键-primary-key-约束" tabindex="-1"><a class="header-anchor" href="#主键-primary-key-约束" aria-hidden="true">#</a> 主键（Primary Key）约束</h3><p>主键（PRIMARY KEY）约束是一个<em>表级别</em> 约束，它等价于 <strong>非空约束</strong> + <strong>唯一约束</strong>，即要求它所限定的列中值 <strong>非空且唯一</strong> 。</p><p>一张表中，主键约束最多只能有一个。</p><p>主键约束分两种：</p><blockquote><ul><li>单主键，通常直接写在 列声明 的尾部。</li><li>联合主键。只能出现在 表声明 的尾部。</li></ul></blockquote><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token operator">&lt;</span>表名<span class="token operator">&gt;</span> <span class="token punctuation">(</span>\n  字段名 数据类型 <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>\n  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>或者</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token operator">&lt;</span>表名<span class="token operator">&gt;</span> <span class="token punctuation">(</span>\n  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>字段<span class="token number">1</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token operator">&lt;</span>字段<span class="token number">2</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>被主键约束修饰/修饰的列（额外地）被称为 <strong>主键列</strong> 。</p><p>主键列常常会结合使用 <strong><code>AUTO_INCREMENT</code></strong> 关键字，启用数据库的 <strong>自增长</strong> 功能。这并非一个标准功能，并非所有的数据库都支持 <strong>自增长</strong> 功能。MySQL 和 SQL Server 支持该功能。</p><p>自增长功能，只能用于整型列，且一张表只能使用一次。</p><h3 id="外键-foreign-key-约束" tabindex="-1"><a class="header-anchor" href="#外键-foreign-key-约束" aria-hidden="true">#</a> 外键（Foreign Key）约束</h3><p>外键（FOREIGN KEY）约束是一个 <em>表级别</em> 约束，它用于表示，被它所 修饰/限定 的列中的数据，需要参照另一张表的某个列中出现的值。</p><p>外键列约束也是有两种“出现”方式，但是通常也是出现在标准位置：表声明的尾部。</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token operator">&lt;</span>A表<span class="token operator">&gt;</span> <span class="token punctuation">(</span>\n  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n  字段名 类型 <span class="token keyword">REFERENCES</span> B表<span class="token punctuation">(</span>X字段<span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token operator">&lt;</span>A表<span class="token operator">&gt;</span> <span class="token punctuation">(</span>\n  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n  <span class="token keyword">CONSTRAINT</span> <span class="token operator">&lt;</span>约束名<span class="token operator">&gt;</span> <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>A表的X字段名<span class="token punctuation">)</span> <span class="token keyword">REFERENCES</span> B表<span class="token punctuation">(</span>Y字段<span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>按照惯例，外键约束的名字通常以 <strong><code>fk_</code></strong> 开始。</p><p>我们可以使用下述 SQL 语句『禁用』外键约束的约束校验功能：</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">SET</span> FOREIGN_KEY_CHECKS <span class="token operator">=</span> <span class="token keyword">off</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>另外，还可以使用下述 SQL 语句『启用』外键约束的约束校验功能：</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">SET</span> FOREIGN_KEY_CHECKS <span class="token operator">=</span> <span class="token keyword">on</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p><code>注意</code>，如果存在外键约束，建表时需要先建主表，后建从表；删除时，则相反。</p><h2 id="查看表的结构" tabindex="-1"><a class="header-anchor" href="#查看表的结构" aria-hidden="true">#</a> 查看表的结构</h2><h3 id="查看表的字段信息" tabindex="-1"><a class="header-anchor" href="#查看表的字段信息" aria-hidden="true">#</a> 查看表的字段信息</h3><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">DESC</span> <span class="token operator">&lt;</span>表名<span class="token operator">&gt;</span><span class="token punctuation">;</span>\n<span class="token keyword">DESCRIBE</span> <span class="token operator">&lt;</span>表名<span class="token operator">&gt;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="查看建表语句" tabindex="-1"><a class="header-anchor" href="#查看建表语句" aria-hidden="true">#</a> 查看建表语句</h3><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">SHOW</span> <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token operator">&lt;</span>表名<span class="token operator">&gt;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="删除-table" tabindex="-1"><a class="header-anchor" href="#删除-table" aria-hidden="true">#</a> 删除 Table</h2><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token punctuation">[</span><span class="token keyword">IF</span> <span class="token keyword">EXISTS</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span>表名<span class="token operator">&gt;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>如果删除是一张被其他表所关联的表，那么必须先移除关联关系。</p><h2 id="修改表的元数据" tabindex="-1"><a class="header-anchor" href="#修改表的元数据" aria-hidden="true">#</a> 修改表的元数据</h2><h3 id="添加主键约束" tabindex="-1"><a class="header-anchor" href="#添加主键约束" aria-hidden="true">#</a> 添加主键约束</h3><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token operator">&lt;</span>表名<span class="token operator">&gt;</span> \n  <span class="token keyword">ADD</span> <span class="token keyword">CONSTRAINT</span> <span class="token operator">&lt;</span>主键约束名<span class="token operator">&gt;</span> \n  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token operator">&lt;</span>表名<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>主键字段<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>主键约束的名字习惯性形如：<em><code>PK_表名</code></em></p><h3 id="添加外键约束" tabindex="-1"><a class="header-anchor" href="#添加外键约束" aria-hidden="true">#</a> 添加外键约束</h3><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token operator">&lt;</span>从表名<span class="token operator">&gt;</span> \n  <span class="token keyword">ADD</span> <span class="token keyword">CONSTRAINT</span> <span class="token operator">&lt;</span>外键约束名<span class="token operator">&gt;</span> \n  <span class="token keyword">FOREIGN</span> <span class="token keyword">KEY</span> <span class="token operator">&lt;</span>从表<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>外键字段<span class="token operator">&gt;</span><span class="token punctuation">)</span> \n  <span class="token keyword">REFERENCES</span> <span class="token operator">&lt;</span>主表<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>主键字段<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>外键约束的名字习惯性形如：<em><code>FK_主表_主键字段</code></em></p><h3 id="删除主键约束" tabindex="-1"><a class="header-anchor" href="#删除主键约束" aria-hidden="true">#</a> 删除主键约束</h3><blockquote><p>ALTER TABLE &lt;表名&gt; DROP PRIMARY KEY;</p></blockquote><h3 id="删除外键约束" tabindex="-1"><a class="header-anchor" href="#删除外键约束" aria-hidden="true">#</a> 删除外键约束</h3><blockquote><p>ALTER TABLE &lt;表名&gt; DROP FOREIGN KEY &lt;外键&gt; ;</p></blockquote><h3 id="其他" tabindex="-1"><a class="header-anchor" href="#其他" aria-hidden="true">#</a> 其他</h3><blockquote><p>略</p></blockquote><h2 id="mysql-中的数据类型总结" tabindex="-1"><a class="header-anchor" href="#mysql-中的数据类型总结" aria-hidden="true">#</a> MySql 中的数据类型总结</h2><p>MySQL 数据库中支持很多数据类型，它们可以分成下面个主要类别：</p><ul><li>数值类型</li><li>字符串类型</li><li>日期和时间类型</li></ul><h3 id="数值类型-整数和浮点数" tabindex="-1"><a class="header-anchor" href="#数值类型-整数和浮点数" aria-hidden="true">#</a> 数值类型：整数和浮点数</h3><p>MySQL 的数值类型大致分为两类：一个是 <strong>整数</strong> ，另一个是 <strong>浮点数</strong> 。</p><table><thead><tr><th style="text-align:left;">整数类型</th><th style="text-align:left;">存储大小</th><th style="text-align:left;">类比 Java 类型</th></tr></thead><tbody><tr><td style="text-align:left;">TINYINT</td><td style="text-align:left;">1 字节</td><td style="text-align:left;">byte、Byte</td></tr><tr><td style="text-align:left;">SMALLINT</td><td style="text-align:left;">2 字节</td><td style="text-align:left;">short、Short</td></tr><tr><td style="text-align:left;">INT、INTEGER</td><td style="text-align:left;">4 字节</td><td style="text-align:left;">int、Integer</td></tr><tr><td style="text-align:left;">BIGINT</td><td style="text-align:left;">8 字节</td><td style="text-align:left;">long、Long</td></tr></tbody></table><p>例如：</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">year</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>   <span class="token comment"># 最小显示宽度，不够补空格。与存储空间/取值范围无关</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><table><thead><tr><th style="text-align:left;">浮点和定点型</th><th style="text-align:left;">存储大小</th><th style="text-align:left;">类比 Java 类型</th></tr></thead><tbody><tr><td style="text-align:left;">FLOAT</td><td style="text-align:left;">4 字节</td><td style="text-align:left;">float、Float</td></tr><tr><td style="text-align:left;">DOUBLE</td><td style="text-align:left;">8 字节</td><td style="text-align:left;">double、Double</td></tr><tr><td style="text-align:left;">DECIMAL(M, C)</td><td style="text-align:left;">(M+2) 字节</td><td style="text-align:left;">BigDecimal</td></tr></tbody></table><p>和编程中一样，FLOAT 和 DOUBLE 的运算都是 <strong>非精确</strong> 的，而 DECIMAL 类型是 <strong>精确</strong> 的。</p><blockquote><p>DECIMAL 底层是以字符串的形式存储数值，因此不存在浮点型的精度问题。不指定精度默认为 (10, 0) ：<strong>有效数字</strong> 共 10 个，其中 <strong>小数点后</strong> 数字 0 个。</p></blockquote><h3 id="字符串类型" tabindex="-1"><a class="header-anchor" href="#字符串类型" aria-hidden="true">#</a> 字符串类型</h3><p>细分起来，MySQL 中的字符串类型有 8 种，一般而言分为：<strong>字符串</strong> 和 <strong>长文本</strong> 两个大类。</p><table><thead><tr><th style="text-align:left;">类型</th><th style="text-align:left;">存储</th><th style="text-align:left;">参考 Java 类型</th></tr></thead><tbody><tr><td style="text-align:left;"><code>CHAR(N)</code></td><td style="text-align:left;">定长，N 个字节，但最多 255 个字符</td><td style="text-align:left;">String</td></tr><tr><td style="text-align:left;"><code>VARCHAR(N)</code></td><td style="text-align:left;">变长，实际长度+1个字节，但最多 65535 个字符</td><td style="text-align:left;">String</td></tr></tbody></table><ul><li><code>CHAR</code> 类型的字符串的长度总是固定的。</li><li><code>VARCHAR</code> 类型的字符串的长度总是字符串的真正长度。</li></ul><table><thead><tr><th style="text-align:left;">类型</th><th style="text-align:left;">存储</th><th style="text-align:left;">参考 Java 类型</th></tr></thead><tbody><tr><td style="text-align:left;"><code>TINYTEXT</code></td><td style="text-align:left;">变长，实际长度+1个字节，但最多（2^8-1） 个字节</td><td style="text-align:left;">String</td></tr><tr><td style="text-align:left;"><code>TEXT</code></td><td style="text-align:left;">变长，实际长度+2个字节，但最多（2^16-1）个字节</td><td style="text-align:left;">String</td></tr><tr><td style="text-align:left;"><code>MEDIUMTEXT</code></td><td style="text-align:left;">变长，实际长度+3个字节，但最多（2^24-1）个字节</td><td style="text-align:left;">String</td></tr><tr><td style="text-align:left;"><code>LONGTEXT</code></td><td style="text-align:left;">变长，实际长度+4个字节，但最多（2^32-1）个字节</td><td style="text-align:left;">String</td></tr></tbody></table><h3 id="日期-时间类型" tabindex="-1"><a class="header-anchor" href="#日期-时间类型" aria-hidden="true">#</a> 日期/时间类型</h3><table><thead><tr><th style="text-align:left;">类型</th><th style="text-align:left;">字符串形式格式</th><th style="text-align:left;">范围</th><th style="text-align:left;">存储大小</th><th style="text-align:left;">参考 Java 类型</th></tr></thead><tbody><tr><td style="text-align:left;">DATE</td><td style="text-align:left;"><code>YYYY-MM-DD</code></td><td style="text-align:left;"><code>1000-01-01</code><br>至<br><code>9999-12-31</code></td><td style="text-align:left;">3 字节</td><td style="text-align:left;">java.util.Date</td></tr><tr><td style="text-align:left;">TIME</td><td style="text-align:left;"><code>HH:MM:SS</code></td><td style="text-align:left;"><code>-838:59:59</code><br>至<br><code>838:59:59</code></td><td style="text-align:left;">3 字节</td><td style="text-align:left;">java.util.Date</td></tr><tr><td style="text-align:left;">DATETIME</td><td style="text-align:left;"><code>YYYY-MM-DD HH:MM:SS</code></td><td style="text-align:left;"><code>1000-01-01 00:00:00</code><br>至<br><code>9999-12-31 23:59:59</code></td><td style="text-align:left;">8 字节</td><td style="text-align:left;">java.util.Date</td></tr></tbody></table><blockquote><p>注意，<code>DATETIME</code>是 <em><strong>新特性</strong></em>，是从 MySQL 5.6.5 版本开始引入的新类型用以替代老的 <code>TIMESTAMP</code> 类型。<code>TIMESTAMP</code> 类型的表示范围只有 <code>1970-01-01 00:00:00</code> ~ <code>2038-01-19 03:14:07</code></p></blockquote><p>MySQL 有个很好的特性，对于 日期/时间 类型，可以直接输入 <strong>符合其形式的字符串</strong> 即可，MySQL 内部会自动将字符串转换成日期和时间类型格式的数据。</p><p>MySQL 有三个内置变量，通过它们可以查询返回（字符串形式的）『当前日期』，『当前时间』 和 『当前日期时间』。</p><div class="language-sql ext-sql line-numbers-mode"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token keyword">CURRENT_DATE</span><span class="token punctuation">,</span> <span class="token keyword">CURRENT_TIME</span><span class="token punctuation">,</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">FROM</span> dual<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="枚举类型" tabindex="-1"><a class="header-anchor" href="#枚举类型" aria-hidden="true">#</a> 枚举类型</h3><p>绝大多数编程领域和数据库领域都在 <strong>尽量避免</strong> 使用枚举类型。</p>',95),e={render:function(n,s){return t}}}}]);