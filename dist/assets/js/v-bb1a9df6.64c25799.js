"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[4593],{7553:(s,n,a)=>{a.r(n),a.d(n,{data:()=>l});const l={key:"v-bb1a9df6",path:"/git/301-git%E4%BD%BF%E7%94%A8%E5%B7%A5%E4%BD%9C%E6%B5%81.html",title:"Git 的使用工作流",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[],filePathRelative:"git/301-git使用工作流.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},95073:(s,n,a)=>{a.r(n),a.d(n,{default:()=>e});const l=(0,a(66252).uE)('<h1 id="git-的使用工作流" tabindex="-1"><a class="header-anchor" href="#git-的使用工作流" aria-hidden="true">#</a> Git 的使用工作流</h1><p>Git 最大的优点同时也是它的最大的缺点：极具灵活性。这种灵活抬高了初学者的学习门槛。为此，有经验的程序员和大型机构结合软件开发的流程为 git 总结-提炼出了固定的使用方式，这中特定的使用顺序和方法被称为 <strong>工作流</strong> 。</p><p>Atlassian 公司推荐一种基于 <strong>git rebase</strong> 命令的 Git 工作流，这种工作流与 github 工作流的却别在于，『处理代码冲突』的工作从项目管理者转交到了代码提交者手里，项目提交者必须要保证自己的新代码与 master 分支合并后必须是无误的<small>（至少是不耽误 master 分支原有代码运行的）</small>，再发起 pull request 。</p><p>这种基于 <strong>git rebase</strong> 的工作流核心准则只有 2 条：</p><ul><li><p>让你的本地的 master 和远程仓库的 master『在一起』；</p><ol><li>切换到 master 分支</li><li>执行 git pull</li></ol></li><li><p>让你的工作分支始终保证是『基于你的本地最新 master』的。</p><ol><li>切换到工作分支</li><li>执行 git rebase</li></ol></li></ul><p>总结起来就是一句话：<strong>时刻保证你当前的工作分支是『基于』最新的 master 远程分支。</strong></p><p>这种工作流的整体流程如下：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>[1]. git clone 下载中央仓库的项目。\n\n[2]. 创建属于自己的分支。如何创建见后续。\n\n[3]. 等待项目经理安排任务。接受到项目经理安排的任务：实现某某功能，或修改某某 bug 。\n\nwhile (true) {\n\n    [4]. 是否满足核心准则一：本地 master 是否是最新的？\n    if (不是) {\n        a. 更新（本地）master 分支。如何更新见后续。\n    }\n\n    [5]. 是否满足核心准则二：本地 xxx 是否是『基于』最新的 master ？\n    if (不是) {\n        a. 本地 xxx 分支变基。如何变基见后续。\n    }\n\n    [6]. 判断是否完成了任务？\n    if (是) {\n        a. 更新（远程）xxx 分支。如何更新见后续。\n        b. 发起和并请求（pull request），并口头通知项目经理，希望他合并。\n        c. break，跳出循环\n    } \n    else if (否) {\n        a. 写 5 分钟代码，努力完成项目经理安排的任务。 \n    }\n\n}\n\n[7]. 回到上面第 [3] 步，再次等待项目经理安排新任务，开始新的工作周期。\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><ul><li><p>如何创建自己的分支：</p><ol start="0"><li><p>保证是在 master 分支上</p></li><li><p>通过 git branch 命令创建分支，分支名自定义。</p></li><li><p>创建成功后，此时你是在你自己 xxx 分支上的。</p></li></ol></li><li><p>如何更新（远程）xxx 分支：</p><ol start="0"><li><p>保证是在本地 xxx 分支上；</p></li><li><p>通过 git add 命令提交修改（至暂存区）</p></li><li><p>通过 git commit 命令提交修改（至本地仓库）</p></li><li><p><small>可选操作：</small>通过 git rebase 命令<small>（的第二个功效）</small>压缩多个提交，优化提交记录。</p></li><li><p>通过 git push 命令推送<small>（上传）</small>本地 xxx 分支代码。</p></li></ol></li><li><p>如何更新（本地）master 分支：</p><ol start="0"><li><p>此时你大概率是在本地 master 分支之外，例如，是在 xxx 分支上；</p></li><li><p>执行 git stash 命令暂存工作空间中的修改；</p></li><li><p>执行 git checkout 切换到 master 分支；</p></li><li><p>执行 git pull 命令拉取<small>（下载）</small>远程 master 分支；</p></li><li><p>执行 git checkout 切换回你来时的分支，例如，xxx 分支；</p></li><li><p>执行 git pop 取出曾经暂存的工作空间中的修改。</p></li></ol></li></ul><p>『完』</p>',10),e={render:function(s,n){return l}}}}]);