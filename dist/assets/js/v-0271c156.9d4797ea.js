"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[4334],{79108:(a,e,t)=>{t.r(e),t.d(e,{data:()=>n});const n={key:"v-0271c156",path:"/jdbc/01-JDBC%E5%9F%BA%E7%A1%80.html",title:"JDBC 基础",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"基本概念",slug:"基本概念",children:[]},{level:2,title:"常用的 JDBC API",slug:"常用的-jdbc-api",children:[]},{level:2,title:"JDBC 数据库访问步骤",slug:"jdbc-数据库访问步骤",children:[{level:3,title:"加载数据库驱动程序",slug:"加载数据库驱动程序",children:[]},{level:3,title:"MySQL 6+ 驱动的使用要求",slug:"mysql-6-驱动的使用要求",children:[]},{level:3,title:"建立数据库连接",slug:"建立数据库连接",children:[]},{level:3,title:"创建执行 SQL 语句的 Statement 对象",slug:"创建执行-sql-语句的-statement-对象",children:[]},{level:3,title:"发送 SQL 执行语句",slug:"发送-sql-执行语句",children:[]},{level:3,title:"结果集对象遍历",slug:"结果集对象遍历",children:[]},{level:3,title:"关闭对象",slug:"关闭对象",children:[]}]}],filePathRelative:"jdbc/01-JDBC基础.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},65557:(a,e,t)=>{t.r(e),t.d(e,{default:()=>s});const n=(0,t(66252).uE)('<h1 id="jdbc-基础" tabindex="-1"><a class="header-anchor" href="#jdbc-基础" aria-hidden="true">#</a> JDBC 基础</h1><h2 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念" aria-hidden="true">#</a> 基本概念</h2><p>JDBC（Java Database Connectivity）是 Java 应用程序访问数据库的应用程序接口（API），它为 Java 应用程序开发提供了统一的结构标准 API，并通过一组驱动程序实现了独立于 DBMS 的数据库访问。</p><p>数据库厂商提供面向 JDBC 标准接口的数据库驱动程序，JDBC API 通过这些驱动程序可实现对不同 DBMS 数据库的访问。</p><p>使用 JDBC 接口，可以对所连接的数据库进行 SQL 操作访问。JDBC API 是在 java.sql 中定义的，主要有：Connection、DriverManager、Statement、PreparedStatement 和 ResultSet 等类及接口。</p><p>JDBC Driver Manager 负责动态管理数据库连接所需要的驱动程序，实现 Java 应用程序通过驱动程序访问特定数据库。可以使用 java.sql.DriverManager 接口访问 JDBC Driver Manager，如设定数据库访问类型参数、加载数据库驱动和初始化 JDBC 调用的。</p><p>各个数据库厂商为支持 JDBC 标注接口，都提供了自己 DBMS 的 JDBC 驱动程序，以便 Java 应用程序可以连接到相应的数据库，进行数据访问处理。</p><h2 id="常用的-jdbc-api" tabindex="-1"><a class="header-anchor" href="#常用的-jdbc-api" aria-hidden="true">#</a> 常用的 JDBC API</h2><p>在 java.sql 包中，定义了 JDBC API 的各个接口与类，常用的有：</p><table><thead><tr><th style="text-align:left;">接口/类</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">java.sql.Connection</td><td style="text-align:left;">与指定数据库建立会画连接接口</td></tr><tr><td style="text-align:left;">java.sql.Date</td><td style="text-align:left;">处理数据库中的日期类型（java.util.Date 的子类）</td></tr><tr><td style="text-align:left;">java.sql.Driver</td><td style="text-align:left;">数据库驱动接口</td></tr><tr><td style="text-align:left;">java.sql.DriverManager</td><td style="text-align:left;">管理数据库厂商驱动程序类</td></tr><tr><td style="text-align:left;">java.sql.PreparedStatement</td><td style="text-align:left;">带参数的 Statement 接口</td></tr><tr><td style="text-align:left;">java.sql.ResultSet</td><td style="text-align:left;">数据查询结果集接口</td></tr><tr><td style="text-align:left;">java.sql.SQLException</td><td style="text-align:left;">提供数据库访问异常信息类</td></tr><tr><td style="text-align:left;">java.sql.Statement</td><td style="text-align:left;">提供 SQL 执行和结果查询接口</td></tr></tbody></table><h2 id="jdbc-数据库访问步骤" tabindex="-1"><a class="header-anchor" href="#jdbc-数据库访问步骤" aria-hidden="true">#</a> JDBC 数据库访问步骤</h2><h3 id="加载数据库驱动程序" tabindex="-1"><a class="header-anchor" href="#加载数据库驱动程序" aria-hidden="true">#</a> 加载数据库驱动程序</h3><p>Java 应用程序访问数据库前，必须先加载相应的数据库驱动，才能建立 Java 应用程序与目标数据库间的连接。</p><p>该数据库驱动程序需要加载到内存，并在 DriverManager 中进行注册。加载数据库驱动程序可通过调用 Class.forName ( ) 方法实现：</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">&quot;com.mysql.jdbc.Driver&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Class.forName ( ) 为注册驱动语句，com.mysql.jdbc.Driver 为 MySQL 数据库的驱动类。</p><h3 id="mysql-6-驱动的使用要求" tabindex="-1"><a class="header-anchor" href="#mysql-6-驱动的使用要求" aria-hidden="true">#</a> MySQL 6+ 驱动的使用要求</h3><p>使用 mysql-connector 6+ 连接 MySQL 时『多』出来两个小要求：</p><ul><li><p>MySQL 驱动类发生了变化。原来的 <code>com.mysql.jdbc.Driver</code> 被标注为废弃，改用新的 Driver：<strong>com.mysql.cj.jdbc.Driver</strong> 。</p></li><li><p>可选参数 <code>serverTimezone</code> 变成了必要参数：<strong>serverTimezone=UTC</strong> 。</p></li><li><p>例如：</p><div class="language-properties ext-properties line-numbers-mode"><pre class="language-properties"><code><span class="token attr-name">jdbc</span><span class="token punctuation">:</span><span class="token attr-value">mysql://localhost:3306/scott?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false&amp;serverTimezone=UTC</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li></ul><h3 id="建立数据库连接" tabindex="-1"><a class="header-anchor" href="#建立数据库连接" aria-hidden="true">#</a> 建立数据库连接</h3><p>为了获取数据库连接对象 Connection ，需要调用 JDBC 接口 DriverManager 的 getConnection (url, username, password) 方法。</p><ul><li>参数 url：数据库连接地址。格式为：“JDBC协议:IP地址:端口/数据库名称”</li><li>参数 username：数据库用户名</li><li>参数 password：用户密码</li></ul><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">&quot;jdbc:mysql://localhost:3306/scott?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false&amp;serverTimezone=UTC&quot;</span><span class="token punctuation">;</span>\n<span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token string">&quot;username&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;password&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="创建执行-sql-语句的-statement-对象" tabindex="-1"><a class="header-anchor" href="#创建执行-sql-语句的-statement-对象" aria-hidden="true">#</a> 创建执行 SQL 语句的 Statement 对象</h3><p>建立连接后，可以向数据库发送 SQL 执行语句。而发送 SQL 执行语句依赖于 Connection 接口的 createStatement 方法创建的 Statement 对象。</p><p>Statement 对象有 3 种类型：</p><ul><li>Statement：用于执行不带参数的简单 SQL 语句</li><li>PreparedStatement：用于执行带参数的预编译 SQL 语句</li><li>CallableStatement：用于执行数据库的存储过程调用</li></ul><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">Statement</span> st <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="发送-sql-执行语句" tabindex="-1"><a class="header-anchor" href="#发送-sql-执行语句" aria-hidden="true">#</a> 发送 SQL 执行语句</h3><p>创建 Statement 对象之后，就可以使用 Statement 对象的 3 个基本方法之一向数据库发送 SQL 语句执行操作：</p><ul><li>.executeQeury ( )</li><li>.executeUpdate ( )</li><li>.execute ( )</li></ul><p>execute ( ) 方法可以执行“增删改查”四大操作，但是，考虑到“增删改”与“查”操作的差异性，通常是使用 executeQuery ( ) 方法执行“增删改”，而用 executeQuery ( ) 方法执行“查”。</p><h3 id="结果集对象遍历" tabindex="-1"><a class="header-anchor" href="#结果集对象遍历" aria-hidden="true">#</a> 结果集对象遍历</h3><p>在执行 SQL 查询语句后，JDBC API 便将数据表查询结果返回到 ResultSet 结果对象中。</p><p>为了从结果集中对查询结果数据记性处理，需要调用 ResultSet 结果集对象的 getString 、getInt、getDate 等方法对结果集当前行的指定列进行读取处理。</p><h3 id="关闭对象" tabindex="-1"><a class="header-anchor" href="#关闭对象" aria-hidden="true">#</a> 关闭对象</h3><p>当完成数据库操作访问后，需要关闭 Java 程序中为访问数据库所创建的各种对象：</p><blockquote><p>注意，关闭顺序是『先创建的后关闭，后创建的先关闭』。</p></blockquote><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>rs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 关闭 ResultSet 对象</span>\nst<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 关闭 Statemtnt 对象 </span>\nconn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 关闭 Connection 对象</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>',39),s={render:function(a,e){return n}}}}]);