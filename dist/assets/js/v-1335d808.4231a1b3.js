"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[5784],{67727:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-1335d808",path:"/utility/spring-utils/99-Eventbus%E5%85%B6%E5%AE%83.html",title:"",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"有顺序监听者",slug:"有顺序监听者",children:[]}],filePathRelative:"utility/spring-utils/99-Eventbus其它.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},19803:(n,s,a)=>{a.r(s),a.d(s,{default:()=>t});const p=(0,a(66252).uE)('<h2 id="有顺序监听者" tabindex="-1"><a class="header-anchor" href="#有顺序监听者" aria-hidden="true">#</a> 有顺序监听者</h2><p>一个事件，可以有很多监听者，这些监听者需要按执行顺序执行。</p><p>此时，监听者实现 SmartApplicationListener，此接口中有 getOrder()</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@Slf4j</span>\n<span class="token annotation punctuation">@Component</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoEventSmartApplicationListener</span> <span class="token keyword">implements</span> <span class="token class-name">SmartApplicationListener</span> <span class="token punctuation">{</span>\n\n   <span class="token annotation punctuation">@Override</span>\n   <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">supportsEventType</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">ApplicationEvent</span><span class="token punctuation">&gt;</span></span> aClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n       <span class="token keyword">return</span> aClass <span class="token operator">==</span> <span class="token class-name">AppEvent</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>\n   <span class="token punctuation">}</span>\n\n   <span class="token annotation punctuation">@Override</span>\n   <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">supportsSourceType</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> aClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n       <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n   <span class="token punctuation">}</span>\n\n   <span class="token annotation punctuation">@Override</span>\n   <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n       <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>\n   <span class="token punctuation">}</span>\n\n   <span class="token annotation punctuation">@Override</span>\n   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onApplicationEvent</span><span class="token punctuation">(</span><span class="token class-name">ApplicationEvent</span> applicationEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n       <span class="token class-name">AppEvent</span> event <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">AppEvent</span><span class="token punctuation">)</span>applicationEvent<span class="token punctuation">;</span>\n       log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;smartapplicationListener,value:{},order=1&quot;</span><span class="token punctuation">,</span>event<span class="token punctuation">.</span><span class="token function">getEventData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n   <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p>其实还有@Order注解，也是一样的，并不一定要实现此接口</p>',5),t={render:function(n,s){return p}}}}]);