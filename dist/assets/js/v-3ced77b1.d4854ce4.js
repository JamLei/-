"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[3444],{25837:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-3ced77b1",path:"/spring-boot/14-spring-boot-actuator.html",title:"使⽤ Spring Boot Actuator 监控应⽤",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"Actuator 监控",slug:"actuator-监控",children:[]},{level:2,title:"Actuator 的 REST 接⼝",slug:"actuator-的-rest-接口",children:[]},{level:2,title:"常见命令详解",slug:"常见命令详解",children:[{level:3,title:"health",slug:"health",children:[]},{level:3,title:"info",slug:"info",children:[]},{level:3,title:"env",slug:"env",children:[]},{level:3,title:"/env/{name} ⽤法",slug:"env-name-用法",children:[]},{level:3,title:"shutdown",slug:"shutdown",children:[]},{level:3,title:"mappings",slug:"mappings",children:[]}]}],filePathRelative:"spring-boot/14-spring-boot-actuator.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},65662:(n,s,a)=>{a.r(s),a.d(s,{default:()=>A});var t=a(66252);const e=(0,t.uE)('<h1 id="使用-spring-boot-actuator-监控应用" tabindex="-1"><a class="header-anchor" href="#使用-spring-boot-actuator-监控应用" aria-hidden="true">#</a> 使⽤ Spring Boot Actuator 监控应⽤</h1><p>Spring Boot 是⼀个⾃带监控的开源框架，组件 Spring Boot Actuator 负责监控应⽤的各项静态和动态的变量。在项⽬中结合 Spring Boot Actuator 的使⽤，便可轻松对 Spring Boot 应⽤监控治理。</p><h2 id="actuator-监控" tabindex="-1"><a class="header-anchor" href="#actuator-监控" aria-hidden="true">#</a> Actuator 监控</h2><p>只需要在项⽬中添加 <em><code>spring-boot-starter-actuator</code></em>，就⾃动启⽤了监控功能。</p><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>Spring Boot Actuator 是 Spring Boot 提供的对应⽤系统的检查和监控的集成功能，可以查看应⽤配置的详细信息，例如⾃动化配置信息、创建的 Spring beans 以及⼀些环境属性等。</p><p>Actuator 监控分成两类：<strong>原⽣端点</strong> 和 <strong>⽤户⾃定义端点</strong>。⾃定义端点主要是指扩展性，⽤户可以根据⾃⼰的实际应⽤，定义⼀些⽐较关⼼的指标，在运⾏期进⾏监控。</p><h2 id="actuator-的-rest-接口" tabindex="-1"><a class="header-anchor" href="#actuator-的-rest-接口" aria-hidden="true">#</a> Actuator 的 REST 接⼝</h2><p>原⽣端点是在应⽤程序⾥提供众多 Web 接⼝，通过它们了解应⽤程序运⾏时的内部状况，原⽣端点⼜可以分成三类：</p><ul><li><p><strong>应⽤配置类</strong>：可以查看应⽤在运⾏期的静态信息，例如⾃动配置信息、加载的 springbean 信息、yml ⽂件配置信息、环境信息、请求映射信息；</p></li><li><p><strong>度量指标类</strong>：主要是运⾏期的动态信息，如堆栈、请求连、⼀些健康指标、metrics 信息等；</p></li><li><p><strong>操作控制类</strong>：主要是指 shutdown，⽤户可以发送⼀个请求将应⽤的监控功能关闭。</p></li></ul><p>Actuator 提供了十多个接⼝。</p><h2 id="常见命令详解" tabindex="-1"><a class="header-anchor" href="#常见命令详解" aria-hidden="true">#</a> 常见命令详解</h2><p>在 Spring Boot 2.x 中为了安全期间，Actuator 只开放了两个端点 <em><strong>/actuator/health</strong></em> 和 <em><strong>/actuator/info</strong></em>，可以在配置⽂件中设置打开其它。</p><p>可以打开所有的监控点：</p><div class="language-properties ext-properties line-numbers-mode"><pre class="language-properties"><code><span class="token attr-name">management.endpoints.web.exposure.include</span><span class="token punctuation">=</span><span class="token attr-value">*</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>Actuator 默认所有的监控点路径都在 <em><strong>/actuator/*</strong></em>，当然如果你对 <em><strong>actuator</strong></em> 这个名字不满意，你也可以自定义：</p><div class="language-properties ext-properties line-numbers-mode"><pre class="language-properties"><code><span class="token attr-name">management.endpoints.web.base-path</span><span class="token punctuation">=</span><span class="token attr-value">/manage</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>设置完重启后，再次访问地址就会变成 <em><strong>/manage/*</strong></em> ，不再是以前的 <em>/actuator/*</em>。<small>当然一般情况下不会动这个配置。</small></p><p>Actuator ⼏乎监控了应⽤涉及的⽅⽅⾯⾯，我们重点讲述⼀些经常在项⽬中常⽤的命令。</p><h3 id="health" tabindex="-1"><a class="header-anchor" href="#health" aria-hidden="true">#</a> health</h3><p>health 主要⽤来检查应⽤的运⾏状态，这是我们使⽤最⾼频的⼀个监控点，通常使⽤此接⼝提醒我们应⽤实例的运⾏状态，以及应⽤不“健康”的原因，如数据库连接、磁盘空间不够等。</p>',21),p=(0,t.Uk)("默认情况下 "),o=(0,t._)("em",null,[(0,t._)("strong",null,"/actuator/health")],-1),r=(0,t.Uk)(" 的状态是开放的，添加依赖后启动项⽬，访问："),l={href:"http://127.0.0.1:8080/actuator/health",target:"_blank",rel:"noopener noreferrer"},c=(0,t._)("em",null,"http://127.0.0.1:8080/actuator/health",-1),u=(0,t.Uk)(" 即可看到应⽤的状态。"),i=(0,t.uE)('<div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n    <span class="token property">&quot;status&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;UP&quot;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>默认情况下只是展示简单的 <em><strong>UP</strong></em> 和 <em><strong>DOWN</strong></em> 状态，为了查询更详细的监控指标信息，可以在配置⽂件中添加以下信息：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>management.endpoint.health.show-details=always\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',3),g=(0,t.Uk)("重启后再次访问⽹址 "),b={href:"http://localhost:8080/actuator/health",target:"_blank",rel:"noopener noreferrer"},d=(0,t._)("em",null,"http://localhost:8080/actuator/health",-1),m=(0,t.Uk)("，返回信息如下："),k=(0,t.uE)('<div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;status&quot;</span><span class="token operator">:</span> <span class="token string">&quot;UP&quot;</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;diskSpace&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;status&quot;</span><span class="token operator">:</span> <span class="token string">&quot;UP&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;total&quot;</span><span class="token operator">:</span> <span class="token number">209715195904</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;free&quot;</span><span class="token operator">:</span> <span class="token number">183253909504</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;threshold&quot;</span><span class="token operator">:</span> <span class="token number">10485760</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>可以看到 HealthEndPoint 给我们提供默认的监控结果，包含磁盘空间描述总磁盘空间，剩余的磁盘空间和最⼩阈值。</p><h3 id="info" tabindex="-1"><a class="header-anchor" href="#info" aria-hidden="true">#</a> info</h3><p>info 是我们⾃⼰在配置⽂件中以 info 开头的配置信息，⽐如在示例项⽬中的配置是：</p><div class="language-properties ext-properties line-numbers-mode"><pre class="language-properties"><code><span class="token attr-name">info.app.name</span><span class="token punctuation">=</span><span class="token attr-value">spring-boot-actuator</span>\n<span class="token attr-name">info.app.version</span><span class="token punctuation">=</span><span class="token attr-value">1.0.0</span>\n<span class="token attr-name">info.app.test</span><span class="token punctuation">=</span><span class="token attr-value">test</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>',5),h=(0,t.Uk)("启动示例项⽬，访问 "),v={href:"http://localhost:8080/actuator/info",target:"_blank",rel:"noopener noreferrer"},q=(0,t._)("em",null,"http://localhost:8080/actuator/info",-1),f=(0,t.Uk)(" 返回部分信息如下："),x=(0,t.uE)('<div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code>info\n<span class="token punctuation">{</span>\n    <span class="token property">&quot;app&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;spring-boot-actuator&quot;</span><span class="token punctuation">,</span>\n        <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1.0.0&quot;</span><span class="token punctuation">,</span>\n        <span class="token property">&quot;test&quot;</span><span class="token operator">:</span><span class="token string">&quot;test&quot;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="env" tabindex="-1"><a class="header-anchor" href="#env" aria-hidden="true">#</a> env</h3><p>展示了系统环境变量的配置信息，包括使⽤的环境变量、JVM 属性、命令⾏参数、项⽬使⽤的 jar 包等信息。</p>',3),y=(0,t.Uk)("启动示例项⽬，访问⽹址 "),j={href:"http://localhost:8080/actuator/env",target:"_blank",rel:"noopener noreferrer"},w=(0,t._)("em",null,"http://localhost:8080/actuator/env",-1),_=(0,t.Uk)(" 返回部分信息如下："),S=(0,t.uE)('<div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;profiles&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>\n\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;server.ports&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;local.management.port&quot;</span><span class="token operator">:</span> <span class="token number">8088</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;local.server.port&quot;</span><span class="token operator">:</span> <span class="token number">8080</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;servletContextInitParams&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;systemProperties&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    ...\n  <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>为了避免敏感信息暴露到 <em><strong>/actuator/env</strong></em> ⾥，所有名为 password、secret、key<small>（或者名字中最后⼀段是这些）</small>的属性在 <em><strong>/actuator/env</strong></em> ⾥都会加上 <em><strong>*</strong></em> 。</p><p>举个例⼦，如果有⼀个属性名字是 <em><strong>database.password</strong></em>，那么它在 <em><strong>/actuator/env</strong></em> 中的显示效果是这样的：</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token property">&quot;database.password&quot;</span><span class="token operator">:</span> <span class="token string">&quot;******&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="env-name-用法" tabindex="-1"><a class="header-anchor" href="#env-name-用法" aria-hidden="true">#</a> /env/{name} ⽤法</h3><p>就是 env 的扩展可以获取指定配置信息，⽐如 <code>http://localhost:8080/actuator/env/java.vm.version</code>，返回 <code>{&quot;java.vm.version&quot;:&quot;25.101-b13&quot;}</code>。</p><h3 id="shutdown" tabindex="-1"><a class="header-anchor" href="#shutdown" aria-hidden="true">#</a> shutdown</h3><p>开启接⼝优雅关闭 Spring Boot 应⽤，要使⽤这个功能⾸先需要在配置⽂件中开启：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>management.endpoint.shutdown.enabled=true\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>配置完成之后，启动示例项⽬，使⽤ curl 模拟 post 请求访问 shutdown 接⼝。</p><p><strong>shutdown 接⼝默认只⽀持 post 请求</strong> 。</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>curl -X POST &quot;http://localhost:8080/actuator/shutdown&quot;\n{\n &quot;message&quot;: &quot;Shutting down, bye...&quot;\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>此时会发现应⽤已经被关闭。</p><h3 id="mappings" tabindex="-1"><a class="header-anchor" href="#mappings" aria-hidden="true">#</a> mappings</h3><p>描述全部的 URI 路径，以及它们和控制器的映射关系。</p><p>启动示例项⽬，访问⽹址 <em>http://localhost:8080/actuator/mappings</em> 返回部分信息如下：</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>\n  <span class="token property">&quot;/**/favicon.ico&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;bean&quot;</span><span class="token operator">:</span> <span class="token string">&quot;faviconHandlerMapping&quot;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;{[/hello]}&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;bean&quot;</span><span class="token operator">:</span> <span class="token string">&quot;requestMappingHandlerMapping&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;method&quot;</span><span class="token operator">:</span> <span class="token string">&quot;public java.lang.String com.neo.controller.HelloController.index()&quot;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token property">&quot;{[/error]}&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">&quot;bean&quot;</span><span class="token operator">:</span> <span class="token string">&quot;requestMappingHandlerMapping&quot;</span><span class="token punctuation">,</span>\n    <span class="token property">&quot;method&quot;</span><span class="token operator">:</span> <span class="token string">&quot;public org.springframework.http.ResponseEntity&lt;java.util.Map&lt;java.lang.String, java.lang.Object&gt;&gt; org.springframework.boot.autoconfigure.web.BasicErrorController.error(javax.servlet.http.HttpServletRequest)&quot;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div>',17),A={render:function(n,s){const a=(0,t.up)("OutboundLink");return(0,t.wg)(),(0,t.iD)(t.HY,null,[e,(0,t._)("p",null,[p,o,r,(0,t._)("a",l,[c,(0,t.Wm)(a)]),u]),i,(0,t._)("p",null,[g,(0,t._)("a",b,[d,(0,t.Wm)(a)]),m]),k,(0,t._)("p",null,[h,(0,t._)("a",v,[q,(0,t.Wm)(a)]),f]),x,(0,t._)("p",null,[y,(0,t._)("a",j,[w,(0,t.Wm)(a)]),_]),S],64)}}}}]);