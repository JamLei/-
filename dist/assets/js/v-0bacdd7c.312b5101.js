"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[863],{29340:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-0bacdd7c",path:"/vue/vue-05-axios.html",title:"vue axios",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"安装使用",slug:"安装使用",children:[]},{level:2,title:"axios() 方法",slug:"axios-方法",children:[{level:3,title:"axios 方法发起 GET 请求",slug:"axios-方法发起-get-请求",children:[]},{level:3,title:"axios 方法发起 POST 请求",slug:"axios-方法发起-post-请求",children:[]}]},{level:2,title:"get() 方法和 post() 方法",slug:"get-方法和-post-方法",children:[]},{level:2,title:"post() 方法和 @RequestParam",slug:"post-方法和-requestparam",children:[]},{level:2,title:"执行多个并发请求（了解）",slug:"执行多个并发请求-了解",children:[]},{level:2,title:"vue-cli 中的跨域问题的解决",slug:"vue-cli-中的跨域问题的解决",children:[]},{level:2,title:"vue-cli 中引入并使用 axios",slug:"vue-cli-中引入并使用-axios",children:[]},{level:2,title:"关于 vue-cli 中的 Vue.use()",slug:"关于-vue-cli-中的-vue-use",children:[]}],filePathRelative:"vue/vue-05-axios.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},31676:(n,s,a)=>{a.r(s),a.d(s,{default:()=>t});const p=(0,a(66252).uE)('<h1 id="vue-axios" tabindex="-1"><a class="header-anchor" href="#vue-axios" aria-hidden="true">#</a> vue axios</h1><p>Vue 2.0 之后，就不再对 <em>vue-resource</em> 更新。Vue 官方推荐使用其竞品：<strong>axios</strong> 。</p><blockquote><p>axios 充分利用了 ES6 的 Promise 语法。</p></blockquote><h2 id="安装使用" tabindex="-1"><a class="header-anchor" href="#安装使用" aria-hidden="true">#</a> 安装使用</h2><blockquote><p>由于存在跨域问题，对于 axios 在 vue.js 中的使用，我们直接将前端页面写在 Spring Boot 项目中，将 vue.js 和后台服务整合在一起，以免单独处理跨域问题。</p><p>对于开发环境中的跨域问题，我们在 vue-cli 中使用 proxy 解决。</p></blockquote><ul><li>CDN 引入，vue.js 中使用</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">&quot;https://cdn.jsdelivr.net/npm/axios@0.21.1/dist/axios.min.js&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ul><li><p>vue 安装（建议），vue-cli 中使用</p><pre><code>$ vue add axios\n</code></pre></li><li><p>npm/yarn 安装（不建议），vue-cli 中使用</p><pre><code>$ npm install axios\n$ yarn add axios\n</code></pre></li></ul><blockquote><p>vue 安装和 npm/yarn 安装的区别：vue 命令实际上囊括了 npm/yarn 安装，它在 npm/yarn 安装之外，还会『帮』我们生成配置相关的代码，方便我们的开发。</p></blockquote><p>通过 axios 向后台发送请求，为了方便，axios 已经为所有支持的请求方法提供了别名。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>• axios<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>\n\n• axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>url <span class="token punctuation">[</span>，config<span class="token punctuation">]</span><span class="token punctuation">)</span>\n\n• axios<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>url <span class="token punctuation">[</span>，config<span class="token punctuation">]</span><span class="token punctuation">)</span>\n\n• axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>url <span class="token punctuation">[</span>，data <span class="token punctuation">[</span>，config<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n\n• axios<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>url <span class="token punctuation">[</span>，data <span class="token punctuation">[</span>，config<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n\n• axios<span class="token punctuation">.</span><span class="token function">patch</span><span class="token punctuation">(</span>url <span class="token punctuation">[</span>，data <span class="token punctuation">[</span>，config<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n\n• axios<span class="token punctuation">.</span><span class="token function">head</span><span class="token punctuation">(</span>url <span class="token punctuation">[</span>，config<span class="token punctuation">]</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>注意：当使用别名方法时，不需要在参数 <code>config</code> 中指定 <code>url</code>，<code>method</code> 和 <code>data</code> 属性。</p><h2 id="axios-方法" tabindex="-1"><a class="header-anchor" href="#axios-方法" aria-hidden="true">#</a> axios() 方法</h2><p><strong>axios()</strong> 方法是最核心、最根本的方法，其它方法都是它的简写。</p><p>简单使用：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    method<span class="token operator">:</span> <span class="token string">&#39;GET&#39;</span><span class="token punctuation">,</span>\n    url<span class="token operator">:</span> <span class="token string">&#39;/users&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="axios-方法发起-get-请求" tabindex="-1"><a class="header-anchor" href="#axios-方法发起-get-请求" aria-hidden="true">#</a> axios 方法发起 GET 请求</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  url<span class="token operator">:</span> <span class="token string">&#39;/user&#39;</span><span class="token punctuation">,</span>\n  method<span class="token operator">:</span> <span class="token string">&#39;GET&#39;</span><span class="token punctuation">,</span>\n  params<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token constant">ID</span><span class="token operator">:</span> <span class="token number">123</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span> <span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>axios 的 GET 请求的请求参数是以 query-string（形如：<code>name=tom&amp;age=20</code>）的形式传递到后台，对于 Spring MVC 而言，Controller 中是使用 <strong>@RequestParam</strong> 接收请求参数。</p><p>需要注意的需要注意的是 GET 请求要搭配 <strong>params</strong> 使用：</p><p>在使用 GET 方法传递参数时使用的是 <strong>params</strong>，并且官方文档中介绍为：params are the URL parameters to be sent with the request. Must be a plain object or a URLSearchParams object。译为：<strong>params</strong> 作为URL链接中的参数发送请求，且其必须是一个 plain object<small>（或者是 URLSearchParams object）</small>。</p><p>plain object（纯对象）是指用 JSON 形式定义的普通对象或者 <code>new Object()</code> 创建的简单对象；而 URLSearchParams object 指的是一个可以由 URLSearchParams接口定义的一些实用方法来处理 URL 的查询字符串的对象。</p><p>URLSearchParams object 的使用范例如下：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nobj<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&#39;ID&#39;</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  url<span class="token operator">:</span> <span class="token string">&#39;/user&#39;</span><span class="token punctuation">,</span>\n  method<span class="token operator">:</span> <span class="token string">&#39;GET&#39;</span><span class="token punctuation">,</span>\n  params<span class="token operator">:</span> obj   <span class="token comment">// 看这里，看这里，看这里</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="axios-方法发起-post-请求" tabindex="-1"><a class="header-anchor" href="#axios-方法发起-post-请求" aria-hidden="true">#</a> axios 方法发起 POST 请求</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">axios</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  url<span class="token operator">:</span> <span class="token string">&#39;/user&#39;</span><span class="token punctuation">,</span>\n  method<span class="token operator">:</span> <span class="token string">&#39;POST&#39;</span><span class="token punctuation">,</span>\n  data<span class="token operator">:</span> <span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token string">&#39;tom&#39;</span><span class="token punctuation">,</span>\n    age<span class="token operator">:</span> <span class="token number">20</span> \n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span> <span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span> <span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>axios 的 post 请求的请求参数是以 json-string 的形式传递到后台的，对于 Spring MVC 而言，Controller 中是使用 <strong>@RequestBody</strong> 接收请求参数。<small>同样使用这种形式的还有 PUT、PATCH 等请求方式。</small></p><p>需要注意的需要注意的是 POST 请求要搭配 <strong>data</strong> 使用。</p><h2 id="get-方法和-post-方法" tabindex="-1"><a class="header-anchor" href="#get-方法和-post-方法" aria-hidden="true">#</a> get() 方法和 post() 方法</h2><p>在通过 axios() 方法发送请求时，你需要小心翼翼地使用 params 和 data 参数。为了简化<small>（无需用户考虑 params 和 data 问题）</small>，axios 在 axios() 方法之上提供了专门的 get() 方法 和 post() 方法。</p><ul><li><p>get 请求</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/user?name=tom&amp;age=20&#39;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>另外，axios 方法简单到如下形式，发出的也是 get 请求。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 忽略第二个参数时，默认是发送一个 GET 请求，且无请求参数</span>\n<span class="token function">axios</span><span class="token punctuation">(</span><span class="token string">&#39;/user/12345&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><p>post 请求</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&#39;/user&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token string">&#39;tom&#39;</span><span class="token punctuation">,</span>\n    age<span class="token operator">:</span> <span class="token number">20</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></li></ul><h2 id="post-方法和-requestparam" tabindex="-1"><a class="header-anchor" href="#post-方法和-requestparam" aria-hidden="true">#</a> post() 方法和 @RequestParam</h2><p>axios 通过 post() 方法发出的 post 请求时，请求头的 content-type 默认就是 <code>application/json</code>，因此，Controller 中自然是 @ReqeustBody 与之配合。</p><p>如果希望在 Controller 中使用 @RequestParam，那么就需要直接或间接影响到 axios 发出的 post 请求的 content-type ，让其值为 <code>application/x-www-form-urlencoded</code> 即可。</p><p>最根本的办法就是：硬传一个 query-string 格式的参数给 post 方法，进而影响 axios，让 axios 自己去改 post 请求的 content-type 。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&#39;/user&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;name=jerry&amp;age=19&#39;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>考虑到自己硬编码 query-string 比较繁琐，这个方案有 2 个改进版：</p><ul><li><p>使用 URLSearchParams：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> params <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nparams<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;jerry&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nparams<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// console.info(params.toString());</span>\n\naxios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&#39;/user&#39;</span><span class="token punctuation">,</span> params<span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div></li><li><p>使用 qs 库：</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://cdn.jsdelivr.net/npm/qs@6.10.1/lib/index.min.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token string">&#39;tom&#39;</span><span class="token punctuation">,</span>\n    age<span class="token operator">:</span> <span class="token number">20</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token comment">// console.info(Qs.stringify(obj));</span>\n\naxios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&#39;/user&#39;</span><span class="token punctuation">,</span> Qs<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div></li></ul><h2 id="执行多个并发请求-了解" tabindex="-1"><a class="header-anchor" href="#执行多个并发请求-了解" aria-hidden="true">#</a> 执行多个并发请求（了解）</h2><ul><li><p>示例</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">getUserAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/user/12345&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">getUserPermissions</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/user/12345/permissions&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\naxios<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n  <span class="token function">getUserAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> \n  <span class="token function">getUserPermissions</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>axios<span class="token punctuation">.</span><span class="token function">spread</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">acct<span class="token punctuation">,</span> perms</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 两个请求现已完成</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div></li></ul><h2 id="vue-cli-中的跨域问题的解决" tabindex="-1"><a class="header-anchor" href="#vue-cli-中的跨域问题的解决" aria-hidden="true">#</a> vue-cli 中的跨域问题的解决</h2><p>详情见 vue-cli 的第一篇笔记。</p><h2 id="vue-cli-中引入并使用-axios" tabindex="-1"><a class="header-anchor" href="#vue-cli-中引入并使用-axios" aria-hidden="true">#</a> vue-cli 中引入并使用 axios</h2><ol><li><p>如果实在不知道要在 package.json 的 dependencies 部分写什么的话，可以通过 <code>vue ui</code> 命令，打开 @vue/cli 的新特性：项目仪表盘。通过它来向我们的项目添加 axios 依赖。</p></li><li><p>在你需要发送 ajax 请求的 .vue 中，引入 axios：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">&#39;axios&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li><p>在你的 .vue 代码中，使用 axios 发送 ajax 请求。</p></li></ol><p>上述写法是 100% 没毛病的，但是有一个可以偷懒的地方：有太多的地方要写 <code>import</code> ，我们可以想办法只 import 一次。</p><p>这种『偷懒』的写法如下：</p><ol><li><p>在项目入口 <code>main.js</code> 中 import axios<small>（只 import 这一次）</small></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">&#39;axios&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li><p>在 main.js 中，把 axios 变量绑定到 Vue 的一个原型属性上<small>（原则上，属性名任意，不和已有属性名冲突就行）</small>。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$http<span class="token operator">=</span> axios<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li><p>在你需要发送 ajax 请求的 .vue 中，使用 <code>this.$http</code> 就是在使用 <code>axios</code> 变量。无需再次 import axios 了。</p></li></ol><h2 id="关于-vue-cli-中的-vue-use" tabindex="-1"><a class="header-anchor" href="#关于-vue-cli-中的-vue-use" aria-hidden="true">#</a> 关于 vue-cli 中的 Vue.use()</h2><p>在 vue-cli 项目中，很多人在使用别人的组件时，会用到 <code>Vue.use()</code> 。例如：Vue.use(VueRouter)、Vue.use(Vuex)、Vue.use(Element)。但是用 axios 时，就不需要用 Vue.use(axios)，就能直接使用。那这是为什么呐？</p><p>因为 axios 没有 <strong>install</strong> 。</p><p>当你在执行 <code>Vue.use(xxx)</code> 的时候，Vue 会去调用 xxx 的 <code>install</code> 方法<small>（前提是它得有这么个方法）</small>。借用这种机制，你可以将你对 xxx 插件/组件的初始化的代码放在 install 方法里面。</p><p>因此，你可以单独地创建一个 .js 文件，在其中创建、配置 axios 对象，并绑定到 Vue 全局和实例变量上，然后，再在 main.js 中通过 Vue.use() 来触发这段代码的执行。</p><p>例如，对 axios 的初始化：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">&quot;axios&quot;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">let</span> config <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> _axios <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n_axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>\n    <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> config<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n_axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>\n    <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> response<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">/* 2. 利用 Vue 的插件机制：你（程序员）提前写好一个 install 方法，放在这里，等着 Vue 来调用。*/</span>\n<span class="token keyword">const</span> Axios <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token function-variable function">install</span><span class="token operator">:</span>\n        <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">Vue<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            Vue<span class="token punctuation">.</span>axios <span class="token operator">=</span> _axios<span class="token punctuation">;</span>\n            window<span class="token punctuation">.</span>axios <span class="token operator">=</span> _axios<span class="token punctuation">;</span>\n            Object<span class="token punctuation">.</span><span class="token function">defineProperties</span><span class="token punctuation">(</span><span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n                axios<span class="token operator">:</span> <span class="token punctuation">{</span>\n                    <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                        <span class="token keyword">return</span> _axios<span class="token punctuation">;</span>\n                    <span class="token punctuation">}</span>\n                <span class="token punctuation">}</span><span class="token punctuation">,</span>\n                $axios<span class="token operator">:</span> <span class="token punctuation">{</span>\n                    <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                        <span class="token keyword">return</span> _axios<span class="token punctuation">;</span>\n                    <span class="token punctuation">}</span>\n                <span class="token punctuation">}</span><span class="token punctuation">,</span>\n            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\nVue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Axios<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 你甚至可以就在这里执行 Vue.use()，只需要在 main.js 中 import 这个配置 js 即可。</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> Axios<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br></div></div>',54),t={render:function(n,s){return p}}}}]);