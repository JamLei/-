"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[2626],{55435:(s,n,a)=>{a.r(n),a.d(n,{data:()=>e});const e={key:"v-b2f7ae66",path:"/git/104-git-stash.html",title:"Git Stash 的使用",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"Git Stash 的作用",slug:"git-stash-的作用",children:[]},{level:2,title:"开发到一半，同步远端代码",slug:"开发到一半-同步远端代码",children:[]},{level:2,title:"工作流被打断，需要先做别的需求",slug:"工作流被打断-需要先做别的需求",children:[]}],filePathRelative:"git/104-git-stash.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},48290:(s,n,a)=>{a.r(n),a.d(n,{default:()=>t});const e=(0,a(66252).uE)('<h1 id="git-stash-的使用" tabindex="-1"><a class="header-anchor" href="#git-stash-的使用" aria-hidden="true">#</a> Git Stash 的使用</h1><h2 id="git-stash-的作用" tabindex="-1"><a class="header-anchor" href="#git-stash-的作用" aria-hidden="true">#</a> Git Stash 的作用</h2><p>在开发过程中，我们经常会遇到如下两种情况：</p><ul><li>开发到一半，需要同步远端代码</li><li>手头的工作被打断，需要先做别的需求</li></ul><p>上述两种情况所面对的问题，都不单单是 pull、commit、push 就能解决，或者说，使用 pull、commit、push 并非最有解。这里我们可以通过引入 <strong>git stash</strong> 来解决这些问题。</p><p><strong>git stash</strong> 用于想要保存当前的修改，但是想回到之前最后一次提交的干净的工作仓库时进行的操作。<em>git stash</em> 将本地的修改保存起来，并且将当前代码切换到 HEAD 提交上.</p><pre><code>简单来说，使用 git stash 还你一个干净的工作目录！\n</code></pre><p>通过 git stash 存储的修改列表，可以通过 <strong>git stash list</strong> 查看。<strong>git stash show</strong> 用于校验，<strong>git stash apply</strong> 用于重新存储。直接执行 git stash 等同于 <strong>git stash save</strong> 。</p><blockquote><p>当然，如果是通过 Git 的图形化客户端进行操作，那么对于这些命令就无需花费太多时间和精力进行记忆。</p></blockquote><p>最新的存储保存在 refs/stash 中。老的存储可以通过相关的参数获得，例如 <code>lstash@{0}</code> 获取最新的存储，<code>stash@{1}</code> 获取次新，存储可以直接通过索引的位置来获得 <code>stash@{n}</code> 。</p><h2 id="开发到一半-同步远端代码" tabindex="-1"><a class="header-anchor" href="#开发到一半-同步远端代码" aria-hidden="true">#</a> 开发到一半，同步远端代码</h2><p>当你的开发进行到一半，但是代码还不想进行提交，然后需要同步去关联远端代码时。</p><ul><li>如果你本地的代码和远端代码没有冲突时，可以直接通过 git pull 解决。</li><li>但是如果可能发生冲突怎么办？直接 <code>git pull</code> 会拒绝覆盖当前的修改。</li></ul><p>遇到这种情况，需要先 stash 本地的代码，进行 pull，然后再 pop 出本地代码:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> stash\n<span class="token function">git</span> pull\n<span class="token function">git</span> stash pop\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="工作流被打断-需要先做别的需求" tabindex="-1"><a class="header-anchor" href="#工作流被打断-需要先做别的需求" aria-hidden="true">#</a> 工作流被打断，需要先做别的需求</h2><p>当开发进行到一半，老板过来跟你说“线上有个bug，你现在给我改好，不然扣你鸡腿”。当然,你可以开一个新的分支，把当前代码提交过去，回头再 merge，具体代码如下：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># 繁琐的不优雅的处理办法</span>\n<span class="token comment"># ... hack hack hack ...</span>\n<span class="token function">git</span> checkout -b my_wip\n<span class="token function">git</span> commit -a -m <span class="token string">&quot;WIP&quot;</span>\n<span class="token function">git</span> checkout master\nedit emergency fix\n<span class="token function">git</span> commit -a -m <span class="token string">&quot;Fix in a hurry&quot;</span>\n<span class="token function">git</span> checkout my_wip\n<span class="token function">git</span> reset --soft HEAD^\n<span class="token comment"># ... continue hacking ...</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>如果你使用 git stash，那么整个流程就变得很简单了：</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># 更优雅的做法</span>\n<span class="token comment"># ... hack hack hack ...</span>\n<span class="token function">git</span> stash        <span class="token comment"># 保存开发到一半的代码</span>\nedit emergency fix\n<span class="token function">git</span> commit -a -m <span class="token string">&quot;Fix in a hurry&quot;</span>\n<span class="token function">git</span> stash pop   <span class="token comment"># 将代码追加到最新的提交之后</span>\n<span class="token comment"># ... continue hacking ...</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div>',20),t={render:function(s,n){return e}}}}]);