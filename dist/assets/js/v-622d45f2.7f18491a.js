"use strict";(self.webpackChunkjava_note_vuepress2=self.webpackChunkjava_note_vuepress2||[]).push([[746],{12970:(a,n,s)=>{s.r(n),s.d(n,{data:()=>t});const t={key:"v-622d45f2",path:"/utility/apache-commons/04-commons-codec.html",title:"Commons Codec",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"写在前面的话",slug:"写在前面的话",children:[]},{level:2,title:"基本概念",slug:"基本概念",children:[]},{level:2,title:"加密算法",slug:"加密算法",children:[]},{level:2,title:"sha512Hex 方法",slug:"sha512hex-方法",children:[]},{level:2,title:"sha256Hex 方法",slug:"sha256hex-方法",children:[]},{level:2,title:"sha1Hex 方法",slug:"sha1hex-方法",children:[]},{level:2,title:"shaHex 方法",slug:"shahex-方法",children:[]},{level:2,title:"md5Hex 方法",slug:"md5hex-方法",children:[]},{level:2,title:"其它",slug:"其它",children:[]}],filePathRelative:"utility/apache-commons/04-commons-codec.md",git:{updatedTime:1629711344e3,contributors:[{name:"hemiao",email:"hemiao3000@126.com",commits:1}]}}},62195:(a,n,s)=>{s.r(n),s.d(n,{default:()=>e});const t=(0,s(66252).uE)('<h1 id="commons-codec" tabindex="-1"><a class="header-anchor" href="#commons-codec" aria-hidden="true">#</a> Commons Codec</h1><div class="language-xml ext-xml line-numbers-mode"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>commons-codec<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>commons-codec<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.15<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="写在前面的话" tabindex="-1"><a class="header-anchor" href="#写在前面的话" aria-hidden="true">#</a> 写在前面的话</h2><p>commons-codec 的情况与 commons-io 的情况类似，一提到 java 领域的编解码库，第一选择就是它，几乎想不到它有什么竞品与之竞争。</p><h2 id="基本概念" tabindex="-1"><a class="header-anchor" href="#基本概念" aria-hidden="true">#</a> 基本概念</h2><p>最常用工具类是 <em><strong>DigestUtils</strong></em> 类：<em>org.apache.commons.codec.digest.DigestUtils</em> 类</p><table><thead><tr><th style="text-align:right;">方法</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:right;">md5Hex</td><td style="text-align:left;">MD5 加密，返回 32 位</td></tr><tr><td style="text-align:right;">sha1Hex</td><td style="text-align:left;">SHA-1 加密</td></tr><tr><td style="text-align:right;">sha256Hex</td><td style="text-align:left;">SHA-256 加密</td></tr><tr><td style="text-align:right;">sha512Hex</td><td style="text-align:left;">SHA-512 加密</td></tr><tr><td style="text-align:right;">md5</td><td style="text-align:left;">MD5 加密，返回 16 位</td></tr></tbody></table><h2 id="加密算法" tabindex="-1"><a class="header-anchor" href="#加密算法" aria-hidden="true">#</a> 加密算法</h2><p><em><strong>MD5</strong></em> 是哈希散列算法<small>（也称摘要算法）</small>，对于 MD5 而言，有两个特性是很重要的，</p><ol><li><p>明文数据经过散列以后的值是定长的；</p></li><li><p>是任意一段明文数据，经过散列以后，其结果必须永远是不变的。</p></li></ol><p>MD5 曾一度被认为是非常安全的。但是 MD5 也不会完全不重复，从概率来说 16 的 32 次方遍历后至少出现两个相同的 MD5 值。</p><p>表面上看这个概率异常的小，但是山东大学王小云教授发现了 MD5 算法的缺陷，可以很快的找到 MD5 的“磕碰”，能让两个文件可以产生相同的“指纹”，让“碰撞”这种小概率事件变成必然事件。</p><p><strong>以 Google 公司为例，Google 公司明确指出不建议再使用 MD5 算法，而使用 SHA256 算法替代。</strong></p><p><em><strong>SHA-256</strong></em> 算法单向 Hash 函数是密码学和信息安全领域中的一个非常重要的基本算法，它是把任意长的消息转化为较短的、固定长度的消息摘要的算法。</p><p>SHA-256 算法是 SHA 算法族中的一员，由美国国家安全局<small>（NSA）</small>所设计，并由美国国家标准与技术研究院<small>（NIST）</small>发布；是美国的政府标准。</p><p>它的前辈还有 <em><strong>SHA-1</strong></em>。随着密码学<small>（破解）</small>的发展，<strong>美国政府计划从 2010 年起不再使用 SHA-1</strong>，全面推广使用 SHA-256 和 SHA-512 等加密算法。</p><p>对于任意长度的消息，SHA256 都会产生一个 256bit 长的哈希值，称作消息摘要。</p><p>这个摘要相当于是个长度为 32 个字节的数组，通常用一个长度为 64 的十六进制字符串来表示。</p><h2 id="sha512hex-方法" tabindex="-1"><a class="header-anchor" href="#sha512hex-方法" aria-hidden="true">#</a> sha512Hex 方法</h2><p>以 SHA512 加密算法对数据源进行加密，返回加密后的十六进制形式字符串</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">String</span> <span class="token function">sha512Hex</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">)</span>\n<span class="token class-name">String</span> <span class="token function">sha512Hex</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> data<span class="token punctuation">)</span>\n<span class="token class-name">String</span> <span class="token function">sha512Hex</span><span class="token punctuation">(</span><span class="token class-name">String</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="sha256hex-方法" tabindex="-1"><a class="header-anchor" href="#sha256hex-方法" aria-hidden="true">#</a> sha256Hex 方法</h2><p>以 SHA256 加密算法对数据源进行加密，返回加密后的十六进制形式字符串</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">String</span> <span class="token function">sha256Hex</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">)</span>\n<span class="token class-name">String</span> <span class="token function">sha256Hex</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> data<span class="token punctuation">)</span>\n<span class="token class-name">String</span> <span class="token function">sha256Hex</span><span class="token punctuation">(</span><span class="token class-name">String</span> data<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="sha1hex-方法" tabindex="-1"><a class="header-anchor" href="#sha1hex-方法" aria-hidden="true">#</a> sha1Hex 方法</h2><p>以 SHA1 加密算法对数据源进行加密，返回加密后的十六进制形式字符串</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">String</span> <span class="token function">sha1Hex</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">)</span>\n<span class="token class-name">String</span> <span class="token function">sha1Hex</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> data<span class="token punctuation">)</span>\n<span class="token class-name">String</span> <span class="token function">sha1Hex</span><span class="token punctuation">(</span><span class="token class-name">String</span> data<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="shahex-方法" tabindex="-1"><a class="header-anchor" href="#shahex-方法" aria-hidden="true">#</a> shaHex 方法</h2><p>以 SHA1 加密算法对数据源进行加密，返回加密后的十六进制形式字符串</p><p>从 1.11 开始被标记为废弃，建议使用 sha1Hex 方法替代。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">String</span> <span class="token function">shaHex</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">)</span>\n<span class="token class-name">String</span> <span class="token function">shaHex</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> data<span class="token punctuation">)</span>\n<span class="token class-name">String</span> <span class="token function">shaHex</span><span class="token punctuation">(</span><span class="token class-name">String</span> data<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="md5hex-方法" tabindex="-1"><a class="header-anchor" href="#md5hex-方法" aria-hidden="true">#</a> md5Hex 方法</h2><p>以 <code>MD5</code> 加密算法对数据源进行加密，返回加密后的十六进制形式字符串</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token class-name">String</span> <span class="token function">md5Hex</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">)</span>\n<span class="token class-name">String</span> <span class="token function">md5Hex</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> data<span class="token punctuation">)</span>\n<span class="token class-name">String</span> <span class="token function">md5Hex</span><span class="token punctuation">(</span><span class="token class-name">String</span> data<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="其它" tabindex="-1"><a class="header-anchor" href="#其它" aria-hidden="true">#</a> 其它</h2><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">//  同上，只不过返回的不是十六进制字符串，而是加密后的二进制的字节数据</span>\n<span class="token function">md5</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token function">sha</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token function">sha1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token function">sha256</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token function">sha512</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div>',36),e={render:function(a,n){return t}}}}]);